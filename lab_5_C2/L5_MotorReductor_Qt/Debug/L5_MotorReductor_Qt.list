
L5_MotorReductor_Qt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000856c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08008704  08008704  00009704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008764  08008764  0000a10c  2**0
                  CONTENTS
  4 .ARM          00000008  08008764  08008764  00009764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800876c  0800876c  0000a10c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800876c  0800876c  0000976c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008770  08008770  00009770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000010c  20000000  08008774  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e8c  2000010c  08008880  0000a10c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f98  08008880  0000af98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a10c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017127  00000000  00000000  0000a13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a0d  00000000  00000000  00021263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001538  00000000  00000000  00024c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000105d  00000000  00000000  000261a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004ddb  00000000  00000000  00027205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b3c6  00000000  00000000  0002bfe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e03b  00000000  00000000  000473a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e53e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059d8  00000000  00000000  000e5424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000eadfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000010c 	.word	0x2000010c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080086ec 	.word	0x080086ec

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000110 	.word	0x20000110
 80001d4:	080086ec 	.word	0x080086ec

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <calcularCRC>:
uint8_t hola[] = {0xEE,0x01};

PAQUETE pk1;

uint8_t calcularCRC(uint8_t *datos, uint8_t tam) //el valor de tam cuando llega
{
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	460b      	mov	r3, r1
 80004d2:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0;
 80004d4:	2300      	movs	r3, #0
 80004d6:	73fb      	strb	r3, [r7, #15]
	for(int i=0; i<tam; i++)
 80004d8:	2300      	movs	r3, #0
 80004da:	60bb      	str	r3, [r7, #8]
 80004dc:	e009      	b.n	80004f2 <calcularCRC+0x2a>
	{
		crc ^= datos[i];
 80004de:	68bb      	ldr	r3, [r7, #8]
 80004e0:	687a      	ldr	r2, [r7, #4]
 80004e2:	4413      	add	r3, r2
 80004e4:	781a      	ldrb	r2, [r3, #0]
 80004e6:	7bfb      	ldrb	r3, [r7, #15]
 80004e8:	4053      	eors	r3, r2
 80004ea:	73fb      	strb	r3, [r7, #15]
	for(int i=0; i<tam; i++)
 80004ec:	68bb      	ldr	r3, [r7, #8]
 80004ee:	3301      	adds	r3, #1
 80004f0:	60bb      	str	r3, [r7, #8]
 80004f2:	78fb      	ldrb	r3, [r7, #3]
 80004f4:	68ba      	ldr	r2, [r7, #8]
 80004f6:	429a      	cmp	r2, r3
 80004f8:	dbf1      	blt.n	80004de <calcularCRC+0x16>
	}
	return crc;
 80004fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80004fc:	4618      	mov	r0, r3
 80004fe:	3714      	adds	r7, #20
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr

08000508 <serializarPaquete>:

int8_t serializarPaquete(const PAQUETE* paquete, uint8_t *buffer){   //serialize
 8000508:	b590      	push	{r4, r7, lr}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	6039      	str	r1, [r7, #0]

	int idx =0;
 8000512:	2300      	movs	r3, #0
 8000514:	60fb      	str	r3, [r7, #12]

	if(!paquete || !buffer)return -1;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d002      	beq.n	8000522 <serializarPaquete+0x1a>
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d102      	bne.n	8000528 <serializarPaquete+0x20>
 8000522:	f04f 33ff 	mov.w	r3, #4294967295
 8000526:	e045      	b.n	80005b4 <serializarPaquete+0xac>

	buffer[idx++] = paquete->inicio;
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	1c5a      	adds	r2, r3, #1
 800052c:	60fa      	str	r2, [r7, #12]
 800052e:	461a      	mov	r2, r3
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	4413      	add	r3, r2
 8000534:	687a      	ldr	r2, [r7, #4]
 8000536:	7812      	ldrb	r2, [r2, #0]
 8000538:	701a      	strb	r2, [r3, #0]
	buffer[idx++]= paquete->tamano;
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	1c5a      	adds	r2, r3, #1
 800053e:	60fa      	str	r2, [r7, #12]
 8000540:	461a      	mov	r2, r3
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	4413      	add	r3, r2
 8000546:	687a      	ldr	r2, [r7, #4]
 8000548:	7852      	ldrb	r2, [r2, #1]
 800054a:	701a      	strb	r2, [r3, #0]

		if(paquete->datos && (paquete->tamano>3)){   	//packet of data ;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	685b      	ldr	r3, [r3, #4]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d015      	beq.n	8000580 <serializarPaquete+0x78>
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	785b      	ldrb	r3, [r3, #1]
 8000558:	2b03      	cmp	r3, #3
 800055a:	d911      	bls.n	8000580 <serializarPaquete+0x78>
		  memcpy(&buffer[idx], paquete->datos, (size_t)(paquete->tamano-4));
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	683a      	ldr	r2, [r7, #0]
 8000560:	18d0      	adds	r0, r2, r3
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	6859      	ldr	r1, [r3, #4]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	785b      	ldrb	r3, [r3, #1]
 800056a:	3b04      	subs	r3, #4
 800056c:	461a      	mov	r2, r3
 800056e:	f008 f8af 	bl	80086d0 <memcpy>
		  idx = idx + paquete->tamano-4;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	785b      	ldrb	r3, [r3, #1]
 8000576:	461a      	mov	r2, r3
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	4413      	add	r3, r2
 800057c:	3b04      	subs	r3, #4
 800057e:	60fb      	str	r3, [r7, #12]
		}

	uint8_t ss= (uint8_t)idx;
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	72fb      	strb	r3, [r7, #11]
	buffer[idx++] =calcularCRC(buffer,ss);
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	1c5a      	adds	r2, r3, #1
 8000588:	60fa      	str	r2, [r7, #12]
 800058a:	461a      	mov	r2, r3
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	189c      	adds	r4, r3, r2
 8000590:	7afb      	ldrb	r3, [r7, #11]
 8000592:	4619      	mov	r1, r3
 8000594:	6838      	ldr	r0, [r7, #0]
 8000596:	f7ff ff97 	bl	80004c8 <calcularCRC>
 800059a:	4603      	mov	r3, r0
 800059c:	7023      	strb	r3, [r4, #0]
	buffer[idx++] =paquete->fin;
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	1c5a      	adds	r2, r3, #1
 80005a2:	60fa      	str	r2, [r7, #12]
 80005a4:	461a      	mov	r2, r3
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	4413      	add	r3, r2
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	7a52      	ldrb	r2, [r2, #9]
 80005ae:	701a      	strb	r2, [r3, #0]
	return idx;
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	b25b      	sxtb	r3, r3
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3714      	adds	r7, #20
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd90      	pop	{r4, r7, pc}

080005bc <EnviarPaquete>:

void EnviarPaquete(uint8_t *dat, uint8_t tam){ //DAT ES VARIABLE DINAMICA (*dat=RPM)
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	460b      	mov	r3, r1
 80005c6:	70fb      	strb	r3, [r7, #3]

	pk1.inicio = 0x77; //Start byte
 80005c8:	4b19      	ldr	r3, [pc, #100]	@ (8000630 <EnviarPaquete+0x74>)
 80005ca:	2277      	movs	r2, #119	@ 0x77
 80005cc:	701a      	strb	r2, [r3, #0]
	pk1.tamano = tam + 4;
 80005ce:	78fb      	ldrb	r3, [r7, #3]
 80005d0:	3304      	adds	r3, #4
 80005d2:	b2da      	uxtb	r2, r3
 80005d4:	4b16      	ldr	r3, [pc, #88]	@ (8000630 <EnviarPaquete+0x74>)
 80005d6:	705a      	strb	r2, [r3, #1]
	pk1.datos=datosx;
 80005d8:	4b15      	ldr	r3, [pc, #84]	@ (8000630 <EnviarPaquete+0x74>)
 80005da:	4a16      	ldr	r2, [pc, #88]	@ (8000634 <EnviarPaquete+0x78>)
 80005dc:	605a      	str	r2, [r3, #4]

    memcpy(&pk1.datos[0], dat, tam + 4 );
 80005de:	4b14      	ldr	r3, [pc, #80]	@ (8000630 <EnviarPaquete+0x74>)
 80005e0:	6858      	ldr	r0, [r3, #4]
 80005e2:	78fb      	ldrb	r3, [r7, #3]
 80005e4:	3304      	adds	r3, #4
 80005e6:	461a      	mov	r2, r3
 80005e8:	6879      	ldr	r1, [r7, #4]
 80005ea:	f008 f871 	bl	80086d0 <memcpy>

	numDatos = serializarPaquete(&pk1, &datosTX);
 80005ee:	4912      	ldr	r1, [pc, #72]	@ (8000638 <EnviarPaquete+0x7c>)
 80005f0:	480f      	ldr	r0, [pc, #60]	@ (8000630 <EnviarPaquete+0x74>)
 80005f2:	f7ff ff89 	bl	8000508 <serializarPaquete>
 80005f6:	4603      	mov	r3, r0
 80005f8:	461a      	mov	r2, r3
 80005fa:	4b10      	ldr	r3, [pc, #64]	@ (800063c <EnviarPaquete+0x80>)
 80005fc:	701a      	strb	r2, [r3, #0]
	pk1.crc=calcularCRC(datosTX, tam+4);
 80005fe:	78fb      	ldrb	r3, [r7, #3]
 8000600:	3304      	adds	r3, #4
 8000602:	b2db      	uxtb	r3, r3
 8000604:	4619      	mov	r1, r3
 8000606:	480c      	ldr	r0, [pc, #48]	@ (8000638 <EnviarPaquete+0x7c>)
 8000608:	f7ff ff5e 	bl	80004c8 <calcularCRC>
 800060c:	4603      	mov	r3, r0
 800060e:	461a      	mov	r2, r3
 8000610:	4b07      	ldr	r3, [pc, #28]	@ (8000630 <EnviarPaquete+0x74>)
 8000612:	721a      	strb	r2, [r3, #8]
	pk1.fin =0x12;
 8000614:	4b06      	ldr	r3, [pc, #24]	@ (8000630 <EnviarPaquete+0x74>)
 8000616:	2212      	movs	r2, #18
 8000618:	725a      	strb	r2, [r3, #9]

	CDC_Transmit_FS(datosTX, numDatos);
 800061a:	4b08      	ldr	r3, [pc, #32]	@ (800063c <EnviarPaquete+0x80>)
 800061c:	f993 3000 	ldrsb.w	r3, [r3]
 8000620:	4619      	mov	r1, r3
 8000622:	4805      	ldr	r0, [pc, #20]	@ (8000638 <EnviarPaquete+0x7c>)
 8000624:	f007 fbd6 	bl	8007dd4 <CDC_Transmit_FS>

} //way important to transmit
 8000628:	bf00      	nop
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	2000039c 	.word	0x2000039c
 8000634:	20000370 	.word	0x20000370
 8000638:	20000308 	.word	0x20000308
 800063c:	200002a0 	.word	0x200002a0

08000640 <ObtenerRPM>:
        }
} */


uint8_t ObtenerRPM()
{
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
    static uint32_t pos_anterior = 0;
    uint32_t pos_actual = __HAL_TIM_GET_COUNTER(&htim2);
 8000646:	4b14      	ldr	r3, [pc, #80]	@ (8000698 <ObtenerRPM+0x58>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800064c:	60bb      	str	r3, [r7, #8]
    uint32_t pulsos_delta = pos_actual - pos_anterior;
 800064e:	4b13      	ldr	r3, [pc, #76]	@ (800069c <ObtenerRPM+0x5c>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	68ba      	ldr	r2, [r7, #8]
 8000654:	1ad3      	subs	r3, r2, r3
 8000656:	607b      	str	r3, [r7, #4]
    pos_anterior = pos_actual;
 8000658:	4a10      	ldr	r2, [pc, #64]	@ (800069c <ObtenerRPM+0x5c>)
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	6013      	str	r3, [r2, #0]

   uint32_t rpm = (pulsos_delta * 60) / 1430*10;
 800065e:	687a      	ldr	r2, [r7, #4]
 8000660:	4613      	mov	r3, r2
 8000662:	011b      	lsls	r3, r3, #4
 8000664:	1a9b      	subs	r3, r3, r2
 8000666:	009b      	lsls	r3, r3, #2
 8000668:	461a      	mov	r2, r3
 800066a:	4b0d      	ldr	r3, [pc, #52]	@ (80006a0 <ObtenerRPM+0x60>)
 800066c:	fba3 2302 	umull	r2, r3, r3, r2
 8000670:	0a9a      	lsrs	r2, r3, #10
 8000672:	4613      	mov	r3, r2
 8000674:	009b      	lsls	r3, r3, #2
 8000676:	4413      	add	r3, r2
 8000678:	005b      	lsls	r3, r3, #1
 800067a:	60fb      	str	r3, [r7, #12]

    if (rpm > 255) rpm = 255;
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	2bff      	cmp	r3, #255	@ 0xff
 8000680:	d901      	bls.n	8000686 <ObtenerRPM+0x46>
 8000682:	23ff      	movs	r3, #255	@ 0xff
 8000684:	60fb      	str	r3, [r7, #12]

    return (uint8_t)rpm;
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	b2db      	uxtb	r3, r3
}
 800068a:	4618      	mov	r0, r3
 800068c:	3714      	adds	r7, #20
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	200001c4 	.word	0x200001c4
 800069c:	200003a8 	.word	0x200003a8
 80006a0:	b7514689 	.word	0xb7514689

080006a4 <CDC_ReceiveCallBack>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */



void CDC_ReceiveCallBack(uint8_t* Buf, uint32_t len){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	6039      	str	r1, [r7, #0]

	memcpy(datosRX,Buf,len);
 80006ae:	683a      	ldr	r2, [r7, #0]
 80006b0:	6879      	ldr	r1, [r7, #4]
 80006b2:	4805      	ldr	r0, [pc, #20]	@ (80006c8 <CDC_ReceiveCallBack+0x24>)
 80006b4:	f008 f80c 	bl	80086d0 <memcpy>
	indexRX = len;
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	b2da      	uxtb	r2, r3
 80006bc:	4b03      	ldr	r3, [pc, #12]	@ (80006cc <CDC_ReceiveCallBack+0x28>)
 80006be:	701a      	strb	r2, [r3, #0]
}
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	200002a4 	.word	0x200002a4
 80006cc:	20000307 	.word	0x20000307

080006d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d4:	f000 fcfe 	bl	80010d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d8:	f000 f88c 	bl	80007f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006dc:	f000 fa62 	bl	8000ba4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80006e0:	f000 f942 	bl	8000968 <MX_I2C1_Init>
  MX_TIM2_Init();
 80006e4:	f000 f96e 	bl	80009c4 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80006e8:	f007 fab0 	bl	8007c4c <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 80006ec:	f000 f8ea 	bl	80008c4 <MX_ADC1_Init>
  MX_TIM3_Init();
 80006f0:	f000 f9bc 	bl	8000a6c <MX_TIM3_Init>
  MX_TIM5_Init();
 80006f4:	f000 fa08 	bl	8000b08 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  //ssd1306_Init();
  motoresInit(&htim2, TIM_CHANNEL_1, TIM_CHANNEL_2);
 80006f8:	2204      	movs	r2, #4
 80006fa:	2100      	movs	r1, #0
 80006fc:	4834      	ldr	r0, [pc, #208]	@ (80007d0 <main+0x100>)
 80006fe:	f000 facd 	bl	8000c9c <motoresInit>
  HAL_TIM_Base_Start(&htim3);
 8000702:	4834      	ldr	r0, [pc, #208]	@ (80007d4 <main+0x104>)
 8000704:	f003 fac8 	bl	8003c98 <HAL_TIM_Base_Start>

  delay_us_tim_init();
 8000708:	f000 fb04 	bl	8000d14 <delay_us_tim_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);  //importante por encoder mode t1, t2.
 800070c:	213c      	movs	r1, #60	@ 0x3c
 800070e:	4830      	ldr	r0, [pc, #192]	@ (80007d0 <main+0x100>)
 8000710:	f003 fc72 	bl	8003ff8 <HAL_TIM_Encoder_Start>
/*
	   if(indexRX !=0){
			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	   }   */

	     posicionMotor = __HAL_TIM_GET_COUNTER(&htim2);
 8000714:	4b2e      	ldr	r3, [pc, #184]	@ (80007d0 <main+0x100>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800071a:	461a      	mov	r2, r3
 800071c:	4b2e      	ldr	r3, [pc, #184]	@ (80007d8 <main+0x108>)
 800071e:	601a      	str	r2, [r3, #0]

	    // ObtenerRPM(posicionMotor);

		   if(!bandera){
 8000720:	4b2e      	ldr	r3, [pc, #184]	@ (80007dc <main+0x10c>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	b2db      	uxtb	r3, r3
 8000726:	f083 0301 	eor.w	r3, r3, #1
 800072a:	b2db      	uxtb	r3, r3
 800072c:	2b00      	cmp	r3, #0
 800072e:	d010      	beq.n	8000752 <main+0x82>
		   	       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8000730:	2201      	movs	r2, #1
 8000732:	2140      	movs	r1, #64	@ 0x40
 8000734:	482a      	ldr	r0, [pc, #168]	@ (80007e0 <main+0x110>)
 8000736:	f001 fa6b 	bl	8001c10 <HAL_GPIO_WritePin>
		   	       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 800073a:	2200      	movs	r2, #0
 800073c:	2180      	movs	r1, #128	@ 0x80
 800073e:	4828      	ldr	r0, [pc, #160]	@ (80007e0 <main+0x110>)
 8000740:	f001 fa66 	bl	8001c10 <HAL_GPIO_WritePin>
		   	       EnviarPaquete(datos4, 12);
 8000744:	210c      	movs	r1, #12
 8000746:	4827      	ldr	r0, [pc, #156]	@ (80007e4 <main+0x114>)
 8000748:	f7ff ff38 	bl	80005bc <EnviarPaquete>
		   	      bandera= 1;
 800074c:	4b23      	ldr	r3, [pc, #140]	@ (80007dc <main+0x10c>)
 800074e:	2201      	movs	r2, #1
 8000750:	701a      	strb	r2, [r3, #0]
		   }
		    // HAL_Delay(1);
		     Delay_ms(1);
 8000752:	2001      	movs	r0, #1
 8000754:	f000 fb04 	bl	8000d60 <Delay_ms>


	   if(tiempo++ == 10000){
 8000758:	4b23      	ldr	r3, [pc, #140]	@ (80007e8 <main+0x118>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	1c5a      	adds	r2, r3, #1
 800075e:	4922      	ldr	r1, [pc, #136]	@ (80007e8 <main+0x118>)
 8000760:	600a      	str	r2, [r1, #0]
 8000762:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000766:	4293      	cmp	r3, r2
 8000768:	d1d4      	bne.n	8000714 <main+0x44>
		   tiempo=0;
 800076a:	4b1f      	ldr	r3, [pc, #124]	@ (80007e8 <main+0x118>)
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]

			  RPM = ObtenerRPM();
 8000770:	f7ff ff66 	bl	8000640 <ObtenerRPM>
 8000774:	4603      	mov	r3, r0
 8000776:	461a      	mov	r2, r3
 8000778:	4b1c      	ldr	r3, [pc, #112]	@ (80007ec <main+0x11c>)
 800077a:	701a      	strb	r2, [r3, #0]

   	       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 800077c:	2200      	movs	r2, #0
 800077e:	2140      	movs	r1, #64	@ 0x40
 8000780:	4817      	ldr	r0, [pc, #92]	@ (80007e0 <main+0x110>)
 8000782:	f001 fa45 	bl	8001c10 <HAL_GPIO_WritePin>
   	       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8000786:	2200      	movs	r2, #0
 8000788:	2180      	movs	r1, #128	@ 0x80
 800078a:	4815      	ldr	r0, [pc, #84]	@ (80007e0 <main+0x110>)
 800078c:	f001 fa40 	bl	8001c10 <HAL_GPIO_WritePin>
		     Delay_ms(2);
 8000790:	2002      	movs	r0, #2
 8000792:	f000 fae5 	bl	8000d60 <Delay_ms>
  	       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8000796:	2201      	movs	r2, #1
 8000798:	2140      	movs	r1, #64	@ 0x40
 800079a:	4811      	ldr	r0, [pc, #68]	@ (80007e0 <main+0x110>)
 800079c:	f001 fa38 	bl	8001c10 <HAL_GPIO_WritePin>
   	       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 80007a0:	2201      	movs	r2, #1
 80007a2:	2180      	movs	r1, #128	@ 0x80
 80007a4:	480e      	ldr	r0, [pc, #56]	@ (80007e0 <main+0x110>)
 80007a6:	f001 fa33 	bl	8001c10 <HAL_GPIO_WritePin>
   	          Delay_ms(500);
 80007aa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007ae:	f000 fad7 	bl	8000d60 <Delay_ms>
  	       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2140      	movs	r1, #64	@ 0x40
 80007b6:	480a      	ldr	r0, [pc, #40]	@ (80007e0 <main+0x110>)
 80007b8:	f001 fa2a 	bl	8001c10 <HAL_GPIO_WritePin>
   	       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 80007bc:	2200      	movs	r2, #0
 80007be:	2180      	movs	r1, #128	@ 0x80
 80007c0:	4807      	ldr	r0, [pc, #28]	@ (80007e0 <main+0x110>)
 80007c2:	f001 fa25 	bl	8001c10 <HAL_GPIO_WritePin>
		   datosTX[6]= 0x23;
		   datosTX[7]= 0x03;
           CDC_Transmit_FS(datosTX, 8);*/

			 // EnviarPaquete(hola, 2);
			   EnviarPaquete(hola, 2);
 80007c6:	2102      	movs	r1, #2
 80007c8:	4809      	ldr	r0, [pc, #36]	@ (80007f0 <main+0x120>)
 80007ca:	f7ff fef7 	bl	80005bc <EnviarPaquete>
	     posicionMotor = __HAL_TIM_GET_COUNTER(&htim2);
 80007ce:	e7a1      	b.n	8000714 <main+0x44>
 80007d0:	200001c4 	.word	0x200001c4
 80007d4:	2000020c 	.word	0x2000020c
 80007d8:	2000036c 	.word	0x2000036c
 80007dc:	20000398 	.word	0x20000398
 80007e0:	40020000 	.word	0x40020000
 80007e4:	20000000 	.word	0x20000000
 80007e8:	2000029c 	.word	0x2000029c
 80007ec:	200002a1 	.word	0x200002a1
 80007f0:	2000000c 	.word	0x2000000c

080007f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b094      	sub	sp, #80	@ 0x50
 80007f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fa:	f107 0320 	add.w	r3, r7, #32
 80007fe:	2230      	movs	r2, #48	@ 0x30
 8000800:	2100      	movs	r1, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f007 ff38 	bl	8008678 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000808:	f107 030c 	add.w	r3, r7, #12
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000818:	2300      	movs	r3, #0
 800081a:	60bb      	str	r3, [r7, #8]
 800081c:	4b27      	ldr	r3, [pc, #156]	@ (80008bc <SystemClock_Config+0xc8>)
 800081e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000820:	4a26      	ldr	r2, [pc, #152]	@ (80008bc <SystemClock_Config+0xc8>)
 8000822:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000826:	6413      	str	r3, [r2, #64]	@ 0x40
 8000828:	4b24      	ldr	r3, [pc, #144]	@ (80008bc <SystemClock_Config+0xc8>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800082c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000830:	60bb      	str	r3, [r7, #8]
 8000832:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000834:	2300      	movs	r3, #0
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	4b21      	ldr	r3, [pc, #132]	@ (80008c0 <SystemClock_Config+0xcc>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a20      	ldr	r2, [pc, #128]	@ (80008c0 <SystemClock_Config+0xcc>)
 800083e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000842:	6013      	str	r3, [r2, #0]
 8000844:	4b1e      	ldr	r3, [pc, #120]	@ (80008c0 <SystemClock_Config+0xcc>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000850:	2301      	movs	r3, #1
 8000852:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000854:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000858:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800085a:	2302      	movs	r3, #2
 800085c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800085e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000862:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000864:	2319      	movs	r3, #25
 8000866:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000868:	23c0      	movs	r3, #192	@ 0xc0
 800086a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800086c:	2302      	movs	r3, #2
 800086e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000870:	2304      	movs	r3, #4
 8000872:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000874:	f107 0320 	add.w	r3, r7, #32
 8000878:	4618      	mov	r0, r3
 800087a:	f002 fd79 	bl	8003370 <HAL_RCC_OscConfig>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000884:	f000 fa04 	bl	8000c90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000888:	230f      	movs	r3, #15
 800088a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800088c:	2302      	movs	r3, #2
 800088e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000890:	2300      	movs	r3, #0
 8000892:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000894:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000898:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800089a:	2300      	movs	r3, #0
 800089c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800089e:	f107 030c 	add.w	r3, r7, #12
 80008a2:	2103      	movs	r1, #3
 80008a4:	4618      	mov	r0, r3
 80008a6:	f002 ffdb 	bl	8003860 <HAL_RCC_ClockConfig>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80008b0:	f000 f9ee 	bl	8000c90 <Error_Handler>
  }
}
 80008b4:	bf00      	nop
 80008b6:	3750      	adds	r7, #80	@ 0x50
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40007000 	.word	0x40007000

080008c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008ca:	463b      	mov	r3, r7
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008d6:	4b21      	ldr	r3, [pc, #132]	@ (800095c <MX_ADC1_Init+0x98>)
 80008d8:	4a21      	ldr	r2, [pc, #132]	@ (8000960 <MX_ADC1_Init+0x9c>)
 80008da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008dc:	4b1f      	ldr	r3, [pc, #124]	@ (800095c <MX_ADC1_Init+0x98>)
 80008de:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80008e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008e4:	4b1d      	ldr	r3, [pc, #116]	@ (800095c <MX_ADC1_Init+0x98>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80008ea:	4b1c      	ldr	r3, [pc, #112]	@ (800095c <MX_ADC1_Init+0x98>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008f0:	4b1a      	ldr	r3, [pc, #104]	@ (800095c <MX_ADC1_Init+0x98>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008f6:	4b19      	ldr	r3, [pc, #100]	@ (800095c <MX_ADC1_Init+0x98>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008fe:	4b17      	ldr	r3, [pc, #92]	@ (800095c <MX_ADC1_Init+0x98>)
 8000900:	2200      	movs	r2, #0
 8000902:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000904:	4b15      	ldr	r3, [pc, #84]	@ (800095c <MX_ADC1_Init+0x98>)
 8000906:	4a17      	ldr	r2, [pc, #92]	@ (8000964 <MX_ADC1_Init+0xa0>)
 8000908:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800090a:	4b14      	ldr	r3, [pc, #80]	@ (800095c <MX_ADC1_Init+0x98>)
 800090c:	2200      	movs	r2, #0
 800090e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000910:	4b12      	ldr	r3, [pc, #72]	@ (800095c <MX_ADC1_Init+0x98>)
 8000912:	2201      	movs	r2, #1
 8000914:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000916:	4b11      	ldr	r3, [pc, #68]	@ (800095c <MX_ADC1_Init+0x98>)
 8000918:	2200      	movs	r2, #0
 800091a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800091e:	4b0f      	ldr	r3, [pc, #60]	@ (800095c <MX_ADC1_Init+0x98>)
 8000920:	2201      	movs	r2, #1
 8000922:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000924:	480d      	ldr	r0, [pc, #52]	@ (800095c <MX_ADC1_Init+0x98>)
 8000926:	f000 fc6b 	bl	8001200 <HAL_ADC_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000930:	f000 f9ae 	bl	8000c90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000934:	2300      	movs	r3, #0
 8000936:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000938:	2301      	movs	r3, #1
 800093a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800093c:	2300      	movs	r3, #0
 800093e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000940:	463b      	mov	r3, r7
 8000942:	4619      	mov	r1, r3
 8000944:	4805      	ldr	r0, [pc, #20]	@ (800095c <MX_ADC1_Init+0x98>)
 8000946:	f000 fc9f 	bl	8001288 <HAL_ADC_ConfigChannel>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000950:	f000 f99e 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000954:	bf00      	nop
 8000956:	3710      	adds	r7, #16
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000128 	.word	0x20000128
 8000960:	40012000 	.word	0x40012000
 8000964:	0f000001 	.word	0x0f000001

08000968 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800096c:	4b12      	ldr	r3, [pc, #72]	@ (80009b8 <MX_I2C1_Init+0x50>)
 800096e:	4a13      	ldr	r2, [pc, #76]	@ (80009bc <MX_I2C1_Init+0x54>)
 8000970:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000972:	4b11      	ldr	r3, [pc, #68]	@ (80009b8 <MX_I2C1_Init+0x50>)
 8000974:	4a12      	ldr	r2, [pc, #72]	@ (80009c0 <MX_I2C1_Init+0x58>)
 8000976:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000978:	4b0f      	ldr	r3, [pc, #60]	@ (80009b8 <MX_I2C1_Init+0x50>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800097e:	4b0e      	ldr	r3, [pc, #56]	@ (80009b8 <MX_I2C1_Init+0x50>)
 8000980:	2200      	movs	r2, #0
 8000982:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000984:	4b0c      	ldr	r3, [pc, #48]	@ (80009b8 <MX_I2C1_Init+0x50>)
 8000986:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800098a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800098c:	4b0a      	ldr	r3, [pc, #40]	@ (80009b8 <MX_I2C1_Init+0x50>)
 800098e:	2200      	movs	r2, #0
 8000990:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000992:	4b09      	ldr	r3, [pc, #36]	@ (80009b8 <MX_I2C1_Init+0x50>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000998:	4b07      	ldr	r3, [pc, #28]	@ (80009b8 <MX_I2C1_Init+0x50>)
 800099a:	2200      	movs	r2, #0
 800099c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800099e:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <MX_I2C1_Init+0x50>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009a4:	4804      	ldr	r0, [pc, #16]	@ (80009b8 <MX_I2C1_Init+0x50>)
 80009a6:	f001 f94d 	bl	8001c44 <HAL_I2C_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009b0:	f000 f96e 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20000170 	.word	0x20000170
 80009bc:	40005400 	.word	0x40005400
 80009c0:	00061a80 	.word	0x00061a80

080009c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08c      	sub	sp, #48	@ 0x30
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80009ca:	f107 030c 	add.w	r3, r7, #12
 80009ce:	2224      	movs	r2, #36	@ 0x24
 80009d0:	2100      	movs	r1, #0
 80009d2:	4618      	mov	r0, r3
 80009d4:	f007 fe50 	bl	8008678 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d8:	1d3b      	adds	r3, r7, #4
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009e0:	4b21      	ldr	r3, [pc, #132]	@ (8000a68 <MX_TIM2_Init+0xa4>)
 80009e2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a68 <MX_TIM2_Init+0xa4>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ee:	4b1e      	ldr	r3, [pc, #120]	@ (8000a68 <MX_TIM2_Init+0xa4>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80009f4:	4b1c      	ldr	r3, [pc, #112]	@ (8000a68 <MX_TIM2_Init+0xa4>)
 80009f6:	f04f 32ff 	mov.w	r2, #4294967295
 80009fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a68 <MX_TIM2_Init+0xa4>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a02:	4b19      	ldr	r3, [pc, #100]	@ (8000a68 <MX_TIM2_Init+0xa4>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000a08:	2303      	movs	r3, #3
 8000a0a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a10:	2301      	movs	r3, #1
 8000a12:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a14:	2300      	movs	r3, #0
 8000a16:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8000a18:	230f      	movs	r3, #15
 8000a1a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a20:	2301      	movs	r3, #1
 8000a22:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a24:	2300      	movs	r3, #0
 8000a26:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8000a28:	230f      	movs	r3, #15
 8000a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000a2c:	f107 030c 	add.w	r3, r7, #12
 8000a30:	4619      	mov	r1, r3
 8000a32:	480d      	ldr	r0, [pc, #52]	@ (8000a68 <MX_TIM2_Init+0xa4>)
 8000a34:	f003 fa3a 	bl	8003eac <HAL_TIM_Encoder_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000a3e:	f000 f927 	bl	8000c90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a42:	2300      	movs	r3, #0
 8000a44:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a46:	2300      	movs	r3, #0
 8000a48:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4806      	ldr	r0, [pc, #24]	@ (8000a68 <MX_TIM2_Init+0xa4>)
 8000a50:	f003 fd74 	bl	800453c <HAL_TIMEx_MasterConfigSynchronization>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000a5a:	f000 f919 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	3730      	adds	r7, #48	@ 0x30
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	200001c4 	.word	0x200001c4

08000a6c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a72:	f107 0308 	add.w	r3, r7, #8
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a80:	463b      	mov	r3, r7
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a88:	4b1d      	ldr	r3, [pc, #116]	@ (8000b00 <MX_TIM3_Init+0x94>)
 8000a8a:	4a1e      	ldr	r2, [pc, #120]	@ (8000b04 <MX_TIM3_Init+0x98>)
 8000a8c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 96-1;
 8000a8e:	4b1c      	ldr	r3, [pc, #112]	@ (8000b00 <MX_TIM3_Init+0x94>)
 8000a90:	225f      	movs	r2, #95	@ 0x5f
 8000a92:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a94:	4b1a      	ldr	r3, [pc, #104]	@ (8000b00 <MX_TIM3_Init+0x94>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000a9a:	4b19      	ldr	r3, [pc, #100]	@ (8000b00 <MX_TIM3_Init+0x94>)
 8000a9c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000aa0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa2:	4b17      	ldr	r3, [pc, #92]	@ (8000b00 <MX_TIM3_Init+0x94>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa8:	4b15      	ldr	r3, [pc, #84]	@ (8000b00 <MX_TIM3_Init+0x94>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000aae:	4814      	ldr	r0, [pc, #80]	@ (8000b00 <MX_TIM3_Init+0x94>)
 8000ab0:	f003 f8a2 	bl	8003bf8 <HAL_TIM_Base_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000aba:	f000 f8e9 	bl	8000c90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000abe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ac2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ac4:	f107 0308 	add.w	r3, r7, #8
 8000ac8:	4619      	mov	r1, r3
 8000aca:	480d      	ldr	r0, [pc, #52]	@ (8000b00 <MX_TIM3_Init+0x94>)
 8000acc:	f003 fb22 	bl	8004114 <HAL_TIM_ConfigClockSource>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000ad6:	f000 f8db 	bl	8000c90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ada:	2300      	movs	r3, #0
 8000adc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ae2:	463b      	mov	r3, r7
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4806      	ldr	r0, [pc, #24]	@ (8000b00 <MX_TIM3_Init+0x94>)
 8000ae8:	f003 fd28 	bl	800453c <HAL_TIMEx_MasterConfigSynchronization>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000af2:	f000 f8cd 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000af6:	bf00      	nop
 8000af8:	3718      	adds	r7, #24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	2000020c 	.word	0x2000020c
 8000b04:	40000400 	.word	0x40000400

08000b08 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b0e:	f107 0308 	add.w	r3, r7, #8
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]
 8000b18:	609a      	str	r2, [r3, #8]
 8000b1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b1c:	463b      	mov	r3, r7
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000b24:	4b1d      	ldr	r3, [pc, #116]	@ (8000b9c <MX_TIM5_Init+0x94>)
 8000b26:	4a1e      	ldr	r2, [pc, #120]	@ (8000ba0 <MX_TIM5_Init+0x98>)
 8000b28:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 96-1;
 8000b2a:	4b1c      	ldr	r3, [pc, #112]	@ (8000b9c <MX_TIM5_Init+0x94>)
 8000b2c:	225f      	movs	r2, #95	@ 0x5f
 8000b2e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b30:	4b1a      	ldr	r3, [pc, #104]	@ (8000b9c <MX_TIM5_Init+0x94>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000b36:	4b19      	ldr	r3, [pc, #100]	@ (8000b9c <MX_TIM5_Init+0x94>)
 8000b38:	f04f 32ff 	mov.w	r2, #4294967295
 8000b3c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b3e:	4b17      	ldr	r3, [pc, #92]	@ (8000b9c <MX_TIM5_Init+0x94>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b44:	4b15      	ldr	r3, [pc, #84]	@ (8000b9c <MX_TIM5_Init+0x94>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000b4a:	4814      	ldr	r0, [pc, #80]	@ (8000b9c <MX_TIM5_Init+0x94>)
 8000b4c:	f003 f854 	bl	8003bf8 <HAL_TIM_Base_Init>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8000b56:	f000 f89b 	bl	8000c90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b5e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000b60:	f107 0308 	add.w	r3, r7, #8
 8000b64:	4619      	mov	r1, r3
 8000b66:	480d      	ldr	r0, [pc, #52]	@ (8000b9c <MX_TIM5_Init+0x94>)
 8000b68:	f003 fad4 	bl	8004114 <HAL_TIM_ConfigClockSource>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8000b72:	f000 f88d 	bl	8000c90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b76:	2300      	movs	r3, #0
 8000b78:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000b7e:	463b      	mov	r3, r7
 8000b80:	4619      	mov	r1, r3
 8000b82:	4806      	ldr	r0, [pc, #24]	@ (8000b9c <MX_TIM5_Init+0x94>)
 8000b84:	f003 fcda 	bl	800453c <HAL_TIMEx_MasterConfigSynchronization>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8000b8e:	f000 f87f 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000b92:	bf00      	nop
 8000b94:	3718      	adds	r7, #24
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000254 	.word	0x20000254
 8000ba0:	40000c00 	.word	0x40000c00

08000ba4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	@ 0x28
 8000ba8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
 8000bb8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	4b31      	ldr	r3, [pc, #196]	@ (8000c84 <MX_GPIO_Init+0xe0>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc2:	4a30      	ldr	r2, [pc, #192]	@ (8000c84 <MX_GPIO_Init+0xe0>)
 8000bc4:	f043 0304 	orr.w	r3, r3, #4
 8000bc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bca:	4b2e      	ldr	r3, [pc, #184]	@ (8000c84 <MX_GPIO_Init+0xe0>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bce:	f003 0304 	and.w	r3, r3, #4
 8000bd2:	613b      	str	r3, [r7, #16]
 8000bd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	4b2a      	ldr	r3, [pc, #168]	@ (8000c84 <MX_GPIO_Init+0xe0>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	4a29      	ldr	r2, [pc, #164]	@ (8000c84 <MX_GPIO_Init+0xe0>)
 8000be0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000be4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000be6:	4b27      	ldr	r3, [pc, #156]	@ (8000c84 <MX_GPIO_Init+0xe0>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60bb      	str	r3, [r7, #8]
 8000bf6:	4b23      	ldr	r3, [pc, #140]	@ (8000c84 <MX_GPIO_Init+0xe0>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfa:	4a22      	ldr	r2, [pc, #136]	@ (8000c84 <MX_GPIO_Init+0xe0>)
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c02:	4b20      	ldr	r3, [pc, #128]	@ (8000c84 <MX_GPIO_Init+0xe0>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	60bb      	str	r3, [r7, #8]
 8000c0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	4b1c      	ldr	r3, [pc, #112]	@ (8000c84 <MX_GPIO_Init+0xe0>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c16:	4a1b      	ldr	r2, [pc, #108]	@ (8000c84 <MX_GPIO_Init+0xe0>)
 8000c18:	f043 0302 	orr.w	r3, r3, #2
 8000c1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1e:	4b19      	ldr	r3, [pc, #100]	@ (8000c84 <MX_GPIO_Init+0xe0>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c22:	f003 0302 	and.w	r3, r3, #2
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000c30:	4815      	ldr	r0, [pc, #84]	@ (8000c88 <MX_GPIO_Init+0xe4>)
 8000c32:	f000 ffed 	bl	8001c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000c36:	2200      	movs	r2, #0
 8000c38:	21c0      	movs	r1, #192	@ 0xc0
 8000c3a:	4814      	ldr	r0, [pc, #80]	@ (8000c8c <MX_GPIO_Init+0xe8>)
 8000c3c:	f000 ffe8 	bl	8001c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000c40:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000c44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c46:	2301      	movs	r3, #1
 8000c48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	4619      	mov	r1, r3
 8000c58:	480b      	ldr	r0, [pc, #44]	@ (8000c88 <MX_GPIO_Init+0xe4>)
 8000c5a:	f000 fe55 	bl	8001908 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c5e:	23c0      	movs	r3, #192	@ 0xc0
 8000c60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c62:	2301      	movs	r3, #1
 8000c64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6e:	f107 0314 	add.w	r3, r7, #20
 8000c72:	4619      	mov	r1, r3
 8000c74:	4805      	ldr	r0, [pc, #20]	@ (8000c8c <MX_GPIO_Init+0xe8>)
 8000c76:	f000 fe47 	bl	8001908 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c7a:	bf00      	nop
 8000c7c:	3728      	adds	r7, #40	@ 0x28
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40020800 	.word	0x40020800
 8000c8c:	40020000 	.word	0x40020000

08000c90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c94:	b672      	cpsid	i
}
 8000c96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <Error_Handler+0x8>

08000c9c <motoresInit>:


TIM_HandleTypeDef *timmotorGlobal;


void motoresInit(TIM_HandleTypeDef *timmotor, uint32_t canal1, uint32_t canal2){
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
	timmotorGlobal = timmotor;
 8000ca8:	4a18      	ldr	r2, [pc, #96]	@ (8000d0c <motoresInit+0x70>)
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(timmotorGlobal, canal1);
 8000cae:	4b17      	ldr	r3, [pc, #92]	@ (8000d0c <motoresInit+0x70>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	68b9      	ldr	r1, [r7, #8]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f003 f849 	bl	8003d4c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timmotorGlobal, canal2);
 8000cba:	4b14      	ldr	r3, [pc, #80]	@ (8000d0c <motoresInit+0x70>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f003 f843 	bl	8003d4c <HAL_TIM_PWM_Start>
	timmotorGlobal->Instance->CCR1 = 0;
 8000cc6:	4b11      	ldr	r3, [pc, #68]	@ (8000d0c <motoresInit+0x70>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2200      	movs	r2, #0
 8000cce:	635a      	str	r2, [r3, #52]	@ 0x34
	timmotorGlobal->Instance->CCR2 = 0;
 8000cd0:	4b0e      	ldr	r3, [pc, #56]	@ (8000d0c <motoresInit+0x70>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	639a      	str	r2, [r3, #56]	@ 0x38

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2,0);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2104      	movs	r1, #4
 8000cde:	480c      	ldr	r0, [pc, #48]	@ (8000d10 <motoresInit+0x74>)
 8000ce0:	f000 ff96 	bl	8001c10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3,0);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2108      	movs	r1, #8
 8000ce8:	4809      	ldr	r0, [pc, #36]	@ (8000d10 <motoresInit+0x74>)
 8000cea:	f000 ff91 	bl	8001c10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,0);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2110      	movs	r1, #16
 8000cf2:	4807      	ldr	r0, [pc, #28]	@ (8000d10 <motoresInit+0x74>)
 8000cf4:	f000 ff8c 	bl	8001c10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,0);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2120      	movs	r1, #32
 8000cfc:	4804      	ldr	r0, [pc, #16]	@ (8000d10 <motoresInit+0x74>)
 8000cfe:	f000 ff87 	bl	8001c10 <HAL_GPIO_WritePin>
}
 8000d02:	bf00      	nop
 8000d04:	3710      	adds	r7, #16
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	200003ac 	.word	0x200003ac
 8000d10:	40020000 	.word	0x40020000

08000d14 <delay_us_tim_init>:


#ifdef TIMX

void delay_us_tim_init()
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  // HAL_TIM_Base_Start(&TIMERX); // CON HAL inicia el timer 1


	//SIN HAL
	TIMX->CR1|=1>>0;// HABILITA EL TIMER BIT 0 EN 1 EN
 8000d18:	4b05      	ldr	r3, [pc, #20]	@ (8000d30 <delay_us_tim_init+0x1c>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a04      	ldr	r2, [pc, #16]	@ (8000d30 <delay_us_tim_init+0x1c>)
 8000d1e:	f043 0301 	orr.w	r3, r3, #1
 8000d22:	6013      	str	r3, [r2, #0]

}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	40000c00 	.word	0x40000c00

08000d34 <delay_us_tim>:


void delay_us_tim (uint32_t us)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
	//CON HAL
	//__HAL_TIM_SET_COUNTER(&TIMERX,0);  // CON HAL  Carga el timer con 0
	//while ((uint16_t)__HAL_TIM_GET_COUNTER(&TIMERX) < us);// CON HAL espera los us deseados ojo si es 32 bit poner uint32_t

	//SIN HAL
     TIMX->CNT=0;// Resetea el timer
 8000d3c:	4b07      	ldr	r3, [pc, #28]	@ (8000d5c <delay_us_tim+0x28>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	625a      	str	r2, [r3, #36]	@ 0x24
	while (TIMX->CNT < us);// ESPERA LOS US DESEADOS
 8000d42:	bf00      	nop
 8000d44:	4b05      	ldr	r3, [pc, #20]	@ (8000d5c <delay_us_tim+0x28>)
 8000d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d48:	687a      	ldr	r2, [r7, #4]
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	d8fa      	bhi.n	8000d44 <delay_us_tim+0x10>

}
 8000d4e:	bf00      	nop
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	40000c00 	.word	0x40000c00

08000d60 <Delay_ms>:
while( DWT->CYCCNT<=pasos*reta);//multiplica por us
}
#endif

void Delay_ms(uint32_t ms)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
    uint32_t us = ms * 1000;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000d6e:	fb02 f303 	mul.w	r3, r2, r3
 8000d72:	60fb      	str	r3, [r7, #12]
  Delay_us(us);  //el que fue definido
 8000d74:	68f8      	ldr	r0, [r7, #12]
 8000d76:	f7ff ffdd 	bl	8000d34 <delay_us_tim>
}
 8000d7a:	bf00      	nop
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
	...

08000d84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	607b      	str	r3, [r7, #4]
 8000d8e:	4b10      	ldr	r3, [pc, #64]	@ (8000dd0 <HAL_MspInit+0x4c>)
 8000d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d92:	4a0f      	ldr	r2, [pc, #60]	@ (8000dd0 <HAL_MspInit+0x4c>)
 8000d94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d98:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000dd0 <HAL_MspInit+0x4c>)
 8000d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	603b      	str	r3, [r7, #0]
 8000daa:	4b09      	ldr	r3, [pc, #36]	@ (8000dd0 <HAL_MspInit+0x4c>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dae:	4a08      	ldr	r2, [pc, #32]	@ (8000dd0 <HAL_MspInit+0x4c>)
 8000db0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000db4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000db6:	4b06      	ldr	r3, [pc, #24]	@ (8000dd0 <HAL_MspInit+0x4c>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dbe:	603b      	str	r3, [r7, #0]
 8000dc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	40023800 	.word	0x40023800

08000dd4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08a      	sub	sp, #40	@ 0x28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a17      	ldr	r2, [pc, #92]	@ (8000e50 <HAL_ADC_MspInit+0x7c>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d127      	bne.n	8000e46 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	4b16      	ldr	r3, [pc, #88]	@ (8000e54 <HAL_ADC_MspInit+0x80>)
 8000dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dfe:	4a15      	ldr	r2, [pc, #84]	@ (8000e54 <HAL_ADC_MspInit+0x80>)
 8000e00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e04:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e06:	4b13      	ldr	r3, [pc, #76]	@ (8000e54 <HAL_ADC_MspInit+0x80>)
 8000e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	4b0f      	ldr	r3, [pc, #60]	@ (8000e54 <HAL_ADC_MspInit+0x80>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1a:	4a0e      	ldr	r2, [pc, #56]	@ (8000e54 <HAL_ADC_MspInit+0x80>)
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e22:	4b0c      	ldr	r3, [pc, #48]	@ (8000e54 <HAL_ADC_MspInit+0x80>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e32:	2303      	movs	r3, #3
 8000e34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3a:	f107 0314 	add.w	r3, r7, #20
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4805      	ldr	r0, [pc, #20]	@ (8000e58 <HAL_ADC_MspInit+0x84>)
 8000e42:	f000 fd61 	bl	8001908 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000e46:	bf00      	nop
 8000e48:	3728      	adds	r7, #40	@ 0x28
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40012000 	.word	0x40012000
 8000e54:	40023800 	.word	0x40023800
 8000e58:	40020000 	.word	0x40020000

08000e5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08a      	sub	sp, #40	@ 0x28
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a19      	ldr	r2, [pc, #100]	@ (8000ee0 <HAL_I2C_MspInit+0x84>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d12b      	bne.n	8000ed6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	613b      	str	r3, [r7, #16]
 8000e82:	4b18      	ldr	r3, [pc, #96]	@ (8000ee4 <HAL_I2C_MspInit+0x88>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e86:	4a17      	ldr	r2, [pc, #92]	@ (8000ee4 <HAL_I2C_MspInit+0x88>)
 8000e88:	f043 0302 	orr.w	r3, r3, #2
 8000e8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ee4 <HAL_I2C_MspInit+0x88>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e92:	f003 0302 	and.w	r3, r3, #2
 8000e96:	613b      	str	r3, [r7, #16]
 8000e98:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e9a:	23c0      	movs	r3, #192	@ 0xc0
 8000e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e9e:	2312      	movs	r3, #18
 8000ea0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000eaa:	2304      	movs	r3, #4
 8000eac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eae:	f107 0314 	add.w	r3, r7, #20
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	480c      	ldr	r0, [pc, #48]	@ (8000ee8 <HAL_I2C_MspInit+0x8c>)
 8000eb6:	f000 fd27 	bl	8001908 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	4b09      	ldr	r3, [pc, #36]	@ (8000ee4 <HAL_I2C_MspInit+0x88>)
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec2:	4a08      	ldr	r2, [pc, #32]	@ (8000ee4 <HAL_I2C_MspInit+0x88>)
 8000ec4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ec8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eca:	4b06      	ldr	r3, [pc, #24]	@ (8000ee4 <HAL_I2C_MspInit+0x88>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ece:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000ed6:	bf00      	nop
 8000ed8:	3728      	adds	r7, #40	@ 0x28
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40005400 	.word	0x40005400
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	40020400 	.word	0x40020400

08000eec <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08a      	sub	sp, #40	@ 0x28
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f0c:	d12b      	bne.n	8000f66 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
 8000f12:	4b17      	ldr	r3, [pc, #92]	@ (8000f70 <HAL_TIM_Encoder_MspInit+0x84>)
 8000f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f16:	4a16      	ldr	r2, [pc, #88]	@ (8000f70 <HAL_TIM_Encoder_MspInit+0x84>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f1e:	4b14      	ldr	r3, [pc, #80]	@ (8000f70 <HAL_TIM_Encoder_MspInit+0x84>)
 8000f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	613b      	str	r3, [r7, #16]
 8000f28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	4b10      	ldr	r3, [pc, #64]	@ (8000f70 <HAL_TIM_Encoder_MspInit+0x84>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f32:	4a0f      	ldr	r2, [pc, #60]	@ (8000f70 <HAL_TIM_Encoder_MspInit+0x84>)
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f70 <HAL_TIM_Encoder_MspInit+0x84>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8000f46:	2322      	movs	r3, #34	@ 0x22
 8000f48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f52:	2300      	movs	r3, #0
 8000f54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f56:	2301      	movs	r3, #1
 8000f58:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5a:	f107 0314 	add.w	r3, r7, #20
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4804      	ldr	r0, [pc, #16]	@ (8000f74 <HAL_TIM_Encoder_MspInit+0x88>)
 8000f62:	f000 fcd1 	bl	8001908 <HAL_GPIO_Init>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000f66:	bf00      	nop
 8000f68:	3728      	adds	r7, #40	@ 0x28
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40023800 	.word	0x40023800
 8000f74:	40020000 	.word	0x40020000

08000f78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a15      	ldr	r2, [pc, #84]	@ (8000fdc <HAL_TIM_Base_MspInit+0x64>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d10e      	bne.n	8000fa8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	4b14      	ldr	r3, [pc, #80]	@ (8000fe0 <HAL_TIM_Base_MspInit+0x68>)
 8000f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f92:	4a13      	ldr	r2, [pc, #76]	@ (8000fe0 <HAL_TIM_Base_MspInit+0x68>)
 8000f94:	f043 0302 	orr.w	r3, r3, #2
 8000f98:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f9a:	4b11      	ldr	r3, [pc, #68]	@ (8000fe0 <HAL_TIM_Base_MspInit+0x68>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000fa6:	e012      	b.n	8000fce <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM5)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a0d      	ldr	r2, [pc, #52]	@ (8000fe4 <HAL_TIM_Base_MspInit+0x6c>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d10d      	bne.n	8000fce <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe0 <HAL_TIM_Base_MspInit+0x68>)
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fba:	4a09      	ldr	r2, [pc, #36]	@ (8000fe0 <HAL_TIM_Base_MspInit+0x68>)
 8000fbc:	f043 0308 	orr.w	r3, r3, #8
 8000fc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fc2:	4b07      	ldr	r3, [pc, #28]	@ (8000fe0 <HAL_TIM_Base_MspInit+0x68>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc6:	f003 0308 	and.w	r3, r3, #8
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	68bb      	ldr	r3, [r7, #8]
}
 8000fce:	bf00      	nop
 8000fd0:	3714      	adds	r7, #20
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	40000400 	.word	0x40000400
 8000fe0:	40023800 	.word	0x40023800
 8000fe4:	40000c00 	.word	0x40000c00

08000fe8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <NMI_Handler+0x4>

08000ff0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ff4:	bf00      	nop
 8000ff6:	e7fd      	b.n	8000ff4 <HardFault_Handler+0x4>

08000ff8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ffc:	bf00      	nop
 8000ffe:	e7fd      	b.n	8000ffc <MemManage_Handler+0x4>

08001000 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001004:	bf00      	nop
 8001006:	e7fd      	b.n	8001004 <BusFault_Handler+0x4>

08001008 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800100c:	bf00      	nop
 800100e:	e7fd      	b.n	800100c <UsageFault_Handler+0x4>

08001010 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr

0800103a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800103e:	f000 f89b 	bl	8001178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
	...

08001048 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800104c:	4802      	ldr	r0, [pc, #8]	@ (8001058 <OTG_FS_IRQHandler+0x10>)
 800104e:	f001 f881 	bl	8002154 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20001894 	.word	0x20001894

0800105c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001060:	4b06      	ldr	r3, [pc, #24]	@ (800107c <SystemInit+0x20>)
 8001062:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001066:	4a05      	ldr	r2, [pc, #20]	@ (800107c <SystemInit+0x20>)
 8001068:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800106c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <Reset_Handler>:
 8001080:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010b8 <LoopFillZerobss+0xe>
 8001084:	f7ff ffea 	bl	800105c <SystemInit>
 8001088:	480c      	ldr	r0, [pc, #48]	@ (80010bc <LoopFillZerobss+0x12>)
 800108a:	490d      	ldr	r1, [pc, #52]	@ (80010c0 <LoopFillZerobss+0x16>)
 800108c:	4a0d      	ldr	r2, [pc, #52]	@ (80010c4 <LoopFillZerobss+0x1a>)
 800108e:	2300      	movs	r3, #0
 8001090:	e002      	b.n	8001098 <LoopCopyDataInit>

08001092 <CopyDataInit>:
 8001092:	58d4      	ldr	r4, [r2, r3]
 8001094:	50c4      	str	r4, [r0, r3]
 8001096:	3304      	adds	r3, #4

08001098 <LoopCopyDataInit>:
 8001098:	18c4      	adds	r4, r0, r3
 800109a:	428c      	cmp	r4, r1
 800109c:	d3f9      	bcc.n	8001092 <CopyDataInit>
 800109e:	4a0a      	ldr	r2, [pc, #40]	@ (80010c8 <LoopFillZerobss+0x1e>)
 80010a0:	4c0a      	ldr	r4, [pc, #40]	@ (80010cc <LoopFillZerobss+0x22>)
 80010a2:	2300      	movs	r3, #0
 80010a4:	e001      	b.n	80010aa <LoopFillZerobss>

080010a6 <FillZerobss>:
 80010a6:	6013      	str	r3, [r2, #0]
 80010a8:	3204      	adds	r2, #4

080010aa <LoopFillZerobss>:
 80010aa:	42a2      	cmp	r2, r4
 80010ac:	d3fb      	bcc.n	80010a6 <FillZerobss>
 80010ae:	f007 faeb 	bl	8008688 <__libc_init_array>
 80010b2:	f7ff fb0d 	bl	80006d0 <main>
 80010b6:	4770      	bx	lr
 80010b8:	20020000 	.word	0x20020000
 80010bc:	20000000 	.word	0x20000000
 80010c0:	2000010c 	.word	0x2000010c
 80010c4:	08008774 	.word	0x08008774
 80010c8:	2000010c 	.word	0x2000010c
 80010cc:	20001f98 	.word	0x20001f98

080010d0 <ADC_IRQHandler>:
 80010d0:	e7fe      	b.n	80010d0 <ADC_IRQHandler>
	...

080010d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001114 <HAL_Init+0x40>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001114 <HAL_Init+0x40>)
 80010de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001114 <HAL_Init+0x40>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001114 <HAL_Init+0x40>)
 80010ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010f0:	4b08      	ldr	r3, [pc, #32]	@ (8001114 <HAL_Init+0x40>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a07      	ldr	r2, [pc, #28]	@ (8001114 <HAL_Init+0x40>)
 80010f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010fc:	2003      	movs	r0, #3
 80010fe:	f000 fbc1 	bl	8001884 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001102:	200f      	movs	r0, #15
 8001104:	f000 f808 	bl	8001118 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001108:	f7ff fe3c 	bl	8000d84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40023c00 	.word	0x40023c00

08001118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001120:	4b12      	ldr	r3, [pc, #72]	@ (800116c <HAL_InitTick+0x54>)
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	4b12      	ldr	r3, [pc, #72]	@ (8001170 <HAL_InitTick+0x58>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	4619      	mov	r1, r3
 800112a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800112e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001132:	fbb2 f3f3 	udiv	r3, r2, r3
 8001136:	4618      	mov	r0, r3
 8001138:	f000 fbd9 	bl	80018ee <HAL_SYSTICK_Config>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e00e      	b.n	8001164 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2b0f      	cmp	r3, #15
 800114a:	d80a      	bhi.n	8001162 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800114c:	2200      	movs	r2, #0
 800114e:	6879      	ldr	r1, [r7, #4]
 8001150:	f04f 30ff 	mov.w	r0, #4294967295
 8001154:	f000 fba1 	bl	800189a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001158:	4a06      	ldr	r2, [pc, #24]	@ (8001174 <HAL_InitTick+0x5c>)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800115e:	2300      	movs	r3, #0
 8001160:	e000      	b.n	8001164 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
}
 8001164:	4618      	mov	r0, r3
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000010 	.word	0x20000010
 8001170:	20000018 	.word	0x20000018
 8001174:	20000014 	.word	0x20000014

08001178 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800117c:	4b06      	ldr	r3, [pc, #24]	@ (8001198 <HAL_IncTick+0x20>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	461a      	mov	r2, r3
 8001182:	4b06      	ldr	r3, [pc, #24]	@ (800119c <HAL_IncTick+0x24>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4413      	add	r3, r2
 8001188:	4a04      	ldr	r2, [pc, #16]	@ (800119c <HAL_IncTick+0x24>)
 800118a:	6013      	str	r3, [r2, #0]
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	20000018 	.word	0x20000018
 800119c:	200003b0 	.word	0x200003b0

080011a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  return uwTick;
 80011a4:	4b03      	ldr	r3, [pc, #12]	@ (80011b4 <HAL_GetTick+0x14>)
 80011a6:	681b      	ldr	r3, [r3, #0]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	200003b0 	.word	0x200003b0

080011b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011c0:	f7ff ffee 	bl	80011a0 <HAL_GetTick>
 80011c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d0:	d005      	beq.n	80011de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011d2:	4b0a      	ldr	r3, [pc, #40]	@ (80011fc <HAL_Delay+0x44>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	461a      	mov	r2, r3
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	4413      	add	r3, r2
 80011dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011de:	bf00      	nop
 80011e0:	f7ff ffde 	bl	80011a0 <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	68fa      	ldr	r2, [r7, #12]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d8f7      	bhi.n	80011e0 <HAL_Delay+0x28>
  {
  }
}
 80011f0:	bf00      	nop
 80011f2:	bf00      	nop
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000018 	.word	0x20000018

08001200 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001208:	2300      	movs	r3, #0
 800120a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d101      	bne.n	8001216 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e033      	b.n	800127e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121a:	2b00      	cmp	r3, #0
 800121c:	d109      	bne.n	8001232 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff fdd8 	bl	8000dd4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2200      	movs	r2, #0
 800122e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001236:	f003 0310 	and.w	r3, r3, #16
 800123a:	2b00      	cmp	r3, #0
 800123c:	d118      	bne.n	8001270 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001242:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001246:	f023 0302 	bic.w	r3, r3, #2
 800124a:	f043 0202 	orr.w	r2, r3, #2
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f000 f94a 	bl	80014ec <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2200      	movs	r2, #0
 800125c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001262:	f023 0303 	bic.w	r3, r3, #3
 8001266:	f043 0201 	orr.w	r2, r3, #1
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	641a      	str	r2, [r3, #64]	@ 0x40
 800126e:	e001      	b.n	8001274 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800127c:	7bfb      	ldrb	r3, [r7, #15]
}
 800127e:	4618      	mov	r0, r3
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001292:	2300      	movs	r3, #0
 8001294:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800129c:	2b01      	cmp	r3, #1
 800129e:	d101      	bne.n	80012a4 <HAL_ADC_ConfigChannel+0x1c>
 80012a0:	2302      	movs	r3, #2
 80012a2:	e113      	b.n	80014cc <HAL_ADC_ConfigChannel+0x244>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2201      	movs	r2, #1
 80012a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b09      	cmp	r3, #9
 80012b2:	d925      	bls.n	8001300 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	68d9      	ldr	r1, [r3, #12]
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	b29b      	uxth	r3, r3
 80012c0:	461a      	mov	r2, r3
 80012c2:	4613      	mov	r3, r2
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	4413      	add	r3, r2
 80012c8:	3b1e      	subs	r3, #30
 80012ca:	2207      	movs	r2, #7
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	43da      	mvns	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	400a      	ands	r2, r1
 80012d8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	68d9      	ldr	r1, [r3, #12]
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	689a      	ldr	r2, [r3, #8]
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	4618      	mov	r0, r3
 80012ec:	4603      	mov	r3, r0
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	4403      	add	r3, r0
 80012f2:	3b1e      	subs	r3, #30
 80012f4:	409a      	lsls	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	430a      	orrs	r2, r1
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	e022      	b.n	8001346 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	6919      	ldr	r1, [r3, #16]
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	b29b      	uxth	r3, r3
 800130c:	461a      	mov	r2, r3
 800130e:	4613      	mov	r3, r2
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	4413      	add	r3, r2
 8001314:	2207      	movs	r2, #7
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	43da      	mvns	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	400a      	ands	r2, r1
 8001322:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	6919      	ldr	r1, [r3, #16]
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	689a      	ldr	r2, [r3, #8]
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	b29b      	uxth	r3, r3
 8001334:	4618      	mov	r0, r3
 8001336:	4603      	mov	r3, r0
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	4403      	add	r3, r0
 800133c:	409a      	lsls	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	430a      	orrs	r2, r1
 8001344:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	2b06      	cmp	r3, #6
 800134c:	d824      	bhi.n	8001398 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685a      	ldr	r2, [r3, #4]
 8001358:	4613      	mov	r3, r2
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	4413      	add	r3, r2
 800135e:	3b05      	subs	r3, #5
 8001360:	221f      	movs	r2, #31
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	43da      	mvns	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	400a      	ands	r2, r1
 800136e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	b29b      	uxth	r3, r3
 800137c:	4618      	mov	r0, r3
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685a      	ldr	r2, [r3, #4]
 8001382:	4613      	mov	r3, r2
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	4413      	add	r3, r2
 8001388:	3b05      	subs	r3, #5
 800138a:	fa00 f203 	lsl.w	r2, r0, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	430a      	orrs	r2, r1
 8001394:	635a      	str	r2, [r3, #52]	@ 0x34
 8001396:	e04c      	b.n	8001432 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	2b0c      	cmp	r3, #12
 800139e:	d824      	bhi.n	80013ea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685a      	ldr	r2, [r3, #4]
 80013aa:	4613      	mov	r3, r2
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	4413      	add	r3, r2
 80013b0:	3b23      	subs	r3, #35	@ 0x23
 80013b2:	221f      	movs	r2, #31
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43da      	mvns	r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	400a      	ands	r2, r1
 80013c0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	4618      	mov	r0, r3
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685a      	ldr	r2, [r3, #4]
 80013d4:	4613      	mov	r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	4413      	add	r3, r2
 80013da:	3b23      	subs	r3, #35	@ 0x23
 80013dc:	fa00 f203 	lsl.w	r2, r0, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	430a      	orrs	r2, r1
 80013e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80013e8:	e023      	b.n	8001432 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685a      	ldr	r2, [r3, #4]
 80013f4:	4613      	mov	r3, r2
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	4413      	add	r3, r2
 80013fa:	3b41      	subs	r3, #65	@ 0x41
 80013fc:	221f      	movs	r2, #31
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43da      	mvns	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	400a      	ands	r2, r1
 800140a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	b29b      	uxth	r3, r3
 8001418:	4618      	mov	r0, r3
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685a      	ldr	r2, [r3, #4]
 800141e:	4613      	mov	r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	4413      	add	r3, r2
 8001424:	3b41      	subs	r3, #65	@ 0x41
 8001426:	fa00 f203 	lsl.w	r2, r0, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	430a      	orrs	r2, r1
 8001430:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001432:	4b29      	ldr	r3, [pc, #164]	@ (80014d8 <HAL_ADC_ConfigChannel+0x250>)
 8001434:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a28      	ldr	r2, [pc, #160]	@ (80014dc <HAL_ADC_ConfigChannel+0x254>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d10f      	bne.n	8001460 <HAL_ADC_ConfigChannel+0x1d8>
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2b12      	cmp	r3, #18
 8001446:	d10b      	bne.n	8001460 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a1d      	ldr	r2, [pc, #116]	@ (80014dc <HAL_ADC_ConfigChannel+0x254>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d12b      	bne.n	80014c2 <HAL_ADC_ConfigChannel+0x23a>
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a1c      	ldr	r2, [pc, #112]	@ (80014e0 <HAL_ADC_ConfigChannel+0x258>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d003      	beq.n	800147c <HAL_ADC_ConfigChannel+0x1f4>
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2b11      	cmp	r3, #17
 800147a:	d122      	bne.n	80014c2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a11      	ldr	r2, [pc, #68]	@ (80014e0 <HAL_ADC_ConfigChannel+0x258>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d111      	bne.n	80014c2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800149e:	4b11      	ldr	r3, [pc, #68]	@ (80014e4 <HAL_ADC_ConfigChannel+0x25c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a11      	ldr	r2, [pc, #68]	@ (80014e8 <HAL_ADC_ConfigChannel+0x260>)
 80014a4:	fba2 2303 	umull	r2, r3, r2, r3
 80014a8:	0c9a      	lsrs	r2, r3, #18
 80014aa:	4613      	mov	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4413      	add	r3, r2
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80014b4:	e002      	b.n	80014bc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	3b01      	subs	r3, #1
 80014ba:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1f9      	bne.n	80014b6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3714      	adds	r7, #20
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	40012300 	.word	0x40012300
 80014dc:	40012000 	.word	0x40012000
 80014e0:	10000012 	.word	0x10000012
 80014e4:	20000010 	.word	0x20000010
 80014e8:	431bde83 	.word	0x431bde83

080014ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014f4:	4b79      	ldr	r3, [pc, #484]	@ (80016dc <ADC_Init+0x1f0>)
 80014f6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	685a      	ldr	r2, [r3, #4]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	431a      	orrs	r2, r3
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	685a      	ldr	r2, [r3, #4]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001520:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	6859      	ldr	r1, [r3, #4]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	691b      	ldr	r3, [r3, #16]
 800152c:	021a      	lsls	r2, r3, #8
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	430a      	orrs	r2, r1
 8001534:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	685a      	ldr	r2, [r3, #4]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001544:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	6859      	ldr	r1, [r3, #4]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689a      	ldr	r2, [r3, #8]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	430a      	orrs	r2, r1
 8001556:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	689a      	ldr	r2, [r3, #8]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001566:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	6899      	ldr	r1, [r3, #8]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	68da      	ldr	r2, [r3, #12]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	430a      	orrs	r2, r1
 8001578:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800157e:	4a58      	ldr	r2, [pc, #352]	@ (80016e0 <ADC_Init+0x1f4>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d022      	beq.n	80015ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	689a      	ldr	r2, [r3, #8]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001592:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	6899      	ldr	r1, [r3, #8]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	430a      	orrs	r2, r1
 80015a4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	689a      	ldr	r2, [r3, #8]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80015b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	6899      	ldr	r1, [r3, #8]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	430a      	orrs	r2, r1
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	e00f      	b.n	80015ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	689a      	ldr	r2, [r3, #8]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80015d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	689a      	ldr	r2, [r3, #8]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80015e8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	689a      	ldr	r2, [r3, #8]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f022 0202 	bic.w	r2, r2, #2
 80015f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	6899      	ldr	r1, [r3, #8]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	7e1b      	ldrb	r3, [r3, #24]
 8001604:	005a      	lsls	r2, r3, #1
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	430a      	orrs	r2, r1
 800160c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d01b      	beq.n	8001650 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	685a      	ldr	r2, [r3, #4]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001626:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	685a      	ldr	r2, [r3, #4]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001636:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	6859      	ldr	r1, [r3, #4]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001642:	3b01      	subs	r3, #1
 8001644:	035a      	lsls	r2, r3, #13
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	430a      	orrs	r2, r1
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	e007      	b.n	8001660 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	685a      	ldr	r2, [r3, #4]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800165e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800166e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	3b01      	subs	r3, #1
 800167c:	051a      	lsls	r2, r3, #20
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	430a      	orrs	r2, r1
 8001684:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	689a      	ldr	r2, [r3, #8]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001694:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	6899      	ldr	r1, [r3, #8]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80016a2:	025a      	lsls	r2, r3, #9
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	430a      	orrs	r2, r1
 80016aa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	689a      	ldr	r2, [r3, #8]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80016ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6899      	ldr	r1, [r3, #8]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	695b      	ldr	r3, [r3, #20]
 80016c6:	029a      	lsls	r2, r3, #10
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	430a      	orrs	r2, r1
 80016ce:	609a      	str	r2, [r3, #8]
}
 80016d0:	bf00      	nop
 80016d2:	3714      	adds	r7, #20
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	40012300 	.word	0x40012300
 80016e0:	0f000001 	.word	0x0f000001

080016e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001728 <__NVIC_SetPriorityGrouping+0x44>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016fa:	68ba      	ldr	r2, [r7, #8]
 80016fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001700:	4013      	ands	r3, r2
 8001702:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800170c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001710:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001714:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001716:	4a04      	ldr	r2, [pc, #16]	@ (8001728 <__NVIC_SetPriorityGrouping+0x44>)
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	60d3      	str	r3, [r2, #12]
}
 800171c:	bf00      	nop
 800171e:	3714      	adds	r7, #20
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001730:	4b04      	ldr	r3, [pc, #16]	@ (8001744 <__NVIC_GetPriorityGrouping+0x18>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	0a1b      	lsrs	r3, r3, #8
 8001736:	f003 0307 	and.w	r3, r3, #7
}
 800173a:	4618      	mov	r0, r3
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001756:	2b00      	cmp	r3, #0
 8001758:	db0b      	blt.n	8001772 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	f003 021f 	and.w	r2, r3, #31
 8001760:	4907      	ldr	r1, [pc, #28]	@ (8001780 <__NVIC_EnableIRQ+0x38>)
 8001762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001766:	095b      	lsrs	r3, r3, #5
 8001768:	2001      	movs	r0, #1
 800176a:	fa00 f202 	lsl.w	r2, r0, r2
 800176e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	e000e100 	.word	0xe000e100

08001784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	6039      	str	r1, [r7, #0]
 800178e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001794:	2b00      	cmp	r3, #0
 8001796:	db0a      	blt.n	80017ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	b2da      	uxtb	r2, r3
 800179c:	490c      	ldr	r1, [pc, #48]	@ (80017d0 <__NVIC_SetPriority+0x4c>)
 800179e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a2:	0112      	lsls	r2, r2, #4
 80017a4:	b2d2      	uxtb	r2, r2
 80017a6:	440b      	add	r3, r1
 80017a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017ac:	e00a      	b.n	80017c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	4908      	ldr	r1, [pc, #32]	@ (80017d4 <__NVIC_SetPriority+0x50>)
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	f003 030f 	and.w	r3, r3, #15
 80017ba:	3b04      	subs	r3, #4
 80017bc:	0112      	lsls	r2, r2, #4
 80017be:	b2d2      	uxtb	r2, r2
 80017c0:	440b      	add	r3, r1
 80017c2:	761a      	strb	r2, [r3, #24]
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	e000e100 	.word	0xe000e100
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d8:	b480      	push	{r7}
 80017da:	b089      	sub	sp, #36	@ 0x24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	f1c3 0307 	rsb	r3, r3, #7
 80017f2:	2b04      	cmp	r3, #4
 80017f4:	bf28      	it	cs
 80017f6:	2304      	movcs	r3, #4
 80017f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	3304      	adds	r3, #4
 80017fe:	2b06      	cmp	r3, #6
 8001800:	d902      	bls.n	8001808 <NVIC_EncodePriority+0x30>
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	3b03      	subs	r3, #3
 8001806:	e000      	b.n	800180a <NVIC_EncodePriority+0x32>
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800180c:	f04f 32ff 	mov.w	r2, #4294967295
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43da      	mvns	r2, r3
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	401a      	ands	r2, r3
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001820:	f04f 31ff 	mov.w	r1, #4294967295
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	fa01 f303 	lsl.w	r3, r1, r3
 800182a:	43d9      	mvns	r1, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001830:	4313      	orrs	r3, r2
         );
}
 8001832:	4618      	mov	r0, r3
 8001834:	3724      	adds	r7, #36	@ 0x24
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
	...

08001840 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3b01      	subs	r3, #1
 800184c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001850:	d301      	bcc.n	8001856 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001852:	2301      	movs	r3, #1
 8001854:	e00f      	b.n	8001876 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001856:	4a0a      	ldr	r2, [pc, #40]	@ (8001880 <SysTick_Config+0x40>)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3b01      	subs	r3, #1
 800185c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800185e:	210f      	movs	r1, #15
 8001860:	f04f 30ff 	mov.w	r0, #4294967295
 8001864:	f7ff ff8e 	bl	8001784 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001868:	4b05      	ldr	r3, [pc, #20]	@ (8001880 <SysTick_Config+0x40>)
 800186a:	2200      	movs	r2, #0
 800186c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800186e:	4b04      	ldr	r3, [pc, #16]	@ (8001880 <SysTick_Config+0x40>)
 8001870:	2207      	movs	r2, #7
 8001872:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	e000e010 	.word	0xe000e010

08001884 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f7ff ff29 	bl	80016e4 <__NVIC_SetPriorityGrouping>
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800189a:	b580      	push	{r7, lr}
 800189c:	b086      	sub	sp, #24
 800189e:	af00      	add	r7, sp, #0
 80018a0:	4603      	mov	r3, r0
 80018a2:	60b9      	str	r1, [r7, #8]
 80018a4:	607a      	str	r2, [r7, #4]
 80018a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018ac:	f7ff ff3e 	bl	800172c <__NVIC_GetPriorityGrouping>
 80018b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	68b9      	ldr	r1, [r7, #8]
 80018b6:	6978      	ldr	r0, [r7, #20]
 80018b8:	f7ff ff8e 	bl	80017d8 <NVIC_EncodePriority>
 80018bc:	4602      	mov	r2, r0
 80018be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018c2:	4611      	mov	r1, r2
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff ff5d 	bl	8001784 <__NVIC_SetPriority>
}
 80018ca:	bf00      	nop
 80018cc:	3718      	adds	r7, #24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b082      	sub	sp, #8
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	4603      	mov	r3, r0
 80018da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff ff31 	bl	8001748 <__NVIC_EnableIRQ>
}
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b082      	sub	sp, #8
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff ffa2 	bl	8001840 <SysTick_Config>
 80018fc:	4603      	mov	r3, r0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
	...

08001908 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001908:	b480      	push	{r7}
 800190a:	b089      	sub	sp, #36	@ 0x24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001912:	2300      	movs	r3, #0
 8001914:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800191a:	2300      	movs	r3, #0
 800191c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800191e:	2300      	movs	r3, #0
 8001920:	61fb      	str	r3, [r7, #28]
 8001922:	e159      	b.n	8001bd8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001924:	2201      	movs	r2, #1
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	697a      	ldr	r2, [r7, #20]
 8001934:	4013      	ands	r3, r2
 8001936:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	429a      	cmp	r2, r3
 800193e:	f040 8148 	bne.w	8001bd2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f003 0303 	and.w	r3, r3, #3
 800194a:	2b01      	cmp	r3, #1
 800194c:	d005      	beq.n	800195a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001956:	2b02      	cmp	r3, #2
 8001958:	d130      	bne.n	80019bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	2203      	movs	r2, #3
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	43db      	mvns	r3, r3
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	4013      	ands	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	68da      	ldr	r2, [r3, #12]
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	fa02 f303 	lsl.w	r3, r2, r3
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	4313      	orrs	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001990:	2201      	movs	r2, #1
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	4013      	ands	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	091b      	lsrs	r3, r3, #4
 80019a6:	f003 0201 	and.w	r2, r3, #1
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f003 0303 	and.w	r3, r3, #3
 80019c4:	2b03      	cmp	r3, #3
 80019c6:	d017      	beq.n	80019f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	2203      	movs	r2, #3
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	43db      	mvns	r3, r3
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4013      	ands	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	689a      	ldr	r2, [r3, #8]
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f003 0303 	and.w	r3, r3, #3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d123      	bne.n	8001a4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	08da      	lsrs	r2, r3, #3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3208      	adds	r2, #8
 8001a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	f003 0307 	and.w	r3, r3, #7
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	220f      	movs	r2, #15
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	43db      	mvns	r3, r3
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	4013      	ands	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	691a      	ldr	r2, [r3, #16]
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	08da      	lsrs	r2, r3, #3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	3208      	adds	r2, #8
 8001a46:	69b9      	ldr	r1, [r7, #24]
 8001a48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	2203      	movs	r2, #3
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	4013      	ands	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 0203 	and.w	r2, r3, #3
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f000 80a2 	beq.w	8001bd2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	4b57      	ldr	r3, [pc, #348]	@ (8001bf0 <HAL_GPIO_Init+0x2e8>)
 8001a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a96:	4a56      	ldr	r2, [pc, #344]	@ (8001bf0 <HAL_GPIO_Init+0x2e8>)
 8001a98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a9e:	4b54      	ldr	r3, [pc, #336]	@ (8001bf0 <HAL_GPIO_Init+0x2e8>)
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aa2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aaa:	4a52      	ldr	r2, [pc, #328]	@ (8001bf4 <HAL_GPIO_Init+0x2ec>)
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	089b      	lsrs	r3, r3, #2
 8001ab0:	3302      	adds	r3, #2
 8001ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	f003 0303 	and.w	r3, r3, #3
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	220f      	movs	r2, #15
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	4013      	ands	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a49      	ldr	r2, [pc, #292]	@ (8001bf8 <HAL_GPIO_Init+0x2f0>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d019      	beq.n	8001b0a <HAL_GPIO_Init+0x202>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a48      	ldr	r2, [pc, #288]	@ (8001bfc <HAL_GPIO_Init+0x2f4>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d013      	beq.n	8001b06 <HAL_GPIO_Init+0x1fe>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a47      	ldr	r2, [pc, #284]	@ (8001c00 <HAL_GPIO_Init+0x2f8>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d00d      	beq.n	8001b02 <HAL_GPIO_Init+0x1fa>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a46      	ldr	r2, [pc, #280]	@ (8001c04 <HAL_GPIO_Init+0x2fc>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d007      	beq.n	8001afe <HAL_GPIO_Init+0x1f6>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a45      	ldr	r2, [pc, #276]	@ (8001c08 <HAL_GPIO_Init+0x300>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d101      	bne.n	8001afa <HAL_GPIO_Init+0x1f2>
 8001af6:	2304      	movs	r3, #4
 8001af8:	e008      	b.n	8001b0c <HAL_GPIO_Init+0x204>
 8001afa:	2307      	movs	r3, #7
 8001afc:	e006      	b.n	8001b0c <HAL_GPIO_Init+0x204>
 8001afe:	2303      	movs	r3, #3
 8001b00:	e004      	b.n	8001b0c <HAL_GPIO_Init+0x204>
 8001b02:	2302      	movs	r3, #2
 8001b04:	e002      	b.n	8001b0c <HAL_GPIO_Init+0x204>
 8001b06:	2301      	movs	r3, #1
 8001b08:	e000      	b.n	8001b0c <HAL_GPIO_Init+0x204>
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	69fa      	ldr	r2, [r7, #28]
 8001b0e:	f002 0203 	and.w	r2, r2, #3
 8001b12:	0092      	lsls	r2, r2, #2
 8001b14:	4093      	lsls	r3, r2
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b1c:	4935      	ldr	r1, [pc, #212]	@ (8001bf4 <HAL_GPIO_Init+0x2ec>)
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	089b      	lsrs	r3, r3, #2
 8001b22:	3302      	adds	r3, #2
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b2a:	4b38      	ldr	r3, [pc, #224]	@ (8001c0c <HAL_GPIO_Init+0x304>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	43db      	mvns	r3, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4013      	ands	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d003      	beq.n	8001b4e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b4e:	4a2f      	ldr	r2, [pc, #188]	@ (8001c0c <HAL_GPIO_Init+0x304>)
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b54:	4b2d      	ldr	r3, [pc, #180]	@ (8001c0c <HAL_GPIO_Init+0x304>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4013      	ands	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d003      	beq.n	8001b78 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b78:	4a24      	ldr	r2, [pc, #144]	@ (8001c0c <HAL_GPIO_Init+0x304>)
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b7e:	4b23      	ldr	r3, [pc, #140]	@ (8001c0c <HAL_GPIO_Init+0x304>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	43db      	mvns	r3, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ba2:	4a1a      	ldr	r2, [pc, #104]	@ (8001c0c <HAL_GPIO_Init+0x304>)
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ba8:	4b18      	ldr	r3, [pc, #96]	@ (8001c0c <HAL_GPIO_Init+0x304>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d003      	beq.n	8001bcc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bcc:	4a0f      	ldr	r2, [pc, #60]	@ (8001c0c <HAL_GPIO_Init+0x304>)
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	61fb      	str	r3, [r7, #28]
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	2b0f      	cmp	r3, #15
 8001bdc:	f67f aea2 	bls.w	8001924 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001be0:	bf00      	nop
 8001be2:	bf00      	nop
 8001be4:	3724      	adds	r7, #36	@ 0x24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	40013800 	.word	0x40013800
 8001bf8:	40020000 	.word	0x40020000
 8001bfc:	40020400 	.word	0x40020400
 8001c00:	40020800 	.word	0x40020800
 8001c04:	40020c00 	.word	0x40020c00
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	40013c00 	.word	0x40013c00

08001c10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	460b      	mov	r3, r1
 8001c1a:	807b      	strh	r3, [r7, #2]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c20:	787b      	ldrb	r3, [r7, #1]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d003      	beq.n	8001c2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c26:	887a      	ldrh	r2, [r7, #2]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c2c:	e003      	b.n	8001c36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c2e:	887b      	ldrh	r3, [r7, #2]
 8001c30:	041a      	lsls	r2, r3, #16
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	619a      	str	r2, [r3, #24]
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
	...

08001c44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d101      	bne.n	8001c56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e12b      	b.n	8001eae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d106      	bne.n	8001c70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7ff f8f6 	bl	8000e5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2224      	movs	r2, #36	@ 0x24
 8001c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f022 0201 	bic.w	r2, r2, #1
 8001c86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ca6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ca8:	f001 ff92 	bl	8003bd0 <HAL_RCC_GetPCLK1Freq>
 8001cac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	4a81      	ldr	r2, [pc, #516]	@ (8001eb8 <HAL_I2C_Init+0x274>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d807      	bhi.n	8001cc8 <HAL_I2C_Init+0x84>
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	4a80      	ldr	r2, [pc, #512]	@ (8001ebc <HAL_I2C_Init+0x278>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	bf94      	ite	ls
 8001cc0:	2301      	movls	r3, #1
 8001cc2:	2300      	movhi	r3, #0
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	e006      	b.n	8001cd6 <HAL_I2C_Init+0x92>
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	4a7d      	ldr	r2, [pc, #500]	@ (8001ec0 <HAL_I2C_Init+0x27c>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	bf94      	ite	ls
 8001cd0:	2301      	movls	r3, #1
 8001cd2:	2300      	movhi	r3, #0
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e0e7      	b.n	8001eae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	4a78      	ldr	r2, [pc, #480]	@ (8001ec4 <HAL_I2C_Init+0x280>)
 8001ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce6:	0c9b      	lsrs	r3, r3, #18
 8001ce8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	68ba      	ldr	r2, [r7, #8]
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	6a1b      	ldr	r3, [r3, #32]
 8001d04:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	4a6a      	ldr	r2, [pc, #424]	@ (8001eb8 <HAL_I2C_Init+0x274>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d802      	bhi.n	8001d18 <HAL_I2C_Init+0xd4>
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	3301      	adds	r3, #1
 8001d16:	e009      	b.n	8001d2c <HAL_I2C_Init+0xe8>
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001d1e:	fb02 f303 	mul.w	r3, r2, r3
 8001d22:	4a69      	ldr	r2, [pc, #420]	@ (8001ec8 <HAL_I2C_Init+0x284>)
 8001d24:	fba2 2303 	umull	r2, r3, r2, r3
 8001d28:	099b      	lsrs	r3, r3, #6
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	6812      	ldr	r2, [r2, #0]
 8001d30:	430b      	orrs	r3, r1
 8001d32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001d3e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	495c      	ldr	r1, [pc, #368]	@ (8001eb8 <HAL_I2C_Init+0x274>)
 8001d48:	428b      	cmp	r3, r1
 8001d4a:	d819      	bhi.n	8001d80 <HAL_I2C_Init+0x13c>
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	1e59      	subs	r1, r3, #1
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d5a:	1c59      	adds	r1, r3, #1
 8001d5c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001d60:	400b      	ands	r3, r1
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d00a      	beq.n	8001d7c <HAL_I2C_Init+0x138>
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	1e59      	subs	r1, r3, #1
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d74:	3301      	adds	r3, #1
 8001d76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d7a:	e051      	b.n	8001e20 <HAL_I2C_Init+0x1dc>
 8001d7c:	2304      	movs	r3, #4
 8001d7e:	e04f      	b.n	8001e20 <HAL_I2C_Init+0x1dc>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d111      	bne.n	8001dac <HAL_I2C_Init+0x168>
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	1e58      	subs	r0, r3, #1
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6859      	ldr	r1, [r3, #4]
 8001d90:	460b      	mov	r3, r1
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	440b      	add	r3, r1
 8001d96:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	bf0c      	ite	eq
 8001da4:	2301      	moveq	r3, #1
 8001da6:	2300      	movne	r3, #0
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	e012      	b.n	8001dd2 <HAL_I2C_Init+0x18e>
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	1e58      	subs	r0, r3, #1
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6859      	ldr	r1, [r3, #4]
 8001db4:	460b      	mov	r3, r1
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	440b      	add	r3, r1
 8001dba:	0099      	lsls	r1, r3, #2
 8001dbc:	440b      	add	r3, r1
 8001dbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	bf0c      	ite	eq
 8001dcc:	2301      	moveq	r3, #1
 8001dce:	2300      	movne	r3, #0
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <HAL_I2C_Init+0x196>
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e022      	b.n	8001e20 <HAL_I2C_Init+0x1dc>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10e      	bne.n	8001e00 <HAL_I2C_Init+0x1bc>
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	1e58      	subs	r0, r3, #1
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6859      	ldr	r1, [r3, #4]
 8001dea:	460b      	mov	r3, r1
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	440b      	add	r3, r1
 8001df0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001df4:	3301      	adds	r3, #1
 8001df6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001dfe:	e00f      	b.n	8001e20 <HAL_I2C_Init+0x1dc>
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	1e58      	subs	r0, r3, #1
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6859      	ldr	r1, [r3, #4]
 8001e08:	460b      	mov	r3, r1
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	440b      	add	r3, r1
 8001e0e:	0099      	lsls	r1, r3, #2
 8001e10:	440b      	add	r3, r1
 8001e12:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e16:	3301      	adds	r3, #1
 8001e18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e1c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e20:	6879      	ldr	r1, [r7, #4]
 8001e22:	6809      	ldr	r1, [r1, #0]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	69da      	ldr	r2, [r3, #28]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a1b      	ldr	r3, [r3, #32]
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	430a      	orrs	r2, r1
 8001e42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001e4e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	6911      	ldr	r1, [r2, #16]
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	68d2      	ldr	r2, [r2, #12]
 8001e5a:	4311      	orrs	r1, r2
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	6812      	ldr	r2, [r2, #0]
 8001e60:	430b      	orrs	r3, r1
 8001e62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	695a      	ldr	r2, [r3, #20]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	431a      	orrs	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f042 0201 	orr.w	r2, r2, #1
 8001e8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2220      	movs	r2, #32
 8001e9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	000186a0 	.word	0x000186a0
 8001ebc:	001e847f 	.word	0x001e847f
 8001ec0:	003d08ff 	.word	0x003d08ff
 8001ec4:	431bde83 	.word	0x431bde83
 8001ec8:	10624dd3 	.word	0x10624dd3

08001ecc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af02      	add	r7, sp, #8
 8001ed2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e101      	b.n	80020e2 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d106      	bne.n	8001efe <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f006 f8b3 	bl	8008064 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2203      	movs	r2, #3
 8001f02:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f0c:	d102      	bne.n	8001f14 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f002 fc94 	bl	8004846 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6818      	ldr	r0, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	7c1a      	ldrb	r2, [r3, #16]
 8001f26:	f88d 2000 	strb.w	r2, [sp]
 8001f2a:	3304      	adds	r3, #4
 8001f2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f2e:	f002 fb73 	bl	8004618 <USB_CoreInit>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d005      	beq.n	8001f44 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e0ce      	b.n	80020e2 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2100      	movs	r1, #0
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f002 fc8c 	bl	8004868 <USB_SetCurrentMode>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d005      	beq.n	8001f62 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2202      	movs	r2, #2
 8001f5a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e0bf      	b.n	80020e2 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f62:	2300      	movs	r3, #0
 8001f64:	73fb      	strb	r3, [r7, #15]
 8001f66:	e04a      	b.n	8001ffe <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f68:	7bfa      	ldrb	r2, [r7, #15]
 8001f6a:	6879      	ldr	r1, [r7, #4]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	4413      	add	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	440b      	add	r3, r1
 8001f76:	3315      	adds	r3, #21
 8001f78:	2201      	movs	r2, #1
 8001f7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f7c:	7bfa      	ldrb	r2, [r7, #15]
 8001f7e:	6879      	ldr	r1, [r7, #4]
 8001f80:	4613      	mov	r3, r2
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	4413      	add	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	440b      	add	r3, r1
 8001f8a:	3314      	adds	r3, #20
 8001f8c:	7bfa      	ldrb	r2, [r7, #15]
 8001f8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f90:	7bfa      	ldrb	r2, [r7, #15]
 8001f92:	7bfb      	ldrb	r3, [r7, #15]
 8001f94:	b298      	uxth	r0, r3
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	4413      	add	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	332e      	adds	r3, #46	@ 0x2e
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001fa8:	7bfa      	ldrb	r2, [r7, #15]
 8001faa:	6879      	ldr	r1, [r7, #4]
 8001fac:	4613      	mov	r3, r2
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	4413      	add	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	3318      	adds	r3, #24
 8001fb8:	2200      	movs	r2, #0
 8001fba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001fbc:	7bfa      	ldrb	r2, [r7, #15]
 8001fbe:	6879      	ldr	r1, [r7, #4]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	4413      	add	r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	440b      	add	r3, r1
 8001fca:	331c      	adds	r3, #28
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001fd0:	7bfa      	ldrb	r2, [r7, #15]
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	4413      	add	r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	440b      	add	r3, r1
 8001fde:	3320      	adds	r3, #32
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001fe4:	7bfa      	ldrb	r2, [r7, #15]
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	4413      	add	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	440b      	add	r3, r1
 8001ff2:	3324      	adds	r3, #36	@ 0x24
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ff8:	7bfb      	ldrb	r3, [r7, #15]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	73fb      	strb	r3, [r7, #15]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	791b      	ldrb	r3, [r3, #4]
 8002002:	7bfa      	ldrb	r2, [r7, #15]
 8002004:	429a      	cmp	r2, r3
 8002006:	d3af      	bcc.n	8001f68 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002008:	2300      	movs	r3, #0
 800200a:	73fb      	strb	r3, [r7, #15]
 800200c:	e044      	b.n	8002098 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800200e:	7bfa      	ldrb	r2, [r7, #15]
 8002010:	6879      	ldr	r1, [r7, #4]
 8002012:	4613      	mov	r3, r2
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	4413      	add	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	440b      	add	r3, r1
 800201c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002020:	2200      	movs	r2, #0
 8002022:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002024:	7bfa      	ldrb	r2, [r7, #15]
 8002026:	6879      	ldr	r1, [r7, #4]
 8002028:	4613      	mov	r3, r2
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	4413      	add	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	440b      	add	r3, r1
 8002032:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002036:	7bfa      	ldrb	r2, [r7, #15]
 8002038:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800203a:	7bfa      	ldrb	r2, [r7, #15]
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	4613      	mov	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	4413      	add	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	440b      	add	r3, r1
 8002048:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800204c:	2200      	movs	r2, #0
 800204e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002050:	7bfa      	ldrb	r2, [r7, #15]
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	4613      	mov	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	4413      	add	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	440b      	add	r3, r1
 800205e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002062:	2200      	movs	r2, #0
 8002064:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002066:	7bfa      	ldrb	r2, [r7, #15]
 8002068:	6879      	ldr	r1, [r7, #4]
 800206a:	4613      	mov	r3, r2
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	4413      	add	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	440b      	add	r3, r1
 8002074:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800207c:	7bfa      	ldrb	r2, [r7, #15]
 800207e:	6879      	ldr	r1, [r7, #4]
 8002080:	4613      	mov	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	4413      	add	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	440b      	add	r3, r1
 800208a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002092:	7bfb      	ldrb	r3, [r7, #15]
 8002094:	3301      	adds	r3, #1
 8002096:	73fb      	strb	r3, [r7, #15]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	791b      	ldrb	r3, [r3, #4]
 800209c:	7bfa      	ldrb	r2, [r7, #15]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d3b5      	bcc.n	800200e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6818      	ldr	r0, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	7c1a      	ldrb	r2, [r3, #16]
 80020aa:	f88d 2000 	strb.w	r2, [sp]
 80020ae:	3304      	adds	r3, #4
 80020b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020b2:	f002 fc25 	bl	8004900 <USB_DevInit>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d005      	beq.n	80020c8 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2202      	movs	r2, #2
 80020c0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e00c      	b.n	80020e2 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f003 fc6f 	bl	80059be <USB_DevDisconnect>

  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b084      	sub	sp, #16
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d101      	bne.n	8002106 <HAL_PCD_Start+0x1c>
 8002102:	2302      	movs	r3, #2
 8002104:	e022      	b.n	800214c <HAL_PCD_Start+0x62>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2201      	movs	r2, #1
 800210a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002116:	2b00      	cmp	r3, #0
 8002118:	d009      	beq.n	800212e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800211e:	2b01      	cmp	r3, #1
 8002120:	d105      	bne.n	800212e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002126:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f002 fb76 	bl	8004824 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4618      	mov	r0, r3
 800213e:	f003 fc1d 	bl	800597c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	3710      	adds	r7, #16
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002154:	b590      	push	{r4, r7, lr}
 8002156:	b08d      	sub	sp, #52	@ 0x34
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002162:	6a3b      	ldr	r3, [r7, #32]
 8002164:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4618      	mov	r0, r3
 800216c:	f003 fcdb 	bl	8005b26 <USB_GetMode>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	f040 848c 	bne.w	8002a90 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4618      	mov	r0, r3
 800217e:	f003 fc3f 	bl	8005a00 <USB_ReadInterrupts>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	f000 8482 	beq.w	8002a8e <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	0a1b      	lsrs	r3, r3, #8
 8002194:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f003 fc2c 	bl	8005a00 <USB_ReadInterrupts>
 80021a8:	4603      	mov	r3, r0
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d107      	bne.n	80021c2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	695a      	ldr	r2, [r3, #20]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f002 0202 	and.w	r2, r2, #2
 80021c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f003 fc1a 	bl	8005a00 <USB_ReadInterrupts>
 80021cc:	4603      	mov	r3, r0
 80021ce:	f003 0310 	and.w	r3, r3, #16
 80021d2:	2b10      	cmp	r3, #16
 80021d4:	d161      	bne.n	800229a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	699a      	ldr	r2, [r3, #24]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f022 0210 	bic.w	r2, r2, #16
 80021e4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80021e6:	6a3b      	ldr	r3, [r7, #32]
 80021e8:	6a1b      	ldr	r3, [r3, #32]
 80021ea:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	f003 020f 	and.w	r2, r3, #15
 80021f2:	4613      	mov	r3, r2
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	4413      	add	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	4413      	add	r3, r2
 8002202:	3304      	adds	r3, #4
 8002204:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	0c5b      	lsrs	r3, r3, #17
 800220a:	f003 030f 	and.w	r3, r3, #15
 800220e:	2b02      	cmp	r3, #2
 8002210:	d124      	bne.n	800225c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002218:	4013      	ands	r3, r2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d035      	beq.n	800228a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	091b      	lsrs	r3, r3, #4
 8002226:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002228:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800222c:	b29b      	uxth	r3, r3
 800222e:	461a      	mov	r2, r3
 8002230:	6a38      	ldr	r0, [r7, #32]
 8002232:	f003 fa51 	bl	80056d8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	68da      	ldr	r2, [r3, #12]
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	091b      	lsrs	r3, r3, #4
 800223e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002242:	441a      	add	r2, r3
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	695a      	ldr	r2, [r3, #20]
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	091b      	lsrs	r3, r3, #4
 8002250:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002254:	441a      	add	r2, r3
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	615a      	str	r2, [r3, #20]
 800225a:	e016      	b.n	800228a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	0c5b      	lsrs	r3, r3, #17
 8002260:	f003 030f 	and.w	r3, r3, #15
 8002264:	2b06      	cmp	r3, #6
 8002266:	d110      	bne.n	800228a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800226e:	2208      	movs	r2, #8
 8002270:	4619      	mov	r1, r3
 8002272:	6a38      	ldr	r0, [r7, #32]
 8002274:	f003 fa30 	bl	80056d8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	695a      	ldr	r2, [r3, #20]
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	091b      	lsrs	r3, r3, #4
 8002280:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002284:	441a      	add	r2, r3
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	699a      	ldr	r2, [r3, #24]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f042 0210 	orr.w	r2, r2, #16
 8002298:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4618      	mov	r0, r3
 80022a0:	f003 fbae 	bl	8005a00 <USB_ReadInterrupts>
 80022a4:	4603      	mov	r3, r0
 80022a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022aa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80022ae:	f040 80a7 	bne.w	8002400 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80022b2:	2300      	movs	r3, #0
 80022b4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f003 fbb3 	bl	8005a26 <USB_ReadDevAllOutEpInterrupt>
 80022c0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80022c2:	e099      	b.n	80023f8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80022c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f000 808e 	beq.w	80023ec <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	4611      	mov	r1, r2
 80022da:	4618      	mov	r0, r3
 80022dc:	f003 fbd7 	bl	8005a8e <USB_ReadDevOutEPInterrupt>
 80022e0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d00c      	beq.n	8002306 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80022ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ee:	015a      	lsls	r2, r3, #5
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	4413      	add	r3, r2
 80022f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022f8:	461a      	mov	r2, r3
 80022fa:	2301      	movs	r3, #1
 80022fc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80022fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 fea3 	bl	800304c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	f003 0308 	and.w	r3, r3, #8
 800230c:	2b00      	cmp	r3, #0
 800230e:	d00c      	beq.n	800232a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002312:	015a      	lsls	r2, r3, #5
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	4413      	add	r3, r2
 8002318:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800231c:	461a      	mov	r2, r3
 800231e:	2308      	movs	r3, #8
 8002320:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002322:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f000 ff79 	bl	800321c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	f003 0310 	and.w	r3, r3, #16
 8002330:	2b00      	cmp	r3, #0
 8002332:	d008      	beq.n	8002346 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002336:	015a      	lsls	r2, r3, #5
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	4413      	add	r3, r2
 800233c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002340:	461a      	mov	r2, r3
 8002342:	2310      	movs	r3, #16
 8002344:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d030      	beq.n	80023b2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002350:	6a3b      	ldr	r3, [r7, #32]
 8002352:	695b      	ldr	r3, [r3, #20]
 8002354:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002358:	2b80      	cmp	r3, #128	@ 0x80
 800235a:	d109      	bne.n	8002370 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	69fa      	ldr	r2, [r7, #28]
 8002366:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800236a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800236e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002370:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002372:	4613      	mov	r3, r2
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	4413      	add	r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	4413      	add	r3, r2
 8002382:	3304      	adds	r3, #4
 8002384:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	78db      	ldrb	r3, [r3, #3]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d108      	bne.n	80023a0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	2200      	movs	r2, #0
 8002392:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002396:	b2db      	uxtb	r3, r3
 8002398:	4619      	mov	r1, r3
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f005 ff5e 	bl	800825c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80023a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a2:	015a      	lsls	r2, r3, #5
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	4413      	add	r3, r2
 80023a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023ac:	461a      	mov	r2, r3
 80023ae:	2302      	movs	r3, #2
 80023b0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	f003 0320 	and.w	r3, r3, #32
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d008      	beq.n	80023ce <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80023bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023be:	015a      	lsls	r2, r3, #5
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	4413      	add	r3, r2
 80023c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023c8:	461a      	mov	r2, r3
 80023ca:	2320      	movs	r3, #32
 80023cc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d009      	beq.n	80023ec <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80023d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023da:	015a      	lsls	r2, r3, #5
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	4413      	add	r3, r2
 80023e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023e4:	461a      	mov	r2, r3
 80023e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80023ea:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80023ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ee:	3301      	adds	r3, #1
 80023f0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80023f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023f4:	085b      	lsrs	r3, r3, #1
 80023f6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80023f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f47f af62 	bne.w	80022c4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f003 fafb 	bl	8005a00 <USB_ReadInterrupts>
 800240a:	4603      	mov	r3, r0
 800240c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002410:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002414:	f040 80db 	bne.w	80025ce <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f003 fb1c 	bl	8005a5a <USB_ReadDevAllInEpInterrupt>
 8002422:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002424:	2300      	movs	r3, #0
 8002426:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002428:	e0cd      	b.n	80025c6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800242a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	2b00      	cmp	r3, #0
 8002432:	f000 80c2 	beq.w	80025ba <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800243c:	b2d2      	uxtb	r2, r2
 800243e:	4611      	mov	r1, r2
 8002440:	4618      	mov	r0, r3
 8002442:	f003 fb42 	bl	8005aca <USB_ReadDevInEPInterrupt>
 8002446:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b00      	cmp	r3, #0
 8002450:	d057      	beq.n	8002502 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002454:	f003 030f 	and.w	r3, r3, #15
 8002458:	2201      	movs	r2, #1
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002466:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	43db      	mvns	r3, r3
 800246c:	69f9      	ldr	r1, [r7, #28]
 800246e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002472:	4013      	ands	r3, r2
 8002474:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002478:	015a      	lsls	r2, r3, #5
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	4413      	add	r3, r2
 800247e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002482:	461a      	mov	r2, r3
 8002484:	2301      	movs	r3, #1
 8002486:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	799b      	ldrb	r3, [r3, #6]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d132      	bne.n	80024f6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002490:	6879      	ldr	r1, [r7, #4]
 8002492:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002494:	4613      	mov	r3, r2
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	4413      	add	r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	440b      	add	r3, r1
 800249e:	3320      	adds	r3, #32
 80024a0:	6819      	ldr	r1, [r3, #0]
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024a6:	4613      	mov	r3, r2
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	4413      	add	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4403      	add	r3, r0
 80024b0:	331c      	adds	r3, #28
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4419      	add	r1, r3
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024ba:	4613      	mov	r3, r2
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	4413      	add	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	4403      	add	r3, r0
 80024c4:	3320      	adds	r3, #32
 80024c6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80024c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d113      	bne.n	80024f6 <HAL_PCD_IRQHandler+0x3a2>
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024d2:	4613      	mov	r3, r2
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	4413      	add	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	440b      	add	r3, r1
 80024dc:	3324      	adds	r3, #36	@ 0x24
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d108      	bne.n	80024f6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6818      	ldr	r0, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80024ee:	461a      	mov	r2, r3
 80024f0:	2101      	movs	r1, #1
 80024f2:	f003 fb49 	bl	8005b88 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80024f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	4619      	mov	r1, r3
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f005 fe32 	bl	8008166 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	f003 0308 	and.w	r3, r3, #8
 8002508:	2b00      	cmp	r3, #0
 800250a:	d008      	beq.n	800251e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800250c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800250e:	015a      	lsls	r2, r3, #5
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	4413      	add	r3, r2
 8002514:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002518:	461a      	mov	r2, r3
 800251a:	2308      	movs	r3, #8
 800251c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	f003 0310 	and.w	r3, r3, #16
 8002524:	2b00      	cmp	r3, #0
 8002526:	d008      	beq.n	800253a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800252a:	015a      	lsls	r2, r3, #5
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	4413      	add	r3, r2
 8002530:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002534:	461a      	mov	r2, r3
 8002536:	2310      	movs	r3, #16
 8002538:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002540:	2b00      	cmp	r3, #0
 8002542:	d008      	beq.n	8002556 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002546:	015a      	lsls	r2, r3, #5
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	4413      	add	r3, r2
 800254c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002550:	461a      	mov	r2, r3
 8002552:	2340      	movs	r3, #64	@ 0x40
 8002554:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d023      	beq.n	80025a8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002560:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002562:	6a38      	ldr	r0, [r7, #32]
 8002564:	f002 fb30 	bl	8004bc8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002568:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800256a:	4613      	mov	r3, r2
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	4413      	add	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	3310      	adds	r3, #16
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	4413      	add	r3, r2
 8002578:	3304      	adds	r3, #4
 800257a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	78db      	ldrb	r3, [r3, #3]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d108      	bne.n	8002596 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	2200      	movs	r2, #0
 8002588:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800258a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800258c:	b2db      	uxtb	r3, r3
 800258e:	4619      	mov	r1, r3
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f005 fe75 	bl	8008280 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002598:	015a      	lsls	r2, r3, #5
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	4413      	add	r3, r2
 800259e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80025a2:	461a      	mov	r2, r3
 80025a4:	2302      	movs	r3, #2
 80025a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d003      	beq.n	80025ba <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80025b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f000 fcbd 	bl	8002f34 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80025ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025bc:	3301      	adds	r3, #1
 80025be:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80025c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025c2:	085b      	lsrs	r3, r3, #1
 80025c4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80025c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f47f af2e 	bne.w	800242a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f003 fa14 	bl	8005a00 <USB_ReadInterrupts>
 80025d8:	4603      	mov	r3, r0
 80025da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80025de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80025e2:	d122      	bne.n	800262a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	69fa      	ldr	r2, [r7, #28]
 80025ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80025f2:	f023 0301 	bic.w	r3, r3, #1
 80025f6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d108      	bne.n	8002614 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800260a:	2100      	movs	r1, #0
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f000 fea3 	bl	8003358 <HAL_PCDEx_LPM_Callback>
 8002612:	e002      	b.n	800261a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f005 fe13 	bl	8008240 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	695a      	ldr	r2, [r3, #20]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002628:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4618      	mov	r0, r3
 8002630:	f003 f9e6 	bl	8005a00 <USB_ReadInterrupts>
 8002634:	4603      	mov	r3, r0
 8002636:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800263a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800263e:	d112      	bne.n	8002666 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	2b01      	cmp	r3, #1
 800264e:	d102      	bne.n	8002656 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f005 fdcf 	bl	80081f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	695a      	ldr	r2, [r3, #20]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002664:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f003 f9c8 	bl	8005a00 <USB_ReadInterrupts>
 8002670:	4603      	mov	r3, r0
 8002672:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002676:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800267a:	f040 80b7 	bne.w	80027ec <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	69fa      	ldr	r2, [r7, #28]
 8002688:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800268c:	f023 0301 	bic.w	r3, r3, #1
 8002690:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2110      	movs	r1, #16
 8002698:	4618      	mov	r0, r3
 800269a:	f002 fa95 	bl	8004bc8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800269e:	2300      	movs	r3, #0
 80026a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026a2:	e046      	b.n	8002732 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80026a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026a6:	015a      	lsls	r2, r3, #5
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	4413      	add	r3, r2
 80026ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80026b0:	461a      	mov	r2, r3
 80026b2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80026b6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80026b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026ba:	015a      	lsls	r2, r3, #5
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	4413      	add	r3, r2
 80026c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80026c8:	0151      	lsls	r1, r2, #5
 80026ca:	69fa      	ldr	r2, [r7, #28]
 80026cc:	440a      	add	r2, r1
 80026ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80026d2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80026d6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80026d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026da:	015a      	lsls	r2, r3, #5
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	4413      	add	r3, r2
 80026e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026e4:	461a      	mov	r2, r3
 80026e6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80026ea:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80026ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026ee:	015a      	lsls	r2, r3, #5
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	4413      	add	r3, r2
 80026f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80026fc:	0151      	lsls	r1, r2, #5
 80026fe:	69fa      	ldr	r2, [r7, #28]
 8002700:	440a      	add	r2, r1
 8002702:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002706:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800270a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800270c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800270e:	015a      	lsls	r2, r3, #5
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	4413      	add	r3, r2
 8002714:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800271c:	0151      	lsls	r1, r2, #5
 800271e:	69fa      	ldr	r2, [r7, #28]
 8002720:	440a      	add	r2, r1
 8002722:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002726:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800272a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800272c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800272e:	3301      	adds	r3, #1
 8002730:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	791b      	ldrb	r3, [r3, #4]
 8002736:	461a      	mov	r2, r3
 8002738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800273a:	4293      	cmp	r3, r2
 800273c:	d3b2      	bcc.n	80026a4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002744:	69db      	ldr	r3, [r3, #28]
 8002746:	69fa      	ldr	r2, [r7, #28]
 8002748:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800274c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002750:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	7bdb      	ldrb	r3, [r3, #15]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d016      	beq.n	8002788 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002760:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002764:	69fa      	ldr	r2, [r7, #28]
 8002766:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800276a:	f043 030b 	orr.w	r3, r3, #11
 800276e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800277a:	69fa      	ldr	r2, [r7, #28]
 800277c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002780:	f043 030b 	orr.w	r3, r3, #11
 8002784:	6453      	str	r3, [r2, #68]	@ 0x44
 8002786:	e015      	b.n	80027b4 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	69fa      	ldr	r2, [r7, #28]
 8002792:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002796:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800279a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800279e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	69fa      	ldr	r2, [r7, #28]
 80027aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80027ae:	f043 030b 	orr.w	r3, r3, #11
 80027b2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	69fa      	ldr	r2, [r7, #28]
 80027be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80027c2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80027c6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6818      	ldr	r0, [r3, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80027d6:	461a      	mov	r2, r3
 80027d8:	f003 f9d6 	bl	8005b88 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	695a      	ldr	r2, [r3, #20]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80027ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f003 f905 	bl	8005a00 <USB_ReadInterrupts>
 80027f6:	4603      	mov	r3, r0
 80027f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002800:	d123      	bne.n	800284a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4618      	mov	r0, r3
 8002808:	f003 f99b 	bl	8005b42 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4618      	mov	r0, r3
 8002812:	f002 fa52 	bl	8004cba <USB_GetDevSpeed>
 8002816:	4603      	mov	r3, r0
 8002818:	461a      	mov	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681c      	ldr	r4, [r3, #0]
 8002822:	f001 f9c9 	bl	8003bb8 <HAL_RCC_GetHCLKFreq>
 8002826:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800282c:	461a      	mov	r2, r3
 800282e:	4620      	mov	r0, r4
 8002830:	f001 ff56 	bl	80046e0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f005 fcbe 	bl	80081b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	695a      	ldr	r2, [r3, #20]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002848:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4618      	mov	r0, r3
 8002850:	f003 f8d6 	bl	8005a00 <USB_ReadInterrupts>
 8002854:	4603      	mov	r3, r0
 8002856:	f003 0308 	and.w	r3, r3, #8
 800285a:	2b08      	cmp	r3, #8
 800285c:	d10a      	bne.n	8002874 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f005 fc9b 	bl	800819a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	695a      	ldr	r2, [r3, #20]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f002 0208 	and.w	r2, r2, #8
 8002872:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4618      	mov	r0, r3
 800287a:	f003 f8c1 	bl	8005a00 <USB_ReadInterrupts>
 800287e:	4603      	mov	r3, r0
 8002880:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002884:	2b80      	cmp	r3, #128	@ 0x80
 8002886:	d123      	bne.n	80028d0 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002888:	6a3b      	ldr	r3, [r7, #32]
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002890:	6a3b      	ldr	r3, [r7, #32]
 8002892:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002894:	2301      	movs	r3, #1
 8002896:	627b      	str	r3, [r7, #36]	@ 0x24
 8002898:	e014      	b.n	80028c4 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800289a:	6879      	ldr	r1, [r7, #4]
 800289c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800289e:	4613      	mov	r3, r2
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	4413      	add	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	440b      	add	r3, r1
 80028a8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d105      	bne.n	80028be <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80028b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	4619      	mov	r1, r3
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 fb0a 	bl	8002ed2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c0:	3301      	adds	r3, #1
 80028c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	791b      	ldrb	r3, [r3, #4]
 80028c8:	461a      	mov	r2, r3
 80028ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d3e4      	bcc.n	800289a <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f003 f893 	bl	8005a00 <USB_ReadInterrupts>
 80028da:	4603      	mov	r3, r0
 80028dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80028e4:	d13c      	bne.n	8002960 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028e6:	2301      	movs	r3, #1
 80028e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80028ea:	e02b      	b.n	8002944 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80028ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ee:	015a      	lsls	r2, r3, #5
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	4413      	add	r3, r2
 80028f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80028fc:	6879      	ldr	r1, [r7, #4]
 80028fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002900:	4613      	mov	r3, r2
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	4413      	add	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	440b      	add	r3, r1
 800290a:	3318      	adds	r3, #24
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d115      	bne.n	800293e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002912:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002914:	2b00      	cmp	r3, #0
 8002916:	da12      	bge.n	800293e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002918:	6879      	ldr	r1, [r7, #4]
 800291a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800291c:	4613      	mov	r3, r2
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	4413      	add	r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	440b      	add	r3, r1
 8002926:	3317      	adds	r3, #23
 8002928:	2201      	movs	r2, #1
 800292a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800292c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292e:	b2db      	uxtb	r3, r3
 8002930:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002934:	b2db      	uxtb	r3, r3
 8002936:	4619      	mov	r1, r3
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f000 faca 	bl	8002ed2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800293e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002940:	3301      	adds	r3, #1
 8002942:	627b      	str	r3, [r7, #36]	@ 0x24
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	791b      	ldrb	r3, [r3, #4]
 8002948:	461a      	mov	r2, r3
 800294a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800294c:	4293      	cmp	r3, r2
 800294e:	d3cd      	bcc.n	80028ec <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	695a      	ldr	r2, [r3, #20]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800295e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4618      	mov	r0, r3
 8002966:	f003 f84b 	bl	8005a00 <USB_ReadInterrupts>
 800296a:	4603      	mov	r3, r0
 800296c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002970:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002974:	d156      	bne.n	8002a24 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002976:	2301      	movs	r3, #1
 8002978:	627b      	str	r3, [r7, #36]	@ 0x24
 800297a:	e045      	b.n	8002a08 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800297c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800297e:	015a      	lsls	r2, r3, #5
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	4413      	add	r3, r2
 8002984:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800298c:	6879      	ldr	r1, [r7, #4]
 800298e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002990:	4613      	mov	r3, r2
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	4413      	add	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	440b      	add	r3, r1
 800299a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d12e      	bne.n	8002a02 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80029a4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	da2b      	bge.n	8002a02 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80029b6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d121      	bne.n	8002a02 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80029be:	6879      	ldr	r1, [r7, #4]
 80029c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029c2:	4613      	mov	r3, r2
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	4413      	add	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	440b      	add	r3, r1
 80029cc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80029d0:	2201      	movs	r2, #1
 80029d2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80029d4:	6a3b      	ldr	r3, [r7, #32]
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80029dc:	6a3b      	ldr	r3, [r7, #32]
 80029de:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80029e0:	6a3b      	ldr	r3, [r7, #32]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d10a      	bne.n	8002a02 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	69fa      	ldr	r2, [r7, #28]
 80029f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80029fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029fe:	6053      	str	r3, [r2, #4]
            break;
 8002a00:	e008      	b.n	8002a14 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a04:	3301      	adds	r3, #1
 8002a06:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	791b      	ldrb	r3, [r3, #4]
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d3b3      	bcc.n	800297c <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	695a      	ldr	r2, [r3, #20]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002a22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f002 ffe9 	bl	8005a00 <USB_ReadInterrupts>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002a34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a38:	d10a      	bne.n	8002a50 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f005 fc32 	bl	80082a4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	695a      	ldr	r2, [r3, #20]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002a4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f002 ffd3 	bl	8005a00 <USB_ReadInterrupts>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	f003 0304 	and.w	r3, r3, #4
 8002a60:	2b04      	cmp	r3, #4
 8002a62:	d115      	bne.n	8002a90 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	f003 0304 	and.w	r3, r3, #4
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d002      	beq.n	8002a7c <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f005 fc22 	bl	80082c0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6859      	ldr	r1, [r3, #4]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	605a      	str	r2, [r3, #4]
 8002a8c:	e000      	b.n	8002a90 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002a8e:	bf00      	nop
    }
  }
}
 8002a90:	3734      	adds	r7, #52	@ 0x34
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd90      	pop	{r4, r7, pc}

08002a96 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b082      	sub	sp, #8
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d101      	bne.n	8002ab0 <HAL_PCD_SetAddress+0x1a>
 8002aac:	2302      	movs	r3, #2
 8002aae:	e012      	b.n	8002ad6 <HAL_PCD_SetAddress+0x40>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	78fa      	ldrb	r2, [r7, #3]
 8002abc:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	78fa      	ldrb	r2, [r7, #3]
 8002ac4:	4611      	mov	r1, r2
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f002 ff32 	bl	8005930 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b084      	sub	sp, #16
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
 8002ae6:	4608      	mov	r0, r1
 8002ae8:	4611      	mov	r1, r2
 8002aea:	461a      	mov	r2, r3
 8002aec:	4603      	mov	r3, r0
 8002aee:	70fb      	strb	r3, [r7, #3]
 8002af0:	460b      	mov	r3, r1
 8002af2:	803b      	strh	r3, [r7, #0]
 8002af4:	4613      	mov	r3, r2
 8002af6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002af8:	2300      	movs	r3, #0
 8002afa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002afc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	da0f      	bge.n	8002b24 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b04:	78fb      	ldrb	r3, [r7, #3]
 8002b06:	f003 020f 	and.w	r2, r3, #15
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	00db      	lsls	r3, r3, #3
 8002b0e:	4413      	add	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	3310      	adds	r3, #16
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	4413      	add	r3, r2
 8002b18:	3304      	adds	r3, #4
 8002b1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	705a      	strb	r2, [r3, #1]
 8002b22:	e00f      	b.n	8002b44 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b24:	78fb      	ldrb	r3, [r7, #3]
 8002b26:	f003 020f 	and.w	r2, r3, #15
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	4413      	add	r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	4413      	add	r3, r2
 8002b3a:	3304      	adds	r3, #4
 8002b3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002b44:	78fb      	ldrb	r3, [r7, #3]
 8002b46:	f003 030f 	and.w	r3, r3, #15
 8002b4a:	b2da      	uxtb	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002b50:	883b      	ldrh	r3, [r7, #0]
 8002b52:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	78ba      	ldrb	r2, [r7, #2]
 8002b5e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	785b      	ldrb	r3, [r3, #1]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d004      	beq.n	8002b72 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002b72:	78bb      	ldrb	r3, [r7, #2]
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d102      	bne.n	8002b7e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d101      	bne.n	8002b8c <HAL_PCD_EP_Open+0xae>
 8002b88:	2302      	movs	r3, #2
 8002b8a:	e00e      	b.n	8002baa <HAL_PCD_EP_Open+0xcc>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68f9      	ldr	r1, [r7, #12]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f002 f8b2 	bl	8004d04 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002ba8:	7afb      	ldrb	r3, [r7, #11]
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b084      	sub	sp, #16
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
 8002bba:	460b      	mov	r3, r1
 8002bbc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002bbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	da0f      	bge.n	8002be6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bc6:	78fb      	ldrb	r3, [r7, #3]
 8002bc8:	f003 020f 	and.w	r2, r3, #15
 8002bcc:	4613      	mov	r3, r2
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	4413      	add	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	3310      	adds	r3, #16
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	4413      	add	r3, r2
 8002bda:	3304      	adds	r3, #4
 8002bdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2201      	movs	r2, #1
 8002be2:	705a      	strb	r2, [r3, #1]
 8002be4:	e00f      	b.n	8002c06 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002be6:	78fb      	ldrb	r3, [r7, #3]
 8002be8:	f003 020f 	and.w	r2, r3, #15
 8002bec:	4613      	mov	r3, r2
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	4413      	add	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	3304      	adds	r3, #4
 8002bfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2200      	movs	r2, #0
 8002c04:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c06:	78fb      	ldrb	r3, [r7, #3]
 8002c08:	f003 030f 	and.w	r3, r3, #15
 8002c0c:	b2da      	uxtb	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d101      	bne.n	8002c20 <HAL_PCD_EP_Close+0x6e>
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	e00e      	b.n	8002c3e <HAL_PCD_EP_Close+0x8c>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68f9      	ldr	r1, [r7, #12]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f002 f8f0 	bl	8004e14 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b086      	sub	sp, #24
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	60f8      	str	r0, [r7, #12]
 8002c4e:	607a      	str	r2, [r7, #4]
 8002c50:	603b      	str	r3, [r7, #0]
 8002c52:	460b      	mov	r3, r1
 8002c54:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c56:	7afb      	ldrb	r3, [r7, #11]
 8002c58:	f003 020f 	and.w	r2, r3, #15
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	4413      	add	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	3304      	adds	r3, #4
 8002c6e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	2200      	movs	r2, #0
 8002c86:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c88:	7afb      	ldrb	r3, [r7, #11]
 8002c8a:	f003 030f 	and.w	r3, r3, #15
 8002c8e:	b2da      	uxtb	r2, r3
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	799b      	ldrb	r3, [r3, #6]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d102      	bne.n	8002ca2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6818      	ldr	r0, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	799b      	ldrb	r3, [r3, #6]
 8002caa:	461a      	mov	r2, r3
 8002cac:	6979      	ldr	r1, [r7, #20]
 8002cae:	f002 f98d 	bl	8004fcc <USB_EPStartXfer>

  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3718      	adds	r7, #24
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002cc8:	78fb      	ldrb	r3, [r7, #3]
 8002cca:	f003 020f 	and.w	r2, r3, #15
 8002cce:	6879      	ldr	r1, [r7, #4]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	4413      	add	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	440b      	add	r3, r1
 8002cda:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002cde:	681b      	ldr	r3, [r3, #0]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	607a      	str	r2, [r7, #4]
 8002cf6:	603b      	str	r3, [r7, #0]
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cfc:	7afb      	ldrb	r3, [r7, #11]
 8002cfe:	f003 020f 	and.w	r2, r3, #15
 8002d02:	4613      	mov	r3, r2
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	4413      	add	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	3310      	adds	r3, #16
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	4413      	add	r3, r2
 8002d10:	3304      	adds	r3, #4
 8002d12:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	2200      	movs	r2, #0
 8002d24:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d2c:	7afb      	ldrb	r3, [r7, #11]
 8002d2e:	f003 030f 	and.w	r3, r3, #15
 8002d32:	b2da      	uxtb	r2, r3
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	799b      	ldrb	r3, [r3, #6]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d102      	bne.n	8002d46 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6818      	ldr	r0, [r3, #0]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	799b      	ldrb	r3, [r3, #6]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	6979      	ldr	r1, [r7, #20]
 8002d52:	f002 f93b 	bl	8004fcc <USB_EPStartXfer>

  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3718      	adds	r7, #24
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	460b      	mov	r3, r1
 8002d6a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002d6c:	78fb      	ldrb	r3, [r7, #3]
 8002d6e:	f003 030f 	and.w	r3, r3, #15
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	7912      	ldrb	r2, [r2, #4]
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d901      	bls.n	8002d7e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e04f      	b.n	8002e1e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	da0f      	bge.n	8002da6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d86:	78fb      	ldrb	r3, [r7, #3]
 8002d88:	f003 020f 	and.w	r2, r3, #15
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	4413      	add	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	3310      	adds	r3, #16
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	4413      	add	r3, r2
 8002d9a:	3304      	adds	r3, #4
 8002d9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2201      	movs	r2, #1
 8002da2:	705a      	strb	r2, [r3, #1]
 8002da4:	e00d      	b.n	8002dc2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002da6:	78fa      	ldrb	r2, [r7, #3]
 8002da8:	4613      	mov	r3, r2
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	4413      	add	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	4413      	add	r3, r2
 8002db8:	3304      	adds	r3, #4
 8002dba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dc8:	78fb      	ldrb	r3, [r7, #3]
 8002dca:	f003 030f 	and.w	r3, r3, #15
 8002dce:	b2da      	uxtb	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d101      	bne.n	8002de2 <HAL_PCD_EP_SetStall+0x82>
 8002dde:	2302      	movs	r3, #2
 8002de0:	e01d      	b.n	8002e1e <HAL_PCD_EP_SetStall+0xbe>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68f9      	ldr	r1, [r7, #12]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f002 fcc9 	bl	8005788 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002df6:	78fb      	ldrb	r3, [r7, #3]
 8002df8:	f003 030f 	and.w	r3, r3, #15
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d109      	bne.n	8002e14 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6818      	ldr	r0, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	7999      	ldrb	r1, [r3, #6]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002e0e:	461a      	mov	r2, r3
 8002e10:	f002 feba 	bl	8005b88 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b084      	sub	sp, #16
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
 8002e2e:	460b      	mov	r3, r1
 8002e30:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e32:	78fb      	ldrb	r3, [r7, #3]
 8002e34:	f003 030f 	and.w	r3, r3, #15
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	7912      	ldrb	r2, [r2, #4]
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d901      	bls.n	8002e44 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e042      	b.n	8002eca <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	da0f      	bge.n	8002e6c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e4c:	78fb      	ldrb	r3, [r7, #3]
 8002e4e:	f003 020f 	and.w	r2, r3, #15
 8002e52:	4613      	mov	r3, r2
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	4413      	add	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	3310      	adds	r3, #16
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	4413      	add	r3, r2
 8002e60:	3304      	adds	r3, #4
 8002e62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2201      	movs	r2, #1
 8002e68:	705a      	strb	r2, [r3, #1]
 8002e6a:	e00f      	b.n	8002e8c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e6c:	78fb      	ldrb	r3, [r7, #3]
 8002e6e:	f003 020f 	and.w	r2, r3, #15
 8002e72:	4613      	mov	r3, r2
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	4413      	add	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	4413      	add	r3, r2
 8002e82:	3304      	adds	r3, #4
 8002e84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e92:	78fb      	ldrb	r3, [r7, #3]
 8002e94:	f003 030f 	and.w	r3, r3, #15
 8002e98:	b2da      	uxtb	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d101      	bne.n	8002eac <HAL_PCD_EP_ClrStall+0x86>
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	e00e      	b.n	8002eca <HAL_PCD_EP_ClrStall+0xa4>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68f9      	ldr	r1, [r7, #12]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f002 fcd2 	bl	8005864 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3710      	adds	r7, #16
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b084      	sub	sp, #16
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
 8002eda:	460b      	mov	r3, r1
 8002edc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002ede:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	da0c      	bge.n	8002f00 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ee6:	78fb      	ldrb	r3, [r7, #3]
 8002ee8:	f003 020f 	and.w	r2, r3, #15
 8002eec:	4613      	mov	r3, r2
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	4413      	add	r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	3310      	adds	r3, #16
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	4413      	add	r3, r2
 8002efa:	3304      	adds	r3, #4
 8002efc:	60fb      	str	r3, [r7, #12]
 8002efe:	e00c      	b.n	8002f1a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f00:	78fb      	ldrb	r3, [r7, #3]
 8002f02:	f003 020f 	and.w	r2, r3, #15
 8002f06:	4613      	mov	r3, r2
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	4413      	add	r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	4413      	add	r3, r2
 8002f16:	3304      	adds	r3, #4
 8002f18:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68f9      	ldr	r1, [r7, #12]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f002 faf1 	bl	8005508 <USB_EPStopXfer>
 8002f26:	4603      	mov	r3, r0
 8002f28:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002f2a:	7afb      	ldrb	r3, [r7, #11]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b08a      	sub	sp, #40	@ 0x28
 8002f38:	af02      	add	r7, sp, #8
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002f48:	683a      	ldr	r2, [r7, #0]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	4413      	add	r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	3310      	adds	r3, #16
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	4413      	add	r3, r2
 8002f58:	3304      	adds	r3, #4
 8002f5a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	695a      	ldr	r2, [r3, #20]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d901      	bls.n	8002f6c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e06b      	b.n	8003044 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	691a      	ldr	r2, [r3, #16]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	695b      	ldr	r3, [r3, #20]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	69fa      	ldr	r2, [r7, #28]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d902      	bls.n	8002f88 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	3303      	adds	r3, #3
 8002f8c:	089b      	lsrs	r3, r3, #2
 8002f8e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f90:	e02a      	b.n	8002fe8 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	691a      	ldr	r2, [r3, #16]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	69fa      	ldr	r2, [r7, #28]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d902      	bls.n	8002fae <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	3303      	adds	r3, #3
 8002fb2:	089b      	lsrs	r3, r3, #2
 8002fb4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	68d9      	ldr	r1, [r3, #12]
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	b2da      	uxtb	r2, r3
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002fc6:	9300      	str	r3, [sp, #0]
 8002fc8:	4603      	mov	r3, r0
 8002fca:	6978      	ldr	r0, [r7, #20]
 8002fcc:	f002 fb46 	bl	800565c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	68da      	ldr	r2, [r3, #12]
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	441a      	add	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	695a      	ldr	r2, [r3, #20]
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	441a      	add	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	015a      	lsls	r2, r3, #5
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	4413      	add	r3, r2
 8002ff0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d809      	bhi.n	8003012 <PCD_WriteEmptyTxFifo+0xde>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	695a      	ldr	r2, [r3, #20]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003006:	429a      	cmp	r2, r3
 8003008:	d203      	bcs.n	8003012 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1bf      	bne.n	8002f92 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	691a      	ldr	r2, [r3, #16]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	429a      	cmp	r2, r3
 800301c:	d811      	bhi.n	8003042 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	f003 030f 	and.w	r3, r3, #15
 8003024:	2201      	movs	r2, #1
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003032:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	43db      	mvns	r3, r3
 8003038:	6939      	ldr	r1, [r7, #16]
 800303a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800303e:	4013      	ands	r3, r2
 8003040:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3720      	adds	r7, #32
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b088      	sub	sp, #32
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	333c      	adds	r3, #60	@ 0x3c
 8003064:	3304      	adds	r3, #4
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	015a      	lsls	r2, r3, #5
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	4413      	add	r3, r2
 8003072:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	799b      	ldrb	r3, [r3, #6]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d17b      	bne.n	800317a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	f003 0308 	and.w	r3, r3, #8
 8003088:	2b00      	cmp	r3, #0
 800308a:	d015      	beq.n	80030b8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	4a61      	ldr	r2, [pc, #388]	@ (8003214 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003090:	4293      	cmp	r3, r2
 8003092:	f240 80b9 	bls.w	8003208 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 80b3 	beq.w	8003208 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	015a      	lsls	r2, r3, #5
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	4413      	add	r3, r2
 80030aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030ae:	461a      	mov	r2, r3
 80030b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030b4:	6093      	str	r3, [r2, #8]
 80030b6:	e0a7      	b.n	8003208 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	f003 0320 	and.w	r3, r3, #32
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d009      	beq.n	80030d6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	015a      	lsls	r2, r3, #5
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	4413      	add	r3, r2
 80030ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030ce:	461a      	mov	r2, r3
 80030d0:	2320      	movs	r3, #32
 80030d2:	6093      	str	r3, [r2, #8]
 80030d4:	e098      	b.n	8003208 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f040 8093 	bne.w	8003208 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	4a4b      	ldr	r2, [pc, #300]	@ (8003214 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d90f      	bls.n	800310a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00a      	beq.n	800310a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	015a      	lsls	r2, r3, #5
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	4413      	add	r3, r2
 80030fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003100:	461a      	mov	r2, r3
 8003102:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003106:	6093      	str	r3, [r2, #8]
 8003108:	e07e      	b.n	8003208 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800310a:	683a      	ldr	r2, [r7, #0]
 800310c:	4613      	mov	r3, r2
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	4413      	add	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	4413      	add	r3, r2
 800311c:	3304      	adds	r3, #4
 800311e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6a1a      	ldr	r2, [r3, #32]
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	0159      	lsls	r1, r3, #5
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	440b      	add	r3, r1
 800312c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003136:	1ad2      	subs	r2, r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d114      	bne.n	800316c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d109      	bne.n	800315e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6818      	ldr	r0, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003154:	461a      	mov	r2, r3
 8003156:	2101      	movs	r1, #1
 8003158:	f002 fd16 	bl	8005b88 <USB_EP0_OutStart>
 800315c:	e006      	b.n	800316c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	68da      	ldr	r2, [r3, #12]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	441a      	add	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	b2db      	uxtb	r3, r3
 8003170:	4619      	mov	r1, r3
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f004 ffdc 	bl	8008130 <HAL_PCD_DataOutStageCallback>
 8003178:	e046      	b.n	8003208 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	4a26      	ldr	r2, [pc, #152]	@ (8003218 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d124      	bne.n	80031cc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00a      	beq.n	80031a2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	015a      	lsls	r2, r3, #5
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	4413      	add	r3, r2
 8003194:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003198:	461a      	mov	r2, r3
 800319a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800319e:	6093      	str	r3, [r2, #8]
 80031a0:	e032      	b.n	8003208 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	f003 0320 	and.w	r3, r3, #32
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d008      	beq.n	80031be <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	015a      	lsls	r2, r3, #5
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	4413      	add	r3, r2
 80031b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031b8:	461a      	mov	r2, r3
 80031ba:	2320      	movs	r3, #32
 80031bc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	4619      	mov	r1, r3
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f004 ffb3 	bl	8008130 <HAL_PCD_DataOutStageCallback>
 80031ca:	e01d      	b.n	8003208 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d114      	bne.n	80031fc <PCD_EP_OutXfrComplete_int+0x1b0>
 80031d2:	6879      	ldr	r1, [r7, #4]
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	4613      	mov	r3, r2
 80031d8:	00db      	lsls	r3, r3, #3
 80031da:	4413      	add	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	440b      	add	r3, r1
 80031e0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d108      	bne.n	80031fc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6818      	ldr	r0, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80031f4:	461a      	mov	r2, r3
 80031f6:	2100      	movs	r1, #0
 80031f8:	f002 fcc6 	bl	8005b88 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	4619      	mov	r1, r3
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f004 ff94 	bl	8008130 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3720      	adds	r7, #32
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	4f54300a 	.word	0x4f54300a
 8003218:	4f54310a 	.word	0x4f54310a

0800321c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	333c      	adds	r3, #60	@ 0x3c
 8003234:	3304      	adds	r3, #4
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	015a      	lsls	r2, r3, #5
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	4413      	add	r3, r2
 8003242:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	4a15      	ldr	r2, [pc, #84]	@ (80032a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d90e      	bls.n	8003270 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003258:	2b00      	cmp	r3, #0
 800325a:	d009      	beq.n	8003270 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	015a      	lsls	r2, r3, #5
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	4413      	add	r3, r2
 8003264:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003268:	461a      	mov	r2, r3
 800326a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800326e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f004 ff4b 	bl	800810c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	4a0a      	ldr	r2, [pc, #40]	@ (80032a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d90c      	bls.n	8003298 <PCD_EP_OutSetupPacket_int+0x7c>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	799b      	ldrb	r3, [r3, #6]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d108      	bne.n	8003298 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6818      	ldr	r0, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003290:	461a      	mov	r2, r3
 8003292:	2101      	movs	r1, #1
 8003294:	f002 fc78 	bl	8005b88 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3718      	adds	r7, #24
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	4f54300a 	.word	0x4f54300a

080032a8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	460b      	mov	r3, r1
 80032b2:	70fb      	strb	r3, [r7, #3]
 80032b4:	4613      	mov	r3, r2
 80032b6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032be:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80032c0:	78fb      	ldrb	r3, [r7, #3]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d107      	bne.n	80032d6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80032c6:	883b      	ldrh	r3, [r7, #0]
 80032c8:	0419      	lsls	r1, r3, #16
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80032d4:	e028      	b.n	8003328 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032dc:	0c1b      	lsrs	r3, r3, #16
 80032de:	68ba      	ldr	r2, [r7, #8]
 80032e0:	4413      	add	r3, r2
 80032e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80032e4:	2300      	movs	r3, #0
 80032e6:	73fb      	strb	r3, [r7, #15]
 80032e8:	e00d      	b.n	8003306 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	7bfb      	ldrb	r3, [r7, #15]
 80032f0:	3340      	adds	r3, #64	@ 0x40
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4413      	add	r3, r2
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	0c1b      	lsrs	r3, r3, #16
 80032fa:	68ba      	ldr	r2, [r7, #8]
 80032fc:	4413      	add	r3, r2
 80032fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003300:	7bfb      	ldrb	r3, [r7, #15]
 8003302:	3301      	adds	r3, #1
 8003304:	73fb      	strb	r3, [r7, #15]
 8003306:	7bfa      	ldrb	r2, [r7, #15]
 8003308:	78fb      	ldrb	r3, [r7, #3]
 800330a:	3b01      	subs	r3, #1
 800330c:	429a      	cmp	r2, r3
 800330e:	d3ec      	bcc.n	80032ea <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003310:	883b      	ldrh	r3, [r7, #0]
 8003312:	0418      	lsls	r0, r3, #16
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6819      	ldr	r1, [r3, #0]
 8003318:	78fb      	ldrb	r3, [r7, #3]
 800331a:	3b01      	subs	r3, #1
 800331c:	68ba      	ldr	r2, [r7, #8]
 800331e:	4302      	orrs	r2, r0
 8003320:	3340      	adds	r3, #64	@ 0x40
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	440b      	add	r3, r1
 8003326:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3714      	adds	r7, #20
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr

08003336 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003336:	b480      	push	{r7}
 8003338:	b083      	sub	sp, #12
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
 800333e:	460b      	mov	r3, r1
 8003340:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	887a      	ldrh	r2, [r7, #2]
 8003348:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	460b      	mov	r3, r1
 8003362:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e267      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b00      	cmp	r3, #0
 800338c:	d075      	beq.n	800347a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800338e:	4b88      	ldr	r3, [pc, #544]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 030c 	and.w	r3, r3, #12
 8003396:	2b04      	cmp	r3, #4
 8003398:	d00c      	beq.n	80033b4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800339a:	4b85      	ldr	r3, [pc, #532]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80033a2:	2b08      	cmp	r3, #8
 80033a4:	d112      	bne.n	80033cc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033a6:	4b82      	ldr	r3, [pc, #520]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033b2:	d10b      	bne.n	80033cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b4:	4b7e      	ldr	r3, [pc, #504]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d05b      	beq.n	8003478 <HAL_RCC_OscConfig+0x108>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d157      	bne.n	8003478 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e242      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033d4:	d106      	bne.n	80033e4 <HAL_RCC_OscConfig+0x74>
 80033d6:	4b76      	ldr	r3, [pc, #472]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a75      	ldr	r2, [pc, #468]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 80033dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033e0:	6013      	str	r3, [r2, #0]
 80033e2:	e01d      	b.n	8003420 <HAL_RCC_OscConfig+0xb0>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033ec:	d10c      	bne.n	8003408 <HAL_RCC_OscConfig+0x98>
 80033ee:	4b70      	ldr	r3, [pc, #448]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a6f      	ldr	r2, [pc, #444]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 80033f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033f8:	6013      	str	r3, [r2, #0]
 80033fa:	4b6d      	ldr	r3, [pc, #436]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a6c      	ldr	r2, [pc, #432]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 8003400:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003404:	6013      	str	r3, [r2, #0]
 8003406:	e00b      	b.n	8003420 <HAL_RCC_OscConfig+0xb0>
 8003408:	4b69      	ldr	r3, [pc, #420]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a68      	ldr	r2, [pc, #416]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 800340e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003412:	6013      	str	r3, [r2, #0]
 8003414:	4b66      	ldr	r3, [pc, #408]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a65      	ldr	r2, [pc, #404]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 800341a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800341e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d013      	beq.n	8003450 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003428:	f7fd feba 	bl	80011a0 <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003430:	f7fd feb6 	bl	80011a0 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b64      	cmp	r3, #100	@ 0x64
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e207      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003442:	4b5b      	ldr	r3, [pc, #364]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d0f0      	beq.n	8003430 <HAL_RCC_OscConfig+0xc0>
 800344e:	e014      	b.n	800347a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003450:	f7fd fea6 	bl	80011a0 <HAL_GetTick>
 8003454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003458:	f7fd fea2 	bl	80011a0 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b64      	cmp	r3, #100	@ 0x64
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e1f3      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800346a:	4b51      	ldr	r3, [pc, #324]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1f0      	bne.n	8003458 <HAL_RCC_OscConfig+0xe8>
 8003476:	e000      	b.n	800347a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003478:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d063      	beq.n	800354e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003486:	4b4a      	ldr	r3, [pc, #296]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f003 030c 	and.w	r3, r3, #12
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00b      	beq.n	80034aa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003492:	4b47      	ldr	r3, [pc, #284]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800349a:	2b08      	cmp	r3, #8
 800349c:	d11c      	bne.n	80034d8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800349e:	4b44      	ldr	r3, [pc, #272]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d116      	bne.n	80034d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034aa:	4b41      	ldr	r3, [pc, #260]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d005      	beq.n	80034c2 <HAL_RCC_OscConfig+0x152>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d001      	beq.n	80034c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e1c7      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c2:	4b3b      	ldr	r3, [pc, #236]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	4937      	ldr	r1, [pc, #220]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034d6:	e03a      	b.n	800354e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d020      	beq.n	8003522 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034e0:	4b34      	ldr	r3, [pc, #208]	@ (80035b4 <HAL_RCC_OscConfig+0x244>)
 80034e2:	2201      	movs	r2, #1
 80034e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e6:	f7fd fe5b 	bl	80011a0 <HAL_GetTick>
 80034ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ec:	e008      	b.n	8003500 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ee:	f7fd fe57 	bl	80011a0 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e1a8      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003500:	4b2b      	ldr	r3, [pc, #172]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d0f0      	beq.n	80034ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800350c:	4b28      	ldr	r3, [pc, #160]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	4925      	ldr	r1, [pc, #148]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 800351c:	4313      	orrs	r3, r2
 800351e:	600b      	str	r3, [r1, #0]
 8003520:	e015      	b.n	800354e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003522:	4b24      	ldr	r3, [pc, #144]	@ (80035b4 <HAL_RCC_OscConfig+0x244>)
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003528:	f7fd fe3a 	bl	80011a0 <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800352e:	e008      	b.n	8003542 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003530:	f7fd fe36 	bl	80011a0 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b02      	cmp	r3, #2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e187      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003542:	4b1b      	ldr	r3, [pc, #108]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1f0      	bne.n	8003530 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0308 	and.w	r3, r3, #8
 8003556:	2b00      	cmp	r3, #0
 8003558:	d036      	beq.n	80035c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d016      	beq.n	8003590 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003562:	4b15      	ldr	r3, [pc, #84]	@ (80035b8 <HAL_RCC_OscConfig+0x248>)
 8003564:	2201      	movs	r2, #1
 8003566:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003568:	f7fd fe1a 	bl	80011a0 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003570:	f7fd fe16 	bl	80011a0 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e167      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003582:	4b0b      	ldr	r3, [pc, #44]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 8003584:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d0f0      	beq.n	8003570 <HAL_RCC_OscConfig+0x200>
 800358e:	e01b      	b.n	80035c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003590:	4b09      	ldr	r3, [pc, #36]	@ (80035b8 <HAL_RCC_OscConfig+0x248>)
 8003592:	2200      	movs	r2, #0
 8003594:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003596:	f7fd fe03 	bl	80011a0 <HAL_GetTick>
 800359a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800359c:	e00e      	b.n	80035bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800359e:	f7fd fdff 	bl	80011a0 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d907      	bls.n	80035bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e150      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
 80035b0:	40023800 	.word	0x40023800
 80035b4:	42470000 	.word	0x42470000
 80035b8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035bc:	4b88      	ldr	r3, [pc, #544]	@ (80037e0 <HAL_RCC_OscConfig+0x470>)
 80035be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1ea      	bne.n	800359e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0304 	and.w	r3, r3, #4
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f000 8097 	beq.w	8003704 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035d6:	2300      	movs	r3, #0
 80035d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035da:	4b81      	ldr	r3, [pc, #516]	@ (80037e0 <HAL_RCC_OscConfig+0x470>)
 80035dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10f      	bne.n	8003606 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035e6:	2300      	movs	r3, #0
 80035e8:	60bb      	str	r3, [r7, #8]
 80035ea:	4b7d      	ldr	r3, [pc, #500]	@ (80037e0 <HAL_RCC_OscConfig+0x470>)
 80035ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ee:	4a7c      	ldr	r2, [pc, #496]	@ (80037e0 <HAL_RCC_OscConfig+0x470>)
 80035f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80035f6:	4b7a      	ldr	r3, [pc, #488]	@ (80037e0 <HAL_RCC_OscConfig+0x470>)
 80035f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035fe:	60bb      	str	r3, [r7, #8]
 8003600:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003602:	2301      	movs	r3, #1
 8003604:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003606:	4b77      	ldr	r3, [pc, #476]	@ (80037e4 <HAL_RCC_OscConfig+0x474>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800360e:	2b00      	cmp	r3, #0
 8003610:	d118      	bne.n	8003644 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003612:	4b74      	ldr	r3, [pc, #464]	@ (80037e4 <HAL_RCC_OscConfig+0x474>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a73      	ldr	r2, [pc, #460]	@ (80037e4 <HAL_RCC_OscConfig+0x474>)
 8003618:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800361c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800361e:	f7fd fdbf 	bl	80011a0 <HAL_GetTick>
 8003622:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003624:	e008      	b.n	8003638 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003626:	f7fd fdbb 	bl	80011a0 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	2b02      	cmp	r3, #2
 8003632:	d901      	bls.n	8003638 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e10c      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003638:	4b6a      	ldr	r3, [pc, #424]	@ (80037e4 <HAL_RCC_OscConfig+0x474>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003640:	2b00      	cmp	r3, #0
 8003642:	d0f0      	beq.n	8003626 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d106      	bne.n	800365a <HAL_RCC_OscConfig+0x2ea>
 800364c:	4b64      	ldr	r3, [pc, #400]	@ (80037e0 <HAL_RCC_OscConfig+0x470>)
 800364e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003650:	4a63      	ldr	r2, [pc, #396]	@ (80037e0 <HAL_RCC_OscConfig+0x470>)
 8003652:	f043 0301 	orr.w	r3, r3, #1
 8003656:	6713      	str	r3, [r2, #112]	@ 0x70
 8003658:	e01c      	b.n	8003694 <HAL_RCC_OscConfig+0x324>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	2b05      	cmp	r3, #5
 8003660:	d10c      	bne.n	800367c <HAL_RCC_OscConfig+0x30c>
 8003662:	4b5f      	ldr	r3, [pc, #380]	@ (80037e0 <HAL_RCC_OscConfig+0x470>)
 8003664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003666:	4a5e      	ldr	r2, [pc, #376]	@ (80037e0 <HAL_RCC_OscConfig+0x470>)
 8003668:	f043 0304 	orr.w	r3, r3, #4
 800366c:	6713      	str	r3, [r2, #112]	@ 0x70
 800366e:	4b5c      	ldr	r3, [pc, #368]	@ (80037e0 <HAL_RCC_OscConfig+0x470>)
 8003670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003672:	4a5b      	ldr	r2, [pc, #364]	@ (80037e0 <HAL_RCC_OscConfig+0x470>)
 8003674:	f043 0301 	orr.w	r3, r3, #1
 8003678:	6713      	str	r3, [r2, #112]	@ 0x70
 800367a:	e00b      	b.n	8003694 <HAL_RCC_OscConfig+0x324>
 800367c:	4b58      	ldr	r3, [pc, #352]	@ (80037e0 <HAL_RCC_OscConfig+0x470>)
 800367e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003680:	4a57      	ldr	r2, [pc, #348]	@ (80037e0 <HAL_RCC_OscConfig+0x470>)
 8003682:	f023 0301 	bic.w	r3, r3, #1
 8003686:	6713      	str	r3, [r2, #112]	@ 0x70
 8003688:	4b55      	ldr	r3, [pc, #340]	@ (80037e0 <HAL_RCC_OscConfig+0x470>)
 800368a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800368c:	4a54      	ldr	r2, [pc, #336]	@ (80037e0 <HAL_RCC_OscConfig+0x470>)
 800368e:	f023 0304 	bic.w	r3, r3, #4
 8003692:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d015      	beq.n	80036c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800369c:	f7fd fd80 	bl	80011a0 <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036a2:	e00a      	b.n	80036ba <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036a4:	f7fd fd7c 	bl	80011a0 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e0cb      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ba:	4b49      	ldr	r3, [pc, #292]	@ (80037e0 <HAL_RCC_OscConfig+0x470>)
 80036bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0ee      	beq.n	80036a4 <HAL_RCC_OscConfig+0x334>
 80036c6:	e014      	b.n	80036f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036c8:	f7fd fd6a 	bl	80011a0 <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ce:	e00a      	b.n	80036e6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036d0:	f7fd fd66 	bl	80011a0 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036de:	4293      	cmp	r3, r2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e0b5      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036e6:	4b3e      	ldr	r3, [pc, #248]	@ (80037e0 <HAL_RCC_OscConfig+0x470>)
 80036e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1ee      	bne.n	80036d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036f2:	7dfb      	ldrb	r3, [r7, #23]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d105      	bne.n	8003704 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036f8:	4b39      	ldr	r3, [pc, #228]	@ (80037e0 <HAL_RCC_OscConfig+0x470>)
 80036fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fc:	4a38      	ldr	r2, [pc, #224]	@ (80037e0 <HAL_RCC_OscConfig+0x470>)
 80036fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003702:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	2b00      	cmp	r3, #0
 800370a:	f000 80a1 	beq.w	8003850 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800370e:	4b34      	ldr	r3, [pc, #208]	@ (80037e0 <HAL_RCC_OscConfig+0x470>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f003 030c 	and.w	r3, r3, #12
 8003716:	2b08      	cmp	r3, #8
 8003718:	d05c      	beq.n	80037d4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	2b02      	cmp	r3, #2
 8003720:	d141      	bne.n	80037a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003722:	4b31      	ldr	r3, [pc, #196]	@ (80037e8 <HAL_RCC_OscConfig+0x478>)
 8003724:	2200      	movs	r2, #0
 8003726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003728:	f7fd fd3a 	bl	80011a0 <HAL_GetTick>
 800372c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800372e:	e008      	b.n	8003742 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003730:	f7fd fd36 	bl	80011a0 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b02      	cmp	r3, #2
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e087      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003742:	4b27      	ldr	r3, [pc, #156]	@ (80037e0 <HAL_RCC_OscConfig+0x470>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1f0      	bne.n	8003730 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	69da      	ldr	r2, [r3, #28]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	431a      	orrs	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375c:	019b      	lsls	r3, r3, #6
 800375e:	431a      	orrs	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003764:	085b      	lsrs	r3, r3, #1
 8003766:	3b01      	subs	r3, #1
 8003768:	041b      	lsls	r3, r3, #16
 800376a:	431a      	orrs	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003770:	061b      	lsls	r3, r3, #24
 8003772:	491b      	ldr	r1, [pc, #108]	@ (80037e0 <HAL_RCC_OscConfig+0x470>)
 8003774:	4313      	orrs	r3, r2
 8003776:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003778:	4b1b      	ldr	r3, [pc, #108]	@ (80037e8 <HAL_RCC_OscConfig+0x478>)
 800377a:	2201      	movs	r2, #1
 800377c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800377e:	f7fd fd0f 	bl	80011a0 <HAL_GetTick>
 8003782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003784:	e008      	b.n	8003798 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003786:	f7fd fd0b 	bl	80011a0 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	2b02      	cmp	r3, #2
 8003792:	d901      	bls.n	8003798 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e05c      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003798:	4b11      	ldr	r3, [pc, #68]	@ (80037e0 <HAL_RCC_OscConfig+0x470>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d0f0      	beq.n	8003786 <HAL_RCC_OscConfig+0x416>
 80037a4:	e054      	b.n	8003850 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037a6:	4b10      	ldr	r3, [pc, #64]	@ (80037e8 <HAL_RCC_OscConfig+0x478>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ac:	f7fd fcf8 	bl	80011a0 <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037b4:	f7fd fcf4 	bl	80011a0 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e045      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037c6:	4b06      	ldr	r3, [pc, #24]	@ (80037e0 <HAL_RCC_OscConfig+0x470>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1f0      	bne.n	80037b4 <HAL_RCC_OscConfig+0x444>
 80037d2:	e03d      	b.n	8003850 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d107      	bne.n	80037ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e038      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
 80037e0:	40023800 	.word	0x40023800
 80037e4:	40007000 	.word	0x40007000
 80037e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037ec:	4b1b      	ldr	r3, [pc, #108]	@ (800385c <HAL_RCC_OscConfig+0x4ec>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d028      	beq.n	800384c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003804:	429a      	cmp	r2, r3
 8003806:	d121      	bne.n	800384c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003812:	429a      	cmp	r2, r3
 8003814:	d11a      	bne.n	800384c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800381c:	4013      	ands	r3, r2
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003822:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003824:	4293      	cmp	r3, r2
 8003826:	d111      	bne.n	800384c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003832:	085b      	lsrs	r3, r3, #1
 8003834:	3b01      	subs	r3, #1
 8003836:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003838:	429a      	cmp	r2, r3
 800383a:	d107      	bne.n	800384c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003846:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003848:	429a      	cmp	r2, r3
 800384a:	d001      	beq.n	8003850 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e000      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3718      	adds	r7, #24
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	40023800 	.word	0x40023800

08003860 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d101      	bne.n	8003874 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e0cc      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003874:	4b68      	ldr	r3, [pc, #416]	@ (8003a18 <HAL_RCC_ClockConfig+0x1b8>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	683a      	ldr	r2, [r7, #0]
 800387e:	429a      	cmp	r2, r3
 8003880:	d90c      	bls.n	800389c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003882:	4b65      	ldr	r3, [pc, #404]	@ (8003a18 <HAL_RCC_ClockConfig+0x1b8>)
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	b2d2      	uxtb	r2, r2
 8003888:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800388a:	4b63      	ldr	r3, [pc, #396]	@ (8003a18 <HAL_RCC_ClockConfig+0x1b8>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0307 	and.w	r3, r3, #7
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	429a      	cmp	r2, r3
 8003896:	d001      	beq.n	800389c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e0b8      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d020      	beq.n	80038ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0304 	and.w	r3, r3, #4
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d005      	beq.n	80038c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038b4:	4b59      	ldr	r3, [pc, #356]	@ (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	4a58      	ldr	r2, [pc, #352]	@ (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 80038ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80038be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0308 	and.w	r3, r3, #8
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d005      	beq.n	80038d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038cc:	4b53      	ldr	r3, [pc, #332]	@ (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	4a52      	ldr	r2, [pc, #328]	@ (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 80038d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80038d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038d8:	4b50      	ldr	r3, [pc, #320]	@ (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	494d      	ldr	r1, [pc, #308]	@ (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d044      	beq.n	8003980 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d107      	bne.n	800390e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038fe:	4b47      	ldr	r3, [pc, #284]	@ (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d119      	bne.n	800393e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e07f      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	2b02      	cmp	r3, #2
 8003914:	d003      	beq.n	800391e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800391a:	2b03      	cmp	r3, #3
 800391c:	d107      	bne.n	800392e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800391e:	4b3f      	ldr	r3, [pc, #252]	@ (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d109      	bne.n	800393e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e06f      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800392e:	4b3b      	ldr	r3, [pc, #236]	@ (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e067      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800393e:	4b37      	ldr	r3, [pc, #220]	@ (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f023 0203 	bic.w	r2, r3, #3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	4934      	ldr	r1, [pc, #208]	@ (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 800394c:	4313      	orrs	r3, r2
 800394e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003950:	f7fd fc26 	bl	80011a0 <HAL_GetTick>
 8003954:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003956:	e00a      	b.n	800396e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003958:	f7fd fc22 	bl	80011a0 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003966:	4293      	cmp	r3, r2
 8003968:	d901      	bls.n	800396e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e04f      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800396e:	4b2b      	ldr	r3, [pc, #172]	@ (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f003 020c 	and.w	r2, r3, #12
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	429a      	cmp	r2, r3
 800397e:	d1eb      	bne.n	8003958 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003980:	4b25      	ldr	r3, [pc, #148]	@ (8003a18 <HAL_RCC_ClockConfig+0x1b8>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0307 	and.w	r3, r3, #7
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	429a      	cmp	r2, r3
 800398c:	d20c      	bcs.n	80039a8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800398e:	4b22      	ldr	r3, [pc, #136]	@ (8003a18 <HAL_RCC_ClockConfig+0x1b8>)
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	b2d2      	uxtb	r2, r2
 8003994:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003996:	4b20      	ldr	r3, [pc, #128]	@ (8003a18 <HAL_RCC_ClockConfig+0x1b8>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0307 	and.w	r3, r3, #7
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d001      	beq.n	80039a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e032      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0304 	and.w	r3, r3, #4
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d008      	beq.n	80039c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039b4:	4b19      	ldr	r3, [pc, #100]	@ (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	4916      	ldr	r1, [pc, #88]	@ (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0308 	and.w	r3, r3, #8
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d009      	beq.n	80039e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039d2:	4b12      	ldr	r3, [pc, #72]	@ (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	490e      	ldr	r1, [pc, #56]	@ (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039e6:	f000 f821 	bl	8003a2c <HAL_RCC_GetSysClockFreq>
 80039ea:	4602      	mov	r2, r0
 80039ec:	4b0b      	ldr	r3, [pc, #44]	@ (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	091b      	lsrs	r3, r3, #4
 80039f2:	f003 030f 	and.w	r3, r3, #15
 80039f6:	490a      	ldr	r1, [pc, #40]	@ (8003a20 <HAL_RCC_ClockConfig+0x1c0>)
 80039f8:	5ccb      	ldrb	r3, [r1, r3]
 80039fa:	fa22 f303 	lsr.w	r3, r2, r3
 80039fe:	4a09      	ldr	r2, [pc, #36]	@ (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 8003a00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003a02:	4b09      	ldr	r3, [pc, #36]	@ (8003a28 <HAL_RCC_ClockConfig+0x1c8>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fd fb86 	bl	8001118 <HAL_InitTick>

  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	40023c00 	.word	0x40023c00
 8003a1c:	40023800 	.word	0x40023800
 8003a20:	0800874c 	.word	0x0800874c
 8003a24:	20000010 	.word	0x20000010
 8003a28:	20000014 	.word	0x20000014

08003a2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a30:	b090      	sub	sp, #64	@ 0x40
 8003a32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003a34:	2300      	movs	r3, #0
 8003a36:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003a40:	2300      	movs	r3, #0
 8003a42:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a44:	4b59      	ldr	r3, [pc, #356]	@ (8003bac <HAL_RCC_GetSysClockFreq+0x180>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f003 030c 	and.w	r3, r3, #12
 8003a4c:	2b08      	cmp	r3, #8
 8003a4e:	d00d      	beq.n	8003a6c <HAL_RCC_GetSysClockFreq+0x40>
 8003a50:	2b08      	cmp	r3, #8
 8003a52:	f200 80a1 	bhi.w	8003b98 <HAL_RCC_GetSysClockFreq+0x16c>
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d002      	beq.n	8003a60 <HAL_RCC_GetSysClockFreq+0x34>
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	d003      	beq.n	8003a66 <HAL_RCC_GetSysClockFreq+0x3a>
 8003a5e:	e09b      	b.n	8003b98 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a60:	4b53      	ldr	r3, [pc, #332]	@ (8003bb0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a62:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003a64:	e09b      	b.n	8003b9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a66:	4b53      	ldr	r3, [pc, #332]	@ (8003bb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a68:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003a6a:	e098      	b.n	8003b9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a6c:	4b4f      	ldr	r3, [pc, #316]	@ (8003bac <HAL_RCC_GetSysClockFreq+0x180>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a74:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a76:	4b4d      	ldr	r3, [pc, #308]	@ (8003bac <HAL_RCC_GetSysClockFreq+0x180>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d028      	beq.n	8003ad4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a82:	4b4a      	ldr	r3, [pc, #296]	@ (8003bac <HAL_RCC_GetSysClockFreq+0x180>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	099b      	lsrs	r3, r3, #6
 8003a88:	2200      	movs	r2, #0
 8003a8a:	623b      	str	r3, [r7, #32]
 8003a8c:	627a      	str	r2, [r7, #36]	@ 0x24
 8003a8e:	6a3b      	ldr	r3, [r7, #32]
 8003a90:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003a94:	2100      	movs	r1, #0
 8003a96:	4b47      	ldr	r3, [pc, #284]	@ (8003bb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a98:	fb03 f201 	mul.w	r2, r3, r1
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	fb00 f303 	mul.w	r3, r0, r3
 8003aa2:	4413      	add	r3, r2
 8003aa4:	4a43      	ldr	r2, [pc, #268]	@ (8003bb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003aa6:	fba0 1202 	umull	r1, r2, r0, r2
 8003aaa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003aac:	460a      	mov	r2, r1
 8003aae:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003ab0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ab2:	4413      	add	r3, r2
 8003ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ab8:	2200      	movs	r2, #0
 8003aba:	61bb      	str	r3, [r7, #24]
 8003abc:	61fa      	str	r2, [r7, #28]
 8003abe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ac2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003ac6:	f7fc fb87 	bl	80001d8 <__aeabi_uldivmod>
 8003aca:	4602      	mov	r2, r0
 8003acc:	460b      	mov	r3, r1
 8003ace:	4613      	mov	r3, r2
 8003ad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ad2:	e053      	b.n	8003b7c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ad4:	4b35      	ldr	r3, [pc, #212]	@ (8003bac <HAL_RCC_GetSysClockFreq+0x180>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	099b      	lsrs	r3, r3, #6
 8003ada:	2200      	movs	r2, #0
 8003adc:	613b      	str	r3, [r7, #16]
 8003ade:	617a      	str	r2, [r7, #20]
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003ae6:	f04f 0b00 	mov.w	fp, #0
 8003aea:	4652      	mov	r2, sl
 8003aec:	465b      	mov	r3, fp
 8003aee:	f04f 0000 	mov.w	r0, #0
 8003af2:	f04f 0100 	mov.w	r1, #0
 8003af6:	0159      	lsls	r1, r3, #5
 8003af8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003afc:	0150      	lsls	r0, r2, #5
 8003afe:	4602      	mov	r2, r0
 8003b00:	460b      	mov	r3, r1
 8003b02:	ebb2 080a 	subs.w	r8, r2, sl
 8003b06:	eb63 090b 	sbc.w	r9, r3, fp
 8003b0a:	f04f 0200 	mov.w	r2, #0
 8003b0e:	f04f 0300 	mov.w	r3, #0
 8003b12:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003b16:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003b1a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003b1e:	ebb2 0408 	subs.w	r4, r2, r8
 8003b22:	eb63 0509 	sbc.w	r5, r3, r9
 8003b26:	f04f 0200 	mov.w	r2, #0
 8003b2a:	f04f 0300 	mov.w	r3, #0
 8003b2e:	00eb      	lsls	r3, r5, #3
 8003b30:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b34:	00e2      	lsls	r2, r4, #3
 8003b36:	4614      	mov	r4, r2
 8003b38:	461d      	mov	r5, r3
 8003b3a:	eb14 030a 	adds.w	r3, r4, sl
 8003b3e:	603b      	str	r3, [r7, #0]
 8003b40:	eb45 030b 	adc.w	r3, r5, fp
 8003b44:	607b      	str	r3, [r7, #4]
 8003b46:	f04f 0200 	mov.w	r2, #0
 8003b4a:	f04f 0300 	mov.w	r3, #0
 8003b4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b52:	4629      	mov	r1, r5
 8003b54:	028b      	lsls	r3, r1, #10
 8003b56:	4621      	mov	r1, r4
 8003b58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b5c:	4621      	mov	r1, r4
 8003b5e:	028a      	lsls	r2, r1, #10
 8003b60:	4610      	mov	r0, r2
 8003b62:	4619      	mov	r1, r3
 8003b64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b66:	2200      	movs	r2, #0
 8003b68:	60bb      	str	r3, [r7, #8]
 8003b6a:	60fa      	str	r2, [r7, #12]
 8003b6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b70:	f7fc fb32 	bl	80001d8 <__aeabi_uldivmod>
 8003b74:	4602      	mov	r2, r0
 8003b76:	460b      	mov	r3, r1
 8003b78:	4613      	mov	r3, r2
 8003b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8003bac <HAL_RCC_GetSysClockFreq+0x180>)
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	0c1b      	lsrs	r3, r3, #16
 8003b82:	f003 0303 	and.w	r3, r3, #3
 8003b86:	3301      	adds	r3, #1
 8003b88:	005b      	lsls	r3, r3, #1
 8003b8a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003b8c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b94:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003b96:	e002      	b.n	8003b9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b98:	4b05      	ldr	r3, [pc, #20]	@ (8003bb0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b9a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003b9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3740      	adds	r7, #64	@ 0x40
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003baa:	bf00      	nop
 8003bac:	40023800 	.word	0x40023800
 8003bb0:	00f42400 	.word	0x00f42400
 8003bb4:	017d7840 	.word	0x017d7840

08003bb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bbc:	4b03      	ldr	r3, [pc, #12]	@ (8003bcc <HAL_RCC_GetHCLKFreq+0x14>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	20000010 	.word	0x20000010

08003bd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003bd4:	f7ff fff0 	bl	8003bb8 <HAL_RCC_GetHCLKFreq>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	4b05      	ldr	r3, [pc, #20]	@ (8003bf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	0a9b      	lsrs	r3, r3, #10
 8003be0:	f003 0307 	and.w	r3, r3, #7
 8003be4:	4903      	ldr	r1, [pc, #12]	@ (8003bf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003be6:	5ccb      	ldrb	r3, [r1, r3]
 8003be8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	40023800 	.word	0x40023800
 8003bf4:	0800875c 	.word	0x0800875c

08003bf8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e041      	b.n	8003c8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d106      	bne.n	8003c24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7fd f9aa 	bl	8000f78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2202      	movs	r2, #2
 8003c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	3304      	adds	r3, #4
 8003c34:	4619      	mov	r1, r3
 8003c36:	4610      	mov	r0, r2
 8003c38:	f000 fb34 	bl	80042a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3708      	adds	r7, #8
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
	...

08003c98 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d001      	beq.n	8003cb0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e03c      	b.n	8003d2a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2202      	movs	r2, #2
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a1e      	ldr	r2, [pc, #120]	@ (8003d38 <HAL_TIM_Base_Start+0xa0>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d018      	beq.n	8003cf4 <HAL_TIM_Base_Start+0x5c>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cca:	d013      	beq.n	8003cf4 <HAL_TIM_Base_Start+0x5c>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a1a      	ldr	r2, [pc, #104]	@ (8003d3c <HAL_TIM_Base_Start+0xa4>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d00e      	beq.n	8003cf4 <HAL_TIM_Base_Start+0x5c>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a19      	ldr	r2, [pc, #100]	@ (8003d40 <HAL_TIM_Base_Start+0xa8>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d009      	beq.n	8003cf4 <HAL_TIM_Base_Start+0x5c>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a17      	ldr	r2, [pc, #92]	@ (8003d44 <HAL_TIM_Base_Start+0xac>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d004      	beq.n	8003cf4 <HAL_TIM_Base_Start+0x5c>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a16      	ldr	r2, [pc, #88]	@ (8003d48 <HAL_TIM_Base_Start+0xb0>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d111      	bne.n	8003d18 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f003 0307 	and.w	r3, r3, #7
 8003cfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2b06      	cmp	r3, #6
 8003d04:	d010      	beq.n	8003d28 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f042 0201 	orr.w	r2, r2, #1
 8003d14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d16:	e007      	b.n	8003d28 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f042 0201 	orr.w	r2, r2, #1
 8003d26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3714      	adds	r7, #20
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	40010000 	.word	0x40010000
 8003d3c:	40000400 	.word	0x40000400
 8003d40:	40000800 	.word	0x40000800
 8003d44:	40000c00 	.word	0x40000c00
 8003d48:	40014000 	.word	0x40014000

08003d4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d109      	bne.n	8003d70 <HAL_TIM_PWM_Start+0x24>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	bf14      	ite	ne
 8003d68:	2301      	movne	r3, #1
 8003d6a:	2300      	moveq	r3, #0
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	e022      	b.n	8003db6 <HAL_TIM_PWM_Start+0x6a>
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	2b04      	cmp	r3, #4
 8003d74:	d109      	bne.n	8003d8a <HAL_TIM_PWM_Start+0x3e>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	bf14      	ite	ne
 8003d82:	2301      	movne	r3, #1
 8003d84:	2300      	moveq	r3, #0
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	e015      	b.n	8003db6 <HAL_TIM_PWM_Start+0x6a>
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	2b08      	cmp	r3, #8
 8003d8e:	d109      	bne.n	8003da4 <HAL_TIM_PWM_Start+0x58>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	bf14      	ite	ne
 8003d9c:	2301      	movne	r3, #1
 8003d9e:	2300      	moveq	r3, #0
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	e008      	b.n	8003db6 <HAL_TIM_PWM_Start+0x6a>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	bf14      	ite	ne
 8003db0:	2301      	movne	r3, #1
 8003db2:	2300      	moveq	r3, #0
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d001      	beq.n	8003dbe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e068      	b.n	8003e90 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d104      	bne.n	8003dce <HAL_TIM_PWM_Start+0x82>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2202      	movs	r2, #2
 8003dc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003dcc:	e013      	b.n	8003df6 <HAL_TIM_PWM_Start+0xaa>
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	2b04      	cmp	r3, #4
 8003dd2:	d104      	bne.n	8003dde <HAL_TIM_PWM_Start+0x92>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2202      	movs	r2, #2
 8003dd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ddc:	e00b      	b.n	8003df6 <HAL_TIM_PWM_Start+0xaa>
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	2b08      	cmp	r3, #8
 8003de2:	d104      	bne.n	8003dee <HAL_TIM_PWM_Start+0xa2>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2202      	movs	r2, #2
 8003de8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003dec:	e003      	b.n	8003df6 <HAL_TIM_PWM_Start+0xaa>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2202      	movs	r2, #2
 8003df2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	6839      	ldr	r1, [r7, #0]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f000 fb76 	bl	80044f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a23      	ldr	r2, [pc, #140]	@ (8003e98 <HAL_TIM_PWM_Start+0x14c>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d107      	bne.n	8003e1e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e1c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a1d      	ldr	r2, [pc, #116]	@ (8003e98 <HAL_TIM_PWM_Start+0x14c>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d018      	beq.n	8003e5a <HAL_TIM_PWM_Start+0x10e>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e30:	d013      	beq.n	8003e5a <HAL_TIM_PWM_Start+0x10e>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a19      	ldr	r2, [pc, #100]	@ (8003e9c <HAL_TIM_PWM_Start+0x150>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d00e      	beq.n	8003e5a <HAL_TIM_PWM_Start+0x10e>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a17      	ldr	r2, [pc, #92]	@ (8003ea0 <HAL_TIM_PWM_Start+0x154>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d009      	beq.n	8003e5a <HAL_TIM_PWM_Start+0x10e>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a16      	ldr	r2, [pc, #88]	@ (8003ea4 <HAL_TIM_PWM_Start+0x158>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d004      	beq.n	8003e5a <HAL_TIM_PWM_Start+0x10e>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a14      	ldr	r2, [pc, #80]	@ (8003ea8 <HAL_TIM_PWM_Start+0x15c>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d111      	bne.n	8003e7e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f003 0307 	and.w	r3, r3, #7
 8003e64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2b06      	cmp	r3, #6
 8003e6a:	d010      	beq.n	8003e8e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f042 0201 	orr.w	r2, r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e7c:	e007      	b.n	8003e8e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f042 0201 	orr.w	r2, r2, #1
 8003e8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3710      	adds	r7, #16
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	40010000 	.word	0x40010000
 8003e9c:	40000400 	.word	0x40000400
 8003ea0:	40000800 	.word	0x40000800
 8003ea4:	40000c00 	.word	0x40000c00
 8003ea8:	40014000 	.word	0x40014000

08003eac <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d101      	bne.n	8003ec0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e097      	b.n	8003ff0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d106      	bne.n	8003eda <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f7fd f809 	bl	8000eec <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2202      	movs	r2, #2
 8003ede:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	6812      	ldr	r2, [r2, #0]
 8003eec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ef0:	f023 0307 	bic.w	r3, r3, #7
 8003ef4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	3304      	adds	r3, #4
 8003efe:	4619      	mov	r1, r3
 8003f00:	4610      	mov	r0, r2
 8003f02:	f000 f9cf 	bl	80042a4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	6a1b      	ldr	r3, [r3, #32]
 8003f1c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f2e:	f023 0303 	bic.w	r3, r3, #3
 8003f32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	689a      	ldr	r2, [r3, #8]
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	021b      	lsls	r3, r3, #8
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003f4c:	f023 030c 	bic.w	r3, r3, #12
 8003f50:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003f58:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	68da      	ldr	r2, [r3, #12]
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	69db      	ldr	r3, [r3, #28]
 8003f66:	021b      	lsls	r3, r3, #8
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	011a      	lsls	r2, r3, #4
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	031b      	lsls	r3, r3, #12
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003f8a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003f92:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	685a      	ldr	r2, [r3, #4]
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	695b      	ldr	r3, [r3, #20]
 8003f9c:	011b      	lsls	r3, r3, #4
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	697a      	ldr	r2, [r7, #20]
 8003fac:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	693a      	ldr	r2, [r7, #16]
 8003fb4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3718      	adds	r7, #24
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004008:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004010:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004018:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004020:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d110      	bne.n	800404a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004028:	7bfb      	ldrb	r3, [r7, #15]
 800402a:	2b01      	cmp	r3, #1
 800402c:	d102      	bne.n	8004034 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800402e:	7b7b      	ldrb	r3, [r7, #13]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d001      	beq.n	8004038 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e069      	b.n	800410c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2202      	movs	r2, #2
 800403c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2202      	movs	r2, #2
 8004044:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004048:	e031      	b.n	80040ae <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	2b04      	cmp	r3, #4
 800404e:	d110      	bne.n	8004072 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004050:	7bbb      	ldrb	r3, [r7, #14]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d102      	bne.n	800405c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004056:	7b3b      	ldrb	r3, [r7, #12]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d001      	beq.n	8004060 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e055      	b.n	800410c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2202      	movs	r2, #2
 8004064:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2202      	movs	r2, #2
 800406c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004070:	e01d      	b.n	80040ae <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004072:	7bfb      	ldrb	r3, [r7, #15]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d108      	bne.n	800408a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004078:	7bbb      	ldrb	r3, [r7, #14]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d105      	bne.n	800408a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800407e:	7b7b      	ldrb	r3, [r7, #13]
 8004080:	2b01      	cmp	r3, #1
 8004082:	d102      	bne.n	800408a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004084:	7b3b      	ldrb	r3, [r7, #12]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d001      	beq.n	800408e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e03e      	b.n	800410c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2202      	movs	r2, #2
 8004092:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2202      	movs	r2, #2
 800409a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2202      	movs	r2, #2
 80040a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2202      	movs	r2, #2
 80040aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d003      	beq.n	80040bc <HAL_TIM_Encoder_Start+0xc4>
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	2b04      	cmp	r3, #4
 80040b8:	d008      	beq.n	80040cc <HAL_TIM_Encoder_Start+0xd4>
 80040ba:	e00f      	b.n	80040dc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2201      	movs	r2, #1
 80040c2:	2100      	movs	r1, #0
 80040c4:	4618      	mov	r0, r3
 80040c6:	f000 fa13 	bl	80044f0 <TIM_CCxChannelCmd>
      break;
 80040ca:	e016      	b.n	80040fa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2201      	movs	r2, #1
 80040d2:	2104      	movs	r1, #4
 80040d4:	4618      	mov	r0, r3
 80040d6:	f000 fa0b 	bl	80044f0 <TIM_CCxChannelCmd>
      break;
 80040da:	e00e      	b.n	80040fa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2201      	movs	r2, #1
 80040e2:	2100      	movs	r1, #0
 80040e4:	4618      	mov	r0, r3
 80040e6:	f000 fa03 	bl	80044f0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2201      	movs	r2, #1
 80040f0:	2104      	movs	r1, #4
 80040f2:	4618      	mov	r0, r3
 80040f4:	f000 f9fc 	bl	80044f0 <TIM_CCxChannelCmd>
      break;
 80040f8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f042 0201 	orr.w	r2, r2, #1
 8004108:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	3710      	adds	r7, #16
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800411e:	2300      	movs	r3, #0
 8004120:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004128:	2b01      	cmp	r3, #1
 800412a:	d101      	bne.n	8004130 <HAL_TIM_ConfigClockSource+0x1c>
 800412c:	2302      	movs	r3, #2
 800412e:	e0b4      	b.n	800429a <HAL_TIM_ConfigClockSource+0x186>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2202      	movs	r2, #2
 800413c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800414e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004156:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68ba      	ldr	r2, [r7, #8]
 800415e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004168:	d03e      	beq.n	80041e8 <HAL_TIM_ConfigClockSource+0xd4>
 800416a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800416e:	f200 8087 	bhi.w	8004280 <HAL_TIM_ConfigClockSource+0x16c>
 8004172:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004176:	f000 8086 	beq.w	8004286 <HAL_TIM_ConfigClockSource+0x172>
 800417a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800417e:	d87f      	bhi.n	8004280 <HAL_TIM_ConfigClockSource+0x16c>
 8004180:	2b70      	cmp	r3, #112	@ 0x70
 8004182:	d01a      	beq.n	80041ba <HAL_TIM_ConfigClockSource+0xa6>
 8004184:	2b70      	cmp	r3, #112	@ 0x70
 8004186:	d87b      	bhi.n	8004280 <HAL_TIM_ConfigClockSource+0x16c>
 8004188:	2b60      	cmp	r3, #96	@ 0x60
 800418a:	d050      	beq.n	800422e <HAL_TIM_ConfigClockSource+0x11a>
 800418c:	2b60      	cmp	r3, #96	@ 0x60
 800418e:	d877      	bhi.n	8004280 <HAL_TIM_ConfigClockSource+0x16c>
 8004190:	2b50      	cmp	r3, #80	@ 0x50
 8004192:	d03c      	beq.n	800420e <HAL_TIM_ConfigClockSource+0xfa>
 8004194:	2b50      	cmp	r3, #80	@ 0x50
 8004196:	d873      	bhi.n	8004280 <HAL_TIM_ConfigClockSource+0x16c>
 8004198:	2b40      	cmp	r3, #64	@ 0x40
 800419a:	d058      	beq.n	800424e <HAL_TIM_ConfigClockSource+0x13a>
 800419c:	2b40      	cmp	r3, #64	@ 0x40
 800419e:	d86f      	bhi.n	8004280 <HAL_TIM_ConfigClockSource+0x16c>
 80041a0:	2b30      	cmp	r3, #48	@ 0x30
 80041a2:	d064      	beq.n	800426e <HAL_TIM_ConfigClockSource+0x15a>
 80041a4:	2b30      	cmp	r3, #48	@ 0x30
 80041a6:	d86b      	bhi.n	8004280 <HAL_TIM_ConfigClockSource+0x16c>
 80041a8:	2b20      	cmp	r3, #32
 80041aa:	d060      	beq.n	800426e <HAL_TIM_ConfigClockSource+0x15a>
 80041ac:	2b20      	cmp	r3, #32
 80041ae:	d867      	bhi.n	8004280 <HAL_TIM_ConfigClockSource+0x16c>
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d05c      	beq.n	800426e <HAL_TIM_ConfigClockSource+0x15a>
 80041b4:	2b10      	cmp	r3, #16
 80041b6:	d05a      	beq.n	800426e <HAL_TIM_ConfigClockSource+0x15a>
 80041b8:	e062      	b.n	8004280 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041ca:	f000 f971 	bl	80044b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80041dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68ba      	ldr	r2, [r7, #8]
 80041e4:	609a      	str	r2, [r3, #8]
      break;
 80041e6:	e04f      	b.n	8004288 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041f8:	f000 f95a 	bl	80044b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689a      	ldr	r2, [r3, #8]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800420a:	609a      	str	r2, [r3, #8]
      break;
 800420c:	e03c      	b.n	8004288 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800421a:	461a      	mov	r2, r3
 800421c:	f000 f8ce 	bl	80043bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2150      	movs	r1, #80	@ 0x50
 8004226:	4618      	mov	r0, r3
 8004228:	f000 f927 	bl	800447a <TIM_ITRx_SetConfig>
      break;
 800422c:	e02c      	b.n	8004288 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800423a:	461a      	mov	r2, r3
 800423c:	f000 f8ed 	bl	800441a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2160      	movs	r1, #96	@ 0x60
 8004246:	4618      	mov	r0, r3
 8004248:	f000 f917 	bl	800447a <TIM_ITRx_SetConfig>
      break;
 800424c:	e01c      	b.n	8004288 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800425a:	461a      	mov	r2, r3
 800425c:	f000 f8ae 	bl	80043bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2140      	movs	r1, #64	@ 0x40
 8004266:	4618      	mov	r0, r3
 8004268:	f000 f907 	bl	800447a <TIM_ITRx_SetConfig>
      break;
 800426c:	e00c      	b.n	8004288 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4619      	mov	r1, r3
 8004278:	4610      	mov	r0, r2
 800427a:	f000 f8fe 	bl	800447a <TIM_ITRx_SetConfig>
      break;
 800427e:	e003      	b.n	8004288 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	73fb      	strb	r3, [r7, #15]
      break;
 8004284:	e000      	b.n	8004288 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004286:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004298:	7bfb      	ldrb	r3, [r7, #15]
}
 800429a:	4618      	mov	r0, r3
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
	...

080042a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a3a      	ldr	r2, [pc, #232]	@ (80043a0 <TIM_Base_SetConfig+0xfc>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d00f      	beq.n	80042dc <TIM_Base_SetConfig+0x38>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042c2:	d00b      	beq.n	80042dc <TIM_Base_SetConfig+0x38>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a37      	ldr	r2, [pc, #220]	@ (80043a4 <TIM_Base_SetConfig+0x100>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d007      	beq.n	80042dc <TIM_Base_SetConfig+0x38>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a36      	ldr	r2, [pc, #216]	@ (80043a8 <TIM_Base_SetConfig+0x104>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d003      	beq.n	80042dc <TIM_Base_SetConfig+0x38>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a35      	ldr	r2, [pc, #212]	@ (80043ac <TIM_Base_SetConfig+0x108>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d108      	bne.n	80042ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a2b      	ldr	r2, [pc, #172]	@ (80043a0 <TIM_Base_SetConfig+0xfc>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d01b      	beq.n	800432e <TIM_Base_SetConfig+0x8a>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042fc:	d017      	beq.n	800432e <TIM_Base_SetConfig+0x8a>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a28      	ldr	r2, [pc, #160]	@ (80043a4 <TIM_Base_SetConfig+0x100>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d013      	beq.n	800432e <TIM_Base_SetConfig+0x8a>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a27      	ldr	r2, [pc, #156]	@ (80043a8 <TIM_Base_SetConfig+0x104>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d00f      	beq.n	800432e <TIM_Base_SetConfig+0x8a>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a26      	ldr	r2, [pc, #152]	@ (80043ac <TIM_Base_SetConfig+0x108>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d00b      	beq.n	800432e <TIM_Base_SetConfig+0x8a>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a25      	ldr	r2, [pc, #148]	@ (80043b0 <TIM_Base_SetConfig+0x10c>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d007      	beq.n	800432e <TIM_Base_SetConfig+0x8a>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a24      	ldr	r2, [pc, #144]	@ (80043b4 <TIM_Base_SetConfig+0x110>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d003      	beq.n	800432e <TIM_Base_SetConfig+0x8a>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a23      	ldr	r2, [pc, #140]	@ (80043b8 <TIM_Base_SetConfig+0x114>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d108      	bne.n	8004340 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004334:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	4313      	orrs	r3, r2
 800433e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	695b      	ldr	r3, [r3, #20]
 800434a:	4313      	orrs	r3, r2
 800434c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	689a      	ldr	r2, [r3, #8]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a0e      	ldr	r2, [pc, #56]	@ (80043a0 <TIM_Base_SetConfig+0xfc>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d103      	bne.n	8004374 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	691a      	ldr	r2, [r3, #16]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b01      	cmp	r3, #1
 8004384:	d105      	bne.n	8004392 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	f023 0201 	bic.w	r2, r3, #1
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	611a      	str	r2, [r3, #16]
  }
}
 8004392:	bf00      	nop
 8004394:	3714      	adds	r7, #20
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	40010000 	.word	0x40010000
 80043a4:	40000400 	.word	0x40000400
 80043a8:	40000800 	.word	0x40000800
 80043ac:	40000c00 	.word	0x40000c00
 80043b0:	40014000 	.word	0x40014000
 80043b4:	40014400 	.word	0x40014400
 80043b8:	40014800 	.word	0x40014800

080043bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043bc:	b480      	push	{r7}
 80043be:	b087      	sub	sp, #28
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6a1b      	ldr	r3, [r3, #32]
 80043cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	f023 0201 	bic.w	r2, r3, #1
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80043e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	011b      	lsls	r3, r3, #4
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	f023 030a 	bic.w	r3, r3, #10
 80043f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	4313      	orrs	r3, r2
 8004400:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	621a      	str	r2, [r3, #32]
}
 800440e:	bf00      	nop
 8004410:	371c      	adds	r7, #28
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr

0800441a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800441a:	b480      	push	{r7}
 800441c:	b087      	sub	sp, #28
 800441e:	af00      	add	r7, sp, #0
 8004420:	60f8      	str	r0, [r7, #12]
 8004422:	60b9      	str	r1, [r7, #8]
 8004424:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6a1b      	ldr	r3, [r3, #32]
 8004430:	f023 0210 	bic.w	r2, r3, #16
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004444:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	031b      	lsls	r3, r3, #12
 800444a:	693a      	ldr	r2, [r7, #16]
 800444c:	4313      	orrs	r3, r2
 800444e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004456:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	011b      	lsls	r3, r3, #4
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	4313      	orrs	r3, r2
 8004460:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	621a      	str	r2, [r3, #32]
}
 800446e:	bf00      	nop
 8004470:	371c      	adds	r7, #28
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr

0800447a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800447a:	b480      	push	{r7}
 800447c:	b085      	sub	sp, #20
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
 8004482:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004490:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004492:	683a      	ldr	r2, [r7, #0]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	4313      	orrs	r3, r2
 8004498:	f043 0307 	orr.w	r3, r3, #7
 800449c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	609a      	str	r2, [r3, #8]
}
 80044a4:	bf00      	nop
 80044a6:	3714      	adds	r7, #20
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b087      	sub	sp, #28
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
 80044bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80044ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	021a      	lsls	r2, r3, #8
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	431a      	orrs	r2, r3
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	4313      	orrs	r3, r2
 80044dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	697a      	ldr	r2, [r7, #20]
 80044e2:	609a      	str	r2, [r3, #8]
}
 80044e4:	bf00      	nop
 80044e6:	371c      	adds	r7, #28
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b087      	sub	sp, #28
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	f003 031f 	and.w	r3, r3, #31
 8004502:	2201      	movs	r2, #1
 8004504:	fa02 f303 	lsl.w	r3, r2, r3
 8004508:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6a1a      	ldr	r2, [r3, #32]
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	43db      	mvns	r3, r3
 8004512:	401a      	ands	r2, r3
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6a1a      	ldr	r2, [r3, #32]
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	f003 031f 	and.w	r3, r3, #31
 8004522:	6879      	ldr	r1, [r7, #4]
 8004524:	fa01 f303 	lsl.w	r3, r1, r3
 8004528:	431a      	orrs	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	621a      	str	r2, [r3, #32]
}
 800452e:	bf00      	nop
 8004530:	371c      	adds	r7, #28
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
	...

0800453c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800454c:	2b01      	cmp	r3, #1
 800454e:	d101      	bne.n	8004554 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004550:	2302      	movs	r3, #2
 8004552:	e050      	b.n	80045f6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2202      	movs	r2, #2
 8004560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800457a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	4313      	orrs	r3, r2
 8004584:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a1c      	ldr	r2, [pc, #112]	@ (8004604 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d018      	beq.n	80045ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045a0:	d013      	beq.n	80045ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a18      	ldr	r2, [pc, #96]	@ (8004608 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d00e      	beq.n	80045ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a16      	ldr	r2, [pc, #88]	@ (800460c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d009      	beq.n	80045ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a15      	ldr	r2, [pc, #84]	@ (8004610 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d004      	beq.n	80045ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a13      	ldr	r2, [pc, #76]	@ (8004614 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d10c      	bne.n	80045e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	68ba      	ldr	r2, [r7, #8]
 80045d8:	4313      	orrs	r3, r2
 80045da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3714      	adds	r7, #20
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	40010000 	.word	0x40010000
 8004608:	40000400 	.word	0x40000400
 800460c:	40000800 	.word	0x40000800
 8004610:	40000c00 	.word	0x40000c00
 8004614:	40014000 	.word	0x40014000

08004618 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004618:	b084      	sub	sp, #16
 800461a:	b580      	push	{r7, lr}
 800461c:	b084      	sub	sp, #16
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
 8004622:	f107 001c 	add.w	r0, r7, #28
 8004626:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800462a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800462e:	2b01      	cmp	r3, #1
 8004630:	d123      	bne.n	800467a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004636:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004646:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800465a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800465e:	2b01      	cmp	r3, #1
 8004660:	d105      	bne.n	800466e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f001 fae8 	bl	8005c44 <USB_CoreReset>
 8004674:	4603      	mov	r3, r0
 8004676:	73fb      	strb	r3, [r7, #15]
 8004678:	e01b      	b.n	80046b2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f001 fadc 	bl	8005c44 <USB_CoreReset>
 800468c:	4603      	mov	r3, r0
 800468e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004690:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004694:	2b00      	cmp	r3, #0
 8004696:	d106      	bne.n	80046a6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800469c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	639a      	str	r2, [r3, #56]	@ 0x38
 80046a4:	e005      	b.n	80046b2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046aa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80046b2:	7fbb      	ldrb	r3, [r7, #30]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d10b      	bne.n	80046d0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f043 0206 	orr.w	r2, r3, #6
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f043 0220 	orr.w	r2, r3, #32
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80046d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046dc:	b004      	add	sp, #16
 80046de:	4770      	bx	lr

080046e0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b087      	sub	sp, #28
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	4613      	mov	r3, r2
 80046ec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80046ee:	79fb      	ldrb	r3, [r7, #7]
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d165      	bne.n	80047c0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	4a41      	ldr	r2, [pc, #260]	@ (80047fc <USB_SetTurnaroundTime+0x11c>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d906      	bls.n	800470a <USB_SetTurnaroundTime+0x2a>
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	4a40      	ldr	r2, [pc, #256]	@ (8004800 <USB_SetTurnaroundTime+0x120>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d202      	bcs.n	800470a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004704:	230f      	movs	r3, #15
 8004706:	617b      	str	r3, [r7, #20]
 8004708:	e062      	b.n	80047d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	4a3c      	ldr	r2, [pc, #240]	@ (8004800 <USB_SetTurnaroundTime+0x120>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d306      	bcc.n	8004720 <USB_SetTurnaroundTime+0x40>
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	4a3b      	ldr	r2, [pc, #236]	@ (8004804 <USB_SetTurnaroundTime+0x124>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d202      	bcs.n	8004720 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800471a:	230e      	movs	r3, #14
 800471c:	617b      	str	r3, [r7, #20]
 800471e:	e057      	b.n	80047d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	4a38      	ldr	r2, [pc, #224]	@ (8004804 <USB_SetTurnaroundTime+0x124>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d306      	bcc.n	8004736 <USB_SetTurnaroundTime+0x56>
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	4a37      	ldr	r2, [pc, #220]	@ (8004808 <USB_SetTurnaroundTime+0x128>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d202      	bcs.n	8004736 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004730:	230d      	movs	r3, #13
 8004732:	617b      	str	r3, [r7, #20]
 8004734:	e04c      	b.n	80047d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	4a33      	ldr	r2, [pc, #204]	@ (8004808 <USB_SetTurnaroundTime+0x128>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d306      	bcc.n	800474c <USB_SetTurnaroundTime+0x6c>
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	4a32      	ldr	r2, [pc, #200]	@ (800480c <USB_SetTurnaroundTime+0x12c>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d802      	bhi.n	800474c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004746:	230c      	movs	r3, #12
 8004748:	617b      	str	r3, [r7, #20]
 800474a:	e041      	b.n	80047d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	4a2f      	ldr	r2, [pc, #188]	@ (800480c <USB_SetTurnaroundTime+0x12c>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d906      	bls.n	8004762 <USB_SetTurnaroundTime+0x82>
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	4a2e      	ldr	r2, [pc, #184]	@ (8004810 <USB_SetTurnaroundTime+0x130>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d802      	bhi.n	8004762 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800475c:	230b      	movs	r3, #11
 800475e:	617b      	str	r3, [r7, #20]
 8004760:	e036      	b.n	80047d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	4a2a      	ldr	r2, [pc, #168]	@ (8004810 <USB_SetTurnaroundTime+0x130>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d906      	bls.n	8004778 <USB_SetTurnaroundTime+0x98>
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	4a29      	ldr	r2, [pc, #164]	@ (8004814 <USB_SetTurnaroundTime+0x134>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d802      	bhi.n	8004778 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004772:	230a      	movs	r3, #10
 8004774:	617b      	str	r3, [r7, #20]
 8004776:	e02b      	b.n	80047d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	4a26      	ldr	r2, [pc, #152]	@ (8004814 <USB_SetTurnaroundTime+0x134>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d906      	bls.n	800478e <USB_SetTurnaroundTime+0xae>
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	4a25      	ldr	r2, [pc, #148]	@ (8004818 <USB_SetTurnaroundTime+0x138>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d202      	bcs.n	800478e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004788:	2309      	movs	r3, #9
 800478a:	617b      	str	r3, [r7, #20]
 800478c:	e020      	b.n	80047d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	4a21      	ldr	r2, [pc, #132]	@ (8004818 <USB_SetTurnaroundTime+0x138>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d306      	bcc.n	80047a4 <USB_SetTurnaroundTime+0xc4>
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	4a20      	ldr	r2, [pc, #128]	@ (800481c <USB_SetTurnaroundTime+0x13c>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d802      	bhi.n	80047a4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800479e:	2308      	movs	r3, #8
 80047a0:	617b      	str	r3, [r7, #20]
 80047a2:	e015      	b.n	80047d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	4a1d      	ldr	r2, [pc, #116]	@ (800481c <USB_SetTurnaroundTime+0x13c>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d906      	bls.n	80047ba <USB_SetTurnaroundTime+0xda>
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	4a1c      	ldr	r2, [pc, #112]	@ (8004820 <USB_SetTurnaroundTime+0x140>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d202      	bcs.n	80047ba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80047b4:	2307      	movs	r3, #7
 80047b6:	617b      	str	r3, [r7, #20]
 80047b8:	e00a      	b.n	80047d0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80047ba:	2306      	movs	r3, #6
 80047bc:	617b      	str	r3, [r7, #20]
 80047be:	e007      	b.n	80047d0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80047c0:	79fb      	ldrb	r3, [r7, #7]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d102      	bne.n	80047cc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80047c6:	2309      	movs	r3, #9
 80047c8:	617b      	str	r3, [r7, #20]
 80047ca:	e001      	b.n	80047d0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80047cc:	2309      	movs	r3, #9
 80047ce:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	68da      	ldr	r2, [r3, #12]
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	029b      	lsls	r3, r3, #10
 80047e4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80047e8:	431a      	orrs	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	371c      	adds	r7, #28
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr
 80047fc:	00d8acbf 	.word	0x00d8acbf
 8004800:	00e4e1c0 	.word	0x00e4e1c0
 8004804:	00f42400 	.word	0x00f42400
 8004808:	01067380 	.word	0x01067380
 800480c:	011a499f 	.word	0x011a499f
 8004810:	01312cff 	.word	0x01312cff
 8004814:	014ca43f 	.word	0x014ca43f
 8004818:	016e3600 	.word	0x016e3600
 800481c:	01a6ab1f 	.word	0x01a6ab1f
 8004820:	01e84800 	.word	0x01e84800

08004824 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f043 0201 	orr.w	r2, r3, #1
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	370c      	adds	r7, #12
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr

08004846 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004846:	b480      	push	{r7}
 8004848:	b083      	sub	sp, #12
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f023 0201 	bic.w	r2, r3, #1
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800485a:	2300      	movs	r3, #0
}
 800485c:	4618      	mov	r0, r3
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	460b      	mov	r3, r1
 8004872:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004874:	2300      	movs	r3, #0
 8004876:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004884:	78fb      	ldrb	r3, [r7, #3]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d115      	bne.n	80048b6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004896:	200a      	movs	r0, #10
 8004898:	f7fc fc8e 	bl	80011b8 <HAL_Delay>
      ms += 10U;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	330a      	adds	r3, #10
 80048a0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f001 f93f 	bl	8005b26 <USB_GetMode>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d01e      	beq.n	80048ec <USB_SetCurrentMode+0x84>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2bc7      	cmp	r3, #199	@ 0xc7
 80048b2:	d9f0      	bls.n	8004896 <USB_SetCurrentMode+0x2e>
 80048b4:	e01a      	b.n	80048ec <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80048b6:	78fb      	ldrb	r3, [r7, #3]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d115      	bne.n	80048e8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80048c8:	200a      	movs	r0, #10
 80048ca:	f7fc fc75 	bl	80011b8 <HAL_Delay>
      ms += 10U;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	330a      	adds	r3, #10
 80048d2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f001 f926 	bl	8005b26 <USB_GetMode>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d005      	beq.n	80048ec <USB_SetCurrentMode+0x84>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2bc7      	cmp	r3, #199	@ 0xc7
 80048e4:	d9f0      	bls.n	80048c8 <USB_SetCurrentMode+0x60>
 80048e6:	e001      	b.n	80048ec <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e005      	b.n	80048f8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2bc8      	cmp	r3, #200	@ 0xc8
 80048f0:	d101      	bne.n	80048f6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e000      	b.n	80048f8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3710      	adds	r7, #16
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004900:	b084      	sub	sp, #16
 8004902:	b580      	push	{r7, lr}
 8004904:	b086      	sub	sp, #24
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
 800490a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800490e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004912:	2300      	movs	r3, #0
 8004914:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800491a:	2300      	movs	r3, #0
 800491c:	613b      	str	r3, [r7, #16]
 800491e:	e009      	b.n	8004934 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	3340      	adds	r3, #64	@ 0x40
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	4413      	add	r3, r2
 800492a:	2200      	movs	r2, #0
 800492c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	3301      	adds	r3, #1
 8004932:	613b      	str	r3, [r7, #16]
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	2b0e      	cmp	r3, #14
 8004938:	d9f2      	bls.n	8004920 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800493a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800493e:	2b00      	cmp	r3, #0
 8004940:	d11c      	bne.n	800497c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004950:	f043 0302 	orr.w	r3, r3, #2
 8004954:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800495a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004966:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004972:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	639a      	str	r2, [r3, #56]	@ 0x38
 800497a:	e00b      	b.n	8004994 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004980:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800498c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800499a:	461a      	mov	r2, r3
 800499c:	2300      	movs	r3, #0
 800499e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80049a0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d10d      	bne.n	80049c4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80049a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d104      	bne.n	80049ba <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80049b0:	2100      	movs	r1, #0
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f968 	bl	8004c88 <USB_SetDevSpeed>
 80049b8:	e008      	b.n	80049cc <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80049ba:	2101      	movs	r1, #1
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f000 f963 	bl	8004c88 <USB_SetDevSpeed>
 80049c2:	e003      	b.n	80049cc <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80049c4:	2103      	movs	r1, #3
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f95e 	bl	8004c88 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80049cc:	2110      	movs	r1, #16
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 f8fa 	bl	8004bc8 <USB_FlushTxFifo>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d001      	beq.n	80049de <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 f924 	bl	8004c2c <USB_FlushRxFifo>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d001      	beq.n	80049ee <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049f4:	461a      	mov	r2, r3
 80049f6:	2300      	movs	r3, #0
 80049f8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a00:	461a      	mov	r2, r3
 8004a02:	2300      	movs	r3, #0
 8004a04:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	2300      	movs	r3, #0
 8004a10:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a12:	2300      	movs	r3, #0
 8004a14:	613b      	str	r3, [r7, #16]
 8004a16:	e043      	b.n	8004aa0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	015a      	lsls	r2, r3, #5
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	4413      	add	r3, r2
 8004a20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a2a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a2e:	d118      	bne.n	8004a62 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d10a      	bne.n	8004a4c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	015a      	lsls	r2, r3, #5
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a42:	461a      	mov	r2, r3
 8004a44:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004a48:	6013      	str	r3, [r2, #0]
 8004a4a:	e013      	b.n	8004a74 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	015a      	lsls	r2, r3, #5
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	4413      	add	r3, r2
 8004a54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a58:	461a      	mov	r2, r3
 8004a5a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004a5e:	6013      	str	r3, [r2, #0]
 8004a60:	e008      	b.n	8004a74 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	015a      	lsls	r2, r3, #5
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	4413      	add	r3, r2
 8004a6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a6e:	461a      	mov	r2, r3
 8004a70:	2300      	movs	r3, #0
 8004a72:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	015a      	lsls	r2, r3, #5
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a80:	461a      	mov	r2, r3
 8004a82:	2300      	movs	r3, #0
 8004a84:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	015a      	lsls	r2, r3, #5
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a92:	461a      	mov	r2, r3
 8004a94:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004a98:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	613b      	str	r3, [r7, #16]
 8004aa0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d3b5      	bcc.n	8004a18 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004aac:	2300      	movs	r3, #0
 8004aae:	613b      	str	r3, [r7, #16]
 8004ab0:	e043      	b.n	8004b3a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	015a      	lsls	r2, r3, #5
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	4413      	add	r3, r2
 8004aba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ac4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ac8:	d118      	bne.n	8004afc <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d10a      	bne.n	8004ae6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	015a      	lsls	r2, r3, #5
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004adc:	461a      	mov	r2, r3
 8004ade:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004ae2:	6013      	str	r3, [r2, #0]
 8004ae4:	e013      	b.n	8004b0e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	015a      	lsls	r2, r3, #5
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	4413      	add	r3, r2
 8004aee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004af2:	461a      	mov	r2, r3
 8004af4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004af8:	6013      	str	r3, [r2, #0]
 8004afa:	e008      	b.n	8004b0e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	015a      	lsls	r2, r3, #5
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	4413      	add	r3, r2
 8004b04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b08:	461a      	mov	r2, r3
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	015a      	lsls	r2, r3, #5
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	4413      	add	r3, r2
 8004b16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	015a      	lsls	r2, r3, #5
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	4413      	add	r3, r2
 8004b28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004b32:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	3301      	adds	r3, #1
 8004b38:	613b      	str	r3, [r7, #16]
 8004b3a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004b3e:	461a      	mov	r2, r3
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d3b5      	bcc.n	8004ab2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b58:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004b66:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004b68:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d105      	bne.n	8004b7c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	699b      	ldr	r3, [r3, #24]
 8004b74:	f043 0210 	orr.w	r2, r3, #16
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	699a      	ldr	r2, [r3, #24]
 8004b80:	4b10      	ldr	r3, [pc, #64]	@ (8004bc4 <USB_DevInit+0x2c4>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004b88:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d005      	beq.n	8004b9c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	699b      	ldr	r3, [r3, #24]
 8004b94:	f043 0208 	orr.w	r2, r3, #8
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004b9c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d107      	bne.n	8004bb4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004bac:	f043 0304 	orr.w	r3, r3, #4
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004bb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3718      	adds	r7, #24
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004bc0:	b004      	add	sp, #16
 8004bc2:	4770      	bx	lr
 8004bc4:	803c3800 	.word	0x803c3800

08004bc8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	3301      	adds	r3, #1
 8004bda:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004be2:	d901      	bls.n	8004be8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e01b      	b.n	8004c20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	daf2      	bge.n	8004bd6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	019b      	lsls	r3, r3, #6
 8004bf8:	f043 0220 	orr.w	r2, r3, #32
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	3301      	adds	r3, #1
 8004c04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c0c:	d901      	bls.n	8004c12 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e006      	b.n	8004c20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	f003 0320 	and.w	r3, r3, #32
 8004c1a:	2b20      	cmp	r3, #32
 8004c1c:	d0f0      	beq.n	8004c00 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3714      	adds	r7, #20
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c34:	2300      	movs	r3, #0
 8004c36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c44:	d901      	bls.n	8004c4a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e018      	b.n	8004c7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	daf2      	bge.n	8004c38 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004c52:	2300      	movs	r3, #0
 8004c54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2210      	movs	r2, #16
 8004c5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	3301      	adds	r3, #1
 8004c60:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c68:	d901      	bls.n	8004c6e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e006      	b.n	8004c7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	f003 0310 	and.w	r3, r3, #16
 8004c76:	2b10      	cmp	r3, #16
 8004c78:	d0f0      	beq.n	8004c5c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3714      	adds	r7, #20
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b085      	sub	sp, #20
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	460b      	mov	r3, r1
 8004c92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	78fb      	ldrb	r3, [r7, #3]
 8004ca2:	68f9      	ldr	r1, [r7, #12]
 8004ca4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3714      	adds	r7, #20
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr

08004cba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004cba:	b480      	push	{r7}
 8004cbc:	b087      	sub	sp, #28
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f003 0306 	and.w	r3, r3, #6
 8004cd2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d102      	bne.n	8004ce0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	75fb      	strb	r3, [r7, #23]
 8004cde:	e00a      	b.n	8004cf6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d002      	beq.n	8004cec <USB_GetDevSpeed+0x32>
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2b06      	cmp	r3, #6
 8004cea:	d102      	bne.n	8004cf2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004cec:	2302      	movs	r3, #2
 8004cee:	75fb      	strb	r3, [r7, #23]
 8004cf0:	e001      	b.n	8004cf6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004cf2:	230f      	movs	r3, #15
 8004cf4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	371c      	adds	r7, #28
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	785b      	ldrb	r3, [r3, #1]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d13a      	bne.n	8004d96 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d26:	69da      	ldr	r2, [r3, #28]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	f003 030f 	and.w	r3, r3, #15
 8004d30:	2101      	movs	r1, #1
 8004d32:	fa01 f303 	lsl.w	r3, r1, r3
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	68f9      	ldr	r1, [r7, #12]
 8004d3a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	015a      	lsls	r2, r3, #5
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	4413      	add	r3, r2
 8004d4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d155      	bne.n	8004e04 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	015a      	lsls	r2, r3, #5
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	4413      	add	r3, r2
 8004d60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	791b      	ldrb	r3, [r3, #4]
 8004d72:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d74:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	059b      	lsls	r3, r3, #22
 8004d7a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	68ba      	ldr	r2, [r7, #8]
 8004d80:	0151      	lsls	r1, r2, #5
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	440a      	add	r2, r1
 8004d86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d92:	6013      	str	r3, [r2, #0]
 8004d94:	e036      	b.n	8004e04 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d9c:	69da      	ldr	r2, [r3, #28]
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	f003 030f 	and.w	r3, r3, #15
 8004da6:	2101      	movs	r1, #1
 8004da8:	fa01 f303 	lsl.w	r3, r1, r3
 8004dac:	041b      	lsls	r3, r3, #16
 8004dae:	68f9      	ldr	r1, [r7, #12]
 8004db0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004db4:	4313      	orrs	r3, r2
 8004db6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	015a      	lsls	r2, r3, #5
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d11a      	bne.n	8004e04 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	015a      	lsls	r2, r3, #5
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	791b      	ldrb	r3, [r3, #4]
 8004de8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004dea:	430b      	orrs	r3, r1
 8004dec:	4313      	orrs	r3, r2
 8004dee:	68ba      	ldr	r2, [r7, #8]
 8004df0:	0151      	lsls	r1, r2, #5
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	440a      	add	r2, r1
 8004df6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004dfa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e02:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3714      	adds	r7, #20
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
	...

08004e14 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	785b      	ldrb	r3, [r3, #1]
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d161      	bne.n	8004ef4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	015a      	lsls	r2, r3, #5
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	4413      	add	r3, r2
 8004e38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004e42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e46:	d11f      	bne.n	8004e88 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	015a      	lsls	r2, r3, #5
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	4413      	add	r3, r2
 8004e50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68ba      	ldr	r2, [r7, #8]
 8004e58:	0151      	lsls	r1, r2, #5
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	440a      	add	r2, r1
 8004e5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e62:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004e66:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	015a      	lsls	r2, r3, #5
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	4413      	add	r3, r2
 8004e70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68ba      	ldr	r2, [r7, #8]
 8004e78:	0151      	lsls	r1, r2, #5
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	440a      	add	r2, r1
 8004e7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e82:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004e86:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	f003 030f 	and.w	r3, r3, #15
 8004e98:	2101      	movs	r1, #1
 8004e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	43db      	mvns	r3, r3
 8004ea2:	68f9      	ldr	r1, [r7, #12]
 8004ea4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004eb2:	69da      	ldr	r2, [r3, #28]
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	f003 030f 	and.w	r3, r3, #15
 8004ebc:	2101      	movs	r1, #1
 8004ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	43db      	mvns	r3, r3
 8004ec6:	68f9      	ldr	r1, [r7, #12]
 8004ec8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004ecc:	4013      	ands	r3, r2
 8004ece:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	015a      	lsls	r2, r3, #5
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	0159      	lsls	r1, r3, #5
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	440b      	add	r3, r1
 8004ee6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004eea:	4619      	mov	r1, r3
 8004eec:	4b35      	ldr	r3, [pc, #212]	@ (8004fc4 <USB_DeactivateEndpoint+0x1b0>)
 8004eee:	4013      	ands	r3, r2
 8004ef0:	600b      	str	r3, [r1, #0]
 8004ef2:	e060      	b.n	8004fb6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	015a      	lsls	r2, r3, #5
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	4413      	add	r3, r2
 8004efc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f0a:	d11f      	bne.n	8004f4c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	015a      	lsls	r2, r3, #5
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	4413      	add	r3, r2
 8004f14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68ba      	ldr	r2, [r7, #8]
 8004f1c:	0151      	lsls	r1, r2, #5
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	440a      	add	r2, r1
 8004f22:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f26:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004f2a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	015a      	lsls	r2, r3, #5
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	4413      	add	r3, r2
 8004f34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68ba      	ldr	r2, [r7, #8]
 8004f3c:	0151      	lsls	r1, r2, #5
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	440a      	add	r2, r1
 8004f42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f46:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004f4a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	f003 030f 	and.w	r3, r3, #15
 8004f5c:	2101      	movs	r1, #1
 8004f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f62:	041b      	lsls	r3, r3, #16
 8004f64:	43db      	mvns	r3, r3
 8004f66:	68f9      	ldr	r1, [r7, #12]
 8004f68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f76:	69da      	ldr	r2, [r3, #28]
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	f003 030f 	and.w	r3, r3, #15
 8004f80:	2101      	movs	r1, #1
 8004f82:	fa01 f303 	lsl.w	r3, r1, r3
 8004f86:	041b      	lsls	r3, r3, #16
 8004f88:	43db      	mvns	r3, r3
 8004f8a:	68f9      	ldr	r1, [r7, #12]
 8004f8c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f90:	4013      	ands	r3, r2
 8004f92:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	015a      	lsls	r2, r3, #5
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	0159      	lsls	r1, r3, #5
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	440b      	add	r3, r1
 8004faa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fae:	4619      	mov	r1, r3
 8004fb0:	4b05      	ldr	r3, [pc, #20]	@ (8004fc8 <USB_DeactivateEndpoint+0x1b4>)
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004fb6:	2300      	movs	r3, #0
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3714      	adds	r7, #20
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr
 8004fc4:	ec337800 	.word	0xec337800
 8004fc8:	eff37800 	.word	0xeff37800

08004fcc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b08a      	sub	sp, #40	@ 0x28
 8004fd0:	af02      	add	r7, sp, #8
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	785b      	ldrb	r3, [r3, #1]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	f040 817f 	bne.w	80052ec <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d132      	bne.n	800505c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	015a      	lsls	r2, r3, #5
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	69ba      	ldr	r2, [r7, #24]
 8005006:	0151      	lsls	r1, r2, #5
 8005008:	69fa      	ldr	r2, [r7, #28]
 800500a:	440a      	add	r2, r1
 800500c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005010:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005014:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005018:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	015a      	lsls	r2, r3, #5
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	4413      	add	r3, r2
 8005022:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	69ba      	ldr	r2, [r7, #24]
 800502a:	0151      	lsls	r1, r2, #5
 800502c:	69fa      	ldr	r2, [r7, #28]
 800502e:	440a      	add	r2, r1
 8005030:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005034:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005038:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	015a      	lsls	r2, r3, #5
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	4413      	add	r3, r2
 8005042:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	69ba      	ldr	r2, [r7, #24]
 800504a:	0151      	lsls	r1, r2, #5
 800504c:	69fa      	ldr	r2, [r7, #28]
 800504e:	440a      	add	r2, r1
 8005050:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005054:	0cdb      	lsrs	r3, r3, #19
 8005056:	04db      	lsls	r3, r3, #19
 8005058:	6113      	str	r3, [r2, #16]
 800505a:	e097      	b.n	800518c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	015a      	lsls	r2, r3, #5
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	4413      	add	r3, r2
 8005064:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	69ba      	ldr	r2, [r7, #24]
 800506c:	0151      	lsls	r1, r2, #5
 800506e:	69fa      	ldr	r2, [r7, #28]
 8005070:	440a      	add	r2, r1
 8005072:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005076:	0cdb      	lsrs	r3, r3, #19
 8005078:	04db      	lsls	r3, r3, #19
 800507a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	015a      	lsls	r2, r3, #5
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	4413      	add	r3, r2
 8005084:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	69ba      	ldr	r2, [r7, #24]
 800508c:	0151      	lsls	r1, r2, #5
 800508e:	69fa      	ldr	r2, [r7, #28]
 8005090:	440a      	add	r2, r1
 8005092:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005096:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800509a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800509e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d11a      	bne.n	80050dc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	691a      	ldr	r2, [r3, #16]
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d903      	bls.n	80050ba <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	689a      	ldr	r2, [r3, #8]
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	015a      	lsls	r2, r3, #5
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	4413      	add	r3, r2
 80050c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050c6:	691b      	ldr	r3, [r3, #16]
 80050c8:	69ba      	ldr	r2, [r7, #24]
 80050ca:	0151      	lsls	r1, r2, #5
 80050cc:	69fa      	ldr	r2, [r7, #28]
 80050ce:	440a      	add	r2, r1
 80050d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80050d4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80050d8:	6113      	str	r3, [r2, #16]
 80050da:	e044      	b.n	8005166 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	691a      	ldr	r2, [r3, #16]
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	4413      	add	r3, r2
 80050e6:	1e5a      	subs	r2, r3, #1
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	015a      	lsls	r2, r3, #5
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	4413      	add	r3, r2
 80050fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050fe:	691a      	ldr	r2, [r3, #16]
 8005100:	8afb      	ldrh	r3, [r7, #22]
 8005102:	04d9      	lsls	r1, r3, #19
 8005104:	4ba4      	ldr	r3, [pc, #656]	@ (8005398 <USB_EPStartXfer+0x3cc>)
 8005106:	400b      	ands	r3, r1
 8005108:	69b9      	ldr	r1, [r7, #24]
 800510a:	0148      	lsls	r0, r1, #5
 800510c:	69f9      	ldr	r1, [r7, #28]
 800510e:	4401      	add	r1, r0
 8005110:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005114:	4313      	orrs	r3, r2
 8005116:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	791b      	ldrb	r3, [r3, #4]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d122      	bne.n	8005166 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	015a      	lsls	r2, r3, #5
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	4413      	add	r3, r2
 8005128:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	69ba      	ldr	r2, [r7, #24]
 8005130:	0151      	lsls	r1, r2, #5
 8005132:	69fa      	ldr	r2, [r7, #28]
 8005134:	440a      	add	r2, r1
 8005136:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800513a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800513e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	015a      	lsls	r2, r3, #5
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	4413      	add	r3, r2
 8005148:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800514c:	691a      	ldr	r2, [r3, #16]
 800514e:	8afb      	ldrh	r3, [r7, #22]
 8005150:	075b      	lsls	r3, r3, #29
 8005152:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8005156:	69b9      	ldr	r1, [r7, #24]
 8005158:	0148      	lsls	r0, r1, #5
 800515a:	69f9      	ldr	r1, [r7, #28]
 800515c:	4401      	add	r1, r0
 800515e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005162:	4313      	orrs	r3, r2
 8005164:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	015a      	lsls	r2, r3, #5
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	4413      	add	r3, r2
 800516e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005172:	691a      	ldr	r2, [r3, #16]
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800517c:	69b9      	ldr	r1, [r7, #24]
 800517e:	0148      	lsls	r0, r1, #5
 8005180:	69f9      	ldr	r1, [r7, #28]
 8005182:	4401      	add	r1, r0
 8005184:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005188:	4313      	orrs	r3, r2
 800518a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800518c:	79fb      	ldrb	r3, [r7, #7]
 800518e:	2b01      	cmp	r3, #1
 8005190:	d14b      	bne.n	800522a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	69db      	ldr	r3, [r3, #28]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d009      	beq.n	80051ae <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	015a      	lsls	r2, r3, #5
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	4413      	add	r3, r2
 80051a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051a6:	461a      	mov	r2, r3
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	69db      	ldr	r3, [r3, #28]
 80051ac:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	791b      	ldrb	r3, [r3, #4]
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d128      	bne.n	8005208 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d110      	bne.n	80051e8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	015a      	lsls	r2, r3, #5
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	4413      	add	r3, r2
 80051ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	69ba      	ldr	r2, [r7, #24]
 80051d6:	0151      	lsls	r1, r2, #5
 80051d8:	69fa      	ldr	r2, [r7, #28]
 80051da:	440a      	add	r2, r1
 80051dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051e0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80051e4:	6013      	str	r3, [r2, #0]
 80051e6:	e00f      	b.n	8005208 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	015a      	lsls	r2, r3, #5
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	4413      	add	r3, r2
 80051f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	69ba      	ldr	r2, [r7, #24]
 80051f8:	0151      	lsls	r1, r2, #5
 80051fa:	69fa      	ldr	r2, [r7, #28]
 80051fc:	440a      	add	r2, r1
 80051fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005202:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005206:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	015a      	lsls	r2, r3, #5
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	4413      	add	r3, r2
 8005210:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	69ba      	ldr	r2, [r7, #24]
 8005218:	0151      	lsls	r1, r2, #5
 800521a:	69fa      	ldr	r2, [r7, #28]
 800521c:	440a      	add	r2, r1
 800521e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005222:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005226:	6013      	str	r3, [r2, #0]
 8005228:	e166      	b.n	80054f8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	015a      	lsls	r2, r3, #5
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	4413      	add	r3, r2
 8005232:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	69ba      	ldr	r2, [r7, #24]
 800523a:	0151      	lsls	r1, r2, #5
 800523c:	69fa      	ldr	r2, [r7, #28]
 800523e:	440a      	add	r2, r1
 8005240:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005244:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005248:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	791b      	ldrb	r3, [r3, #4]
 800524e:	2b01      	cmp	r3, #1
 8005250:	d015      	beq.n	800527e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	2b00      	cmp	r3, #0
 8005258:	f000 814e 	beq.w	80054f8 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005262:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	f003 030f 	and.w	r3, r3, #15
 800526c:	2101      	movs	r1, #1
 800526e:	fa01 f303 	lsl.w	r3, r1, r3
 8005272:	69f9      	ldr	r1, [r7, #28]
 8005274:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005278:	4313      	orrs	r3, r2
 800527a:	634b      	str	r3, [r1, #52]	@ 0x34
 800527c:	e13c      	b.n	80054f8 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800528a:	2b00      	cmp	r3, #0
 800528c:	d110      	bne.n	80052b0 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	015a      	lsls	r2, r3, #5
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	4413      	add	r3, r2
 8005296:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	69ba      	ldr	r2, [r7, #24]
 800529e:	0151      	lsls	r1, r2, #5
 80052a0:	69fa      	ldr	r2, [r7, #28]
 80052a2:	440a      	add	r2, r1
 80052a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052a8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80052ac:	6013      	str	r3, [r2, #0]
 80052ae:	e00f      	b.n	80052d0 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	015a      	lsls	r2, r3, #5
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	4413      	add	r3, r2
 80052b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	69ba      	ldr	r2, [r7, #24]
 80052c0:	0151      	lsls	r1, r2, #5
 80052c2:	69fa      	ldr	r2, [r7, #28]
 80052c4:	440a      	add	r2, r1
 80052c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052ce:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	68d9      	ldr	r1, [r3, #12]
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	781a      	ldrb	r2, [r3, #0]
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	b298      	uxth	r0, r3
 80052de:	79fb      	ldrb	r3, [r7, #7]
 80052e0:	9300      	str	r3, [sp, #0]
 80052e2:	4603      	mov	r3, r0
 80052e4:	68f8      	ldr	r0, [r7, #12]
 80052e6:	f000 f9b9 	bl	800565c <USB_WritePacket>
 80052ea:	e105      	b.n	80054f8 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	015a      	lsls	r2, r3, #5
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	4413      	add	r3, r2
 80052f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	69ba      	ldr	r2, [r7, #24]
 80052fc:	0151      	lsls	r1, r2, #5
 80052fe:	69fa      	ldr	r2, [r7, #28]
 8005300:	440a      	add	r2, r1
 8005302:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005306:	0cdb      	lsrs	r3, r3, #19
 8005308:	04db      	lsls	r3, r3, #19
 800530a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	015a      	lsls	r2, r3, #5
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	4413      	add	r3, r2
 8005314:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	69ba      	ldr	r2, [r7, #24]
 800531c:	0151      	lsls	r1, r2, #5
 800531e:	69fa      	ldr	r2, [r7, #28]
 8005320:	440a      	add	r2, r1
 8005322:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005326:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800532a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800532e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d132      	bne.n	800539c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d003      	beq.n	8005346 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	689a      	ldr	r2, [r3, #8]
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	689a      	ldr	r2, [r3, #8]
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	015a      	lsls	r2, r3, #5
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	4413      	add	r3, r2
 8005356:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800535a:	691a      	ldr	r2, [r3, #16]
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	6a1b      	ldr	r3, [r3, #32]
 8005360:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005364:	69b9      	ldr	r1, [r7, #24]
 8005366:	0148      	lsls	r0, r1, #5
 8005368:	69f9      	ldr	r1, [r7, #28]
 800536a:	4401      	add	r1, r0
 800536c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005370:	4313      	orrs	r3, r2
 8005372:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	015a      	lsls	r2, r3, #5
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	4413      	add	r3, r2
 800537c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	69ba      	ldr	r2, [r7, #24]
 8005384:	0151      	lsls	r1, r2, #5
 8005386:	69fa      	ldr	r2, [r7, #28]
 8005388:	440a      	add	r2, r1
 800538a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800538e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005392:	6113      	str	r3, [r2, #16]
 8005394:	e062      	b.n	800545c <USB_EPStartXfer+0x490>
 8005396:	bf00      	nop
 8005398:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d123      	bne.n	80053ec <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	015a      	lsls	r2, r3, #5
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	4413      	add	r3, r2
 80053ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053b0:	691a      	ldr	r2, [r3, #16]
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053ba:	69b9      	ldr	r1, [r7, #24]
 80053bc:	0148      	lsls	r0, r1, #5
 80053be:	69f9      	ldr	r1, [r7, #28]
 80053c0:	4401      	add	r1, r0
 80053c2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80053c6:	4313      	orrs	r3, r2
 80053c8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	015a      	lsls	r2, r3, #5
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	4413      	add	r3, r2
 80053d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	69ba      	ldr	r2, [r7, #24]
 80053da:	0151      	lsls	r1, r2, #5
 80053dc:	69fa      	ldr	r2, [r7, #28]
 80053de:	440a      	add	r2, r1
 80053e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053e4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80053e8:	6113      	str	r3, [r2, #16]
 80053ea:	e037      	b.n	800545c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	691a      	ldr	r2, [r3, #16]
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	4413      	add	r3, r2
 80053f6:	1e5a      	subs	r2, r3, #1
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005400:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	8afa      	ldrh	r2, [r7, #22]
 8005408:	fb03 f202 	mul.w	r2, r3, r2
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	015a      	lsls	r2, r3, #5
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	4413      	add	r3, r2
 8005418:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800541c:	691a      	ldr	r2, [r3, #16]
 800541e:	8afb      	ldrh	r3, [r7, #22]
 8005420:	04d9      	lsls	r1, r3, #19
 8005422:	4b38      	ldr	r3, [pc, #224]	@ (8005504 <USB_EPStartXfer+0x538>)
 8005424:	400b      	ands	r3, r1
 8005426:	69b9      	ldr	r1, [r7, #24]
 8005428:	0148      	lsls	r0, r1, #5
 800542a:	69f9      	ldr	r1, [r7, #28]
 800542c:	4401      	add	r1, r0
 800542e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005432:	4313      	orrs	r3, r2
 8005434:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	015a      	lsls	r2, r3, #5
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	4413      	add	r3, r2
 800543e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005442:	691a      	ldr	r2, [r3, #16]
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	6a1b      	ldr	r3, [r3, #32]
 8005448:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800544c:	69b9      	ldr	r1, [r7, #24]
 800544e:	0148      	lsls	r0, r1, #5
 8005450:	69f9      	ldr	r1, [r7, #28]
 8005452:	4401      	add	r1, r0
 8005454:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005458:	4313      	orrs	r3, r2
 800545a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800545c:	79fb      	ldrb	r3, [r7, #7]
 800545e:	2b01      	cmp	r3, #1
 8005460:	d10d      	bne.n	800547e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d009      	beq.n	800547e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	68d9      	ldr	r1, [r3, #12]
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	015a      	lsls	r2, r3, #5
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	4413      	add	r3, r2
 8005476:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800547a:	460a      	mov	r2, r1
 800547c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	791b      	ldrb	r3, [r3, #4]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d128      	bne.n	80054d8 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005492:	2b00      	cmp	r3, #0
 8005494:	d110      	bne.n	80054b8 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	015a      	lsls	r2, r3, #5
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	4413      	add	r3, r2
 800549e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	69ba      	ldr	r2, [r7, #24]
 80054a6:	0151      	lsls	r1, r2, #5
 80054a8:	69fa      	ldr	r2, [r7, #28]
 80054aa:	440a      	add	r2, r1
 80054ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054b0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80054b4:	6013      	str	r3, [r2, #0]
 80054b6:	e00f      	b.n	80054d8 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	015a      	lsls	r2, r3, #5
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	4413      	add	r3, r2
 80054c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	69ba      	ldr	r2, [r7, #24]
 80054c8:	0151      	lsls	r1, r2, #5
 80054ca:	69fa      	ldr	r2, [r7, #28]
 80054cc:	440a      	add	r2, r1
 80054ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054d6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	015a      	lsls	r2, r3, #5
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	4413      	add	r3, r2
 80054e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	69ba      	ldr	r2, [r7, #24]
 80054e8:	0151      	lsls	r1, r2, #5
 80054ea:	69fa      	ldr	r2, [r7, #28]
 80054ec:	440a      	add	r2, r1
 80054ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054f2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80054f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3720      	adds	r7, #32
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	1ff80000 	.word	0x1ff80000

08005508 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005508:	b480      	push	{r7}
 800550a:	b087      	sub	sp, #28
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005512:	2300      	movs	r3, #0
 8005514:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005516:	2300      	movs	r3, #0
 8005518:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	785b      	ldrb	r3, [r3, #1]
 8005522:	2b01      	cmp	r3, #1
 8005524:	d14a      	bne.n	80055bc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	015a      	lsls	r2, r3, #5
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	4413      	add	r3, r2
 8005530:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800553a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800553e:	f040 8086 	bne.w	800564e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	015a      	lsls	r2, r3, #5
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	4413      	add	r3, r2
 800554c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	683a      	ldr	r2, [r7, #0]
 8005554:	7812      	ldrb	r2, [r2, #0]
 8005556:	0151      	lsls	r1, r2, #5
 8005558:	693a      	ldr	r2, [r7, #16]
 800555a:	440a      	add	r2, r1
 800555c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005560:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005564:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	015a      	lsls	r2, r3, #5
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	4413      	add	r3, r2
 8005570:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	683a      	ldr	r2, [r7, #0]
 8005578:	7812      	ldrb	r2, [r2, #0]
 800557a:	0151      	lsls	r1, r2, #5
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	440a      	add	r2, r1
 8005580:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005584:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005588:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	3301      	adds	r3, #1
 800558e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005596:	4293      	cmp	r3, r2
 8005598:	d902      	bls.n	80055a0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	75fb      	strb	r3, [r7, #23]
          break;
 800559e:	e056      	b.n	800564e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	015a      	lsls	r2, r3, #5
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	4413      	add	r3, r2
 80055aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80055b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80055b8:	d0e7      	beq.n	800558a <USB_EPStopXfer+0x82>
 80055ba:	e048      	b.n	800564e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	015a      	lsls	r2, r3, #5
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	4413      	add	r3, r2
 80055c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80055d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80055d4:	d13b      	bne.n	800564e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	015a      	lsls	r2, r3, #5
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	4413      	add	r3, r2
 80055e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	683a      	ldr	r2, [r7, #0]
 80055e8:	7812      	ldrb	r2, [r2, #0]
 80055ea:	0151      	lsls	r1, r2, #5
 80055ec:	693a      	ldr	r2, [r7, #16]
 80055ee:	440a      	add	r2, r1
 80055f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055f4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80055f8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	015a      	lsls	r2, r3, #5
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	4413      	add	r3, r2
 8005604:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	683a      	ldr	r2, [r7, #0]
 800560c:	7812      	ldrb	r2, [r2, #0]
 800560e:	0151      	lsls	r1, r2, #5
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	440a      	add	r2, r1
 8005614:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005618:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800561c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	3301      	adds	r3, #1
 8005622:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f242 7210 	movw	r2, #10000	@ 0x2710
 800562a:	4293      	cmp	r3, r2
 800562c:	d902      	bls.n	8005634 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	75fb      	strb	r3, [r7, #23]
          break;
 8005632:	e00c      	b.n	800564e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	015a      	lsls	r2, r3, #5
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	4413      	add	r3, r2
 800563e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005648:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800564c:	d0e7      	beq.n	800561e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800564e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005650:	4618      	mov	r0, r3
 8005652:	371c      	adds	r7, #28
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800565c:	b480      	push	{r7}
 800565e:	b089      	sub	sp, #36	@ 0x24
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	4611      	mov	r1, r2
 8005668:	461a      	mov	r2, r3
 800566a:	460b      	mov	r3, r1
 800566c:	71fb      	strb	r3, [r7, #7]
 800566e:	4613      	mov	r3, r2
 8005670:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800567a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800567e:	2b00      	cmp	r3, #0
 8005680:	d123      	bne.n	80056ca <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005682:	88bb      	ldrh	r3, [r7, #4]
 8005684:	3303      	adds	r3, #3
 8005686:	089b      	lsrs	r3, r3, #2
 8005688:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800568a:	2300      	movs	r3, #0
 800568c:	61bb      	str	r3, [r7, #24]
 800568e:	e018      	b.n	80056c2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005690:	79fb      	ldrb	r3, [r7, #7]
 8005692:	031a      	lsls	r2, r3, #12
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	4413      	add	r3, r2
 8005698:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800569c:	461a      	mov	r2, r3
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	3301      	adds	r3, #1
 80056a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	3301      	adds	r3, #1
 80056ae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	3301      	adds	r3, #1
 80056b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	3301      	adds	r3, #1
 80056ba:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	3301      	adds	r3, #1
 80056c0:	61bb      	str	r3, [r7, #24]
 80056c2:	69ba      	ldr	r2, [r7, #24]
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d3e2      	bcc.n	8005690 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3724      	adds	r7, #36	@ 0x24
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80056d8:	b480      	push	{r7}
 80056da:	b08b      	sub	sp, #44	@ 0x2c
 80056dc:	af00      	add	r7, sp, #0
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	4613      	mov	r3, r2
 80056e4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80056ee:	88fb      	ldrh	r3, [r7, #6]
 80056f0:	089b      	lsrs	r3, r3, #2
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80056f6:	88fb      	ldrh	r3, [r7, #6]
 80056f8:	f003 0303 	and.w	r3, r3, #3
 80056fc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80056fe:	2300      	movs	r3, #0
 8005700:	623b      	str	r3, [r7, #32]
 8005702:	e014      	b.n	800572e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800570e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005712:	3301      	adds	r3, #1
 8005714:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005718:	3301      	adds	r3, #1
 800571a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800571c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800571e:	3301      	adds	r3, #1
 8005720:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005724:	3301      	adds	r3, #1
 8005726:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005728:	6a3b      	ldr	r3, [r7, #32]
 800572a:	3301      	adds	r3, #1
 800572c:	623b      	str	r3, [r7, #32]
 800572e:	6a3a      	ldr	r2, [r7, #32]
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	429a      	cmp	r2, r3
 8005734:	d3e6      	bcc.n	8005704 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005736:	8bfb      	ldrh	r3, [r7, #30]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d01e      	beq.n	800577a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800573c:	2300      	movs	r3, #0
 800573e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005746:	461a      	mov	r2, r3
 8005748:	f107 0310 	add.w	r3, r7, #16
 800574c:	6812      	ldr	r2, [r2, #0]
 800574e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	6a3b      	ldr	r3, [r7, #32]
 8005754:	b2db      	uxtb	r3, r3
 8005756:	00db      	lsls	r3, r3, #3
 8005758:	fa22 f303 	lsr.w	r3, r2, r3
 800575c:	b2da      	uxtb	r2, r3
 800575e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005760:	701a      	strb	r2, [r3, #0]
      i++;
 8005762:	6a3b      	ldr	r3, [r7, #32]
 8005764:	3301      	adds	r3, #1
 8005766:	623b      	str	r3, [r7, #32]
      pDest++;
 8005768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800576a:	3301      	adds	r3, #1
 800576c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800576e:	8bfb      	ldrh	r3, [r7, #30]
 8005770:	3b01      	subs	r3, #1
 8005772:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005774:	8bfb      	ldrh	r3, [r7, #30]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d1ea      	bne.n	8005750 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800577a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800577c:	4618      	mov	r0, r3
 800577e:	372c      	adds	r7, #44	@ 0x2c
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005788:	b480      	push	{r7}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	785b      	ldrb	r3, [r3, #1]
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d12c      	bne.n	80057fe <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	015a      	lsls	r2, r3, #5
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	4413      	add	r3, r2
 80057ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	db12      	blt.n	80057dc <USB_EPSetStall+0x54>
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00f      	beq.n	80057dc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	015a      	lsls	r2, r3, #5
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	4413      	add	r3, r2
 80057c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68ba      	ldr	r2, [r7, #8]
 80057cc:	0151      	lsls	r1, r2, #5
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	440a      	add	r2, r1
 80057d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057d6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80057da:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	015a      	lsls	r2, r3, #5
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	4413      	add	r3, r2
 80057e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68ba      	ldr	r2, [r7, #8]
 80057ec:	0151      	lsls	r1, r2, #5
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	440a      	add	r2, r1
 80057f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057f6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80057fa:	6013      	str	r3, [r2, #0]
 80057fc:	e02b      	b.n	8005856 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	015a      	lsls	r2, r3, #5
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	4413      	add	r3, r2
 8005806:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2b00      	cmp	r3, #0
 800580e:	db12      	blt.n	8005836 <USB_EPSetStall+0xae>
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00f      	beq.n	8005836 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	015a      	lsls	r2, r3, #5
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	4413      	add	r3, r2
 800581e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68ba      	ldr	r2, [r7, #8]
 8005826:	0151      	lsls	r1, r2, #5
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	440a      	add	r2, r1
 800582c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005830:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005834:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	015a      	lsls	r2, r3, #5
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	4413      	add	r3, r2
 800583e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68ba      	ldr	r2, [r7, #8]
 8005846:	0151      	lsls	r1, r2, #5
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	440a      	add	r2, r1
 800584c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005850:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005854:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005856:	2300      	movs	r3, #0
}
 8005858:	4618      	mov	r0, r3
 800585a:	3714      	adds	r7, #20
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	785b      	ldrb	r3, [r3, #1]
 800587c:	2b01      	cmp	r3, #1
 800587e:	d128      	bne.n	80058d2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	015a      	lsls	r2, r3, #5
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	4413      	add	r3, r2
 8005888:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68ba      	ldr	r2, [r7, #8]
 8005890:	0151      	lsls	r1, r2, #5
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	440a      	add	r2, r1
 8005896:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800589a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800589e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	791b      	ldrb	r3, [r3, #4]
 80058a4:	2b03      	cmp	r3, #3
 80058a6:	d003      	beq.n	80058b0 <USB_EPClearStall+0x4c>
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	791b      	ldrb	r3, [r3, #4]
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d138      	bne.n	8005922 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	015a      	lsls	r2, r3, #5
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	4413      	add	r3, r2
 80058b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68ba      	ldr	r2, [r7, #8]
 80058c0:	0151      	lsls	r1, r2, #5
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	440a      	add	r2, r1
 80058c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058ce:	6013      	str	r3, [r2, #0]
 80058d0:	e027      	b.n	8005922 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	015a      	lsls	r2, r3, #5
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	4413      	add	r3, r2
 80058da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68ba      	ldr	r2, [r7, #8]
 80058e2:	0151      	lsls	r1, r2, #5
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	440a      	add	r2, r1
 80058e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80058ec:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80058f0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	791b      	ldrb	r3, [r3, #4]
 80058f6:	2b03      	cmp	r3, #3
 80058f8:	d003      	beq.n	8005902 <USB_EPClearStall+0x9e>
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	791b      	ldrb	r3, [r3, #4]
 80058fe:	2b02      	cmp	r3, #2
 8005900:	d10f      	bne.n	8005922 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	015a      	lsls	r2, r3, #5
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	4413      	add	r3, r2
 800590a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68ba      	ldr	r2, [r7, #8]
 8005912:	0151      	lsls	r1, r2, #5
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	440a      	add	r2, r1
 8005918:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800591c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005920:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3714      	adds	r7, #20
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005930:	b480      	push	{r7}
 8005932:	b085      	sub	sp, #20
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	460b      	mov	r3, r1
 800593a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800594e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005952:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	78fb      	ldrb	r3, [r7, #3]
 800595e:	011b      	lsls	r3, r3, #4
 8005960:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005964:	68f9      	ldr	r1, [r7, #12]
 8005966:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800596a:	4313      	orrs	r3, r2
 800596c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	3714      	adds	r7, #20
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800597c:	b480      	push	{r7}
 800597e:	b085      	sub	sp, #20
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005996:	f023 0303 	bic.w	r3, r3, #3
 800599a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80059aa:	f023 0302 	bic.w	r3, r3, #2
 80059ae:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3714      	adds	r7, #20
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr

080059be <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80059be:	b480      	push	{r7}
 80059c0:	b085      	sub	sp, #20
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80059d8:	f023 0303 	bic.w	r3, r3, #3
 80059dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80059ec:	f043 0302 	orr.w	r3, r3, #2
 80059f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80059f2:	2300      	movs	r3, #0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3714      	adds	r7, #20
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b085      	sub	sp, #20
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	695b      	ldr	r3, [r3, #20]
 8005a0c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	4013      	ands	r3, r2
 8005a16:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005a18:	68fb      	ldr	r3, [r7, #12]
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3714      	adds	r7, #20
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr

08005a26 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005a26:	b480      	push	{r7}
 8005a28:	b085      	sub	sp, #20
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a42:	69db      	ldr	r3, [r3, #28]
 8005a44:	68ba      	ldr	r2, [r7, #8]
 8005a46:	4013      	ands	r3, r2
 8005a48:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	0c1b      	lsrs	r3, r3, #16
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3714      	adds	r7, #20
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr

08005a5a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005a5a:	b480      	push	{r7}
 8005a5c:	b085      	sub	sp, #20
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a76:	69db      	ldr	r3, [r3, #28]
 8005a78:	68ba      	ldr	r2, [r7, #8]
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	b29b      	uxth	r3, r3
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3714      	adds	r7, #20
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr

08005a8e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005a8e:	b480      	push	{r7}
 8005a90:	b085      	sub	sp, #20
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
 8005a96:	460b      	mov	r3, r1
 8005a98:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005a9e:	78fb      	ldrb	r3, [r7, #3]
 8005aa0:	015a      	lsls	r2, r3, #5
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ab4:	695b      	ldr	r3, [r3, #20]
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	4013      	ands	r3, r2
 8005aba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005abc:	68bb      	ldr	r3, [r7, #8]
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3714      	adds	r7, #20
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr

08005aca <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005aca:	b480      	push	{r7}
 8005acc:	b087      	sub	sp, #28
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
 8005ad2:	460b      	mov	r3, r1
 8005ad4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005aea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005aec:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005aee:	78fb      	ldrb	r3, [r7, #3]
 8005af0:	f003 030f 	and.w	r3, r3, #15
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	fa22 f303 	lsr.w	r3, r2, r3
 8005afa:	01db      	lsls	r3, r3, #7
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	693a      	ldr	r2, [r7, #16]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005b04:	78fb      	ldrb	r3, [r7, #3]
 8005b06:	015a      	lsls	r2, r3, #5
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	693a      	ldr	r2, [r7, #16]
 8005b14:	4013      	ands	r3, r2
 8005b16:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005b18:	68bb      	ldr	r3, [r7, #8]
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	371c      	adds	r7, #28
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr

08005b26 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b26:	b480      	push	{r7}
 8005b28:	b083      	sub	sp, #12
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	695b      	ldr	r3, [r3, #20]
 8005b32:	f003 0301 	and.w	r3, r3, #1
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	370c      	adds	r7, #12
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr

08005b42 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b42:	b480      	push	{r7}
 8005b44:	b085      	sub	sp, #20
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b5c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005b60:	f023 0307 	bic.w	r3, r3, #7
 8005b64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	68fa      	ldr	r2, [r7, #12]
 8005b70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3714      	adds	r7, #20
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b087      	sub	sp, #28
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	460b      	mov	r3, r1
 8005b92:	607a      	str	r2, [r7, #4]
 8005b94:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	333c      	adds	r3, #60	@ 0x3c
 8005b9e:	3304      	adds	r3, #4
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	4a26      	ldr	r2, [pc, #152]	@ (8005c40 <USB_EP0_OutStart+0xb8>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d90a      	bls.n	8005bc2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005bb8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005bbc:	d101      	bne.n	8005bc2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	e037      	b.n	8005c32 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bc8:	461a      	mov	r2, r3
 8005bca:	2300      	movs	r3, #0
 8005bcc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	697a      	ldr	r2, [r7, #20]
 8005bd8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bdc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005be0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bf0:	f043 0318 	orr.w	r3, r3, #24
 8005bf4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	697a      	ldr	r2, [r7, #20]
 8005c00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c04:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005c08:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005c0a:	7afb      	ldrb	r3, [r7, #11]
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d10f      	bne.n	8005c30 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c16:	461a      	mov	r2, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	697a      	ldr	r2, [r7, #20]
 8005c26:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c2a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005c2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	371c      	adds	r7, #28
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	4f54300a 	.word	0x4f54300a

08005c44 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b085      	sub	sp, #20
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	3301      	adds	r3, #1
 8005c54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c5c:	d901      	bls.n	8005c62 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	e01b      	b.n	8005c9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	daf2      	bge.n	8005c50 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	f043 0201 	orr.w	r2, r3, #1
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c86:	d901      	bls.n	8005c8c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	e006      	b.n	8005c9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	f003 0301 	and.w	r3, r3, #1
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d0f0      	beq.n	8005c7a <USB_CoreReset+0x36>

  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3714      	adds	r7, #20
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
	...

08005ca8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005cb4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005cb8:	f002 fc9a 	bl	80085f0 <USBD_static_malloc>
 8005cbc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d109      	bne.n	8005cd8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	32b0      	adds	r2, #176	@ 0xb0
 8005cce:	2100      	movs	r1, #0
 8005cd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005cd4:	2302      	movs	r3, #2
 8005cd6:	e0d4      	b.n	8005e82 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005cd8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005cdc:	2100      	movs	r1, #0
 8005cde:	68f8      	ldr	r0, [r7, #12]
 8005ce0:	f002 fcca 	bl	8008678 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	32b0      	adds	r2, #176	@ 0xb0
 8005cee:	68f9      	ldr	r1, [r7, #12]
 8005cf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	32b0      	adds	r2, #176	@ 0xb0
 8005cfe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	7c1b      	ldrb	r3, [r3, #16]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d138      	bne.n	8005d82 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005d10:	4b5e      	ldr	r3, [pc, #376]	@ (8005e8c <USBD_CDC_Init+0x1e4>)
 8005d12:	7819      	ldrb	r1, [r3, #0]
 8005d14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005d18:	2202      	movs	r2, #2
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f002 fb45 	bl	80083aa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005d20:	4b5a      	ldr	r3, [pc, #360]	@ (8005e8c <USBD_CDC_Init+0x1e4>)
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	f003 020f 	and.w	r2, r3, #15
 8005d28:	6879      	ldr	r1, [r7, #4]
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	4413      	add	r3, r2
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	440b      	add	r3, r1
 8005d34:	3324      	adds	r3, #36	@ 0x24
 8005d36:	2201      	movs	r2, #1
 8005d38:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005d3a:	4b55      	ldr	r3, [pc, #340]	@ (8005e90 <USBD_CDC_Init+0x1e8>)
 8005d3c:	7819      	ldrb	r1, [r3, #0]
 8005d3e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005d42:	2202      	movs	r2, #2
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f002 fb30 	bl	80083aa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005d4a:	4b51      	ldr	r3, [pc, #324]	@ (8005e90 <USBD_CDC_Init+0x1e8>)
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	f003 020f 	and.w	r2, r3, #15
 8005d52:	6879      	ldr	r1, [r7, #4]
 8005d54:	4613      	mov	r3, r2
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	4413      	add	r3, r2
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	440b      	add	r3, r1
 8005d5e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005d62:	2201      	movs	r2, #1
 8005d64:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005d66:	4b4b      	ldr	r3, [pc, #300]	@ (8005e94 <USBD_CDC_Init+0x1ec>)
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	f003 020f 	and.w	r2, r3, #15
 8005d6e:	6879      	ldr	r1, [r7, #4]
 8005d70:	4613      	mov	r3, r2
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	4413      	add	r3, r2
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	440b      	add	r3, r1
 8005d7a:	3326      	adds	r3, #38	@ 0x26
 8005d7c:	2210      	movs	r2, #16
 8005d7e:	801a      	strh	r2, [r3, #0]
 8005d80:	e035      	b.n	8005dee <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005d82:	4b42      	ldr	r3, [pc, #264]	@ (8005e8c <USBD_CDC_Init+0x1e4>)
 8005d84:	7819      	ldrb	r1, [r3, #0]
 8005d86:	2340      	movs	r3, #64	@ 0x40
 8005d88:	2202      	movs	r2, #2
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f002 fb0d 	bl	80083aa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005d90:	4b3e      	ldr	r3, [pc, #248]	@ (8005e8c <USBD_CDC_Init+0x1e4>)
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	f003 020f 	and.w	r2, r3, #15
 8005d98:	6879      	ldr	r1, [r7, #4]
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	4413      	add	r3, r2
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	440b      	add	r3, r1
 8005da4:	3324      	adds	r3, #36	@ 0x24
 8005da6:	2201      	movs	r2, #1
 8005da8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005daa:	4b39      	ldr	r3, [pc, #228]	@ (8005e90 <USBD_CDC_Init+0x1e8>)
 8005dac:	7819      	ldrb	r1, [r3, #0]
 8005dae:	2340      	movs	r3, #64	@ 0x40
 8005db0:	2202      	movs	r2, #2
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f002 faf9 	bl	80083aa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005db8:	4b35      	ldr	r3, [pc, #212]	@ (8005e90 <USBD_CDC_Init+0x1e8>)
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	f003 020f 	and.w	r2, r3, #15
 8005dc0:	6879      	ldr	r1, [r7, #4]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	4413      	add	r3, r2
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	440b      	add	r3, r1
 8005dcc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005dd4:	4b2f      	ldr	r3, [pc, #188]	@ (8005e94 <USBD_CDC_Init+0x1ec>)
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	f003 020f 	and.w	r2, r3, #15
 8005ddc:	6879      	ldr	r1, [r7, #4]
 8005dde:	4613      	mov	r3, r2
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	4413      	add	r3, r2
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	440b      	add	r3, r1
 8005de8:	3326      	adds	r3, #38	@ 0x26
 8005dea:	2210      	movs	r2, #16
 8005dec:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005dee:	4b29      	ldr	r3, [pc, #164]	@ (8005e94 <USBD_CDC_Init+0x1ec>)
 8005df0:	7819      	ldrb	r1, [r3, #0]
 8005df2:	2308      	movs	r3, #8
 8005df4:	2203      	movs	r2, #3
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f002 fad7 	bl	80083aa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005dfc:	4b25      	ldr	r3, [pc, #148]	@ (8005e94 <USBD_CDC_Init+0x1ec>)
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	f003 020f 	and.w	r2, r3, #15
 8005e04:	6879      	ldr	r1, [r7, #4]
 8005e06:	4613      	mov	r3, r2
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	4413      	add	r3, r2
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	440b      	add	r3, r1
 8005e10:	3324      	adds	r3, #36	@ 0x24
 8005e12:	2201      	movs	r2, #1
 8005e14:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	33b0      	adds	r3, #176	@ 0xb0
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	4413      	add	r3, r2
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d101      	bne.n	8005e50 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005e4c:	2302      	movs	r3, #2
 8005e4e:	e018      	b.n	8005e82 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	7c1b      	ldrb	r3, [r3, #16]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d10a      	bne.n	8005e6e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005e58:	4b0d      	ldr	r3, [pc, #52]	@ (8005e90 <USBD_CDC_Init+0x1e8>)
 8005e5a:	7819      	ldrb	r1, [r3, #0]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005e62:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f002 fb8e 	bl	8008588 <USBD_LL_PrepareReceive>
 8005e6c:	e008      	b.n	8005e80 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005e6e:	4b08      	ldr	r3, [pc, #32]	@ (8005e90 <USBD_CDC_Init+0x1e8>)
 8005e70:	7819      	ldrb	r1, [r3, #0]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005e78:	2340      	movs	r3, #64	@ 0x40
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f002 fb84 	bl	8008588 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3710      	adds	r7, #16
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	200000a3 	.word	0x200000a3
 8005e90:	200000a4 	.word	0x200000a4
 8005e94:	200000a5 	.word	0x200000a5

08005e98 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005ea4:	4b3a      	ldr	r3, [pc, #232]	@ (8005f90 <USBD_CDC_DeInit+0xf8>)
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f002 faa3 	bl	80083f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005eb0:	4b37      	ldr	r3, [pc, #220]	@ (8005f90 <USBD_CDC_DeInit+0xf8>)
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	f003 020f 	and.w	r2, r3, #15
 8005eb8:	6879      	ldr	r1, [r7, #4]
 8005eba:	4613      	mov	r3, r2
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	4413      	add	r3, r2
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	440b      	add	r3, r1
 8005ec4:	3324      	adds	r3, #36	@ 0x24
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005eca:	4b32      	ldr	r3, [pc, #200]	@ (8005f94 <USBD_CDC_DeInit+0xfc>)
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	4619      	mov	r1, r3
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f002 fa90 	bl	80083f6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005ed6:	4b2f      	ldr	r3, [pc, #188]	@ (8005f94 <USBD_CDC_DeInit+0xfc>)
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	f003 020f 	and.w	r2, r3, #15
 8005ede:	6879      	ldr	r1, [r7, #4]
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	4413      	add	r3, r2
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	440b      	add	r3, r1
 8005eea:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005eee:	2200      	movs	r2, #0
 8005ef0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005ef2:	4b29      	ldr	r3, [pc, #164]	@ (8005f98 <USBD_CDC_DeInit+0x100>)
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f002 fa7c 	bl	80083f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005efe:	4b26      	ldr	r3, [pc, #152]	@ (8005f98 <USBD_CDC_DeInit+0x100>)
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	f003 020f 	and.w	r2, r3, #15
 8005f06:	6879      	ldr	r1, [r7, #4]
 8005f08:	4613      	mov	r3, r2
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	4413      	add	r3, r2
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	440b      	add	r3, r1
 8005f12:	3324      	adds	r3, #36	@ 0x24
 8005f14:	2200      	movs	r2, #0
 8005f16:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005f18:	4b1f      	ldr	r3, [pc, #124]	@ (8005f98 <USBD_CDC_DeInit+0x100>)
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	f003 020f 	and.w	r2, r3, #15
 8005f20:	6879      	ldr	r1, [r7, #4]
 8005f22:	4613      	mov	r3, r2
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	4413      	add	r3, r2
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	440b      	add	r3, r1
 8005f2c:	3326      	adds	r3, #38	@ 0x26
 8005f2e:	2200      	movs	r2, #0
 8005f30:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	32b0      	adds	r2, #176	@ 0xb0
 8005f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d01f      	beq.n	8005f84 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	33b0      	adds	r3, #176	@ 0xb0
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	4413      	add	r3, r2
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	32b0      	adds	r2, #176	@ 0xb0
 8005f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f66:	4618      	mov	r0, r3
 8005f68:	f002 fb50 	bl	800860c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	32b0      	adds	r2, #176	@ 0xb0
 8005f76:	2100      	movs	r1, #0
 8005f78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3708      	adds	r7, #8
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	200000a3 	.word	0x200000a3
 8005f94:	200000a4 	.word	0x200000a4
 8005f98:	200000a5 	.word	0x200000a5

08005f9c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b086      	sub	sp, #24
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	32b0      	adds	r2, #176	@ 0xb0
 8005fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fb4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d101      	bne.n	8005fcc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005fc8:	2303      	movs	r3, #3
 8005fca:	e0bf      	b.n	800614c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d050      	beq.n	800607a <USBD_CDC_Setup+0xde>
 8005fd8:	2b20      	cmp	r3, #32
 8005fda:	f040 80af 	bne.w	800613c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	88db      	ldrh	r3, [r3, #6]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d03a      	beq.n	800605c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	b25b      	sxtb	r3, r3
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	da1b      	bge.n	8006028 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	33b0      	adds	r3, #176	@ 0xb0
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	4413      	add	r3, r2
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	683a      	ldr	r2, [r7, #0]
 8006004:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006006:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006008:	683a      	ldr	r2, [r7, #0]
 800600a:	88d2      	ldrh	r2, [r2, #6]
 800600c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	88db      	ldrh	r3, [r3, #6]
 8006012:	2b07      	cmp	r3, #7
 8006014:	bf28      	it	cs
 8006016:	2307      	movcs	r3, #7
 8006018:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	89fa      	ldrh	r2, [r7, #14]
 800601e:	4619      	mov	r1, r3
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f001 fd93 	bl	8007b4c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006026:	e090      	b.n	800614a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	785a      	ldrb	r2, [r3, #1]
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	88db      	ldrh	r3, [r3, #6]
 8006036:	2b3f      	cmp	r3, #63	@ 0x3f
 8006038:	d803      	bhi.n	8006042 <USBD_CDC_Setup+0xa6>
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	88db      	ldrh	r3, [r3, #6]
 800603e:	b2da      	uxtb	r2, r3
 8006040:	e000      	b.n	8006044 <USBD_CDC_Setup+0xa8>
 8006042:	2240      	movs	r2, #64	@ 0x40
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800604a:	6939      	ldr	r1, [r7, #16]
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006052:	461a      	mov	r2, r3
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f001 fda5 	bl	8007ba4 <USBD_CtlPrepareRx>
      break;
 800605a:	e076      	b.n	800614a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	33b0      	adds	r3, #176	@ 0xb0
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	4413      	add	r3, r2
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	683a      	ldr	r2, [r7, #0]
 8006070:	7850      	ldrb	r0, [r2, #1]
 8006072:	2200      	movs	r2, #0
 8006074:	6839      	ldr	r1, [r7, #0]
 8006076:	4798      	blx	r3
      break;
 8006078:	e067      	b.n	800614a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	785b      	ldrb	r3, [r3, #1]
 800607e:	2b0b      	cmp	r3, #11
 8006080:	d851      	bhi.n	8006126 <USBD_CDC_Setup+0x18a>
 8006082:	a201      	add	r2, pc, #4	@ (adr r2, 8006088 <USBD_CDC_Setup+0xec>)
 8006084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006088:	080060b9 	.word	0x080060b9
 800608c:	08006135 	.word	0x08006135
 8006090:	08006127 	.word	0x08006127
 8006094:	08006127 	.word	0x08006127
 8006098:	08006127 	.word	0x08006127
 800609c:	08006127 	.word	0x08006127
 80060a0:	08006127 	.word	0x08006127
 80060a4:	08006127 	.word	0x08006127
 80060a8:	08006127 	.word	0x08006127
 80060ac:	08006127 	.word	0x08006127
 80060b0:	080060e3 	.word	0x080060e3
 80060b4:	0800610d 	.word	0x0800610d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	2b03      	cmp	r3, #3
 80060c2:	d107      	bne.n	80060d4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80060c4:	f107 030a 	add.w	r3, r7, #10
 80060c8:	2202      	movs	r2, #2
 80060ca:	4619      	mov	r1, r3
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f001 fd3d 	bl	8007b4c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80060d2:	e032      	b.n	800613a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80060d4:	6839      	ldr	r1, [r7, #0]
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f001 fcbb 	bl	8007a52 <USBD_CtlError>
            ret = USBD_FAIL;
 80060dc:	2303      	movs	r3, #3
 80060de:	75fb      	strb	r3, [r7, #23]
          break;
 80060e0:	e02b      	b.n	800613a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	2b03      	cmp	r3, #3
 80060ec:	d107      	bne.n	80060fe <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80060ee:	f107 030d 	add.w	r3, r7, #13
 80060f2:	2201      	movs	r2, #1
 80060f4:	4619      	mov	r1, r3
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f001 fd28 	bl	8007b4c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80060fc:	e01d      	b.n	800613a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80060fe:	6839      	ldr	r1, [r7, #0]
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f001 fca6 	bl	8007a52 <USBD_CtlError>
            ret = USBD_FAIL;
 8006106:	2303      	movs	r3, #3
 8006108:	75fb      	strb	r3, [r7, #23]
          break;
 800610a:	e016      	b.n	800613a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006112:	b2db      	uxtb	r3, r3
 8006114:	2b03      	cmp	r3, #3
 8006116:	d00f      	beq.n	8006138 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006118:	6839      	ldr	r1, [r7, #0]
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f001 fc99 	bl	8007a52 <USBD_CtlError>
            ret = USBD_FAIL;
 8006120:	2303      	movs	r3, #3
 8006122:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006124:	e008      	b.n	8006138 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006126:	6839      	ldr	r1, [r7, #0]
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f001 fc92 	bl	8007a52 <USBD_CtlError>
          ret = USBD_FAIL;
 800612e:	2303      	movs	r3, #3
 8006130:	75fb      	strb	r3, [r7, #23]
          break;
 8006132:	e002      	b.n	800613a <USBD_CDC_Setup+0x19e>
          break;
 8006134:	bf00      	nop
 8006136:	e008      	b.n	800614a <USBD_CDC_Setup+0x1ae>
          break;
 8006138:	bf00      	nop
      }
      break;
 800613a:	e006      	b.n	800614a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800613c:	6839      	ldr	r1, [r7, #0]
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f001 fc87 	bl	8007a52 <USBD_CtlError>
      ret = USBD_FAIL;
 8006144:	2303      	movs	r3, #3
 8006146:	75fb      	strb	r3, [r7, #23]
      break;
 8006148:	bf00      	nop
  }

  return (uint8_t)ret;
 800614a:	7dfb      	ldrb	r3, [r7, #23]
}
 800614c:	4618      	mov	r0, r3
 800614e:	3718      	adds	r7, #24
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	460b      	mov	r3, r1
 800615e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006166:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	32b0      	adds	r2, #176	@ 0xb0
 8006172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d101      	bne.n	800617e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800617a:	2303      	movs	r3, #3
 800617c:	e065      	b.n	800624a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	32b0      	adds	r2, #176	@ 0xb0
 8006188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800618c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800618e:	78fb      	ldrb	r3, [r7, #3]
 8006190:	f003 020f 	and.w	r2, r3, #15
 8006194:	6879      	ldr	r1, [r7, #4]
 8006196:	4613      	mov	r3, r2
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	4413      	add	r3, r2
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	440b      	add	r3, r1
 80061a0:	3318      	adds	r3, #24
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d02f      	beq.n	8006208 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80061a8:	78fb      	ldrb	r3, [r7, #3]
 80061aa:	f003 020f 	and.w	r2, r3, #15
 80061ae:	6879      	ldr	r1, [r7, #4]
 80061b0:	4613      	mov	r3, r2
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	4413      	add	r3, r2
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	440b      	add	r3, r1
 80061ba:	3318      	adds	r3, #24
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	78fb      	ldrb	r3, [r7, #3]
 80061c0:	f003 010f 	and.w	r1, r3, #15
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	460b      	mov	r3, r1
 80061c8:	00db      	lsls	r3, r3, #3
 80061ca:	440b      	add	r3, r1
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	4403      	add	r3, r0
 80061d0:	331c      	adds	r3, #28
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	fbb2 f1f3 	udiv	r1, r2, r3
 80061d8:	fb01 f303 	mul.w	r3, r1, r3
 80061dc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d112      	bne.n	8006208 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80061e2:	78fb      	ldrb	r3, [r7, #3]
 80061e4:	f003 020f 	and.w	r2, r3, #15
 80061e8:	6879      	ldr	r1, [r7, #4]
 80061ea:	4613      	mov	r3, r2
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	4413      	add	r3, r2
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	440b      	add	r3, r1
 80061f4:	3318      	adds	r3, #24
 80061f6:	2200      	movs	r2, #0
 80061f8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80061fa:	78f9      	ldrb	r1, [r7, #3]
 80061fc:	2300      	movs	r3, #0
 80061fe:	2200      	movs	r2, #0
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f002 f9a0 	bl	8008546 <USBD_LL_Transmit>
 8006206:	e01f      	b.n	8006248 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	2200      	movs	r2, #0
 800620c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	33b0      	adds	r3, #176	@ 0xb0
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	4413      	add	r3, r2
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d010      	beq.n	8006248 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	33b0      	adds	r3, #176	@ 0xb0
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	4413      	add	r3, r2
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	68ba      	ldr	r2, [r7, #8]
 800623a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800623e:	68ba      	ldr	r2, [r7, #8]
 8006240:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006244:	78fa      	ldrb	r2, [r7, #3]
 8006246:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	3710      	adds	r7, #16
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}

08006252 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006252:	b580      	push	{r7, lr}
 8006254:	b084      	sub	sp, #16
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
 800625a:	460b      	mov	r3, r1
 800625c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	32b0      	adds	r2, #176	@ 0xb0
 8006268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800626c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	32b0      	adds	r2, #176	@ 0xb0
 8006278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d101      	bne.n	8006284 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006280:	2303      	movs	r3, #3
 8006282:	e01a      	b.n	80062ba <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006284:	78fb      	ldrb	r3, [r7, #3]
 8006286:	4619      	mov	r1, r3
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f002 f99e 	bl	80085ca <USBD_LL_GetRxDataSize>
 800628e:	4602      	mov	r2, r0
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	33b0      	adds	r3, #176	@ 0xb0
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	4413      	add	r3, r2
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80062b4:	4611      	mov	r1, r2
 80062b6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3710      	adds	r7, #16
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80062c2:	b580      	push	{r7, lr}
 80062c4:	b084      	sub	sp, #16
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	32b0      	adds	r2, #176	@ 0xb0
 80062d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062d8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d101      	bne.n	80062e4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80062e0:	2303      	movs	r3, #3
 80062e2:	e024      	b.n	800632e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	33b0      	adds	r3, #176	@ 0xb0
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	4413      	add	r3, r2
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d019      	beq.n	800632c <USBD_CDC_EP0_RxReady+0x6a>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80062fe:	2bff      	cmp	r3, #255	@ 0xff
 8006300:	d014      	beq.n	800632c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	33b0      	adds	r3, #176	@ 0xb0
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	4413      	add	r3, r2
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800631a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006322:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	22ff      	movs	r2, #255	@ 0xff
 8006328:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3710      	adds	r7, #16
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
	...

08006338 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b086      	sub	sp, #24
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006340:	2182      	movs	r1, #130	@ 0x82
 8006342:	4818      	ldr	r0, [pc, #96]	@ (80063a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006344:	f000 fd4f 	bl	8006de6 <USBD_GetEpDesc>
 8006348:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800634a:	2101      	movs	r1, #1
 800634c:	4815      	ldr	r0, [pc, #84]	@ (80063a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800634e:	f000 fd4a 	bl	8006de6 <USBD_GetEpDesc>
 8006352:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006354:	2181      	movs	r1, #129	@ 0x81
 8006356:	4813      	ldr	r0, [pc, #76]	@ (80063a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006358:	f000 fd45 	bl	8006de6 <USBD_GetEpDesc>
 800635c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d002      	beq.n	800636a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	2210      	movs	r2, #16
 8006368:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d006      	beq.n	800637e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	2200      	movs	r2, #0
 8006374:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006378:	711a      	strb	r2, [r3, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d006      	beq.n	8006392 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2200      	movs	r2, #0
 8006388:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800638c:	711a      	strb	r2, [r3, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2243      	movs	r2, #67	@ 0x43
 8006396:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006398:	4b02      	ldr	r3, [pc, #8]	@ (80063a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800639a:	4618      	mov	r0, r3
 800639c:	3718      	adds	r7, #24
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	20000060 	.word	0x20000060

080063a8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b086      	sub	sp, #24
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80063b0:	2182      	movs	r1, #130	@ 0x82
 80063b2:	4818      	ldr	r0, [pc, #96]	@ (8006414 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80063b4:	f000 fd17 	bl	8006de6 <USBD_GetEpDesc>
 80063b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80063ba:	2101      	movs	r1, #1
 80063bc:	4815      	ldr	r0, [pc, #84]	@ (8006414 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80063be:	f000 fd12 	bl	8006de6 <USBD_GetEpDesc>
 80063c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80063c4:	2181      	movs	r1, #129	@ 0x81
 80063c6:	4813      	ldr	r0, [pc, #76]	@ (8006414 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80063c8:	f000 fd0d 	bl	8006de6 <USBD_GetEpDesc>
 80063cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d002      	beq.n	80063da <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	2210      	movs	r2, #16
 80063d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d006      	beq.n	80063ee <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	2200      	movs	r2, #0
 80063e4:	711a      	strb	r2, [r3, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f042 0202 	orr.w	r2, r2, #2
 80063ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d006      	beq.n	8006402 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2200      	movs	r2, #0
 80063f8:	711a      	strb	r2, [r3, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f042 0202 	orr.w	r2, r2, #2
 8006400:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2243      	movs	r2, #67	@ 0x43
 8006406:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006408:	4b02      	ldr	r3, [pc, #8]	@ (8006414 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800640a:	4618      	mov	r0, r3
 800640c:	3718      	adds	r7, #24
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	20000060 	.word	0x20000060

08006418 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b086      	sub	sp, #24
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006420:	2182      	movs	r1, #130	@ 0x82
 8006422:	4818      	ldr	r0, [pc, #96]	@ (8006484 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006424:	f000 fcdf 	bl	8006de6 <USBD_GetEpDesc>
 8006428:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800642a:	2101      	movs	r1, #1
 800642c:	4815      	ldr	r0, [pc, #84]	@ (8006484 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800642e:	f000 fcda 	bl	8006de6 <USBD_GetEpDesc>
 8006432:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006434:	2181      	movs	r1, #129	@ 0x81
 8006436:	4813      	ldr	r0, [pc, #76]	@ (8006484 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006438:	f000 fcd5 	bl	8006de6 <USBD_GetEpDesc>
 800643c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d002      	beq.n	800644a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	2210      	movs	r2, #16
 8006448:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d006      	beq.n	800645e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	2200      	movs	r2, #0
 8006454:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006458:	711a      	strb	r2, [r3, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d006      	beq.n	8006472 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2200      	movs	r2, #0
 8006468:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800646c:	711a      	strb	r2, [r3, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2243      	movs	r2, #67	@ 0x43
 8006476:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006478:	4b02      	ldr	r3, [pc, #8]	@ (8006484 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800647a:	4618      	mov	r0, r3
 800647c:	3718      	adds	r7, #24
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	20000060 	.word	0x20000060

08006488 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	220a      	movs	r2, #10
 8006494:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006496:	4b03      	ldr	r3, [pc, #12]	@ (80064a4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006498:	4618      	mov	r0, r3
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr
 80064a4:	2000001c 	.word	0x2000001c

080064a8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d101      	bne.n	80064bc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80064b8:	2303      	movs	r3, #3
 80064ba:	e009      	b.n	80064d0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	33b0      	adds	r3, #176	@ 0xb0
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	4413      	add	r3, r2
 80064ca:	683a      	ldr	r2, [r7, #0]
 80064cc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	370c      	adds	r7, #12
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80064dc:	b480      	push	{r7}
 80064de:	b087      	sub	sp, #28
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	32b0      	adds	r2, #176	@ 0xb0
 80064f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064f6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d101      	bne.n	8006502 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80064fe:	2303      	movs	r3, #3
 8006500:	e008      	b.n	8006514 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	68ba      	ldr	r2, [r7, #8]
 8006506:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006512:	2300      	movs	r3, #0
}
 8006514:	4618      	mov	r0, r3
 8006516:	371c      	adds	r7, #28
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006520:	b480      	push	{r7}
 8006522:	b085      	sub	sp, #20
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	32b0      	adds	r2, #176	@ 0xb0
 8006534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006538:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d101      	bne.n	8006544 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006540:	2303      	movs	r3, #3
 8006542:	e004      	b.n	800654e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	683a      	ldr	r2, [r7, #0]
 8006548:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800654c:	2300      	movs	r3, #0
}
 800654e:	4618      	mov	r0, r3
 8006550:	3714      	adds	r7, #20
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr
	...

0800655c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	32b0      	adds	r2, #176	@ 0xb0
 800656e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006572:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006574:	2301      	movs	r3, #1
 8006576:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d101      	bne.n	8006582 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800657e:	2303      	movs	r3, #3
 8006580:	e025      	b.n	80065ce <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006588:	2b00      	cmp	r3, #0
 800658a:	d11f      	bne.n	80065cc <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	2201      	movs	r2, #1
 8006590:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006594:	4b10      	ldr	r3, [pc, #64]	@ (80065d8 <USBD_CDC_TransmitPacket+0x7c>)
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	f003 020f 	and.w	r2, r3, #15
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	4613      	mov	r3, r2
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	4413      	add	r3, r2
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	4403      	add	r3, r0
 80065ae:	3318      	adds	r3, #24
 80065b0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80065b2:	4b09      	ldr	r3, [pc, #36]	@ (80065d8 <USBD_CDC_TransmitPacket+0x7c>)
 80065b4:	7819      	ldrb	r1, [r3, #0]
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f001 ffbf 	bl	8008546 <USBD_LL_Transmit>

    ret = USBD_OK;
 80065c8:	2300      	movs	r3, #0
 80065ca:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80065cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	200000a3 	.word	0x200000a3

080065dc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	32b0      	adds	r2, #176	@ 0xb0
 80065ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065f2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	32b0      	adds	r2, #176	@ 0xb0
 80065fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d101      	bne.n	800660a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006606:	2303      	movs	r3, #3
 8006608:	e018      	b.n	800663c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	7c1b      	ldrb	r3, [r3, #16]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d10a      	bne.n	8006628 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006612:	4b0c      	ldr	r3, [pc, #48]	@ (8006644 <USBD_CDC_ReceivePacket+0x68>)
 8006614:	7819      	ldrb	r1, [r3, #0]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800661c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f001 ffb1 	bl	8008588 <USBD_LL_PrepareReceive>
 8006626:	e008      	b.n	800663a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006628:	4b06      	ldr	r3, [pc, #24]	@ (8006644 <USBD_CDC_ReceivePacket+0x68>)
 800662a:	7819      	ldrb	r1, [r3, #0]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006632:	2340      	movs	r3, #64	@ 0x40
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f001 ffa7 	bl	8008588 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	3710      	adds	r7, #16
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}
 8006644:	200000a4 	.word	0x200000a4

08006648 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b086      	sub	sp, #24
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	4613      	mov	r3, r2
 8006654:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d101      	bne.n	8006660 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800665c:	2303      	movs	r3, #3
 800665e:	e01f      	b.n	80066a0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2200      	movs	r2, #0
 8006664:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2200      	movs	r2, #0
 800666c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d003      	beq.n	8006686 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	68ba      	ldr	r2, [r7, #8]
 8006682:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2201      	movs	r2, #1
 800668a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	79fa      	ldrb	r2, [r7, #7]
 8006692:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006694:	68f8      	ldr	r0, [r7, #12]
 8006696:	f001 fe21 	bl	80082dc <USBD_LL_Init>
 800669a:	4603      	mov	r3, r0
 800669c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800669e:	7dfb      	ldrb	r3, [r7, #23]
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3718      	adds	r7, #24
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80066b2:	2300      	movs	r3, #0
 80066b4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d101      	bne.n	80066c0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80066bc:	2303      	movs	r3, #3
 80066be:	e025      	b.n	800670c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	683a      	ldr	r2, [r7, #0]
 80066c4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	32ae      	adds	r2, #174	@ 0xae
 80066d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d00f      	beq.n	80066fc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	32ae      	adds	r2, #174	@ 0xae
 80066e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ec:	f107 020e 	add.w	r2, r7, #14
 80066f0:	4610      	mov	r0, r2
 80066f2:	4798      	blx	r3
 80066f4:	4602      	mov	r2, r0
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006702:	1c5a      	adds	r2, r3, #1
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3710      	adds	r7, #16
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f001 fe29 	bl	8008374 <USBD_LL_Start>
 8006722:	4603      	mov	r3, r0
}
 8006724:	4618      	mov	r0, r3
 8006726:	3708      	adds	r7, #8
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006734:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006736:	4618      	mov	r0, r3
 8006738:	370c      	adds	r7, #12
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr

08006742 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006742:	b580      	push	{r7, lr}
 8006744:	b084      	sub	sp, #16
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
 800674a:	460b      	mov	r3, r1
 800674c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800674e:	2300      	movs	r3, #0
 8006750:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006758:	2b00      	cmp	r3, #0
 800675a:	d009      	beq.n	8006770 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	78fa      	ldrb	r2, [r7, #3]
 8006766:	4611      	mov	r1, r2
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	4798      	blx	r3
 800676c:	4603      	mov	r3, r0
 800676e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006770:	7bfb      	ldrb	r3, [r7, #15]
}
 8006772:	4618      	mov	r0, r3
 8006774:	3710      	adds	r7, #16
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}

0800677a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800677a:	b580      	push	{r7, lr}
 800677c:	b084      	sub	sp, #16
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
 8006782:	460b      	mov	r3, r1
 8006784:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006786:	2300      	movs	r3, #0
 8006788:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	78fa      	ldrb	r2, [r7, #3]
 8006794:	4611      	mov	r1, r2
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	4798      	blx	r3
 800679a:	4603      	mov	r3, r0
 800679c:	2b00      	cmp	r3, #0
 800679e:	d001      	beq.n	80067a4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80067a0:	2303      	movs	r3, #3
 80067a2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80067a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3710      	adds	r7, #16
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}

080067ae <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80067ae:	b580      	push	{r7, lr}
 80067b0:	b084      	sub	sp, #16
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
 80067b6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80067be:	6839      	ldr	r1, [r7, #0]
 80067c0:	4618      	mov	r0, r3
 80067c2:	f001 f90c 	bl	80079de <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2201      	movs	r2, #1
 80067ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80067d4:	461a      	mov	r2, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80067e2:	f003 031f 	and.w	r3, r3, #31
 80067e6:	2b02      	cmp	r3, #2
 80067e8:	d01a      	beq.n	8006820 <USBD_LL_SetupStage+0x72>
 80067ea:	2b02      	cmp	r3, #2
 80067ec:	d822      	bhi.n	8006834 <USBD_LL_SetupStage+0x86>
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d002      	beq.n	80067f8 <USBD_LL_SetupStage+0x4a>
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d00a      	beq.n	800680c <USBD_LL_SetupStage+0x5e>
 80067f6:	e01d      	b.n	8006834 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80067fe:	4619      	mov	r1, r3
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 fb63 	bl	8006ecc <USBD_StdDevReq>
 8006806:	4603      	mov	r3, r0
 8006808:	73fb      	strb	r3, [r7, #15]
      break;
 800680a:	e020      	b.n	800684e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006812:	4619      	mov	r1, r3
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 fbcb 	bl	8006fb0 <USBD_StdItfReq>
 800681a:	4603      	mov	r3, r0
 800681c:	73fb      	strb	r3, [r7, #15]
      break;
 800681e:	e016      	b.n	800684e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006826:	4619      	mov	r1, r3
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 fc2d 	bl	8007088 <USBD_StdEPReq>
 800682e:	4603      	mov	r3, r0
 8006830:	73fb      	strb	r3, [r7, #15]
      break;
 8006832:	e00c      	b.n	800684e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800683a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800683e:	b2db      	uxtb	r3, r3
 8006840:	4619      	mov	r1, r3
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f001 fdf6 	bl	8008434 <USBD_LL_StallEP>
 8006848:	4603      	mov	r3, r0
 800684a:	73fb      	strb	r3, [r7, #15]
      break;
 800684c:	bf00      	nop
  }

  return ret;
 800684e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006850:	4618      	mov	r0, r3
 8006852:	3710      	adds	r7, #16
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b086      	sub	sp, #24
 800685c:	af00      	add	r7, sp, #0
 800685e:	60f8      	str	r0, [r7, #12]
 8006860:	460b      	mov	r3, r1
 8006862:	607a      	str	r2, [r7, #4]
 8006864:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006866:	2300      	movs	r3, #0
 8006868:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800686a:	7afb      	ldrb	r3, [r7, #11]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d16e      	bne.n	800694e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006876:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800687e:	2b03      	cmp	r3, #3
 8006880:	f040 8098 	bne.w	80069b4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	689a      	ldr	r2, [r3, #8]
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	429a      	cmp	r2, r3
 800688e:	d913      	bls.n	80068b8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	689a      	ldr	r2, [r3, #8]
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	1ad2      	subs	r2, r2, r3
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	68da      	ldr	r2, [r3, #12]
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	4293      	cmp	r3, r2
 80068a8:	bf28      	it	cs
 80068aa:	4613      	movcs	r3, r2
 80068ac:	461a      	mov	r2, r3
 80068ae:	6879      	ldr	r1, [r7, #4]
 80068b0:	68f8      	ldr	r0, [r7, #12]
 80068b2:	f001 f994 	bl	8007bde <USBD_CtlContinueRx>
 80068b6:	e07d      	b.n	80069b4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80068be:	f003 031f 	and.w	r3, r3, #31
 80068c2:	2b02      	cmp	r3, #2
 80068c4:	d014      	beq.n	80068f0 <USBD_LL_DataOutStage+0x98>
 80068c6:	2b02      	cmp	r3, #2
 80068c8:	d81d      	bhi.n	8006906 <USBD_LL_DataOutStage+0xae>
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d002      	beq.n	80068d4 <USBD_LL_DataOutStage+0x7c>
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d003      	beq.n	80068da <USBD_LL_DataOutStage+0x82>
 80068d2:	e018      	b.n	8006906 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80068d4:	2300      	movs	r3, #0
 80068d6:	75bb      	strb	r3, [r7, #22]
            break;
 80068d8:	e018      	b.n	800690c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	4619      	mov	r1, r3
 80068e4:	68f8      	ldr	r0, [r7, #12]
 80068e6:	f000 fa64 	bl	8006db2 <USBD_CoreFindIF>
 80068ea:	4603      	mov	r3, r0
 80068ec:	75bb      	strb	r3, [r7, #22]
            break;
 80068ee:	e00d      	b.n	800690c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	4619      	mov	r1, r3
 80068fa:	68f8      	ldr	r0, [r7, #12]
 80068fc:	f000 fa66 	bl	8006dcc <USBD_CoreFindEP>
 8006900:	4603      	mov	r3, r0
 8006902:	75bb      	strb	r3, [r7, #22]
            break;
 8006904:	e002      	b.n	800690c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006906:	2300      	movs	r3, #0
 8006908:	75bb      	strb	r3, [r7, #22]
            break;
 800690a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800690c:	7dbb      	ldrb	r3, [r7, #22]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d119      	bne.n	8006946 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006918:	b2db      	uxtb	r3, r3
 800691a:	2b03      	cmp	r3, #3
 800691c:	d113      	bne.n	8006946 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800691e:	7dba      	ldrb	r2, [r7, #22]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	32ae      	adds	r2, #174	@ 0xae
 8006924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00b      	beq.n	8006946 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800692e:	7dba      	ldrb	r2, [r7, #22]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006936:	7dba      	ldrb	r2, [r7, #22]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	32ae      	adds	r2, #174	@ 0xae
 800693c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006946:	68f8      	ldr	r0, [r7, #12]
 8006948:	f001 f95a 	bl	8007c00 <USBD_CtlSendStatus>
 800694c:	e032      	b.n	80069b4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800694e:	7afb      	ldrb	r3, [r7, #11]
 8006950:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006954:	b2db      	uxtb	r3, r3
 8006956:	4619      	mov	r1, r3
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f000 fa37 	bl	8006dcc <USBD_CoreFindEP>
 800695e:	4603      	mov	r3, r0
 8006960:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006962:	7dbb      	ldrb	r3, [r7, #22]
 8006964:	2bff      	cmp	r3, #255	@ 0xff
 8006966:	d025      	beq.n	80069b4 <USBD_LL_DataOutStage+0x15c>
 8006968:	7dbb      	ldrb	r3, [r7, #22]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d122      	bne.n	80069b4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006974:	b2db      	uxtb	r3, r3
 8006976:	2b03      	cmp	r3, #3
 8006978:	d117      	bne.n	80069aa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800697a:	7dba      	ldrb	r2, [r7, #22]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	32ae      	adds	r2, #174	@ 0xae
 8006980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006984:	699b      	ldr	r3, [r3, #24]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00f      	beq.n	80069aa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800698a:	7dba      	ldrb	r2, [r7, #22]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006992:	7dba      	ldrb	r2, [r7, #22]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	32ae      	adds	r2, #174	@ 0xae
 8006998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800699c:	699b      	ldr	r3, [r3, #24]
 800699e:	7afa      	ldrb	r2, [r7, #11]
 80069a0:	4611      	mov	r1, r2
 80069a2:	68f8      	ldr	r0, [r7, #12]
 80069a4:	4798      	blx	r3
 80069a6:	4603      	mov	r3, r0
 80069a8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80069aa:	7dfb      	ldrb	r3, [r7, #23]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d001      	beq.n	80069b4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80069b0:	7dfb      	ldrb	r3, [r7, #23]
 80069b2:	e000      	b.n	80069b6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3718      	adds	r7, #24
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80069be:	b580      	push	{r7, lr}
 80069c0:	b086      	sub	sp, #24
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	60f8      	str	r0, [r7, #12]
 80069c6:	460b      	mov	r3, r1
 80069c8:	607a      	str	r2, [r7, #4]
 80069ca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80069cc:	7afb      	ldrb	r3, [r7, #11]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d16f      	bne.n	8006ab2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	3314      	adds	r3, #20
 80069d6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80069de:	2b02      	cmp	r3, #2
 80069e0:	d15a      	bne.n	8006a98 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	689a      	ldr	r2, [r3, #8]
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d914      	bls.n	8006a18 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	689a      	ldr	r2, [r3, #8]
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	1ad2      	subs	r2, r2, r3
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	461a      	mov	r2, r3
 8006a02:	6879      	ldr	r1, [r7, #4]
 8006a04:	68f8      	ldr	r0, [r7, #12]
 8006a06:	f001 f8bc 	bl	8007b82 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	2100      	movs	r1, #0
 8006a10:	68f8      	ldr	r0, [r7, #12]
 8006a12:	f001 fdb9 	bl	8008588 <USBD_LL_PrepareReceive>
 8006a16:	e03f      	b.n	8006a98 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	68da      	ldr	r2, [r3, #12]
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d11c      	bne.n	8006a5e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	685a      	ldr	r2, [r3, #4]
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d316      	bcc.n	8006a5e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	685a      	ldr	r2, [r3, #4]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d20f      	bcs.n	8006a5e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006a3e:	2200      	movs	r2, #0
 8006a40:	2100      	movs	r1, #0
 8006a42:	68f8      	ldr	r0, [r7, #12]
 8006a44:	f001 f89d 	bl	8007b82 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a50:	2300      	movs	r3, #0
 8006a52:	2200      	movs	r2, #0
 8006a54:	2100      	movs	r1, #0
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	f001 fd96 	bl	8008588 <USBD_LL_PrepareReceive>
 8006a5c:	e01c      	b.n	8006a98 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	2b03      	cmp	r3, #3
 8006a68:	d10f      	bne.n	8006a8a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d009      	beq.n	8006a8a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a8a:	2180      	movs	r1, #128	@ 0x80
 8006a8c:	68f8      	ldr	r0, [r7, #12]
 8006a8e:	f001 fcd1 	bl	8008434 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006a92:	68f8      	ldr	r0, [r7, #12]
 8006a94:	f001 f8c7 	bl	8007c26 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d03a      	beq.n	8006b18 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006aa2:	68f8      	ldr	r0, [r7, #12]
 8006aa4:	f7ff fe42 	bl	800672c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006ab0:	e032      	b.n	8006b18 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006ab2:	7afb      	ldrb	r3, [r7, #11]
 8006ab4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	4619      	mov	r1, r3
 8006abc:	68f8      	ldr	r0, [r7, #12]
 8006abe:	f000 f985 	bl	8006dcc <USBD_CoreFindEP>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006ac6:	7dfb      	ldrb	r3, [r7, #23]
 8006ac8:	2bff      	cmp	r3, #255	@ 0xff
 8006aca:	d025      	beq.n	8006b18 <USBD_LL_DataInStage+0x15a>
 8006acc:	7dfb      	ldrb	r3, [r7, #23]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d122      	bne.n	8006b18 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	2b03      	cmp	r3, #3
 8006adc:	d11c      	bne.n	8006b18 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006ade:	7dfa      	ldrb	r2, [r7, #23]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	32ae      	adds	r2, #174	@ 0xae
 8006ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ae8:	695b      	ldr	r3, [r3, #20]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d014      	beq.n	8006b18 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006aee:	7dfa      	ldrb	r2, [r7, #23]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006af6:	7dfa      	ldrb	r2, [r7, #23]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	32ae      	adds	r2, #174	@ 0xae
 8006afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b00:	695b      	ldr	r3, [r3, #20]
 8006b02:	7afa      	ldrb	r2, [r7, #11]
 8006b04:	4611      	mov	r1, r2
 8006b06:	68f8      	ldr	r0, [r7, #12]
 8006b08:	4798      	blx	r3
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006b0e:	7dbb      	ldrb	r3, [r7, #22]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d001      	beq.n	8006b18 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006b14:	7dbb      	ldrb	r3, [r7, #22]
 8006b16:	e000      	b.n	8006b1a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3718      	adds	r7, #24
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}

08006b22 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b084      	sub	sp, #16
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2201      	movs	r2, #1
 8006b32:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d014      	beq.n	8006b88 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d00e      	beq.n	8006b88 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	6852      	ldr	r2, [r2, #4]
 8006b76:	b2d2      	uxtb	r2, r2
 8006b78:	4611      	mov	r1, r2
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	4798      	blx	r3
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d001      	beq.n	8006b88 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006b84:	2303      	movs	r3, #3
 8006b86:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b88:	2340      	movs	r3, #64	@ 0x40
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	2100      	movs	r1, #0
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f001 fc0b 	bl	80083aa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2240      	movs	r2, #64	@ 0x40
 8006ba0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ba4:	2340      	movs	r3, #64	@ 0x40
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	2180      	movs	r1, #128	@ 0x80
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f001 fbfd 	bl	80083aa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2240      	movs	r2, #64	@ 0x40
 8006bba:	621a      	str	r2, [r3, #32]

  return ret;
 8006bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3710      	adds	r7, #16
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006bc6:	b480      	push	{r7}
 8006bc8:	b083      	sub	sp, #12
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
 8006bce:	460b      	mov	r3, r1
 8006bd0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	78fa      	ldrb	r2, [r7, #3]
 8006bd6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	370c      	adds	r7, #12
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr

08006be6 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006be6:	b480      	push	{r7}
 8006be8:	b083      	sub	sp, #12
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	2b04      	cmp	r3, #4
 8006bf8:	d006      	beq.n	8006c08 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c00:	b2da      	uxtb	r2, r3
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2204      	movs	r2, #4
 8006c0c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	370c      	adds	r7, #12
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr

08006c1e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006c1e:	b480      	push	{r7}
 8006c20:	b083      	sub	sp, #12
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	2b04      	cmp	r3, #4
 8006c30:	d106      	bne.n	8006c40 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006c38:	b2da      	uxtb	r2, r3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006c40:	2300      	movs	r3, #0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	370c      	adds	r7, #12
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr

08006c4e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b082      	sub	sp, #8
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	2b03      	cmp	r3, #3
 8006c60:	d110      	bne.n	8006c84 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d00b      	beq.n	8006c84 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c72:	69db      	ldr	r3, [r3, #28]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d005      	beq.n	8006c84 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c7e:	69db      	ldr	r3, [r3, #28]
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3708      	adds	r7, #8
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}

08006c8e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006c8e:	b580      	push	{r7, lr}
 8006c90:	b082      	sub	sp, #8
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
 8006c96:	460b      	mov	r3, r1
 8006c98:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	32ae      	adds	r2, #174	@ 0xae
 8006ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d101      	bne.n	8006cb0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006cac:	2303      	movs	r3, #3
 8006cae:	e01c      	b.n	8006cea <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	2b03      	cmp	r3, #3
 8006cba:	d115      	bne.n	8006ce8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	32ae      	adds	r2, #174	@ 0xae
 8006cc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cca:	6a1b      	ldr	r3, [r3, #32]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d00b      	beq.n	8006ce8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	32ae      	adds	r2, #174	@ 0xae
 8006cda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cde:	6a1b      	ldr	r3, [r3, #32]
 8006ce0:	78fa      	ldrb	r2, [r7, #3]
 8006ce2:	4611      	mov	r1, r2
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3708      	adds	r7, #8
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}

08006cf2 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006cf2:	b580      	push	{r7, lr}
 8006cf4:	b082      	sub	sp, #8
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
 8006cfa:	460b      	mov	r3, r1
 8006cfc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	32ae      	adds	r2, #174	@ 0xae
 8006d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d101      	bne.n	8006d14 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006d10:	2303      	movs	r3, #3
 8006d12:	e01c      	b.n	8006d4e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	2b03      	cmp	r3, #3
 8006d1e:	d115      	bne.n	8006d4c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	32ae      	adds	r2, #174	@ 0xae
 8006d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d00b      	beq.n	8006d4c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	32ae      	adds	r2, #174	@ 0xae
 8006d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d44:	78fa      	ldrb	r2, [r7, #3]
 8006d46:	4611      	mov	r1, r2
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3708      	adds	r7, #8
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}

08006d56 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006d56:	b480      	push	{r7}
 8006d58:	b083      	sub	sp, #12
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006d5e:	2300      	movs	r3, #0
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	370c      	adds	r7, #12
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr

08006d6c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006d74:	2300      	movs	r3, #0
 8006d76:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d00e      	beq.n	8006da8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	6852      	ldr	r2, [r2, #4]
 8006d96:	b2d2      	uxtb	r2, r2
 8006d98:	4611      	mov	r1, r2
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	4798      	blx	r3
 8006d9e:	4603      	mov	r3, r0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d001      	beq.n	8006da8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006da4:	2303      	movs	r3, #3
 8006da6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3710      	adds	r7, #16
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}

08006db2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006db2:	b480      	push	{r7}
 8006db4:	b083      	sub	sp, #12
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
 8006dba:	460b      	mov	r3, r1
 8006dbc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006dbe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	370c      	adds	r7, #12
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	460b      	mov	r3, r1
 8006dd6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006dd8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	370c      	adds	r7, #12
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr

08006de6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006de6:	b580      	push	{r7, lr}
 8006de8:	b086      	sub	sp, #24
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
 8006dee:	460b      	mov	r3, r1
 8006df0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	885b      	ldrh	r3, [r3, #2]
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	68fa      	ldr	r2, [r7, #12]
 8006e06:	7812      	ldrb	r2, [r2, #0]
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d91f      	bls.n	8006e4c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006e12:	e013      	b.n	8006e3c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006e14:	f107 030a 	add.w	r3, r7, #10
 8006e18:	4619      	mov	r1, r3
 8006e1a:	6978      	ldr	r0, [r7, #20]
 8006e1c:	f000 f81b 	bl	8006e56 <USBD_GetNextDesc>
 8006e20:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	785b      	ldrb	r3, [r3, #1]
 8006e26:	2b05      	cmp	r3, #5
 8006e28:	d108      	bne.n	8006e3c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	789b      	ldrb	r3, [r3, #2]
 8006e32:	78fa      	ldrb	r2, [r7, #3]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d008      	beq.n	8006e4a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	885b      	ldrh	r3, [r3, #2]
 8006e40:	b29a      	uxth	r2, r3
 8006e42:	897b      	ldrh	r3, [r7, #10]
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d8e5      	bhi.n	8006e14 <USBD_GetEpDesc+0x2e>
 8006e48:	e000      	b.n	8006e4c <USBD_GetEpDesc+0x66>
          break;
 8006e4a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006e4c:	693b      	ldr	r3, [r7, #16]
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3718      	adds	r7, #24
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}

08006e56 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006e56:	b480      	push	{r7}
 8006e58:	b085      	sub	sp, #20
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
 8006e5e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	881b      	ldrh	r3, [r3, #0]
 8006e68:	68fa      	ldr	r2, [r7, #12]
 8006e6a:	7812      	ldrb	r2, [r2, #0]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	b29a      	uxth	r2, r3
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	461a      	mov	r2, r3
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4413      	add	r3, r2
 8006e7e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006e80:	68fb      	ldr	r3, [r7, #12]
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3714      	adds	r7, #20
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr

08006e8e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006e8e:	b480      	push	{r7}
 8006e90:	b087      	sub	sp, #28
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006eac:	8a3b      	ldrh	r3, [r7, #16]
 8006eae:	021b      	lsls	r3, r3, #8
 8006eb0:	b21a      	sxth	r2, r3
 8006eb2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	b21b      	sxth	r3, r3
 8006eba:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006ebc:	89fb      	ldrh	r3, [r7, #14]
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	371c      	adds	r7, #28
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr
	...

08006ecc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006ee2:	2b40      	cmp	r3, #64	@ 0x40
 8006ee4:	d005      	beq.n	8006ef2 <USBD_StdDevReq+0x26>
 8006ee6:	2b40      	cmp	r3, #64	@ 0x40
 8006ee8:	d857      	bhi.n	8006f9a <USBD_StdDevReq+0xce>
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d00f      	beq.n	8006f0e <USBD_StdDevReq+0x42>
 8006eee:	2b20      	cmp	r3, #32
 8006ef0:	d153      	bne.n	8006f9a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	32ae      	adds	r2, #174	@ 0xae
 8006efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	6839      	ldr	r1, [r7, #0]
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	4798      	blx	r3
 8006f08:	4603      	mov	r3, r0
 8006f0a:	73fb      	strb	r3, [r7, #15]
      break;
 8006f0c:	e04a      	b.n	8006fa4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	785b      	ldrb	r3, [r3, #1]
 8006f12:	2b09      	cmp	r3, #9
 8006f14:	d83b      	bhi.n	8006f8e <USBD_StdDevReq+0xc2>
 8006f16:	a201      	add	r2, pc, #4	@ (adr r2, 8006f1c <USBD_StdDevReq+0x50>)
 8006f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f1c:	08006f71 	.word	0x08006f71
 8006f20:	08006f85 	.word	0x08006f85
 8006f24:	08006f8f 	.word	0x08006f8f
 8006f28:	08006f7b 	.word	0x08006f7b
 8006f2c:	08006f8f 	.word	0x08006f8f
 8006f30:	08006f4f 	.word	0x08006f4f
 8006f34:	08006f45 	.word	0x08006f45
 8006f38:	08006f8f 	.word	0x08006f8f
 8006f3c:	08006f67 	.word	0x08006f67
 8006f40:	08006f59 	.word	0x08006f59
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006f44:	6839      	ldr	r1, [r7, #0]
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 fa3c 	bl	80073c4 <USBD_GetDescriptor>
          break;
 8006f4c:	e024      	b.n	8006f98 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006f4e:	6839      	ldr	r1, [r7, #0]
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 fba1 	bl	8007698 <USBD_SetAddress>
          break;
 8006f56:	e01f      	b.n	8006f98 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006f58:	6839      	ldr	r1, [r7, #0]
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 fbe0 	bl	8007720 <USBD_SetConfig>
 8006f60:	4603      	mov	r3, r0
 8006f62:	73fb      	strb	r3, [r7, #15]
          break;
 8006f64:	e018      	b.n	8006f98 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006f66:	6839      	ldr	r1, [r7, #0]
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 fc83 	bl	8007874 <USBD_GetConfig>
          break;
 8006f6e:	e013      	b.n	8006f98 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006f70:	6839      	ldr	r1, [r7, #0]
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 fcb4 	bl	80078e0 <USBD_GetStatus>
          break;
 8006f78:	e00e      	b.n	8006f98 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006f7a:	6839      	ldr	r1, [r7, #0]
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 fce3 	bl	8007948 <USBD_SetFeature>
          break;
 8006f82:	e009      	b.n	8006f98 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006f84:	6839      	ldr	r1, [r7, #0]
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 fd07 	bl	800799a <USBD_ClrFeature>
          break;
 8006f8c:	e004      	b.n	8006f98 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006f8e:	6839      	ldr	r1, [r7, #0]
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 fd5e 	bl	8007a52 <USBD_CtlError>
          break;
 8006f96:	bf00      	nop
      }
      break;
 8006f98:	e004      	b.n	8006fa4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006f9a:	6839      	ldr	r1, [r7, #0]
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 fd58 	bl	8007a52 <USBD_CtlError>
      break;
 8006fa2:	bf00      	nop
  }

  return ret;
 8006fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3710      	adds	r7, #16
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop

08006fb0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006fc6:	2b40      	cmp	r3, #64	@ 0x40
 8006fc8:	d005      	beq.n	8006fd6 <USBD_StdItfReq+0x26>
 8006fca:	2b40      	cmp	r3, #64	@ 0x40
 8006fcc:	d852      	bhi.n	8007074 <USBD_StdItfReq+0xc4>
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d001      	beq.n	8006fd6 <USBD_StdItfReq+0x26>
 8006fd2:	2b20      	cmp	r3, #32
 8006fd4:	d14e      	bne.n	8007074 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	3b01      	subs	r3, #1
 8006fe0:	2b02      	cmp	r3, #2
 8006fe2:	d840      	bhi.n	8007066 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	889b      	ldrh	r3, [r3, #4]
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d836      	bhi.n	800705c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	889b      	ldrh	r3, [r3, #4]
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f7ff fedb 	bl	8006db2 <USBD_CoreFindIF>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007000:	7bbb      	ldrb	r3, [r7, #14]
 8007002:	2bff      	cmp	r3, #255	@ 0xff
 8007004:	d01d      	beq.n	8007042 <USBD_StdItfReq+0x92>
 8007006:	7bbb      	ldrb	r3, [r7, #14]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d11a      	bne.n	8007042 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800700c:	7bba      	ldrb	r2, [r7, #14]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	32ae      	adds	r2, #174	@ 0xae
 8007012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d00f      	beq.n	800703c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800701c:	7bba      	ldrb	r2, [r7, #14]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007024:	7bba      	ldrb	r2, [r7, #14]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	32ae      	adds	r2, #174	@ 0xae
 800702a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	6839      	ldr	r1, [r7, #0]
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	4798      	blx	r3
 8007036:	4603      	mov	r3, r0
 8007038:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800703a:	e004      	b.n	8007046 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800703c:	2303      	movs	r3, #3
 800703e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007040:	e001      	b.n	8007046 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007042:	2303      	movs	r3, #3
 8007044:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	88db      	ldrh	r3, [r3, #6]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d110      	bne.n	8007070 <USBD_StdItfReq+0xc0>
 800704e:	7bfb      	ldrb	r3, [r7, #15]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d10d      	bne.n	8007070 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 fdd3 	bl	8007c00 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800705a:	e009      	b.n	8007070 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800705c:	6839      	ldr	r1, [r7, #0]
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 fcf7 	bl	8007a52 <USBD_CtlError>
          break;
 8007064:	e004      	b.n	8007070 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007066:	6839      	ldr	r1, [r7, #0]
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 fcf2 	bl	8007a52 <USBD_CtlError>
          break;
 800706e:	e000      	b.n	8007072 <USBD_StdItfReq+0xc2>
          break;
 8007070:	bf00      	nop
      }
      break;
 8007072:	e004      	b.n	800707e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007074:	6839      	ldr	r1, [r7, #0]
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 fceb 	bl	8007a52 <USBD_CtlError>
      break;
 800707c:	bf00      	nop
  }

  return ret;
 800707e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007080:	4618      	mov	r0, r3
 8007082:	3710      	adds	r7, #16
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007092:	2300      	movs	r3, #0
 8007094:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	889b      	ldrh	r3, [r3, #4]
 800709a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80070a4:	2b40      	cmp	r3, #64	@ 0x40
 80070a6:	d007      	beq.n	80070b8 <USBD_StdEPReq+0x30>
 80070a8:	2b40      	cmp	r3, #64	@ 0x40
 80070aa:	f200 817f 	bhi.w	80073ac <USBD_StdEPReq+0x324>
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d02a      	beq.n	8007108 <USBD_StdEPReq+0x80>
 80070b2:	2b20      	cmp	r3, #32
 80070b4:	f040 817a 	bne.w	80073ac <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80070b8:	7bbb      	ldrb	r3, [r7, #14]
 80070ba:	4619      	mov	r1, r3
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f7ff fe85 	bl	8006dcc <USBD_CoreFindEP>
 80070c2:	4603      	mov	r3, r0
 80070c4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80070c6:	7b7b      	ldrb	r3, [r7, #13]
 80070c8:	2bff      	cmp	r3, #255	@ 0xff
 80070ca:	f000 8174 	beq.w	80073b6 <USBD_StdEPReq+0x32e>
 80070ce:	7b7b      	ldrb	r3, [r7, #13]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f040 8170 	bne.w	80073b6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80070d6:	7b7a      	ldrb	r2, [r7, #13]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80070de:	7b7a      	ldrb	r2, [r7, #13]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	32ae      	adds	r2, #174	@ 0xae
 80070e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	f000 8163 	beq.w	80073b6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80070f0:	7b7a      	ldrb	r2, [r7, #13]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	32ae      	adds	r2, #174	@ 0xae
 80070f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	6839      	ldr	r1, [r7, #0]
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	4798      	blx	r3
 8007102:	4603      	mov	r3, r0
 8007104:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007106:	e156      	b.n	80073b6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	785b      	ldrb	r3, [r3, #1]
 800710c:	2b03      	cmp	r3, #3
 800710e:	d008      	beq.n	8007122 <USBD_StdEPReq+0x9a>
 8007110:	2b03      	cmp	r3, #3
 8007112:	f300 8145 	bgt.w	80073a0 <USBD_StdEPReq+0x318>
 8007116:	2b00      	cmp	r3, #0
 8007118:	f000 809b 	beq.w	8007252 <USBD_StdEPReq+0x1ca>
 800711c:	2b01      	cmp	r3, #1
 800711e:	d03c      	beq.n	800719a <USBD_StdEPReq+0x112>
 8007120:	e13e      	b.n	80073a0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007128:	b2db      	uxtb	r3, r3
 800712a:	2b02      	cmp	r3, #2
 800712c:	d002      	beq.n	8007134 <USBD_StdEPReq+0xac>
 800712e:	2b03      	cmp	r3, #3
 8007130:	d016      	beq.n	8007160 <USBD_StdEPReq+0xd8>
 8007132:	e02c      	b.n	800718e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007134:	7bbb      	ldrb	r3, [r7, #14]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00d      	beq.n	8007156 <USBD_StdEPReq+0xce>
 800713a:	7bbb      	ldrb	r3, [r7, #14]
 800713c:	2b80      	cmp	r3, #128	@ 0x80
 800713e:	d00a      	beq.n	8007156 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007140:	7bbb      	ldrb	r3, [r7, #14]
 8007142:	4619      	mov	r1, r3
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f001 f975 	bl	8008434 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800714a:	2180      	movs	r1, #128	@ 0x80
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f001 f971 	bl	8008434 <USBD_LL_StallEP>
 8007152:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007154:	e020      	b.n	8007198 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007156:	6839      	ldr	r1, [r7, #0]
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f000 fc7a 	bl	8007a52 <USBD_CtlError>
              break;
 800715e:	e01b      	b.n	8007198 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	885b      	ldrh	r3, [r3, #2]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d10e      	bne.n	8007186 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007168:	7bbb      	ldrb	r3, [r7, #14]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d00b      	beq.n	8007186 <USBD_StdEPReq+0xfe>
 800716e:	7bbb      	ldrb	r3, [r7, #14]
 8007170:	2b80      	cmp	r3, #128	@ 0x80
 8007172:	d008      	beq.n	8007186 <USBD_StdEPReq+0xfe>
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	88db      	ldrh	r3, [r3, #6]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d104      	bne.n	8007186 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800717c:	7bbb      	ldrb	r3, [r7, #14]
 800717e:	4619      	mov	r1, r3
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f001 f957 	bl	8008434 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 fd3a 	bl	8007c00 <USBD_CtlSendStatus>

              break;
 800718c:	e004      	b.n	8007198 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800718e:	6839      	ldr	r1, [r7, #0]
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 fc5e 	bl	8007a52 <USBD_CtlError>
              break;
 8007196:	bf00      	nop
          }
          break;
 8007198:	e107      	b.n	80073aa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	2b02      	cmp	r3, #2
 80071a4:	d002      	beq.n	80071ac <USBD_StdEPReq+0x124>
 80071a6:	2b03      	cmp	r3, #3
 80071a8:	d016      	beq.n	80071d8 <USBD_StdEPReq+0x150>
 80071aa:	e04b      	b.n	8007244 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80071ac:	7bbb      	ldrb	r3, [r7, #14]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d00d      	beq.n	80071ce <USBD_StdEPReq+0x146>
 80071b2:	7bbb      	ldrb	r3, [r7, #14]
 80071b4:	2b80      	cmp	r3, #128	@ 0x80
 80071b6:	d00a      	beq.n	80071ce <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80071b8:	7bbb      	ldrb	r3, [r7, #14]
 80071ba:	4619      	mov	r1, r3
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f001 f939 	bl	8008434 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80071c2:	2180      	movs	r1, #128	@ 0x80
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f001 f935 	bl	8008434 <USBD_LL_StallEP>
 80071ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80071cc:	e040      	b.n	8007250 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80071ce:	6839      	ldr	r1, [r7, #0]
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 fc3e 	bl	8007a52 <USBD_CtlError>
              break;
 80071d6:	e03b      	b.n	8007250 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	885b      	ldrh	r3, [r3, #2]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d136      	bne.n	800724e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80071e0:	7bbb      	ldrb	r3, [r7, #14]
 80071e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d004      	beq.n	80071f4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80071ea:	7bbb      	ldrb	r3, [r7, #14]
 80071ec:	4619      	mov	r1, r3
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f001 f93f 	bl	8008472 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 fd03 	bl	8007c00 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80071fa:	7bbb      	ldrb	r3, [r7, #14]
 80071fc:	4619      	mov	r1, r3
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f7ff fde4 	bl	8006dcc <USBD_CoreFindEP>
 8007204:	4603      	mov	r3, r0
 8007206:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007208:	7b7b      	ldrb	r3, [r7, #13]
 800720a:	2bff      	cmp	r3, #255	@ 0xff
 800720c:	d01f      	beq.n	800724e <USBD_StdEPReq+0x1c6>
 800720e:	7b7b      	ldrb	r3, [r7, #13]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d11c      	bne.n	800724e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007214:	7b7a      	ldrb	r2, [r7, #13]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800721c:	7b7a      	ldrb	r2, [r7, #13]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	32ae      	adds	r2, #174	@ 0xae
 8007222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d010      	beq.n	800724e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800722c:	7b7a      	ldrb	r2, [r7, #13]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	32ae      	adds	r2, #174	@ 0xae
 8007232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	6839      	ldr	r1, [r7, #0]
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	4798      	blx	r3
 800723e:	4603      	mov	r3, r0
 8007240:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007242:	e004      	b.n	800724e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007244:	6839      	ldr	r1, [r7, #0]
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 fc03 	bl	8007a52 <USBD_CtlError>
              break;
 800724c:	e000      	b.n	8007250 <USBD_StdEPReq+0x1c8>
              break;
 800724e:	bf00      	nop
          }
          break;
 8007250:	e0ab      	b.n	80073aa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007258:	b2db      	uxtb	r3, r3
 800725a:	2b02      	cmp	r3, #2
 800725c:	d002      	beq.n	8007264 <USBD_StdEPReq+0x1dc>
 800725e:	2b03      	cmp	r3, #3
 8007260:	d032      	beq.n	80072c8 <USBD_StdEPReq+0x240>
 8007262:	e097      	b.n	8007394 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007264:	7bbb      	ldrb	r3, [r7, #14]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d007      	beq.n	800727a <USBD_StdEPReq+0x1f2>
 800726a:	7bbb      	ldrb	r3, [r7, #14]
 800726c:	2b80      	cmp	r3, #128	@ 0x80
 800726e:	d004      	beq.n	800727a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007270:	6839      	ldr	r1, [r7, #0]
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 fbed 	bl	8007a52 <USBD_CtlError>
                break;
 8007278:	e091      	b.n	800739e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800727a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800727e:	2b00      	cmp	r3, #0
 8007280:	da0b      	bge.n	800729a <USBD_StdEPReq+0x212>
 8007282:	7bbb      	ldrb	r3, [r7, #14]
 8007284:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007288:	4613      	mov	r3, r2
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	4413      	add	r3, r2
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	3310      	adds	r3, #16
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	4413      	add	r3, r2
 8007296:	3304      	adds	r3, #4
 8007298:	e00b      	b.n	80072b2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800729a:	7bbb      	ldrb	r3, [r7, #14]
 800729c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072a0:	4613      	mov	r3, r2
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	4413      	add	r3, r2
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	4413      	add	r3, r2
 80072b0:	3304      	adds	r3, #4
 80072b2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	2200      	movs	r2, #0
 80072b8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	2202      	movs	r2, #2
 80072be:	4619      	mov	r1, r3
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 fc43 	bl	8007b4c <USBD_CtlSendData>
              break;
 80072c6:	e06a      	b.n	800739e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80072c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	da11      	bge.n	80072f4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80072d0:	7bbb      	ldrb	r3, [r7, #14]
 80072d2:	f003 020f 	and.w	r2, r3, #15
 80072d6:	6879      	ldr	r1, [r7, #4]
 80072d8:	4613      	mov	r3, r2
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	4413      	add	r3, r2
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	440b      	add	r3, r1
 80072e2:	3324      	adds	r3, #36	@ 0x24
 80072e4:	881b      	ldrh	r3, [r3, #0]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d117      	bne.n	800731a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80072ea:	6839      	ldr	r1, [r7, #0]
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 fbb0 	bl	8007a52 <USBD_CtlError>
                  break;
 80072f2:	e054      	b.n	800739e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80072f4:	7bbb      	ldrb	r3, [r7, #14]
 80072f6:	f003 020f 	and.w	r2, r3, #15
 80072fa:	6879      	ldr	r1, [r7, #4]
 80072fc:	4613      	mov	r3, r2
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	4413      	add	r3, r2
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	440b      	add	r3, r1
 8007306:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800730a:	881b      	ldrh	r3, [r3, #0]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d104      	bne.n	800731a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007310:	6839      	ldr	r1, [r7, #0]
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 fb9d 	bl	8007a52 <USBD_CtlError>
                  break;
 8007318:	e041      	b.n	800739e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800731a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800731e:	2b00      	cmp	r3, #0
 8007320:	da0b      	bge.n	800733a <USBD_StdEPReq+0x2b2>
 8007322:	7bbb      	ldrb	r3, [r7, #14]
 8007324:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007328:	4613      	mov	r3, r2
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	4413      	add	r3, r2
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	3310      	adds	r3, #16
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	4413      	add	r3, r2
 8007336:	3304      	adds	r3, #4
 8007338:	e00b      	b.n	8007352 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800733a:	7bbb      	ldrb	r3, [r7, #14]
 800733c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007340:	4613      	mov	r3, r2
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	4413      	add	r3, r2
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	4413      	add	r3, r2
 8007350:	3304      	adds	r3, #4
 8007352:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007354:	7bbb      	ldrb	r3, [r7, #14]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d002      	beq.n	8007360 <USBD_StdEPReq+0x2d8>
 800735a:	7bbb      	ldrb	r3, [r7, #14]
 800735c:	2b80      	cmp	r3, #128	@ 0x80
 800735e:	d103      	bne.n	8007368 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	2200      	movs	r2, #0
 8007364:	601a      	str	r2, [r3, #0]
 8007366:	e00e      	b.n	8007386 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007368:	7bbb      	ldrb	r3, [r7, #14]
 800736a:	4619      	mov	r1, r3
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f001 f89f 	bl	80084b0 <USBD_LL_IsStallEP>
 8007372:	4603      	mov	r3, r0
 8007374:	2b00      	cmp	r3, #0
 8007376:	d003      	beq.n	8007380 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	2201      	movs	r2, #1
 800737c:	601a      	str	r2, [r3, #0]
 800737e:	e002      	b.n	8007386 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	2200      	movs	r2, #0
 8007384:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	2202      	movs	r2, #2
 800738a:	4619      	mov	r1, r3
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 fbdd 	bl	8007b4c <USBD_CtlSendData>
              break;
 8007392:	e004      	b.n	800739e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007394:	6839      	ldr	r1, [r7, #0]
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 fb5b 	bl	8007a52 <USBD_CtlError>
              break;
 800739c:	bf00      	nop
          }
          break;
 800739e:	e004      	b.n	80073aa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80073a0:	6839      	ldr	r1, [r7, #0]
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 fb55 	bl	8007a52 <USBD_CtlError>
          break;
 80073a8:	bf00      	nop
      }
      break;
 80073aa:	e005      	b.n	80073b8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80073ac:	6839      	ldr	r1, [r7, #0]
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 fb4f 	bl	8007a52 <USBD_CtlError>
      break;
 80073b4:	e000      	b.n	80073b8 <USBD_StdEPReq+0x330>
      break;
 80073b6:	bf00      	nop
  }

  return ret;
 80073b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3710      	adds	r7, #16
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
	...

080073c4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80073ce:	2300      	movs	r3, #0
 80073d0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80073d2:	2300      	movs	r3, #0
 80073d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80073d6:	2300      	movs	r3, #0
 80073d8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	885b      	ldrh	r3, [r3, #2]
 80073de:	0a1b      	lsrs	r3, r3, #8
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	3b01      	subs	r3, #1
 80073e4:	2b06      	cmp	r3, #6
 80073e6:	f200 8128 	bhi.w	800763a <USBD_GetDescriptor+0x276>
 80073ea:	a201      	add	r2, pc, #4	@ (adr r2, 80073f0 <USBD_GetDescriptor+0x2c>)
 80073ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073f0:	0800740d 	.word	0x0800740d
 80073f4:	08007425 	.word	0x08007425
 80073f8:	08007465 	.word	0x08007465
 80073fc:	0800763b 	.word	0x0800763b
 8007400:	0800763b 	.word	0x0800763b
 8007404:	080075db 	.word	0x080075db
 8007408:	08007607 	.word	0x08007607
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	7c12      	ldrb	r2, [r2, #16]
 8007418:	f107 0108 	add.w	r1, r7, #8
 800741c:	4610      	mov	r0, r2
 800741e:	4798      	blx	r3
 8007420:	60f8      	str	r0, [r7, #12]
      break;
 8007422:	e112      	b.n	800764a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	7c1b      	ldrb	r3, [r3, #16]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d10d      	bne.n	8007448 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007434:	f107 0208 	add.w	r2, r7, #8
 8007438:	4610      	mov	r0, r2
 800743a:	4798      	blx	r3
 800743c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	3301      	adds	r3, #1
 8007442:	2202      	movs	r2, #2
 8007444:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007446:	e100      	b.n	800764a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800744e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007450:	f107 0208 	add.w	r2, r7, #8
 8007454:	4610      	mov	r0, r2
 8007456:	4798      	blx	r3
 8007458:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	3301      	adds	r3, #1
 800745e:	2202      	movs	r2, #2
 8007460:	701a      	strb	r2, [r3, #0]
      break;
 8007462:	e0f2      	b.n	800764a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	885b      	ldrh	r3, [r3, #2]
 8007468:	b2db      	uxtb	r3, r3
 800746a:	2b05      	cmp	r3, #5
 800746c:	f200 80ac 	bhi.w	80075c8 <USBD_GetDescriptor+0x204>
 8007470:	a201      	add	r2, pc, #4	@ (adr r2, 8007478 <USBD_GetDescriptor+0xb4>)
 8007472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007476:	bf00      	nop
 8007478:	08007491 	.word	0x08007491
 800747c:	080074c5 	.word	0x080074c5
 8007480:	080074f9 	.word	0x080074f9
 8007484:	0800752d 	.word	0x0800752d
 8007488:	08007561 	.word	0x08007561
 800748c:	08007595 	.word	0x08007595
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d00b      	beq.n	80074b4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	7c12      	ldrb	r2, [r2, #16]
 80074a8:	f107 0108 	add.w	r1, r7, #8
 80074ac:	4610      	mov	r0, r2
 80074ae:	4798      	blx	r3
 80074b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074b2:	e091      	b.n	80075d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074b4:	6839      	ldr	r1, [r7, #0]
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 facb 	bl	8007a52 <USBD_CtlError>
            err++;
 80074bc:	7afb      	ldrb	r3, [r7, #11]
 80074be:	3301      	adds	r3, #1
 80074c0:	72fb      	strb	r3, [r7, #11]
          break;
 80074c2:	e089      	b.n	80075d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d00b      	beq.n	80074e8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	7c12      	ldrb	r2, [r2, #16]
 80074dc:	f107 0108 	add.w	r1, r7, #8
 80074e0:	4610      	mov	r0, r2
 80074e2:	4798      	blx	r3
 80074e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074e6:	e077      	b.n	80075d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074e8:	6839      	ldr	r1, [r7, #0]
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 fab1 	bl	8007a52 <USBD_CtlError>
            err++;
 80074f0:	7afb      	ldrb	r3, [r7, #11]
 80074f2:	3301      	adds	r3, #1
 80074f4:	72fb      	strb	r3, [r7, #11]
          break;
 80074f6:	e06f      	b.n	80075d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80074fe:	68db      	ldr	r3, [r3, #12]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d00b      	beq.n	800751c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800750a:	68db      	ldr	r3, [r3, #12]
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	7c12      	ldrb	r2, [r2, #16]
 8007510:	f107 0108 	add.w	r1, r7, #8
 8007514:	4610      	mov	r0, r2
 8007516:	4798      	blx	r3
 8007518:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800751a:	e05d      	b.n	80075d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800751c:	6839      	ldr	r1, [r7, #0]
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 fa97 	bl	8007a52 <USBD_CtlError>
            err++;
 8007524:	7afb      	ldrb	r3, [r7, #11]
 8007526:	3301      	adds	r3, #1
 8007528:	72fb      	strb	r3, [r7, #11]
          break;
 800752a:	e055      	b.n	80075d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007532:	691b      	ldr	r3, [r3, #16]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d00b      	beq.n	8007550 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800753e:	691b      	ldr	r3, [r3, #16]
 8007540:	687a      	ldr	r2, [r7, #4]
 8007542:	7c12      	ldrb	r2, [r2, #16]
 8007544:	f107 0108 	add.w	r1, r7, #8
 8007548:	4610      	mov	r0, r2
 800754a:	4798      	blx	r3
 800754c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800754e:	e043      	b.n	80075d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007550:	6839      	ldr	r1, [r7, #0]
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 fa7d 	bl	8007a52 <USBD_CtlError>
            err++;
 8007558:	7afb      	ldrb	r3, [r7, #11]
 800755a:	3301      	adds	r3, #1
 800755c:	72fb      	strb	r3, [r7, #11]
          break;
 800755e:	e03b      	b.n	80075d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007566:	695b      	ldr	r3, [r3, #20]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d00b      	beq.n	8007584 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007572:	695b      	ldr	r3, [r3, #20]
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	7c12      	ldrb	r2, [r2, #16]
 8007578:	f107 0108 	add.w	r1, r7, #8
 800757c:	4610      	mov	r0, r2
 800757e:	4798      	blx	r3
 8007580:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007582:	e029      	b.n	80075d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007584:	6839      	ldr	r1, [r7, #0]
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 fa63 	bl	8007a52 <USBD_CtlError>
            err++;
 800758c:	7afb      	ldrb	r3, [r7, #11]
 800758e:	3301      	adds	r3, #1
 8007590:	72fb      	strb	r3, [r7, #11]
          break;
 8007592:	e021      	b.n	80075d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800759a:	699b      	ldr	r3, [r3, #24]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d00b      	beq.n	80075b8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075a6:	699b      	ldr	r3, [r3, #24]
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	7c12      	ldrb	r2, [r2, #16]
 80075ac:	f107 0108 	add.w	r1, r7, #8
 80075b0:	4610      	mov	r0, r2
 80075b2:	4798      	blx	r3
 80075b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075b6:	e00f      	b.n	80075d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075b8:	6839      	ldr	r1, [r7, #0]
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 fa49 	bl	8007a52 <USBD_CtlError>
            err++;
 80075c0:	7afb      	ldrb	r3, [r7, #11]
 80075c2:	3301      	adds	r3, #1
 80075c4:	72fb      	strb	r3, [r7, #11]
          break;
 80075c6:	e007      	b.n	80075d8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80075c8:	6839      	ldr	r1, [r7, #0]
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 fa41 	bl	8007a52 <USBD_CtlError>
          err++;
 80075d0:	7afb      	ldrb	r3, [r7, #11]
 80075d2:	3301      	adds	r3, #1
 80075d4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80075d6:	bf00      	nop
      }
      break;
 80075d8:	e037      	b.n	800764a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	7c1b      	ldrb	r3, [r3, #16]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d109      	bne.n	80075f6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075ea:	f107 0208 	add.w	r2, r7, #8
 80075ee:	4610      	mov	r0, r2
 80075f0:	4798      	blx	r3
 80075f2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80075f4:	e029      	b.n	800764a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80075f6:	6839      	ldr	r1, [r7, #0]
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f000 fa2a 	bl	8007a52 <USBD_CtlError>
        err++;
 80075fe:	7afb      	ldrb	r3, [r7, #11]
 8007600:	3301      	adds	r3, #1
 8007602:	72fb      	strb	r3, [r7, #11]
      break;
 8007604:	e021      	b.n	800764a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	7c1b      	ldrb	r3, [r3, #16]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d10d      	bne.n	800762a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007616:	f107 0208 	add.w	r2, r7, #8
 800761a:	4610      	mov	r0, r2
 800761c:	4798      	blx	r3
 800761e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	3301      	adds	r3, #1
 8007624:	2207      	movs	r2, #7
 8007626:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007628:	e00f      	b.n	800764a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800762a:	6839      	ldr	r1, [r7, #0]
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f000 fa10 	bl	8007a52 <USBD_CtlError>
        err++;
 8007632:	7afb      	ldrb	r3, [r7, #11]
 8007634:	3301      	adds	r3, #1
 8007636:	72fb      	strb	r3, [r7, #11]
      break;
 8007638:	e007      	b.n	800764a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800763a:	6839      	ldr	r1, [r7, #0]
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 fa08 	bl	8007a52 <USBD_CtlError>
      err++;
 8007642:	7afb      	ldrb	r3, [r7, #11]
 8007644:	3301      	adds	r3, #1
 8007646:	72fb      	strb	r3, [r7, #11]
      break;
 8007648:	bf00      	nop
  }

  if (err != 0U)
 800764a:	7afb      	ldrb	r3, [r7, #11]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d11e      	bne.n	800768e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	88db      	ldrh	r3, [r3, #6]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d016      	beq.n	8007686 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007658:	893b      	ldrh	r3, [r7, #8]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00e      	beq.n	800767c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	88da      	ldrh	r2, [r3, #6]
 8007662:	893b      	ldrh	r3, [r7, #8]
 8007664:	4293      	cmp	r3, r2
 8007666:	bf28      	it	cs
 8007668:	4613      	movcs	r3, r2
 800766a:	b29b      	uxth	r3, r3
 800766c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800766e:	893b      	ldrh	r3, [r7, #8]
 8007670:	461a      	mov	r2, r3
 8007672:	68f9      	ldr	r1, [r7, #12]
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 fa69 	bl	8007b4c <USBD_CtlSendData>
 800767a:	e009      	b.n	8007690 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800767c:	6839      	ldr	r1, [r7, #0]
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 f9e7 	bl	8007a52 <USBD_CtlError>
 8007684:	e004      	b.n	8007690 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 faba 	bl	8007c00 <USBD_CtlSendStatus>
 800768c:	e000      	b.n	8007690 <USBD_GetDescriptor+0x2cc>
    return;
 800768e:	bf00      	nop
  }
}
 8007690:	3710      	adds	r7, #16
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop

08007698 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	889b      	ldrh	r3, [r3, #4]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d131      	bne.n	800770e <USBD_SetAddress+0x76>
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	88db      	ldrh	r3, [r3, #6]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d12d      	bne.n	800770e <USBD_SetAddress+0x76>
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	885b      	ldrh	r3, [r3, #2]
 80076b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80076b8:	d829      	bhi.n	800770e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	885b      	ldrh	r3, [r3, #2]
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076c4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	2b03      	cmp	r3, #3
 80076d0:	d104      	bne.n	80076dc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80076d2:	6839      	ldr	r1, [r7, #0]
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 f9bc 	bl	8007a52 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076da:	e01d      	b.n	8007718 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	7bfa      	ldrb	r2, [r7, #15]
 80076e0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80076e4:	7bfb      	ldrb	r3, [r7, #15]
 80076e6:	4619      	mov	r1, r3
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 ff0d 	bl	8008508 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 fa86 	bl	8007c00 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80076f4:	7bfb      	ldrb	r3, [r7, #15]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d004      	beq.n	8007704 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2202      	movs	r2, #2
 80076fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007702:	e009      	b.n	8007718 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800770c:	e004      	b.n	8007718 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800770e:	6839      	ldr	r1, [r7, #0]
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 f99e 	bl	8007a52 <USBD_CtlError>
  }
}
 8007716:	bf00      	nop
 8007718:	bf00      	nop
 800771a:	3710      	adds	r7, #16
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800772a:	2300      	movs	r3, #0
 800772c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	885b      	ldrh	r3, [r3, #2]
 8007732:	b2da      	uxtb	r2, r3
 8007734:	4b4e      	ldr	r3, [pc, #312]	@ (8007870 <USBD_SetConfig+0x150>)
 8007736:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007738:	4b4d      	ldr	r3, [pc, #308]	@ (8007870 <USBD_SetConfig+0x150>)
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	2b01      	cmp	r3, #1
 800773e:	d905      	bls.n	800774c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007740:	6839      	ldr	r1, [r7, #0]
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 f985 	bl	8007a52 <USBD_CtlError>
    return USBD_FAIL;
 8007748:	2303      	movs	r3, #3
 800774a:	e08c      	b.n	8007866 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007752:	b2db      	uxtb	r3, r3
 8007754:	2b02      	cmp	r3, #2
 8007756:	d002      	beq.n	800775e <USBD_SetConfig+0x3e>
 8007758:	2b03      	cmp	r3, #3
 800775a:	d029      	beq.n	80077b0 <USBD_SetConfig+0x90>
 800775c:	e075      	b.n	800784a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800775e:	4b44      	ldr	r3, [pc, #272]	@ (8007870 <USBD_SetConfig+0x150>)
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d020      	beq.n	80077a8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007766:	4b42      	ldr	r3, [pc, #264]	@ (8007870 <USBD_SetConfig+0x150>)
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	461a      	mov	r2, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007770:	4b3f      	ldr	r3, [pc, #252]	@ (8007870 <USBD_SetConfig+0x150>)
 8007772:	781b      	ldrb	r3, [r3, #0]
 8007774:	4619      	mov	r1, r3
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f7fe ffe3 	bl	8006742 <USBD_SetClassConfig>
 800777c:	4603      	mov	r3, r0
 800777e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007780:	7bfb      	ldrb	r3, [r7, #15]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d008      	beq.n	8007798 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007786:	6839      	ldr	r1, [r7, #0]
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 f962 	bl	8007a52 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2202      	movs	r2, #2
 8007792:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007796:	e065      	b.n	8007864 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 fa31 	bl	8007c00 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2203      	movs	r2, #3
 80077a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80077a6:	e05d      	b.n	8007864 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 fa29 	bl	8007c00 <USBD_CtlSendStatus>
      break;
 80077ae:	e059      	b.n	8007864 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80077b0:	4b2f      	ldr	r3, [pc, #188]	@ (8007870 <USBD_SetConfig+0x150>)
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d112      	bne.n	80077de <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2202      	movs	r2, #2
 80077bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80077c0:	4b2b      	ldr	r3, [pc, #172]	@ (8007870 <USBD_SetConfig+0x150>)
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	461a      	mov	r2, r3
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80077ca:	4b29      	ldr	r3, [pc, #164]	@ (8007870 <USBD_SetConfig+0x150>)
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	4619      	mov	r1, r3
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f7fe ffd2 	bl	800677a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 fa12 	bl	8007c00 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80077dc:	e042      	b.n	8007864 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80077de:	4b24      	ldr	r3, [pc, #144]	@ (8007870 <USBD_SetConfig+0x150>)
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	461a      	mov	r2, r3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d02a      	beq.n	8007842 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	4619      	mov	r1, r3
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f7fe ffc0 	bl	800677a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80077fa:	4b1d      	ldr	r3, [pc, #116]	@ (8007870 <USBD_SetConfig+0x150>)
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	461a      	mov	r2, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007804:	4b1a      	ldr	r3, [pc, #104]	@ (8007870 <USBD_SetConfig+0x150>)
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	4619      	mov	r1, r3
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f7fe ff99 	bl	8006742 <USBD_SetClassConfig>
 8007810:	4603      	mov	r3, r0
 8007812:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007814:	7bfb      	ldrb	r3, [r7, #15]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d00f      	beq.n	800783a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800781a:	6839      	ldr	r1, [r7, #0]
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 f918 	bl	8007a52 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	b2db      	uxtb	r3, r3
 8007828:	4619      	mov	r1, r3
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f7fe ffa5 	bl	800677a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2202      	movs	r2, #2
 8007834:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007838:	e014      	b.n	8007864 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 f9e0 	bl	8007c00 <USBD_CtlSendStatus>
      break;
 8007840:	e010      	b.n	8007864 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 f9dc 	bl	8007c00 <USBD_CtlSendStatus>
      break;
 8007848:	e00c      	b.n	8007864 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800784a:	6839      	ldr	r1, [r7, #0]
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 f900 	bl	8007a52 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007852:	4b07      	ldr	r3, [pc, #28]	@ (8007870 <USBD_SetConfig+0x150>)
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	4619      	mov	r1, r3
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f7fe ff8e 	bl	800677a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800785e:	2303      	movs	r3, #3
 8007860:	73fb      	strb	r3, [r7, #15]
      break;
 8007862:	bf00      	nop
  }

  return ret;
 8007864:	7bfb      	ldrb	r3, [r7, #15]
}
 8007866:	4618      	mov	r0, r3
 8007868:	3710      	adds	r7, #16
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	200003b4 	.word	0x200003b4

08007874 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	88db      	ldrh	r3, [r3, #6]
 8007882:	2b01      	cmp	r3, #1
 8007884:	d004      	beq.n	8007890 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007886:	6839      	ldr	r1, [r7, #0]
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 f8e2 	bl	8007a52 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800788e:	e023      	b.n	80078d8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007896:	b2db      	uxtb	r3, r3
 8007898:	2b02      	cmp	r3, #2
 800789a:	dc02      	bgt.n	80078a2 <USBD_GetConfig+0x2e>
 800789c:	2b00      	cmp	r3, #0
 800789e:	dc03      	bgt.n	80078a8 <USBD_GetConfig+0x34>
 80078a0:	e015      	b.n	80078ce <USBD_GetConfig+0x5a>
 80078a2:	2b03      	cmp	r3, #3
 80078a4:	d00b      	beq.n	80078be <USBD_GetConfig+0x4a>
 80078a6:	e012      	b.n	80078ce <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2200      	movs	r2, #0
 80078ac:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	3308      	adds	r3, #8
 80078b2:	2201      	movs	r2, #1
 80078b4:	4619      	mov	r1, r3
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 f948 	bl	8007b4c <USBD_CtlSendData>
        break;
 80078bc:	e00c      	b.n	80078d8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	3304      	adds	r3, #4
 80078c2:	2201      	movs	r2, #1
 80078c4:	4619      	mov	r1, r3
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 f940 	bl	8007b4c <USBD_CtlSendData>
        break;
 80078cc:	e004      	b.n	80078d8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80078ce:	6839      	ldr	r1, [r7, #0]
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 f8be 	bl	8007a52 <USBD_CtlError>
        break;
 80078d6:	bf00      	nop
}
 80078d8:	bf00      	nop
 80078da:	3708      	adds	r7, #8
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b082      	sub	sp, #8
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	3b01      	subs	r3, #1
 80078f4:	2b02      	cmp	r3, #2
 80078f6:	d81e      	bhi.n	8007936 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	88db      	ldrh	r3, [r3, #6]
 80078fc:	2b02      	cmp	r3, #2
 80078fe:	d004      	beq.n	800790a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007900:	6839      	ldr	r1, [r7, #0]
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 f8a5 	bl	8007a52 <USBD_CtlError>
        break;
 8007908:	e01a      	b.n	8007940 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2201      	movs	r2, #1
 800790e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007916:	2b00      	cmp	r3, #0
 8007918:	d005      	beq.n	8007926 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	f043 0202 	orr.w	r2, r3, #2
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	330c      	adds	r3, #12
 800792a:	2202      	movs	r2, #2
 800792c:	4619      	mov	r1, r3
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 f90c 	bl	8007b4c <USBD_CtlSendData>
      break;
 8007934:	e004      	b.n	8007940 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007936:	6839      	ldr	r1, [r7, #0]
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f000 f88a 	bl	8007a52 <USBD_CtlError>
      break;
 800793e:	bf00      	nop
  }
}
 8007940:	bf00      	nop
 8007942:	3708      	adds	r7, #8
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	885b      	ldrh	r3, [r3, #2]
 8007956:	2b01      	cmp	r3, #1
 8007958:	d107      	bne.n	800796a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2201      	movs	r2, #1
 800795e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 f94c 	bl	8007c00 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007968:	e013      	b.n	8007992 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	885b      	ldrh	r3, [r3, #2]
 800796e:	2b02      	cmp	r3, #2
 8007970:	d10b      	bne.n	800798a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	889b      	ldrh	r3, [r3, #4]
 8007976:	0a1b      	lsrs	r3, r3, #8
 8007978:	b29b      	uxth	r3, r3
 800797a:	b2da      	uxtb	r2, r3
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 f93c 	bl	8007c00 <USBD_CtlSendStatus>
}
 8007988:	e003      	b.n	8007992 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800798a:	6839      	ldr	r1, [r7, #0]
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 f860 	bl	8007a52 <USBD_CtlError>
}
 8007992:	bf00      	nop
 8007994:	3708      	adds	r7, #8
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}

0800799a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800799a:	b580      	push	{r7, lr}
 800799c:	b082      	sub	sp, #8
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
 80079a2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	3b01      	subs	r3, #1
 80079ae:	2b02      	cmp	r3, #2
 80079b0:	d80b      	bhi.n	80079ca <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	885b      	ldrh	r3, [r3, #2]
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	d10c      	bne.n	80079d4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 f91c 	bl	8007c00 <USBD_CtlSendStatus>
      }
      break;
 80079c8:	e004      	b.n	80079d4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80079ca:	6839      	ldr	r1, [r7, #0]
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f000 f840 	bl	8007a52 <USBD_CtlError>
      break;
 80079d2:	e000      	b.n	80079d6 <USBD_ClrFeature+0x3c>
      break;
 80079d4:	bf00      	nop
  }
}
 80079d6:	bf00      	nop
 80079d8:	3708      	adds	r7, #8
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}

080079de <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80079de:	b580      	push	{r7, lr}
 80079e0:	b084      	sub	sp, #16
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	6078      	str	r0, [r7, #4]
 80079e6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	781a      	ldrb	r2, [r3, #0]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	3301      	adds	r3, #1
 80079f8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	781a      	ldrb	r2, [r3, #0]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	3301      	adds	r3, #1
 8007a06:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007a08:	68f8      	ldr	r0, [r7, #12]
 8007a0a:	f7ff fa40 	bl	8006e8e <SWAPBYTE>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	461a      	mov	r2, r3
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	3301      	adds	r3, #1
 8007a1a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	3301      	adds	r3, #1
 8007a20:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007a22:	68f8      	ldr	r0, [r7, #12]
 8007a24:	f7ff fa33 	bl	8006e8e <SWAPBYTE>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	3301      	adds	r3, #1
 8007a34:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	3301      	adds	r3, #1
 8007a3a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007a3c:	68f8      	ldr	r0, [r7, #12]
 8007a3e:	f7ff fa26 	bl	8006e8e <SWAPBYTE>
 8007a42:	4603      	mov	r3, r0
 8007a44:	461a      	mov	r2, r3
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	80da      	strh	r2, [r3, #6]
}
 8007a4a:	bf00      	nop
 8007a4c:	3710      	adds	r7, #16
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}

08007a52 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b082      	sub	sp, #8
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
 8007a5a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a5c:	2180      	movs	r1, #128	@ 0x80
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 fce8 	bl	8008434 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007a64:	2100      	movs	r1, #0
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 fce4 	bl	8008434 <USBD_LL_StallEP>
}
 8007a6c:	bf00      	nop
 8007a6e:	3708      	adds	r7, #8
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b086      	sub	sp, #24
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	60f8      	str	r0, [r7, #12]
 8007a7c:	60b9      	str	r1, [r7, #8]
 8007a7e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007a80:	2300      	movs	r3, #0
 8007a82:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d042      	beq.n	8007b10 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8007a8e:	6938      	ldr	r0, [r7, #16]
 8007a90:	f000 f842 	bl	8007b18 <USBD_GetLen>
 8007a94:	4603      	mov	r3, r0
 8007a96:	3301      	adds	r3, #1
 8007a98:	005b      	lsls	r3, r3, #1
 8007a9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a9e:	d808      	bhi.n	8007ab2 <USBD_GetString+0x3e>
 8007aa0:	6938      	ldr	r0, [r7, #16]
 8007aa2:	f000 f839 	bl	8007b18 <USBD_GetLen>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	005b      	lsls	r3, r3, #1
 8007aae:	b29a      	uxth	r2, r3
 8007ab0:	e001      	b.n	8007ab6 <USBD_GetString+0x42>
 8007ab2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007aba:	7dfb      	ldrb	r3, [r7, #23]
 8007abc:	68ba      	ldr	r2, [r7, #8]
 8007abe:	4413      	add	r3, r2
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	7812      	ldrb	r2, [r2, #0]
 8007ac4:	701a      	strb	r2, [r3, #0]
  idx++;
 8007ac6:	7dfb      	ldrb	r3, [r7, #23]
 8007ac8:	3301      	adds	r3, #1
 8007aca:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007acc:	7dfb      	ldrb	r3, [r7, #23]
 8007ace:	68ba      	ldr	r2, [r7, #8]
 8007ad0:	4413      	add	r3, r2
 8007ad2:	2203      	movs	r2, #3
 8007ad4:	701a      	strb	r2, [r3, #0]
  idx++;
 8007ad6:	7dfb      	ldrb	r3, [r7, #23]
 8007ad8:	3301      	adds	r3, #1
 8007ada:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007adc:	e013      	b.n	8007b06 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8007ade:	7dfb      	ldrb	r3, [r7, #23]
 8007ae0:	68ba      	ldr	r2, [r7, #8]
 8007ae2:	4413      	add	r3, r2
 8007ae4:	693a      	ldr	r2, [r7, #16]
 8007ae6:	7812      	ldrb	r2, [r2, #0]
 8007ae8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	3301      	adds	r3, #1
 8007aee:	613b      	str	r3, [r7, #16]
    idx++;
 8007af0:	7dfb      	ldrb	r3, [r7, #23]
 8007af2:	3301      	adds	r3, #1
 8007af4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007af6:	7dfb      	ldrb	r3, [r7, #23]
 8007af8:	68ba      	ldr	r2, [r7, #8]
 8007afa:	4413      	add	r3, r2
 8007afc:	2200      	movs	r2, #0
 8007afe:	701a      	strb	r2, [r3, #0]
    idx++;
 8007b00:	7dfb      	ldrb	r3, [r7, #23]
 8007b02:	3301      	adds	r3, #1
 8007b04:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d1e7      	bne.n	8007ade <USBD_GetString+0x6a>
 8007b0e:	e000      	b.n	8007b12 <USBD_GetString+0x9e>
    return;
 8007b10:	bf00      	nop
  }
}
 8007b12:	3718      	adds	r7, #24
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b085      	sub	sp, #20
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007b20:	2300      	movs	r3, #0
 8007b22:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007b28:	e005      	b.n	8007b36 <USBD_GetLen+0x1e>
  {
    len++;
 8007b2a:	7bfb      	ldrb	r3, [r7, #15]
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	3301      	adds	r3, #1
 8007b34:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1f5      	bne.n	8007b2a <USBD_GetLen+0x12>
  }

  return len;
 8007b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3714      	adds	r7, #20
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	60f8      	str	r0, [r7, #12]
 8007b54:	60b9      	str	r1, [r7, #8]
 8007b56:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2202      	movs	r2, #2
 8007b5c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	68ba      	ldr	r2, [r7, #8]
 8007b70:	2100      	movs	r1, #0
 8007b72:	68f8      	ldr	r0, [r7, #12]
 8007b74:	f000 fce7 	bl	8008546 <USBD_LL_Transmit>

  return USBD_OK;
 8007b78:	2300      	movs	r3, #0
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3710      	adds	r7, #16
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}

08007b82 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007b82:	b580      	push	{r7, lr}
 8007b84:	b084      	sub	sp, #16
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	60f8      	str	r0, [r7, #12]
 8007b8a:	60b9      	str	r1, [r7, #8]
 8007b8c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	68ba      	ldr	r2, [r7, #8]
 8007b92:	2100      	movs	r1, #0
 8007b94:	68f8      	ldr	r0, [r7, #12]
 8007b96:	f000 fcd6 	bl	8008546 <USBD_LL_Transmit>

  return USBD_OK;
 8007b9a:	2300      	movs	r3, #0
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3710      	adds	r7, #16
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b084      	sub	sp, #16
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	60b9      	str	r1, [r7, #8]
 8007bae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2203      	movs	r2, #3
 8007bb4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	687a      	ldr	r2, [r7, #4]
 8007bbc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	68ba      	ldr	r2, [r7, #8]
 8007bcc:	2100      	movs	r1, #0
 8007bce:	68f8      	ldr	r0, [r7, #12]
 8007bd0:	f000 fcda 	bl	8008588 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007bd4:	2300      	movs	r3, #0
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3710      	adds	r7, #16
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}

08007bde <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007bde:	b580      	push	{r7, lr}
 8007be0:	b084      	sub	sp, #16
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	60f8      	str	r0, [r7, #12]
 8007be6:	60b9      	str	r1, [r7, #8]
 8007be8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	68ba      	ldr	r2, [r7, #8]
 8007bee:	2100      	movs	r1, #0
 8007bf0:	68f8      	ldr	r0, [r7, #12]
 8007bf2:	f000 fcc9 	bl	8008588 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007bf6:	2300      	movs	r3, #0
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3710      	adds	r7, #16
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b082      	sub	sp, #8
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2204      	movs	r2, #4
 8007c0c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007c10:	2300      	movs	r3, #0
 8007c12:	2200      	movs	r2, #0
 8007c14:	2100      	movs	r1, #0
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 fc95 	bl	8008546 <USBD_LL_Transmit>

  return USBD_OK;
 8007c1c:	2300      	movs	r3, #0
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3708      	adds	r7, #8
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}

08007c26 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007c26:	b580      	push	{r7, lr}
 8007c28:	b082      	sub	sp, #8
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2205      	movs	r2, #5
 8007c32:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c36:	2300      	movs	r3, #0
 8007c38:	2200      	movs	r2, #0
 8007c3a:	2100      	movs	r1, #0
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 fca3 	bl	8008588 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c42:	2300      	movs	r3, #0
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3708      	adds	r7, #8
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007c50:	2200      	movs	r2, #0
 8007c52:	4912      	ldr	r1, [pc, #72]	@ (8007c9c <MX_USB_DEVICE_Init+0x50>)
 8007c54:	4812      	ldr	r0, [pc, #72]	@ (8007ca0 <MX_USB_DEVICE_Init+0x54>)
 8007c56:	f7fe fcf7 	bl	8006648 <USBD_Init>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d001      	beq.n	8007c64 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007c60:	f7f9 f816 	bl	8000c90 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007c64:	490f      	ldr	r1, [pc, #60]	@ (8007ca4 <MX_USB_DEVICE_Init+0x58>)
 8007c66:	480e      	ldr	r0, [pc, #56]	@ (8007ca0 <MX_USB_DEVICE_Init+0x54>)
 8007c68:	f7fe fd1e 	bl	80066a8 <USBD_RegisterClass>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d001      	beq.n	8007c76 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007c72:	f7f9 f80d 	bl	8000c90 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007c76:	490c      	ldr	r1, [pc, #48]	@ (8007ca8 <MX_USB_DEVICE_Init+0x5c>)
 8007c78:	4809      	ldr	r0, [pc, #36]	@ (8007ca0 <MX_USB_DEVICE_Init+0x54>)
 8007c7a:	f7fe fc15 	bl	80064a8 <USBD_CDC_RegisterInterface>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d001      	beq.n	8007c88 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007c84:	f7f9 f804 	bl	8000c90 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007c88:	4805      	ldr	r0, [pc, #20]	@ (8007ca0 <MX_USB_DEVICE_Init+0x54>)
 8007c8a:	f7fe fd43 	bl	8006714 <USBD_Start>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d001      	beq.n	8007c98 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007c94:	f7f8 fffc 	bl	8000c90 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007c98:	bf00      	nop
 8007c9a:	bd80      	pop	{r7, pc}
 8007c9c:	200000bc 	.word	0x200000bc
 8007ca0:	200003b8 	.word	0x200003b8
 8007ca4:	20000028 	.word	0x20000028
 8007ca8:	200000a8 	.word	0x200000a8

08007cac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	4905      	ldr	r1, [pc, #20]	@ (8007cc8 <CDC_Init_FS+0x1c>)
 8007cb4:	4805      	ldr	r0, [pc, #20]	@ (8007ccc <CDC_Init_FS+0x20>)
 8007cb6:	f7fe fc11 	bl	80064dc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007cba:	4905      	ldr	r1, [pc, #20]	@ (8007cd0 <CDC_Init_FS+0x24>)
 8007cbc:	4803      	ldr	r0, [pc, #12]	@ (8007ccc <CDC_Init_FS+0x20>)
 8007cbe:	f7fe fc2f 	bl	8006520 <USBD_CDC_SetRxBuffer>

  return (USBD_OK);
 8007cc2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	bd80      	pop	{r7, pc}
 8007cc8:	20000e94 	.word	0x20000e94
 8007ccc:	200003b8 	.word	0x200003b8
 8007cd0:	20000694 	.word	0x20000694

08007cd4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007cd8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr

08007ce4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b083      	sub	sp, #12
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	4603      	mov	r3, r0
 8007cec:	6039      	str	r1, [r7, #0]
 8007cee:	71fb      	strb	r3, [r7, #7]
 8007cf0:	4613      	mov	r3, r2
 8007cf2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007cf4:	79fb      	ldrb	r3, [r7, #7]
 8007cf6:	2b23      	cmp	r3, #35	@ 0x23
 8007cf8:	d84a      	bhi.n	8007d90 <CDC_Control_FS+0xac>
 8007cfa:	a201      	add	r2, pc, #4	@ (adr r2, 8007d00 <CDC_Control_FS+0x1c>)
 8007cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d00:	08007d91 	.word	0x08007d91
 8007d04:	08007d91 	.word	0x08007d91
 8007d08:	08007d91 	.word	0x08007d91
 8007d0c:	08007d91 	.word	0x08007d91
 8007d10:	08007d91 	.word	0x08007d91
 8007d14:	08007d91 	.word	0x08007d91
 8007d18:	08007d91 	.word	0x08007d91
 8007d1c:	08007d91 	.word	0x08007d91
 8007d20:	08007d91 	.word	0x08007d91
 8007d24:	08007d91 	.word	0x08007d91
 8007d28:	08007d91 	.word	0x08007d91
 8007d2c:	08007d91 	.word	0x08007d91
 8007d30:	08007d91 	.word	0x08007d91
 8007d34:	08007d91 	.word	0x08007d91
 8007d38:	08007d91 	.word	0x08007d91
 8007d3c:	08007d91 	.word	0x08007d91
 8007d40:	08007d91 	.word	0x08007d91
 8007d44:	08007d91 	.word	0x08007d91
 8007d48:	08007d91 	.word	0x08007d91
 8007d4c:	08007d91 	.word	0x08007d91
 8007d50:	08007d91 	.word	0x08007d91
 8007d54:	08007d91 	.word	0x08007d91
 8007d58:	08007d91 	.word	0x08007d91
 8007d5c:	08007d91 	.word	0x08007d91
 8007d60:	08007d91 	.word	0x08007d91
 8007d64:	08007d91 	.word	0x08007d91
 8007d68:	08007d91 	.word	0x08007d91
 8007d6c:	08007d91 	.word	0x08007d91
 8007d70:	08007d91 	.word	0x08007d91
 8007d74:	08007d91 	.word	0x08007d91
 8007d78:	08007d91 	.word	0x08007d91
 8007d7c:	08007d91 	.word	0x08007d91
 8007d80:	08007d91 	.word	0x08007d91
 8007d84:	08007d91 	.word	0x08007d91
 8007d88:	08007d91 	.word	0x08007d91
 8007d8c:	08007d91 	.word	0x08007d91
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007d90:	bf00      	nop
  }

  return (USBD_OK);
 8007d92:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	370c      	adds	r7, #12
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b082      	sub	sp, #8
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007daa:	6879      	ldr	r1, [r7, #4]
 8007dac:	4808      	ldr	r0, [pc, #32]	@ (8007dd0 <CDC_Receive_FS+0x30>)
 8007dae:	f7fe fbb7 	bl	8006520 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007db2:	4807      	ldr	r0, [pc, #28]	@ (8007dd0 <CDC_Receive_FS+0x30>)
 8007db4:	f7fe fc12 	bl	80065dc <USBD_CDC_ReceivePacket>
  CDC_ReceiveCallBack(Buf, Len[0]); // preguntar
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f7f8 fc70 	bl	80006a4 <CDC_ReceiveCallBack>
  return (USBD_OK);
 8007dc4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3708      	adds	r7, #8
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	200003b8 	.word	0x200003b8

08007dd4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	460b      	mov	r3, r1
 8007dde:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007de0:	2300      	movs	r3, #0
 8007de2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007de4:	4b0d      	ldr	r3, [pc, #52]	@ (8007e1c <CDC_Transmit_FS+0x48>)
 8007de6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007dea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d001      	beq.n	8007dfa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007df6:	2301      	movs	r3, #1
 8007df8:	e00b      	b.n	8007e12 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007dfa:	887b      	ldrh	r3, [r7, #2]
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	6879      	ldr	r1, [r7, #4]
 8007e00:	4806      	ldr	r0, [pc, #24]	@ (8007e1c <CDC_Transmit_FS+0x48>)
 8007e02:	f7fe fb6b 	bl	80064dc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007e06:	4805      	ldr	r0, [pc, #20]	@ (8007e1c <CDC_Transmit_FS+0x48>)
 8007e08:	f7fe fba8 	bl	800655c <USBD_CDC_TransmitPacket>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3710      	adds	r7, #16
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	bf00      	nop
 8007e1c:	200003b8 	.word	0x200003b8

08007e20 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b087      	sub	sp, #28
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	60f8      	str	r0, [r7, #12]
 8007e28:	60b9      	str	r1, [r7, #8]
 8007e2a:	4613      	mov	r3, r2
 8007e2c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007e32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	371c      	adds	r7, #28
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr
	...

08007e44 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b083      	sub	sp, #12
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	6039      	str	r1, [r7, #0]
 8007e4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	2212      	movs	r2, #18
 8007e54:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007e56:	4b03      	ldr	r3, [pc, #12]	@ (8007e64 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	370c      	adds	r7, #12
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr
 8007e64:	200000d8 	.word	0x200000d8

08007e68 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b083      	sub	sp, #12
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	4603      	mov	r3, r0
 8007e70:	6039      	str	r1, [r7, #0]
 8007e72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	2204      	movs	r2, #4
 8007e78:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007e7a:	4b03      	ldr	r3, [pc, #12]	@ (8007e88 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	370c      	adds	r7, #12
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr
 8007e88:	200000ec 	.word	0x200000ec

08007e8c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b082      	sub	sp, #8
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	4603      	mov	r3, r0
 8007e94:	6039      	str	r1, [r7, #0]
 8007e96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007e98:	79fb      	ldrb	r3, [r7, #7]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d105      	bne.n	8007eaa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007e9e:	683a      	ldr	r2, [r7, #0]
 8007ea0:	4907      	ldr	r1, [pc, #28]	@ (8007ec0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007ea2:	4808      	ldr	r0, [pc, #32]	@ (8007ec4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ea4:	f7ff fde6 	bl	8007a74 <USBD_GetString>
 8007ea8:	e004      	b.n	8007eb4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007eaa:	683a      	ldr	r2, [r7, #0]
 8007eac:	4904      	ldr	r1, [pc, #16]	@ (8007ec0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007eae:	4805      	ldr	r0, [pc, #20]	@ (8007ec4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007eb0:	f7ff fde0 	bl	8007a74 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007eb4:	4b02      	ldr	r3, [pc, #8]	@ (8007ec0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3708      	adds	r7, #8
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	bf00      	nop
 8007ec0:	20001694 	.word	0x20001694
 8007ec4:	08008704 	.word	0x08008704

08007ec8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	4603      	mov	r3, r0
 8007ed0:	6039      	str	r1, [r7, #0]
 8007ed2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007ed4:	683a      	ldr	r2, [r7, #0]
 8007ed6:	4904      	ldr	r1, [pc, #16]	@ (8007ee8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007ed8:	4804      	ldr	r0, [pc, #16]	@ (8007eec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007eda:	f7ff fdcb 	bl	8007a74 <USBD_GetString>
  return USBD_StrDesc;
 8007ede:	4b02      	ldr	r3, [pc, #8]	@ (8007ee8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3708      	adds	r7, #8
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	20001694 	.word	0x20001694
 8007eec:	0800871c 	.word	0x0800871c

08007ef0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	6039      	str	r1, [r7, #0]
 8007efa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	221a      	movs	r2, #26
 8007f00:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007f02:	f000 f843 	bl	8007f8c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007f06:	4b02      	ldr	r3, [pc, #8]	@ (8007f10 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3708      	adds	r7, #8
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}
 8007f10:	200000f0 	.word	0x200000f0

08007f14 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b082      	sub	sp, #8
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	6039      	str	r1, [r7, #0]
 8007f1e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007f20:	79fb      	ldrb	r3, [r7, #7]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d105      	bne.n	8007f32 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007f26:	683a      	ldr	r2, [r7, #0]
 8007f28:	4907      	ldr	r1, [pc, #28]	@ (8007f48 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007f2a:	4808      	ldr	r0, [pc, #32]	@ (8007f4c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007f2c:	f7ff fda2 	bl	8007a74 <USBD_GetString>
 8007f30:	e004      	b.n	8007f3c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007f32:	683a      	ldr	r2, [r7, #0]
 8007f34:	4904      	ldr	r1, [pc, #16]	@ (8007f48 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007f36:	4805      	ldr	r0, [pc, #20]	@ (8007f4c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007f38:	f7ff fd9c 	bl	8007a74 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f3c:	4b02      	ldr	r3, [pc, #8]	@ (8007f48 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3708      	adds	r7, #8
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	bf00      	nop
 8007f48:	20001694 	.word	0x20001694
 8007f4c:	08008730 	.word	0x08008730

08007f50 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b082      	sub	sp, #8
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	4603      	mov	r3, r0
 8007f58:	6039      	str	r1, [r7, #0]
 8007f5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007f5c:	79fb      	ldrb	r3, [r7, #7]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d105      	bne.n	8007f6e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007f62:	683a      	ldr	r2, [r7, #0]
 8007f64:	4907      	ldr	r1, [pc, #28]	@ (8007f84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007f66:	4808      	ldr	r0, [pc, #32]	@ (8007f88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007f68:	f7ff fd84 	bl	8007a74 <USBD_GetString>
 8007f6c:	e004      	b.n	8007f78 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007f6e:	683a      	ldr	r2, [r7, #0]
 8007f70:	4904      	ldr	r1, [pc, #16]	@ (8007f84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007f72:	4805      	ldr	r0, [pc, #20]	@ (8007f88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007f74:	f7ff fd7e 	bl	8007a74 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f78:	4b02      	ldr	r3, [pc, #8]	@ (8007f84 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3708      	adds	r7, #8
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	bf00      	nop
 8007f84:	20001694 	.word	0x20001694
 8007f88:	0800873c 	.word	0x0800873c

08007f8c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007f92:	4b0f      	ldr	r3, [pc, #60]	@ (8007fd0 <Get_SerialNum+0x44>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007f98:	4b0e      	ldr	r3, [pc, #56]	@ (8007fd4 <Get_SerialNum+0x48>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8007fd8 <Get_SerialNum+0x4c>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007fa4:	68fa      	ldr	r2, [r7, #12]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	4413      	add	r3, r2
 8007faa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d009      	beq.n	8007fc6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007fb2:	2208      	movs	r2, #8
 8007fb4:	4909      	ldr	r1, [pc, #36]	@ (8007fdc <Get_SerialNum+0x50>)
 8007fb6:	68f8      	ldr	r0, [r7, #12]
 8007fb8:	f000 f814 	bl	8007fe4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007fbc:	2204      	movs	r2, #4
 8007fbe:	4908      	ldr	r1, [pc, #32]	@ (8007fe0 <Get_SerialNum+0x54>)
 8007fc0:	68b8      	ldr	r0, [r7, #8]
 8007fc2:	f000 f80f 	bl	8007fe4 <IntToUnicode>
  }
}
 8007fc6:	bf00      	nop
 8007fc8:	3710      	adds	r7, #16
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
 8007fce:	bf00      	nop
 8007fd0:	1fff7a10 	.word	0x1fff7a10
 8007fd4:	1fff7a14 	.word	0x1fff7a14
 8007fd8:	1fff7a18 	.word	0x1fff7a18
 8007fdc:	200000f2 	.word	0x200000f2
 8007fe0:	20000102 	.word	0x20000102

08007fe4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b087      	sub	sp, #28
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	60b9      	str	r1, [r7, #8]
 8007fee:	4613      	mov	r3, r2
 8007ff0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	75fb      	strb	r3, [r7, #23]
 8007ffa:	e027      	b.n	800804c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	0f1b      	lsrs	r3, r3, #28
 8008000:	2b09      	cmp	r3, #9
 8008002:	d80b      	bhi.n	800801c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	0f1b      	lsrs	r3, r3, #28
 8008008:	b2da      	uxtb	r2, r3
 800800a:	7dfb      	ldrb	r3, [r7, #23]
 800800c:	005b      	lsls	r3, r3, #1
 800800e:	4619      	mov	r1, r3
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	440b      	add	r3, r1
 8008014:	3230      	adds	r2, #48	@ 0x30
 8008016:	b2d2      	uxtb	r2, r2
 8008018:	701a      	strb	r2, [r3, #0]
 800801a:	e00a      	b.n	8008032 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	0f1b      	lsrs	r3, r3, #28
 8008020:	b2da      	uxtb	r2, r3
 8008022:	7dfb      	ldrb	r3, [r7, #23]
 8008024:	005b      	lsls	r3, r3, #1
 8008026:	4619      	mov	r1, r3
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	440b      	add	r3, r1
 800802c:	3237      	adds	r2, #55	@ 0x37
 800802e:	b2d2      	uxtb	r2, r2
 8008030:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	011b      	lsls	r3, r3, #4
 8008036:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008038:	7dfb      	ldrb	r3, [r7, #23]
 800803a:	005b      	lsls	r3, r3, #1
 800803c:	3301      	adds	r3, #1
 800803e:	68ba      	ldr	r2, [r7, #8]
 8008040:	4413      	add	r3, r2
 8008042:	2200      	movs	r2, #0
 8008044:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008046:	7dfb      	ldrb	r3, [r7, #23]
 8008048:	3301      	adds	r3, #1
 800804a:	75fb      	strb	r3, [r7, #23]
 800804c:	7dfa      	ldrb	r2, [r7, #23]
 800804e:	79fb      	ldrb	r3, [r7, #7]
 8008050:	429a      	cmp	r2, r3
 8008052:	d3d3      	bcc.n	8007ffc <IntToUnicode+0x18>
  }
}
 8008054:	bf00      	nop
 8008056:	bf00      	nop
 8008058:	371c      	adds	r7, #28
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr
	...

08008064 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b08a      	sub	sp, #40	@ 0x28
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800806c:	f107 0314 	add.w	r3, r7, #20
 8008070:	2200      	movs	r2, #0
 8008072:	601a      	str	r2, [r3, #0]
 8008074:	605a      	str	r2, [r3, #4]
 8008076:	609a      	str	r2, [r3, #8]
 8008078:	60da      	str	r2, [r3, #12]
 800807a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008084:	d13a      	bne.n	80080fc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008086:	2300      	movs	r3, #0
 8008088:	613b      	str	r3, [r7, #16]
 800808a:	4b1e      	ldr	r3, [pc, #120]	@ (8008104 <HAL_PCD_MspInit+0xa0>)
 800808c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800808e:	4a1d      	ldr	r2, [pc, #116]	@ (8008104 <HAL_PCD_MspInit+0xa0>)
 8008090:	f043 0301 	orr.w	r3, r3, #1
 8008094:	6313      	str	r3, [r2, #48]	@ 0x30
 8008096:	4b1b      	ldr	r3, [pc, #108]	@ (8008104 <HAL_PCD_MspInit+0xa0>)
 8008098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800809a:	f003 0301 	and.w	r3, r3, #1
 800809e:	613b      	str	r3, [r7, #16]
 80080a0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80080a2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80080a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080a8:	2302      	movs	r3, #2
 80080aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080ac:	2300      	movs	r3, #0
 80080ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80080b0:	2303      	movs	r3, #3
 80080b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80080b4:	230a      	movs	r3, #10
 80080b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080b8:	f107 0314 	add.w	r3, r7, #20
 80080bc:	4619      	mov	r1, r3
 80080be:	4812      	ldr	r0, [pc, #72]	@ (8008108 <HAL_PCD_MspInit+0xa4>)
 80080c0:	f7f9 fc22 	bl	8001908 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80080c4:	4b0f      	ldr	r3, [pc, #60]	@ (8008104 <HAL_PCD_MspInit+0xa0>)
 80080c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080c8:	4a0e      	ldr	r2, [pc, #56]	@ (8008104 <HAL_PCD_MspInit+0xa0>)
 80080ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080ce:	6353      	str	r3, [r2, #52]	@ 0x34
 80080d0:	2300      	movs	r3, #0
 80080d2:	60fb      	str	r3, [r7, #12]
 80080d4:	4b0b      	ldr	r3, [pc, #44]	@ (8008104 <HAL_PCD_MspInit+0xa0>)
 80080d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080d8:	4a0a      	ldr	r2, [pc, #40]	@ (8008104 <HAL_PCD_MspInit+0xa0>)
 80080da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80080de:	6453      	str	r3, [r2, #68]	@ 0x44
 80080e0:	4b08      	ldr	r3, [pc, #32]	@ (8008104 <HAL_PCD_MspInit+0xa0>)
 80080e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80080e8:	60fb      	str	r3, [r7, #12]
 80080ea:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80080ec:	2200      	movs	r2, #0
 80080ee:	2100      	movs	r1, #0
 80080f0:	2043      	movs	r0, #67	@ 0x43
 80080f2:	f7f9 fbd2 	bl	800189a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80080f6:	2043      	movs	r0, #67	@ 0x43
 80080f8:	f7f9 fbeb 	bl	80018d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80080fc:	bf00      	nop
 80080fe:	3728      	adds	r7, #40	@ 0x28
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}
 8008104:	40023800 	.word	0x40023800
 8008108:	40020000 	.word	0x40020000

0800810c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b082      	sub	sp, #8
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008120:	4619      	mov	r1, r3
 8008122:	4610      	mov	r0, r2
 8008124:	f7fe fb43 	bl	80067ae <USBD_LL_SetupStage>
}
 8008128:	bf00      	nop
 800812a:	3708      	adds	r7, #8
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b082      	sub	sp, #8
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	460b      	mov	r3, r1
 800813a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008142:	78fa      	ldrb	r2, [r7, #3]
 8008144:	6879      	ldr	r1, [r7, #4]
 8008146:	4613      	mov	r3, r2
 8008148:	00db      	lsls	r3, r3, #3
 800814a:	4413      	add	r3, r2
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	440b      	add	r3, r1
 8008150:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	78fb      	ldrb	r3, [r7, #3]
 8008158:	4619      	mov	r1, r3
 800815a:	f7fe fb7d 	bl	8006858 <USBD_LL_DataOutStage>
}
 800815e:	bf00      	nop
 8008160:	3708      	adds	r7, #8
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b082      	sub	sp, #8
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
 800816e:	460b      	mov	r3, r1
 8008170:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008178:	78fa      	ldrb	r2, [r7, #3]
 800817a:	6879      	ldr	r1, [r7, #4]
 800817c:	4613      	mov	r3, r2
 800817e:	00db      	lsls	r3, r3, #3
 8008180:	4413      	add	r3, r2
 8008182:	009b      	lsls	r3, r3, #2
 8008184:	440b      	add	r3, r1
 8008186:	3320      	adds	r3, #32
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	78fb      	ldrb	r3, [r7, #3]
 800818c:	4619      	mov	r1, r3
 800818e:	f7fe fc16 	bl	80069be <USBD_LL_DataInStage>
}
 8008192:	bf00      	nop
 8008194:	3708      	adds	r7, #8
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}

0800819a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800819a:	b580      	push	{r7, lr}
 800819c:	b082      	sub	sp, #8
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80081a8:	4618      	mov	r0, r3
 80081aa:	f7fe fd50 	bl	8006c4e <USBD_LL_SOF>
}
 80081ae:	bf00      	nop
 80081b0:	3708      	adds	r7, #8
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}

080081b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081b6:	b580      	push	{r7, lr}
 80081b8:	b084      	sub	sp, #16
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80081be:	2301      	movs	r3, #1
 80081c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	79db      	ldrb	r3, [r3, #7]
 80081c6:	2b02      	cmp	r3, #2
 80081c8:	d001      	beq.n	80081ce <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80081ca:	f7f8 fd61 	bl	8000c90 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80081d4:	7bfa      	ldrb	r2, [r7, #15]
 80081d6:	4611      	mov	r1, r2
 80081d8:	4618      	mov	r0, r3
 80081da:	f7fe fcf4 	bl	8006bc6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80081e4:	4618      	mov	r0, r3
 80081e6:	f7fe fc9c 	bl	8006b22 <USBD_LL_Reset>
}
 80081ea:	bf00      	nop
 80081ec:	3710      	adds	r7, #16
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
	...

080081f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b082      	sub	sp, #8
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008202:	4618      	mov	r0, r3
 8008204:	f7fe fcef 	bl	8006be6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	687a      	ldr	r2, [r7, #4]
 8008214:	6812      	ldr	r2, [r2, #0]
 8008216:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800821a:	f043 0301 	orr.w	r3, r3, #1
 800821e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	7adb      	ldrb	r3, [r3, #11]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d005      	beq.n	8008234 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008228:	4b04      	ldr	r3, [pc, #16]	@ (800823c <HAL_PCD_SuspendCallback+0x48>)
 800822a:	691b      	ldr	r3, [r3, #16]
 800822c:	4a03      	ldr	r2, [pc, #12]	@ (800823c <HAL_PCD_SuspendCallback+0x48>)
 800822e:	f043 0306 	orr.w	r3, r3, #6
 8008232:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008234:	bf00      	nop
 8008236:	3708      	adds	r7, #8
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}
 800823c:	e000ed00 	.word	0xe000ed00

08008240 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b082      	sub	sp, #8
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800824e:	4618      	mov	r0, r3
 8008250:	f7fe fce5 	bl	8006c1e <USBD_LL_Resume>
}
 8008254:	bf00      	nop
 8008256:	3708      	adds	r7, #8
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b082      	sub	sp, #8
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	460b      	mov	r3, r1
 8008266:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800826e:	78fa      	ldrb	r2, [r7, #3]
 8008270:	4611      	mov	r1, r2
 8008272:	4618      	mov	r0, r3
 8008274:	f7fe fd3d 	bl	8006cf2 <USBD_LL_IsoOUTIncomplete>
}
 8008278:	bf00      	nop
 800827a:	3708      	adds	r7, #8
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	460b      	mov	r3, r1
 800828a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008292:	78fa      	ldrb	r2, [r7, #3]
 8008294:	4611      	mov	r1, r2
 8008296:	4618      	mov	r0, r3
 8008298:	f7fe fcf9 	bl	8006c8e <USBD_LL_IsoINIncomplete>
}
 800829c:	bf00      	nop
 800829e:	3708      	adds	r7, #8
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b082      	sub	sp, #8
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80082b2:	4618      	mov	r0, r3
 80082b4:	f7fe fd4f 	bl	8006d56 <USBD_LL_DevConnected>
}
 80082b8:	bf00      	nop
 80082ba:	3708      	adds	r7, #8
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b082      	sub	sp, #8
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80082ce:	4618      	mov	r0, r3
 80082d0:	f7fe fd4c 	bl	8006d6c <USBD_LL_DevDisconnected>
}
 80082d4:	bf00      	nop
 80082d6:	3708      	adds	r7, #8
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b082      	sub	sp, #8
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d13c      	bne.n	8008366 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80082ec:	4a20      	ldr	r2, [pc, #128]	@ (8008370 <USBD_LL_Init+0x94>)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	4a1e      	ldr	r2, [pc, #120]	@ (8008370 <USBD_LL_Init+0x94>)
 80082f8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80082fc:	4b1c      	ldr	r3, [pc, #112]	@ (8008370 <USBD_LL_Init+0x94>)
 80082fe:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008302:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008304:	4b1a      	ldr	r3, [pc, #104]	@ (8008370 <USBD_LL_Init+0x94>)
 8008306:	2204      	movs	r2, #4
 8008308:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800830a:	4b19      	ldr	r3, [pc, #100]	@ (8008370 <USBD_LL_Init+0x94>)
 800830c:	2202      	movs	r2, #2
 800830e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008310:	4b17      	ldr	r3, [pc, #92]	@ (8008370 <USBD_LL_Init+0x94>)
 8008312:	2200      	movs	r2, #0
 8008314:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008316:	4b16      	ldr	r3, [pc, #88]	@ (8008370 <USBD_LL_Init+0x94>)
 8008318:	2202      	movs	r2, #2
 800831a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800831c:	4b14      	ldr	r3, [pc, #80]	@ (8008370 <USBD_LL_Init+0x94>)
 800831e:	2200      	movs	r2, #0
 8008320:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008322:	4b13      	ldr	r3, [pc, #76]	@ (8008370 <USBD_LL_Init+0x94>)
 8008324:	2200      	movs	r2, #0
 8008326:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008328:	4b11      	ldr	r3, [pc, #68]	@ (8008370 <USBD_LL_Init+0x94>)
 800832a:	2200      	movs	r2, #0
 800832c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800832e:	4b10      	ldr	r3, [pc, #64]	@ (8008370 <USBD_LL_Init+0x94>)
 8008330:	2200      	movs	r2, #0
 8008332:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008334:	4b0e      	ldr	r3, [pc, #56]	@ (8008370 <USBD_LL_Init+0x94>)
 8008336:	2200      	movs	r2, #0
 8008338:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800833a:	480d      	ldr	r0, [pc, #52]	@ (8008370 <USBD_LL_Init+0x94>)
 800833c:	f7f9 fdc6 	bl	8001ecc <HAL_PCD_Init>
 8008340:	4603      	mov	r3, r0
 8008342:	2b00      	cmp	r3, #0
 8008344:	d001      	beq.n	800834a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008346:	f7f8 fca3 	bl	8000c90 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800834a:	2180      	movs	r1, #128	@ 0x80
 800834c:	4808      	ldr	r0, [pc, #32]	@ (8008370 <USBD_LL_Init+0x94>)
 800834e:	f7fa fff2 	bl	8003336 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008352:	2240      	movs	r2, #64	@ 0x40
 8008354:	2100      	movs	r1, #0
 8008356:	4806      	ldr	r0, [pc, #24]	@ (8008370 <USBD_LL_Init+0x94>)
 8008358:	f7fa ffa6 	bl	80032a8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800835c:	2280      	movs	r2, #128	@ 0x80
 800835e:	2101      	movs	r1, #1
 8008360:	4803      	ldr	r0, [pc, #12]	@ (8008370 <USBD_LL_Init+0x94>)
 8008362:	f7fa ffa1 	bl	80032a8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008366:	2300      	movs	r3, #0
}
 8008368:	4618      	mov	r0, r3
 800836a:	3708      	adds	r7, #8
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}
 8008370:	20001894 	.word	0x20001894

08008374 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800837c:	2300      	movs	r3, #0
 800837e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008380:	2300      	movs	r3, #0
 8008382:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800838a:	4618      	mov	r0, r3
 800838c:	f7f9 fead 	bl	80020ea <HAL_PCD_Start>
 8008390:	4603      	mov	r3, r0
 8008392:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008394:	7bfb      	ldrb	r3, [r7, #15]
 8008396:	4618      	mov	r0, r3
 8008398:	f000 f942 	bl	8008620 <USBD_Get_USB_Status>
 800839c:	4603      	mov	r3, r0
 800839e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3710      	adds	r7, #16
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}

080083aa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80083aa:	b580      	push	{r7, lr}
 80083ac:	b084      	sub	sp, #16
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
 80083b2:	4608      	mov	r0, r1
 80083b4:	4611      	mov	r1, r2
 80083b6:	461a      	mov	r2, r3
 80083b8:	4603      	mov	r3, r0
 80083ba:	70fb      	strb	r3, [r7, #3]
 80083bc:	460b      	mov	r3, r1
 80083be:	70bb      	strb	r3, [r7, #2]
 80083c0:	4613      	mov	r3, r2
 80083c2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083c4:	2300      	movs	r3, #0
 80083c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083c8:	2300      	movs	r3, #0
 80083ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80083d2:	78bb      	ldrb	r3, [r7, #2]
 80083d4:	883a      	ldrh	r2, [r7, #0]
 80083d6:	78f9      	ldrb	r1, [r7, #3]
 80083d8:	f7fa fb81 	bl	8002ade <HAL_PCD_EP_Open>
 80083dc:	4603      	mov	r3, r0
 80083de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083e0:	7bfb      	ldrb	r3, [r7, #15]
 80083e2:	4618      	mov	r0, r3
 80083e4:	f000 f91c 	bl	8008620 <USBD_Get_USB_Status>
 80083e8:	4603      	mov	r3, r0
 80083ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3710      	adds	r7, #16
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}

080083f6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083f6:	b580      	push	{r7, lr}
 80083f8:	b084      	sub	sp, #16
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
 80083fe:	460b      	mov	r3, r1
 8008400:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008402:	2300      	movs	r3, #0
 8008404:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008406:	2300      	movs	r3, #0
 8008408:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008410:	78fa      	ldrb	r2, [r7, #3]
 8008412:	4611      	mov	r1, r2
 8008414:	4618      	mov	r0, r3
 8008416:	f7fa fbcc 	bl	8002bb2 <HAL_PCD_EP_Close>
 800841a:	4603      	mov	r3, r0
 800841c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800841e:	7bfb      	ldrb	r3, [r7, #15]
 8008420:	4618      	mov	r0, r3
 8008422:	f000 f8fd 	bl	8008620 <USBD_Get_USB_Status>
 8008426:	4603      	mov	r3, r0
 8008428:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800842a:	7bbb      	ldrb	r3, [r7, #14]
}
 800842c:	4618      	mov	r0, r3
 800842e:	3710      	adds	r7, #16
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	460b      	mov	r3, r1
 800843e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008440:	2300      	movs	r3, #0
 8008442:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008444:	2300      	movs	r3, #0
 8008446:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800844e:	78fa      	ldrb	r2, [r7, #3]
 8008450:	4611      	mov	r1, r2
 8008452:	4618      	mov	r0, r3
 8008454:	f7fa fc84 	bl	8002d60 <HAL_PCD_EP_SetStall>
 8008458:	4603      	mov	r3, r0
 800845a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800845c:	7bfb      	ldrb	r3, [r7, #15]
 800845e:	4618      	mov	r0, r3
 8008460:	f000 f8de 	bl	8008620 <USBD_Get_USB_Status>
 8008464:	4603      	mov	r3, r0
 8008466:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008468:	7bbb      	ldrb	r3, [r7, #14]
}
 800846a:	4618      	mov	r0, r3
 800846c:	3710      	adds	r7, #16
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008472:	b580      	push	{r7, lr}
 8008474:	b084      	sub	sp, #16
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
 800847a:	460b      	mov	r3, r1
 800847c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800847e:	2300      	movs	r3, #0
 8008480:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008482:	2300      	movs	r3, #0
 8008484:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800848c:	78fa      	ldrb	r2, [r7, #3]
 800848e:	4611      	mov	r1, r2
 8008490:	4618      	mov	r0, r3
 8008492:	f7fa fcc8 	bl	8002e26 <HAL_PCD_EP_ClrStall>
 8008496:	4603      	mov	r3, r0
 8008498:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800849a:	7bfb      	ldrb	r3, [r7, #15]
 800849c:	4618      	mov	r0, r3
 800849e:	f000 f8bf 	bl	8008620 <USBD_Get_USB_Status>
 80084a2:	4603      	mov	r3, r0
 80084a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3710      	adds	r7, #16
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b085      	sub	sp, #20
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	460b      	mov	r3, r1
 80084ba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80084c2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80084c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	da0b      	bge.n	80084e4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80084cc:	78fb      	ldrb	r3, [r7, #3]
 80084ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80084d2:	68f9      	ldr	r1, [r7, #12]
 80084d4:	4613      	mov	r3, r2
 80084d6:	00db      	lsls	r3, r3, #3
 80084d8:	4413      	add	r3, r2
 80084da:	009b      	lsls	r3, r3, #2
 80084dc:	440b      	add	r3, r1
 80084de:	3316      	adds	r3, #22
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	e00b      	b.n	80084fc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80084e4:	78fb      	ldrb	r3, [r7, #3]
 80084e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80084ea:	68f9      	ldr	r1, [r7, #12]
 80084ec:	4613      	mov	r3, r2
 80084ee:	00db      	lsls	r3, r3, #3
 80084f0:	4413      	add	r3, r2
 80084f2:	009b      	lsls	r3, r3, #2
 80084f4:	440b      	add	r3, r1
 80084f6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80084fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3714      	adds	r7, #20
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr

08008508 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b084      	sub	sp, #16
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
 8008510:	460b      	mov	r3, r1
 8008512:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008514:	2300      	movs	r3, #0
 8008516:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008518:	2300      	movs	r3, #0
 800851a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008522:	78fa      	ldrb	r2, [r7, #3]
 8008524:	4611      	mov	r1, r2
 8008526:	4618      	mov	r0, r3
 8008528:	f7fa fab5 	bl	8002a96 <HAL_PCD_SetAddress>
 800852c:	4603      	mov	r3, r0
 800852e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008530:	7bfb      	ldrb	r3, [r7, #15]
 8008532:	4618      	mov	r0, r3
 8008534:	f000 f874 	bl	8008620 <USBD_Get_USB_Status>
 8008538:	4603      	mov	r3, r0
 800853a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800853c:	7bbb      	ldrb	r3, [r7, #14]
}
 800853e:	4618      	mov	r0, r3
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}

08008546 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008546:	b580      	push	{r7, lr}
 8008548:	b086      	sub	sp, #24
 800854a:	af00      	add	r7, sp, #0
 800854c:	60f8      	str	r0, [r7, #12]
 800854e:	607a      	str	r2, [r7, #4]
 8008550:	603b      	str	r3, [r7, #0]
 8008552:	460b      	mov	r3, r1
 8008554:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008556:	2300      	movs	r3, #0
 8008558:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800855a:	2300      	movs	r3, #0
 800855c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008564:	7af9      	ldrb	r1, [r7, #11]
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	f7fa fbbf 	bl	8002cec <HAL_PCD_EP_Transmit>
 800856e:	4603      	mov	r3, r0
 8008570:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008572:	7dfb      	ldrb	r3, [r7, #23]
 8008574:	4618      	mov	r0, r3
 8008576:	f000 f853 	bl	8008620 <USBD_Get_USB_Status>
 800857a:	4603      	mov	r3, r0
 800857c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800857e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008580:	4618      	mov	r0, r3
 8008582:	3718      	adds	r7, #24
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}

08008588 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b086      	sub	sp, #24
 800858c:	af00      	add	r7, sp, #0
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	607a      	str	r2, [r7, #4]
 8008592:	603b      	str	r3, [r7, #0]
 8008594:	460b      	mov	r3, r1
 8008596:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008598:	2300      	movs	r3, #0
 800859a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800859c:	2300      	movs	r3, #0
 800859e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80085a6:	7af9      	ldrb	r1, [r7, #11]
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	f7fa fb4b 	bl	8002c46 <HAL_PCD_EP_Receive>
 80085b0:	4603      	mov	r3, r0
 80085b2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085b4:	7dfb      	ldrb	r3, [r7, #23]
 80085b6:	4618      	mov	r0, r3
 80085b8:	f000 f832 	bl	8008620 <USBD_Get_USB_Status>
 80085bc:	4603      	mov	r3, r0
 80085be:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80085c0:	7dbb      	ldrb	r3, [r7, #22]
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3718      	adds	r7, #24
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}

080085ca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085ca:	b580      	push	{r7, lr}
 80085cc:	b082      	sub	sp, #8
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
 80085d2:	460b      	mov	r3, r1
 80085d4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80085dc:	78fa      	ldrb	r2, [r7, #3]
 80085de:	4611      	mov	r1, r2
 80085e0:	4618      	mov	r0, r3
 80085e2:	f7fa fb6b 	bl	8002cbc <HAL_PCD_EP_GetRxCount>
 80085e6:	4603      	mov	r3, r0
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3708      	adds	r7, #8
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80085f8:	4b03      	ldr	r3, [pc, #12]	@ (8008608 <USBD_static_malloc+0x18>)
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	370c      	adds	r7, #12
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr
 8008606:	bf00      	nop
 8008608:	20001d78 	.word	0x20001d78

0800860c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800860c:	b480      	push	{r7}
 800860e:	b083      	sub	sp, #12
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]

}
 8008614:	bf00      	nop
 8008616:	370c      	adds	r7, #12
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr

08008620 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008620:	b480      	push	{r7}
 8008622:	b085      	sub	sp, #20
 8008624:	af00      	add	r7, sp, #0
 8008626:	4603      	mov	r3, r0
 8008628:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800862a:	2300      	movs	r3, #0
 800862c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800862e:	79fb      	ldrb	r3, [r7, #7]
 8008630:	2b03      	cmp	r3, #3
 8008632:	d817      	bhi.n	8008664 <USBD_Get_USB_Status+0x44>
 8008634:	a201      	add	r2, pc, #4	@ (adr r2, 800863c <USBD_Get_USB_Status+0x1c>)
 8008636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800863a:	bf00      	nop
 800863c:	0800864d 	.word	0x0800864d
 8008640:	08008653 	.word	0x08008653
 8008644:	08008659 	.word	0x08008659
 8008648:	0800865f 	.word	0x0800865f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800864c:	2300      	movs	r3, #0
 800864e:	73fb      	strb	r3, [r7, #15]
    break;
 8008650:	e00b      	b.n	800866a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008652:	2303      	movs	r3, #3
 8008654:	73fb      	strb	r3, [r7, #15]
    break;
 8008656:	e008      	b.n	800866a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008658:	2301      	movs	r3, #1
 800865a:	73fb      	strb	r3, [r7, #15]
    break;
 800865c:	e005      	b.n	800866a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800865e:	2303      	movs	r3, #3
 8008660:	73fb      	strb	r3, [r7, #15]
    break;
 8008662:	e002      	b.n	800866a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008664:	2303      	movs	r3, #3
 8008666:	73fb      	strb	r3, [r7, #15]
    break;
 8008668:	bf00      	nop
  }
  return usb_status;
 800866a:	7bfb      	ldrb	r3, [r7, #15]
}
 800866c:	4618      	mov	r0, r3
 800866e:	3714      	adds	r7, #20
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr

08008678 <memset>:
 8008678:	4402      	add	r2, r0
 800867a:	4603      	mov	r3, r0
 800867c:	4293      	cmp	r3, r2
 800867e:	d100      	bne.n	8008682 <memset+0xa>
 8008680:	4770      	bx	lr
 8008682:	f803 1b01 	strb.w	r1, [r3], #1
 8008686:	e7f9      	b.n	800867c <memset+0x4>

08008688 <__libc_init_array>:
 8008688:	b570      	push	{r4, r5, r6, lr}
 800868a:	4d0d      	ldr	r5, [pc, #52]	@ (80086c0 <__libc_init_array+0x38>)
 800868c:	4c0d      	ldr	r4, [pc, #52]	@ (80086c4 <__libc_init_array+0x3c>)
 800868e:	1b64      	subs	r4, r4, r5
 8008690:	10a4      	asrs	r4, r4, #2
 8008692:	2600      	movs	r6, #0
 8008694:	42a6      	cmp	r6, r4
 8008696:	d109      	bne.n	80086ac <__libc_init_array+0x24>
 8008698:	4d0b      	ldr	r5, [pc, #44]	@ (80086c8 <__libc_init_array+0x40>)
 800869a:	4c0c      	ldr	r4, [pc, #48]	@ (80086cc <__libc_init_array+0x44>)
 800869c:	f000 f826 	bl	80086ec <_init>
 80086a0:	1b64      	subs	r4, r4, r5
 80086a2:	10a4      	asrs	r4, r4, #2
 80086a4:	2600      	movs	r6, #0
 80086a6:	42a6      	cmp	r6, r4
 80086a8:	d105      	bne.n	80086b6 <__libc_init_array+0x2e>
 80086aa:	bd70      	pop	{r4, r5, r6, pc}
 80086ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80086b0:	4798      	blx	r3
 80086b2:	3601      	adds	r6, #1
 80086b4:	e7ee      	b.n	8008694 <__libc_init_array+0xc>
 80086b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80086ba:	4798      	blx	r3
 80086bc:	3601      	adds	r6, #1
 80086be:	e7f2      	b.n	80086a6 <__libc_init_array+0x1e>
 80086c0:	0800876c 	.word	0x0800876c
 80086c4:	0800876c 	.word	0x0800876c
 80086c8:	0800876c 	.word	0x0800876c
 80086cc:	08008770 	.word	0x08008770

080086d0 <memcpy>:
 80086d0:	440a      	add	r2, r1
 80086d2:	4291      	cmp	r1, r2
 80086d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80086d8:	d100      	bne.n	80086dc <memcpy+0xc>
 80086da:	4770      	bx	lr
 80086dc:	b510      	push	{r4, lr}
 80086de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086e6:	4291      	cmp	r1, r2
 80086e8:	d1f9      	bne.n	80086de <memcpy+0xe>
 80086ea:	bd10      	pop	{r4, pc}

080086ec <_init>:
 80086ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ee:	bf00      	nop
 80086f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086f2:	bc08      	pop	{r3}
 80086f4:	469e      	mov	lr, r3
 80086f6:	4770      	bx	lr

080086f8 <_fini>:
 80086f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086fa:	bf00      	nop
 80086fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086fe:	bc08      	pop	{r3}
 8008700:	469e      	mov	lr, r3
 8008702:	4770      	bx	lr
