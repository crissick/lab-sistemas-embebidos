
L5_MotorReductor_Qt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab40  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800acd8  0800acd8  0000bcd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad40  0800ad40  0000c0fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad40  0800ad40  0000bd40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad48  0800ad48  0000c0fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad48  0800ad48  0000bd48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ad4c  0800ad4c  0000bd4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  0800ad50  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001fe0  200000fc  0800ae4c  0000c0fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200020dc  0800ae4c  0000d0dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c0fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018be1  00000000  00000000  0000c12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d03  00000000  00000000  00024d0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001648  00000000  00000000  00028a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001132  00000000  00000000  0002a058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000505a  00000000  00000000  0002b18a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c98d  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e52d  00000000  00000000  0004cb71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eb09e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f8c  00000000  00000000  000eb0e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000f1070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000fc 	.word	0x200000fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800acc0 	.word	0x0800acc0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000100 	.word	0x20000100
 80001d4:	0800acc0 	.word	0x0800acc0

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_uldivmod>:
 8000a14:	b953      	cbnz	r3, 8000a2c <__aeabi_uldivmod+0x18>
 8000a16:	b94a      	cbnz	r2, 8000a2c <__aeabi_uldivmod+0x18>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bf08      	it	eq
 8000a1c:	2800      	cmpeq	r0, #0
 8000a1e:	bf1c      	itt	ne
 8000a20:	f04f 31ff 	movne.w	r1, #4294967295
 8000a24:	f04f 30ff 	movne.w	r0, #4294967295
 8000a28:	f000 b96a 	b.w	8000d00 <__aeabi_idiv0>
 8000a2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a34:	f000 f806 	bl	8000a44 <__udivmoddi4>
 8000a38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a40:	b004      	add	sp, #16
 8000a42:	4770      	bx	lr

08000a44 <__udivmoddi4>:
 8000a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a48:	9d08      	ldr	r5, [sp, #32]
 8000a4a:	460c      	mov	r4, r1
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d14e      	bne.n	8000aee <__udivmoddi4+0xaa>
 8000a50:	4694      	mov	ip, r2
 8000a52:	458c      	cmp	ip, r1
 8000a54:	4686      	mov	lr, r0
 8000a56:	fab2 f282 	clz	r2, r2
 8000a5a:	d962      	bls.n	8000b22 <__udivmoddi4+0xde>
 8000a5c:	b14a      	cbz	r2, 8000a72 <__udivmoddi4+0x2e>
 8000a5e:	f1c2 0320 	rsb	r3, r2, #32
 8000a62:	4091      	lsls	r1, r2
 8000a64:	fa20 f303 	lsr.w	r3, r0, r3
 8000a68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a6c:	4319      	orrs	r1, r3
 8000a6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a76:	fa1f f68c 	uxth.w	r6, ip
 8000a7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a82:	fb07 1114 	mls	r1, r7, r4, r1
 8000a86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a8a:	fb04 f106 	mul.w	r1, r4, r6
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	d90a      	bls.n	8000aa8 <__udivmoddi4+0x64>
 8000a92:	eb1c 0303 	adds.w	r3, ip, r3
 8000a96:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a9a:	f080 8112 	bcs.w	8000cc2 <__udivmoddi4+0x27e>
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	f240 810f 	bls.w	8000cc2 <__udivmoddi4+0x27e>
 8000aa4:	3c02      	subs	r4, #2
 8000aa6:	4463      	add	r3, ip
 8000aa8:	1a59      	subs	r1, r3, r1
 8000aaa:	fa1f f38e 	uxth.w	r3, lr
 8000aae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ab2:	fb07 1110 	mls	r1, r7, r0, r1
 8000ab6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aba:	fb00 f606 	mul.w	r6, r0, r6
 8000abe:	429e      	cmp	r6, r3
 8000ac0:	d90a      	bls.n	8000ad8 <__udivmoddi4+0x94>
 8000ac2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ac6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000aca:	f080 80fc 	bcs.w	8000cc6 <__udivmoddi4+0x282>
 8000ace:	429e      	cmp	r6, r3
 8000ad0:	f240 80f9 	bls.w	8000cc6 <__udivmoddi4+0x282>
 8000ad4:	4463      	add	r3, ip
 8000ad6:	3802      	subs	r0, #2
 8000ad8:	1b9b      	subs	r3, r3, r6
 8000ada:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ade:	2100      	movs	r1, #0
 8000ae0:	b11d      	cbz	r5, 8000aea <__udivmoddi4+0xa6>
 8000ae2:	40d3      	lsrs	r3, r2
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	e9c5 3200 	strd	r3, r2, [r5]
 8000aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aee:	428b      	cmp	r3, r1
 8000af0:	d905      	bls.n	8000afe <__udivmoddi4+0xba>
 8000af2:	b10d      	cbz	r5, 8000af8 <__udivmoddi4+0xb4>
 8000af4:	e9c5 0100 	strd	r0, r1, [r5]
 8000af8:	2100      	movs	r1, #0
 8000afa:	4608      	mov	r0, r1
 8000afc:	e7f5      	b.n	8000aea <__udivmoddi4+0xa6>
 8000afe:	fab3 f183 	clz	r1, r3
 8000b02:	2900      	cmp	r1, #0
 8000b04:	d146      	bne.n	8000b94 <__udivmoddi4+0x150>
 8000b06:	42a3      	cmp	r3, r4
 8000b08:	d302      	bcc.n	8000b10 <__udivmoddi4+0xcc>
 8000b0a:	4290      	cmp	r0, r2
 8000b0c:	f0c0 80f0 	bcc.w	8000cf0 <__udivmoddi4+0x2ac>
 8000b10:	1a86      	subs	r6, r0, r2
 8000b12:	eb64 0303 	sbc.w	r3, r4, r3
 8000b16:	2001      	movs	r0, #1
 8000b18:	2d00      	cmp	r5, #0
 8000b1a:	d0e6      	beq.n	8000aea <__udivmoddi4+0xa6>
 8000b1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b20:	e7e3      	b.n	8000aea <__udivmoddi4+0xa6>
 8000b22:	2a00      	cmp	r2, #0
 8000b24:	f040 8090 	bne.w	8000c48 <__udivmoddi4+0x204>
 8000b28:	eba1 040c 	sub.w	r4, r1, ip
 8000b2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b30:	fa1f f78c 	uxth.w	r7, ip
 8000b34:	2101      	movs	r1, #1
 8000b36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b46:	fb07 f006 	mul.w	r0, r7, r6
 8000b4a:	4298      	cmp	r0, r3
 8000b4c:	d908      	bls.n	8000b60 <__udivmoddi4+0x11c>
 8000b4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b52:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b56:	d202      	bcs.n	8000b5e <__udivmoddi4+0x11a>
 8000b58:	4298      	cmp	r0, r3
 8000b5a:	f200 80cd 	bhi.w	8000cf8 <__udivmoddi4+0x2b4>
 8000b5e:	4626      	mov	r6, r4
 8000b60:	1a1c      	subs	r4, r3, r0
 8000b62:	fa1f f38e 	uxth.w	r3, lr
 8000b66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000b6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b72:	fb00 f707 	mul.w	r7, r0, r7
 8000b76:	429f      	cmp	r7, r3
 8000b78:	d908      	bls.n	8000b8c <__udivmoddi4+0x148>
 8000b7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b7e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b82:	d202      	bcs.n	8000b8a <__udivmoddi4+0x146>
 8000b84:	429f      	cmp	r7, r3
 8000b86:	f200 80b0 	bhi.w	8000cea <__udivmoddi4+0x2a6>
 8000b8a:	4620      	mov	r0, r4
 8000b8c:	1bdb      	subs	r3, r3, r7
 8000b8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b92:	e7a5      	b.n	8000ae0 <__udivmoddi4+0x9c>
 8000b94:	f1c1 0620 	rsb	r6, r1, #32
 8000b98:	408b      	lsls	r3, r1
 8000b9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b9e:	431f      	orrs	r7, r3
 8000ba0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ba4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ba8:	ea43 030c 	orr.w	r3, r3, ip
 8000bac:	40f4      	lsrs	r4, r6
 8000bae:	fa00 f801 	lsl.w	r8, r0, r1
 8000bb2:	0c38      	lsrs	r0, r7, #16
 8000bb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000bbc:	fa1f fc87 	uxth.w	ip, r7
 8000bc0:	fb00 441e 	mls	r4, r0, lr, r4
 8000bc4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bc8:	fb0e f90c 	mul.w	r9, lr, ip
 8000bcc:	45a1      	cmp	r9, r4
 8000bce:	fa02 f201 	lsl.w	r2, r2, r1
 8000bd2:	d90a      	bls.n	8000bea <__udivmoddi4+0x1a6>
 8000bd4:	193c      	adds	r4, r7, r4
 8000bd6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000bda:	f080 8084 	bcs.w	8000ce6 <__udivmoddi4+0x2a2>
 8000bde:	45a1      	cmp	r9, r4
 8000be0:	f240 8081 	bls.w	8000ce6 <__udivmoddi4+0x2a2>
 8000be4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000be8:	443c      	add	r4, r7
 8000bea:	eba4 0409 	sub.w	r4, r4, r9
 8000bee:	fa1f f983 	uxth.w	r9, r3
 8000bf2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000bf6:	fb00 4413 	mls	r4, r0, r3, r4
 8000bfa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bfe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c02:	45a4      	cmp	ip, r4
 8000c04:	d907      	bls.n	8000c16 <__udivmoddi4+0x1d2>
 8000c06:	193c      	adds	r4, r7, r4
 8000c08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c0c:	d267      	bcs.n	8000cde <__udivmoddi4+0x29a>
 8000c0e:	45a4      	cmp	ip, r4
 8000c10:	d965      	bls.n	8000cde <__udivmoddi4+0x29a>
 8000c12:	3b02      	subs	r3, #2
 8000c14:	443c      	add	r4, r7
 8000c16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c1e:	eba4 040c 	sub.w	r4, r4, ip
 8000c22:	429c      	cmp	r4, r3
 8000c24:	46ce      	mov	lr, r9
 8000c26:	469c      	mov	ip, r3
 8000c28:	d351      	bcc.n	8000cce <__udivmoddi4+0x28a>
 8000c2a:	d04e      	beq.n	8000cca <__udivmoddi4+0x286>
 8000c2c:	b155      	cbz	r5, 8000c44 <__udivmoddi4+0x200>
 8000c2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c32:	eb64 040c 	sbc.w	r4, r4, ip
 8000c36:	fa04 f606 	lsl.w	r6, r4, r6
 8000c3a:	40cb      	lsrs	r3, r1
 8000c3c:	431e      	orrs	r6, r3
 8000c3e:	40cc      	lsrs	r4, r1
 8000c40:	e9c5 6400 	strd	r6, r4, [r5]
 8000c44:	2100      	movs	r1, #0
 8000c46:	e750      	b.n	8000aea <__udivmoddi4+0xa6>
 8000c48:	f1c2 0320 	rsb	r3, r2, #32
 8000c4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c54:	fa24 f303 	lsr.w	r3, r4, r3
 8000c58:	4094      	lsls	r4, r2
 8000c5a:	430c      	orrs	r4, r1
 8000c5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c64:	fa1f f78c 	uxth.w	r7, ip
 8000c68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000c70:	0c23      	lsrs	r3, r4, #16
 8000c72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c76:	fb00 f107 	mul.w	r1, r0, r7
 8000c7a:	4299      	cmp	r1, r3
 8000c7c:	d908      	bls.n	8000c90 <__udivmoddi4+0x24c>
 8000c7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c86:	d22c      	bcs.n	8000ce2 <__udivmoddi4+0x29e>
 8000c88:	4299      	cmp	r1, r3
 8000c8a:	d92a      	bls.n	8000ce2 <__udivmoddi4+0x29e>
 8000c8c:	3802      	subs	r0, #2
 8000c8e:	4463      	add	r3, ip
 8000c90:	1a5b      	subs	r3, r3, r1
 8000c92:	b2a4      	uxth	r4, r4
 8000c94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c98:	fb08 3311 	mls	r3, r8, r1, r3
 8000c9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ca0:	fb01 f307 	mul.w	r3, r1, r7
 8000ca4:	42a3      	cmp	r3, r4
 8000ca6:	d908      	bls.n	8000cba <__udivmoddi4+0x276>
 8000ca8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cb0:	d213      	bcs.n	8000cda <__udivmoddi4+0x296>
 8000cb2:	42a3      	cmp	r3, r4
 8000cb4:	d911      	bls.n	8000cda <__udivmoddi4+0x296>
 8000cb6:	3902      	subs	r1, #2
 8000cb8:	4464      	add	r4, ip
 8000cba:	1ae4      	subs	r4, r4, r3
 8000cbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cc0:	e739      	b.n	8000b36 <__udivmoddi4+0xf2>
 8000cc2:	4604      	mov	r4, r0
 8000cc4:	e6f0      	b.n	8000aa8 <__udivmoddi4+0x64>
 8000cc6:	4608      	mov	r0, r1
 8000cc8:	e706      	b.n	8000ad8 <__udivmoddi4+0x94>
 8000cca:	45c8      	cmp	r8, r9
 8000ccc:	d2ae      	bcs.n	8000c2c <__udivmoddi4+0x1e8>
 8000cce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cd6:	3801      	subs	r0, #1
 8000cd8:	e7a8      	b.n	8000c2c <__udivmoddi4+0x1e8>
 8000cda:	4631      	mov	r1, r6
 8000cdc:	e7ed      	b.n	8000cba <__udivmoddi4+0x276>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	e799      	b.n	8000c16 <__udivmoddi4+0x1d2>
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	e7d4      	b.n	8000c90 <__udivmoddi4+0x24c>
 8000ce6:	46d6      	mov	lr, sl
 8000ce8:	e77f      	b.n	8000bea <__udivmoddi4+0x1a6>
 8000cea:	4463      	add	r3, ip
 8000cec:	3802      	subs	r0, #2
 8000cee:	e74d      	b.n	8000b8c <__udivmoddi4+0x148>
 8000cf0:	4606      	mov	r6, r0
 8000cf2:	4623      	mov	r3, r4
 8000cf4:	4608      	mov	r0, r1
 8000cf6:	e70f      	b.n	8000b18 <__udivmoddi4+0xd4>
 8000cf8:	3e02      	subs	r6, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	e730      	b.n	8000b60 <__udivmoddi4+0x11c>
 8000cfe:	bf00      	nop

08000d00 <__aeabi_idiv0>:
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop

08000d04 <CDC_ReceiveCallBack>:
//uint32_t timers[TTOTAL]  = }0{;

uint8_t hola[] = {0xEE,0xF1};


void CDC_ReceiveCallBack(uint8_t* Buf, uint32_t len){
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]

	memcpy(datosRX,Buf,len);
 8000d0e:	683a      	ldr	r2, [r7, #0]
 8000d10:	6879      	ldr	r1, [r7, #4]
 8000d12:	4805      	ldr	r0, [pc, #20]	@ (8000d28 <CDC_ReceiveCallBack+0x24>)
 8000d14:	f009 ffa2 	bl	800ac5c <memcpy>
	indexRX = len;
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	4b03      	ldr	r3, [pc, #12]	@ (8000d2c <CDC_ReceiveCallBack+0x28>)
 8000d1e:	701a      	strb	r2, [r3, #0]
}
 8000d20:	bf00      	nop
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000424 	.word	0x20000424
 8000d2c:	20000457 	.word	0x20000457

08000d30 <calcularCRC>:

uint8_t calcularCRC(uint8_t *datos, uint8_t tam) //el valor de tam cuando llega
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	460b      	mov	r3, r1
 8000d3a:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	73fb      	strb	r3, [r7, #15]

		for(int i=0; i<tam; i++)
 8000d40:	2300      	movs	r3, #0
 8000d42:	60bb      	str	r3, [r7, #8]
 8000d44:	e009      	b.n	8000d5a <calcularCRC+0x2a>
		{
			crc ^= datos[i];
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	687a      	ldr	r2, [r7, #4]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	781a      	ldrb	r2, [r3, #0]
 8000d4e:	7bfb      	ldrb	r3, [r7, #15]
 8000d50:	4053      	eors	r3, r2
 8000d52:	73fb      	strb	r3, [r7, #15]
		for(int i=0; i<tam; i++)
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	3301      	adds	r3, #1
 8000d58:	60bb      	str	r3, [r7, #8]
 8000d5a:	78fb      	ldrb	r3, [r7, #3]
 8000d5c:	68ba      	ldr	r2, [r7, #8]
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	dbf1      	blt.n	8000d46 <calcularCRC+0x16>
		}

	return crc;
 8000d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3714      	adds	r7, #20
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <serializarPaquete>:

int8_t serializarPaquete(const PAQUETE* paquete, uint8_t *buffer){   //serialize
 8000d70:	b590      	push	{r4, r7, lr}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	6039      	str	r1, [r7, #0]

	int idx =0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]

	if(!paquete || !buffer)return -1;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d002      	beq.n	8000d8a <serializarPaquete+0x1a>
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d102      	bne.n	8000d90 <serializarPaquete+0x20>
 8000d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8e:	e045      	b.n	8000e1c <serializarPaquete+0xac>

	buffer[idx++] = paquete->inicio;
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	1c5a      	adds	r2, r3, #1
 8000d94:	60fa      	str	r2, [r7, #12]
 8000d96:	461a      	mov	r2, r3
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	7812      	ldrb	r2, [r2, #0]
 8000da0:	701a      	strb	r2, [r3, #0]
	buffer[idx++]= paquete->tamano;
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	1c5a      	adds	r2, r3, #1
 8000da6:	60fa      	str	r2, [r7, #12]
 8000da8:	461a      	mov	r2, r3
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	4413      	add	r3, r2
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	7852      	ldrb	r2, [r2, #1]
 8000db2:	701a      	strb	r2, [r3, #0]

		if(paquete->datos && (paquete->tamano>3)){   	//packet of data ;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d015      	beq.n	8000de8 <serializarPaquete+0x78>
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	785b      	ldrb	r3, [r3, #1]
 8000dc0:	2b03      	cmp	r3, #3
 8000dc2:	d911      	bls.n	8000de8 <serializarPaquete+0x78>
		  memcpy(&buffer[idx], paquete->datos, (size_t)(paquete->tamano-4));
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	683a      	ldr	r2, [r7, #0]
 8000dc8:	18d0      	adds	r0, r2, r3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6859      	ldr	r1, [r3, #4]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	785b      	ldrb	r3, [r3, #1]
 8000dd2:	3b04      	subs	r3, #4
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	f009 ff41 	bl	800ac5c <memcpy>
		  idx = idx + paquete->tamano-4;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	785b      	ldrb	r3, [r3, #1]
 8000dde:	461a      	mov	r2, r3
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	4413      	add	r3, r2
 8000de4:	3b04      	subs	r3, #4
 8000de6:	60fb      	str	r3, [r7, #12]
		}

	uint8_t ss= (uint8_t)idx;
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	72fb      	strb	r3, [r7, #11]
	buffer[idx++] =calcularCRC(buffer,ss);
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	1c5a      	adds	r2, r3, #1
 8000df0:	60fa      	str	r2, [r7, #12]
 8000df2:	461a      	mov	r2, r3
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	189c      	adds	r4, r3, r2
 8000df8:	7afb      	ldrb	r3, [r7, #11]
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	6838      	ldr	r0, [r7, #0]
 8000dfe:	f7ff ff97 	bl	8000d30 <calcularCRC>
 8000e02:	4603      	mov	r3, r0
 8000e04:	7023      	strb	r3, [r4, #0]
	buffer[idx++] =paquete->fin;
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	1c5a      	adds	r2, r3, #1
 8000e0a:	60fa      	str	r2, [r7, #12]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	4413      	add	r3, r2
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	7a52      	ldrb	r2, [r2, #9]
 8000e16:	701a      	strb	r2, [r3, #0]
	return idx;
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	b25b      	sxtb	r3, r3
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3714      	adds	r7, #20
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd90      	pop	{r4, r7, pc}

08000e24 <EnviarPaquete>:

void EnviarPaquete(uint8_t *dat, uint8_t tam){
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	70fb      	strb	r3, [r7, #3]

	pk1.inicio = 0x77; //Start byte
 8000e30:	4b1a      	ldr	r3, [pc, #104]	@ (8000e9c <EnviarPaquete+0x78>)
 8000e32:	2277      	movs	r2, #119	@ 0x77
 8000e34:	701a      	strb	r2, [r3, #0]
	pk1.tamano = tam + 4;
 8000e36:	78fb      	ldrb	r3, [r7, #3]
 8000e38:	3304      	adds	r3, #4
 8000e3a:	b2da      	uxtb	r2, r3
 8000e3c:	4b17      	ldr	r3, [pc, #92]	@ (8000e9c <EnviarPaquete+0x78>)
 8000e3e:	705a      	strb	r2, [r3, #1]
	pk1.datos=datosx;
 8000e40:	4b16      	ldr	r3, [pc, #88]	@ (8000e9c <EnviarPaquete+0x78>)
 8000e42:	4a17      	ldr	r2, [pc, #92]	@ (8000ea0 <EnviarPaquete+0x7c>)
 8000e44:	605a      	str	r2, [r3, #4]

    memcpy(&pk1.datos[0], dat, tam + 4 );
 8000e46:	4b15      	ldr	r3, [pc, #84]	@ (8000e9c <EnviarPaquete+0x78>)
 8000e48:	6858      	ldr	r0, [r3, #4]
 8000e4a:	78fb      	ldrb	r3, [r7, #3]
 8000e4c:	3304      	adds	r3, #4
 8000e4e:	461a      	mov	r2, r3
 8000e50:	6879      	ldr	r1, [r7, #4]
 8000e52:	f009 ff03 	bl	800ac5c <memcpy>

	numDatos = serializarPaquete(&pk1, &datosTX);
 8000e56:	4913      	ldr	r1, [pc, #76]	@ (8000ea4 <EnviarPaquete+0x80>)
 8000e58:	4810      	ldr	r0, [pc, #64]	@ (8000e9c <EnviarPaquete+0x78>)
 8000e5a:	f7ff ff89 	bl	8000d70 <serializarPaquete>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	461a      	mov	r2, r3
 8000e62:	4b11      	ldr	r3, [pc, #68]	@ (8000ea8 <EnviarPaquete+0x84>)
 8000e64:	701a      	strb	r2, [r3, #0]
	pk1.crc=calcularCRC(datosTX, tam+4);
 8000e66:	78fb      	ldrb	r3, [r7, #3]
 8000e68:	3304      	adds	r3, #4
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	480d      	ldr	r0, [pc, #52]	@ (8000ea4 <EnviarPaquete+0x80>)
 8000e70:	f7ff ff5e 	bl	8000d30 <calcularCRC>
 8000e74:	4603      	mov	r3, r0
 8000e76:	461a      	mov	r2, r3
 8000e78:	4b08      	ldr	r3, [pc, #32]	@ (8000e9c <EnviarPaquete+0x78>)
 8000e7a:	721a      	strb	r2, [r3, #8]
	pk1.fin =0x12;
 8000e7c:	4b07      	ldr	r3, [pc, #28]	@ (8000e9c <EnviarPaquete+0x78>)
 8000e7e:	2212      	movs	r2, #18
 8000e80:	725a      	strb	r2, [r3, #9]

	CDC_Transmit_FS(datosTX, numDatos);  ///////////////////////////////////////////aQUI
 8000e82:	4b09      	ldr	r3, [pc, #36]	@ (8000ea8 <EnviarPaquete+0x84>)
 8000e84:	f993 3000 	ldrsb.w	r3, [r3]
 8000e88:	b29b      	uxth	r3, r3
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4805      	ldr	r0, [pc, #20]	@ (8000ea4 <EnviarPaquete+0x80>)
 8000e8e:	f009 fa67 	bl	800a360 <CDC_Transmit_FS>

} //way important to transmit
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	200004d4 	.word	0x200004d4
 8000ea0:	20000484 	.word	0x20000484
 8000ea4:	20000458 	.word	0x20000458
 8000ea8:	2000041a 	.word	0x2000041a

08000eac <ObtenerRPM>:
		}
}


int16_t ObtenerRPM(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0

    int32_t posicionM1 = __HAL_TIM_GET_COUNTER(&htim2);
 8000eb2:	4b15      	ldr	r3, [pc, #84]	@ (8000f08 <ObtenerRPM+0x5c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eb8:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_SET_COUNTER(&htim5, 0);
 8000eba:	4b14      	ldr	r3, [pc, #80]	@ (8000f0c <ObtenerRPM+0x60>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	625a      	str	r2, [r3, #36]	@ 0x24

    	while((__HAL_TIM_GET_COUNTER(&htim5) /10) <= 10); // 10 ms de espera  //PLOT CON 4
 8000ec2:	bf00      	nop
 8000ec4:	4b11      	ldr	r3, [pc, #68]	@ (8000f0c <ObtenerRPM+0x60>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eca:	2b6d      	cmp	r3, #109	@ 0x6d
 8000ecc:	d9fa      	bls.n	8000ec4 <ObtenerRPM+0x18>
		int32_t posicionM2 = __HAL_TIM_GET_COUNTER(&htim2);
 8000ece:	4b0e      	ldr	r3, [pc, #56]	@ (8000f08 <ObtenerRPM+0x5c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ed4:	60bb      	str	r3, [r7, #8]
		int32_t diferenciaPulsos = posicionM2 - posicionM1;
 8000ed6:	68ba      	ldr	r2, [r7, #8]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	607b      	str	r3, [r7, #4]
		int16_t rpm = (int16_t)((diferenciaPulsos *60 *1000)  / (1135 *11));  //DIV 5
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000ee4:	fb02 f303 	mul.w	r3, r2, r3
 8000ee8:	4a09      	ldr	r2, [pc, #36]	@ (8000f10 <ObtenerRPM+0x64>)
 8000eea:	fb82 1203 	smull	r1, r2, r2, r3
 8000eee:	1312      	asrs	r2, r2, #12
 8000ef0:	17db      	asrs	r3, r3, #31
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	807b      	strh	r3, [r7, #2]

    return rpm;
 8000ef6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3714      	adds	r7, #20
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	2000025c 	.word	0x2000025c
 8000f0c:	20000334 	.word	0x20000334
 8000f10:	53fca323 	.word	0x53fca323
 8000f14:	00000000 	.word	0x00000000

08000f18 <W_frecuencia>:


int32_t W_frecuencia(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
    float RPM_VEL = ObtenerRPM();
 8000f1e:	f7ff ffc5 	bl	8000eac <ObtenerRPM>
 8000f22:	4603      	mov	r3, r0
 8000f24:	ee07 3a90 	vmov	s15, r3
 8000f28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f2c:	edc7 7a01 	vstr	s15, [r7, #4]
    float Frecuencia= ((RPM_VEL / 60.0) *(2 * PI));  //FREQ ANGULAR RAD/SEGUNDO OSEA OMEGA.
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f7ff fab5 	bl	80004a0 <__aeabi_f2d>
 8000f36:	f04f 0200 	mov.w	r2, #0
 8000f3a:	4b11      	ldr	r3, [pc, #68]	@ (8000f80 <W_frecuencia+0x68>)
 8000f3c:	f7ff fc32 	bl	80007a4 <__aeabi_ddiv>
 8000f40:	4602      	mov	r2, r0
 8000f42:	460b      	mov	r3, r1
 8000f44:	4610      	mov	r0, r2
 8000f46:	4619      	mov	r1, r3
 8000f48:	a30b      	add	r3, pc, #44	@ (adr r3, 8000f78 <W_frecuencia+0x60>)
 8000f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f4e:	f7ff faff 	bl	8000550 <__aeabi_dmul>
 8000f52:	4602      	mov	r2, r0
 8000f54:	460b      	mov	r3, r1
 8000f56:	4610      	mov	r0, r2
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f7ff fd0b 	bl	8000974 <__aeabi_d2f>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	603b      	str	r3, [r7, #0]
    return (int32_t)(Frecuencia);
 8000f62:	edd7 7a00 	vldr	s15, [r7]
 8000f66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f6a:	ee17 3a90 	vmov	r3, s15
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	60000000 	.word	0x60000000
 8000f7c:	40191eb8 	.word	0x40191eb8
 8000f80:	404e0000 	.word	0x404e0000
 8000f84:	00000000 	.word	0x00000000

08000f88 <VELINEAL>:


int32_t VELINEAL(void) {  //VELOCIDAD LINEAL MILIMETROS POR SEGUNDO
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
    float Omega = W_frecuencia();
 8000f8e:	f7ff ffc3 	bl	8000f18 <W_frecuencia>
 8000f92:	ee07 0a90 	vmov	s15, r0
 8000f96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f9a:	edc7 7a03 	vstr	s15, [r7, #12]
    float diametro_mm = 15.0;
 8000f9e:	4b14      	ldr	r3, [pc, #80]	@ (8000ff0 <VELINEAL+0x68>)
 8000fa0:	60bb      	str	r3, [r7, #8]
    float Vlineal= ((Omega * (diametro_mm)) + 0.1);  //REVISAR PARENTESIS ANTES ERA 0.5
 8000fa2:	ed97 7a03 	vldr	s14, [r7, #12]
 8000fa6:	edd7 7a02 	vldr	s15, [r7, #8]
 8000faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fae:	ee17 0a90 	vmov	r0, s15
 8000fb2:	f7ff fa75 	bl	80004a0 <__aeabi_f2d>
 8000fb6:	a30c      	add	r3, pc, #48	@ (adr r3, 8000fe8 <VELINEAL+0x60>)
 8000fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fbc:	f7ff f912 	bl	80001e4 <__adddf3>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	4610      	mov	r0, r2
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	f7ff fcd4 	bl	8000974 <__aeabi_d2f>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	607b      	str	r3, [r7, #4]
    return (int32_t)(Vlineal);
 8000fd0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fd8:	ee17 3a90 	vmov	r3, s15
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	f3af 8000 	nop.w
 8000fe8:	9999999a 	.word	0x9999999a
 8000fec:	3fb99999 	.word	0x3fb99999
 8000ff0:	41700000 	.word	0x41700000

08000ff4 <fragmentacion>:


uint8_t fragmentacion(uint32_t dato, uint8_t frag_array[], uint8_t posicion) {
 8000ff4:	b480      	push	{r7}
 8000ff6:	b087      	sub	sp, #28
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	4613      	mov	r3, r2
 8001000:	71fb      	strb	r3, [r7, #7]

	/* MI FUNCION LLENA HACIA LA DERECHA DESDE LA POSICION QUE UNO DIGA LLENA 1 BYTE
	 *  POSICION DEPENDE DE MI Y ARREGLO Y DATO SON LOS QUE UNO QUIERE COMUNICAR PARA LA FUNCION ENVIARPAQUETE();
	 *  ADEMAS ORGANIZA AUTOMATICAMENTE.
	 */
	uint8_t i = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	75fb      	strb	r3, [r7, #23]
    while (dato > 255) {
 8001006:	e00d      	b.n	8001024 <fragmentacion+0x30>
        frag_array[posicion + i] = 0xFF;
 8001008:	79fa      	ldrb	r2, [r7, #7]
 800100a:	7dfb      	ldrb	r3, [r7, #23]
 800100c:	4413      	add	r3, r2
 800100e:	461a      	mov	r2, r3
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	4413      	add	r3, r2
 8001014:	22ff      	movs	r2, #255	@ 0xff
 8001016:	701a      	strb	r2, [r3, #0]
        dato -= 255;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	3bff      	subs	r3, #255	@ 0xff
 800101c:	60fb      	str	r3, [r7, #12]
        i++;
 800101e:	7dfb      	ldrb	r3, [r7, #23]
 8001020:	3301      	adds	r3, #1
 8001022:	75fb      	strb	r3, [r7, #23]
    while (dato > 255) {
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	2bff      	cmp	r3, #255	@ 0xff
 8001028:	d8ee      	bhi.n	8001008 <fragmentacion+0x14>
    }

    frag_array[posicion + i] = dato & 0xFF;
 800102a:	79fa      	ldrb	r2, [r7, #7]
 800102c:	7dfb      	ldrb	r3, [r7, #23]
 800102e:	4413      	add	r3, r2
 8001030:	461a      	mov	r2, r3
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	4413      	add	r3, r2
 8001036:	68fa      	ldr	r2, [r7, #12]
 8001038:	b2d2      	uxtb	r2, r2
 800103a:	701a      	strb	r2, [r3, #0]
    int8_t NFRAG = i+1;
 800103c:	7dfb      	ldrb	r3, [r7, #23]
 800103e:	3301      	adds	r3, #1
 8001040:	b2db      	uxtb	r3, r3
 8001042:	75bb      	strb	r3, [r7, #22]
    return NFRAG; //  REVISAR NUMERO DE FRAGMENTACIONES EN VIVO...
 8001044:	7dbb      	ldrb	r3, [r7, #22]
}
 8001046:	4618      	mov	r0, r3
 8001048:	371c      	adds	r7, #28
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr

08001052 <VSPEED_QT>:


////////////////////     AQUI NO DEPENDO DE  NADIE   //////////////

uint16_t VSPEED_QT(uint8_t* datosRX) {   //desde qt arreglo posible bloqueo... mms negativo
 8001052:	b480      	push	{r7}
 8001054:	b085      	sub	sp, #20
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
    int16_t magnitud = (int16_t)((datosRX[4] << 8) | datosRX[5]);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	3304      	adds	r3, #4
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	021b      	lsls	r3, r3, #8
 8001062:	b21a      	sxth	r2, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3305      	adds	r3, #5
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	b21b      	sxth	r3, r3
 800106c:	4313      	orrs	r3, r2
 800106e:	81fb      	strh	r3, [r7, #14]
    int8_t signo = (datosRX[3] == 0x01) ? -1 : 1;   // 0x01 = negativo  y 0x00 = positivo //AGREGO SIGNO
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3303      	adds	r3, #3
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d102      	bne.n	8001080 <VSPEED_QT+0x2e>
 800107a:	f04f 33ff 	mov.w	r3, #4294967295
 800107e:	e000      	b.n	8001082 <VSPEED_QT+0x30>
 8001080:	2301      	movs	r3, #1
 8001082:	737b      	strb	r3, [r7, #13]
    return magnitud * signo;
 8001084:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001088:	b29a      	uxth	r2, r3
 800108a:	89fb      	ldrh	r3, [r7, #14]
 800108c:	fb12 f303 	smulbb	r3, r2, r3
 8001090:	b29b      	uxth	r3, r3
}
 8001092:	4618      	mov	r0, r3
 8001094:	3714      	adds	r7, #20
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
	...

080010a0 <Pwm_By_Speed>:


int32_t Pwm_By_Speed(void) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0

		/*       FUNCION QUE DESCRIBE ACELERACION
		 *               y = 0,1641x + 10
		 */
	    int16_t speed = VSPEED_QT(datosRX);
 80010a6:	4828      	ldr	r0, [pc, #160]	@ (8001148 <Pwm_By_Speed+0xa8>)
 80010a8:	f7ff ffd3 	bl	8001052 <VSPEED_QT>
 80010ac:	4603      	mov	r3, r0
 80010ae:	817b      	strh	r3, [r7, #10]
	    int8_t signo = (speed < 0) ? -1 : 1;
 80010b0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	da02      	bge.n	80010be <Pwm_By_Speed+0x1e>
 80010b8:	f04f 33ff 	mov.w	r3, #4294967295
 80010bc:	e000      	b.n	80010c0 <Pwm_By_Speed+0x20>
 80010be:	2301      	movs	r3, #1
 80010c0:	727b      	strb	r3, [r7, #9]
	    int16_t magnitud = (speed < 0) ? -speed : speed;
 80010c2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	bfb8      	it	lt
 80010ca:	425b      	neglt	r3, r3
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	80fb      	strh	r3, [r7, #6]

	    	float y = ((0.1641f * magnitud) + 7.7f);
 80010d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010d4:	ee07 3a90 	vmov	s15, r3
 80010d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010dc:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800114c <Pwm_By_Speed+0xac>
 80010e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010e4:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8001150 <Pwm_By_Speed+0xb0>
 80010e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010ec:	edc7 7a00 	vstr	s15, [r7]
	    	int32_t PerPWM = (int32_t)roundf(y);
 80010f0:	ed97 0a00 	vldr	s0, [r7]
 80010f4:	f009 fdc0 	bl	800ac78 <roundf>
 80010f8:	eef0 7a40 	vmov.f32	s15, s0
 80010fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001100:	ee17 3a90 	vmov	r3, s15
 8001104:	60fb      	str	r3, [r7, #12]
	    	PerPWM *= signo;
 8001106:	f997 2009 	ldrsb.w	r2, [r7, #9]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	fb02 f303 	mul.w	r3, r2, r3
 8001110:	60fb      	str	r3, [r7, #12]

	    	if (PerPWM > 100) {
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	2b64      	cmp	r3, #100	@ 0x64
 8001116:	dd02      	ble.n	800111e <Pwm_By_Speed+0x7e>
	    	    PerPWM = 100;
 8001118:	2364      	movs	r3, #100	@ 0x64
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	e00f      	b.n	800113e <Pwm_By_Speed+0x9e>
	    	}
	    	else if (PerPWM < -100) {
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8001124:	da03      	bge.n	800112e <Pwm_By_Speed+0x8e>
	    	    PerPWM = -100;
 8001126:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	e007      	b.n	800113e <Pwm_By_Speed+0x9e>
	    	}
	    	else if (PerPWM >= 0 && PerPWM <= 4) {
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	2b00      	cmp	r3, #0
 8001132:	db04      	blt.n	800113e <Pwm_By_Speed+0x9e>
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	2b04      	cmp	r3, #4
 8001138:	dc01      	bgt.n	800113e <Pwm_By_Speed+0x9e>
	    	    PerPWM = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
	    	}

	    return PerPWM;
 800113e:	68fb      	ldr	r3, [r7, #12]
	}
 8001140:	4618      	mov	r0, r3
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000424 	.word	0x20000424
 800114c:	3e2809d5 	.word	0x3e2809d5
 8001150:	40f66666 	.word	0x40f66666

08001154 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001158:	f001 f93c 	bl	80023d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800115c:	f000 f90c 	bl	8001378 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001160:	f000 fc70 	bl	8001a44 <MX_GPIO_Init>
  MX_DMA_Init();
 8001164:	f000 fc4e 	bl	8001a04 <MX_DMA_Init>
  MX_I2C1_Init();
 8001168:	f000 f9f8 	bl	800155c <MX_I2C1_Init>
  MX_TIM2_Init();
 800116c:	f000 fa76 	bl	800165c <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8001170:	f009 f832 	bl	800a1d8 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8001174:	f000 fac6 	bl	8001704 <MX_TIM3_Init>
  MX_TIM9_Init();
 8001178:	f000 fbe6 	bl	8001948 <MX_TIM9_Init>
  MX_TIM4_Init();
 800117c:	f000 fb16 	bl	80017ac <MX_TIM4_Init>
  MX_ADC1_Init();
 8001180:	f000 f962 	bl	8001448 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001184:	f000 fa18 	bl	80015b8 <MX_TIM1_Init>
  MX_TIM11_Init();
 8001188:	f000 fc18 	bl	80019bc <MX_TIM11_Init>
  MX_TIM5_Init();
 800118c:	f000 fb8e 	bl	80018ac <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  motoresInit(&htim4, TIM_CHANNEL_1, TIM_CHANNEL_2); //MOTORES
 8001190:	2204      	movs	r2, #4
 8001192:	2100      	movs	r1, #0
 8001194:	485e      	ldr	r0, [pc, #376]	@ (8001310 <main+0x1bc>)
 8001196:	f000 fd23 	bl	8001be0 <motoresInit>

  HAL_TIM_Base_Start_IT(&htim11);  //ESTOY TRABAJANDO ISR PARA TIM.  :)
 800119a:	485e      	ldr	r0, [pc, #376]	@ (8001314 <main+0x1c0>)
 800119c:	f004 fc66 	bl	8005a6c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim9); //ESTO PUDE CAUSAR DESFASE CREO
 80011a0:	485d      	ldr	r0, [pc, #372]	@ (8001318 <main+0x1c4>)
 80011a2:	f004 fc09 	bl	80059b8 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim5);
 80011a6:	485d      	ldr	r0, [pc, #372]	@ (800131c <main+0x1c8>)
 80011a8:	f004 fc06 	bl	80059b8 <HAL_TIM_Base_Start>

  //mms_RPM_INIT(&htim2, &htim5);

  delay_us_tim_init();
 80011ac:	f000 fdf6 	bl	8001d9c <delay_us_tim_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);  //importante por encoder mode t1, t2.
 80011b0:	213c      	movs	r1, #60	@ 0x3c
 80011b2:	485b      	ldr	r0, [pc, #364]	@ (8001320 <main+0x1cc>)
 80011b4:	f004 fe6c 	bl	8005e90 <HAL_TIM_Encoder_Start>
HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80011b8:	213c      	movs	r1, #60	@ 0x3c
 80011ba:	485a      	ldr	r0, [pc, #360]	@ (8001324 <main+0x1d0>)
 80011bc:	f004 fe68 	bl	8005e90 <HAL_TIM_Encoder_Start>
HAL_ADC_Start_DMA(&hadc1, adcValue,5);
 80011c0:	2205      	movs	r2, #5
 80011c2:	4959      	ldr	r1, [pc, #356]	@ (8001328 <main+0x1d4>)
 80011c4:	4859      	ldr	r0, [pc, #356]	@ (800132c <main+0x1d8>)
 80011c6:	f001 f9df 	bl	8002588 <HAL_ADC_Start_DMA>


  while (1)
  {

	  WD_PULSOS = 0;
 80011ca:	4b59      	ldr	r3, [pc, #356]	@ (8001330 <main+0x1dc>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]

	  posicionMotor = __HAL_TIM_GET_COUNTER(&htim2); //DEJAR QUIETO
 80011d0:	4b53      	ldr	r3, [pc, #332]	@ (8001320 <main+0x1cc>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011d6:	461a      	mov	r2, r3
 80011d8:	4b56      	ldr	r3, [pc, #344]	@ (8001334 <main+0x1e0>)
 80011da:	601a      	str	r2, [r3, #0]
	  GIROSX = posicionMotor; //IMPORTANT
 80011dc:	4b55      	ldr	r3, [pc, #340]	@ (8001334 <main+0x1e0>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	461a      	mov	r2, r3
 80011e2:	4b55      	ldr	r3, [pc, #340]	@ (8001338 <main+0x1e4>)
 80011e4:	601a      	str	r2, [r3, #0]
		while((__HAL_TIM_GET_COUNTER(&htim5) /10) <= 4000); // 20 ms de espera

		bandera=1;
	  }  */

	  switch(datosRX[2])
 80011e6:	4b55      	ldr	r3, [pc, #340]	@ (800133c <main+0x1e8>)
 80011e8:	789b      	ldrb	r3, [r3, #2]
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	2ba2      	cmp	r3, #162	@ 0xa2
 80011ee:	d018      	beq.n	8001222 <main+0xce>
 80011f0:	2ba2      	cmp	r3, #162	@ 0xa2
 80011f2:	dc1c      	bgt.n	800122e <main+0xda>
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d00f      	beq.n	8001218 <main+0xc4>
 80011f8:	2ba1      	cmp	r3, #161	@ 0xa1
 80011fa:	d118      	bne.n	800122e <main+0xda>
	  {

	  case 0xA1: PWM_PM = Pwm_By_Speed(); motores(PWM_PM,0);
 80011fc:	f7ff ff50 	bl	80010a0 <Pwm_By_Speed>
 8001200:	4603      	mov	r3, r0
 8001202:	461a      	mov	r2, r3
 8001204:	4b4e      	ldr	r3, [pc, #312]	@ (8001340 <main+0x1ec>)
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	4b4d      	ldr	r3, [pc, #308]	@ (8001340 <main+0x1ec>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	b25b      	sxtb	r3, r3
 800120e:	2100      	movs	r1, #0
 8001210:	4618      	mov	r0, r3
 8001212:	f000 fd21 	bl	8001c58 <motores>
		  break;
 8001216:	e00a      	b.n	800122e <main+0xda>

	  case 0x00: motores(0,0); // CHECK_PWM_PM = 0;
 8001218:	2100      	movs	r1, #0
 800121a:	2000      	movs	r0, #0
 800121c:	f000 fd1c 	bl	8001c58 <motores>
		  break;
 8001220:	e005      	b.n	800122e <main+0xda>

	  case 0xA2: motores(-80,0);
 8001222:	2100      	movs	r1, #0
 8001224:	f06f 004f 	mvn.w	r0, #79	@ 0x4f
 8001228:	f000 fd16 	bl	8001c58 <motores>
		  break;
 800122c:	bf00      	nop

	  }

	  	  SPEEDE = VSPEED_QT(datosRX);
 800122e:	4843      	ldr	r0, [pc, #268]	@ (800133c <main+0x1e8>)
 8001230:	f7ff ff0f 	bl	8001052 <VSPEED_QT>
 8001234:	4603      	mov	r3, r0
 8001236:	b21a      	sxth	r2, r3
 8001238:	4b42      	ldr	r3, [pc, #264]	@ (8001344 <main+0x1f0>)
 800123a:	801a      	strh	r2, [r3, #0]
		  motores(CHECK_PWM_PM,0);

	  }*/


      if(tim_pro[TLED]==0){
 800123c:	4b42      	ldr	r3, [pc, #264]	@ (8001348 <main+0x1f4>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d108      	bne.n	8001256 <main+0x102>
    	  tim_pro[TLED]=1000;     //CASILLA DE ESE ARREGLO
 8001244:	4b40      	ldr	r3, [pc, #256]	@ (8001348 <main+0x1f4>)
 8001246:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800124a:	601a      	str	r2, [r3, #0]
    	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800124c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001250:	483e      	ldr	r0, [pc, #248]	@ (800134c <main+0x1f8>)
 8001252:	f002 fb6c 	bl	800392e <HAL_GPIO_TogglePin>


      }


	  Delay_ms(1);
 8001256:	2001      	movs	r0, #1
 8001258:	f000 fdc6 	bl	8001de8 <Delay_ms>
	  tiempo++;
 800125c:	4b3c      	ldr	r3, [pc, #240]	@ (8001350 <main+0x1fc>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	3301      	adds	r3, #1
 8001262:	4a3b      	ldr	r2, [pc, #236]	@ (8001350 <main+0x1fc>)
 8001264:	6013      	str	r3, [r2, #0]

	  RPM = ObtenerRPM();
 8001266:	f7ff fe21 	bl	8000eac <ObtenerRPM>
 800126a:	4603      	mov	r3, r0
 800126c:	b29a      	uxth	r2, r3
 800126e:	4b39      	ldr	r3, [pc, #228]	@ (8001354 <main+0x200>)
 8001270:	801a      	strh	r2, [r3, #0]
	  TIMING =  (__HAL_TIM_GET_COUNTER(&htim5) /10); //REVISAR
 8001272:	4b2a      	ldr	r3, [pc, #168]	@ (800131c <main+0x1c8>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001278:	4a37      	ldr	r2, [pc, #220]	@ (8001358 <main+0x204>)
 800127a:	fba2 2303 	umull	r2, r3, r2, r3
 800127e:	08db      	lsrs	r3, r3, #3
 8001280:	4a36      	ldr	r2, [pc, #216]	@ (800135c <main+0x208>)
 8001282:	6013      	str	r3, [r2, #0]
	  Freq = W_frecuencia();
 8001284:	f7ff fe48 	bl	8000f18 <W_frecuencia>
 8001288:	4603      	mov	r3, r0
 800128a:	b29a      	uxth	r2, r3
 800128c:	4b34      	ldr	r3, [pc, #208]	@ (8001360 <main+0x20c>)
 800128e:	801a      	strh	r2, [r3, #0]
	  MMS =  VELINEAL();
 8001290:	f7ff fe7a 	bl	8000f88 <VELINEAL>
 8001294:	4603      	mov	r3, r0
 8001296:	461a      	mov	r2, r3
 8001298:	4b32      	ldr	r3, [pc, #200]	@ (8001364 <main+0x210>)
 800129a:	601a      	str	r2, [r3, #0]
	  TFULL +=  TIMING;
 800129c:	4b2f      	ldr	r3, [pc, #188]	@ (800135c <main+0x208>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	4b31      	ldr	r3, [pc, #196]	@ (8001368 <main+0x214>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4413      	add	r3, r2
 80012a6:	4a30      	ldr	r2, [pc, #192]	@ (8001368 <main+0x214>)
 80012a8:	6013      	str	r3, [r2, #0]

	  revision = fragmentacion(RPM, COMUNICACION, 0);
 80012aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001354 <main+0x200>)
 80012ac:	881b      	ldrh	r3, [r3, #0]
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	2200      	movs	r2, #0
 80012b2:	492e      	ldr	r1, [pc, #184]	@ (800136c <main+0x218>)
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff fe9d 	bl	8000ff4 <fragmentacion>
 80012ba:	4603      	mov	r3, r0
 80012bc:	b25a      	sxtb	r2, r3
 80012be:	4b2c      	ldr	r3, [pc, #176]	@ (8001370 <main+0x21c>)
 80012c0:	701a      	strb	r2, [r3, #0]
	  fragmentacion(MMS, COMUNICACION, 2);
 80012c2:	4b28      	ldr	r3, [pc, #160]	@ (8001364 <main+0x210>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2202      	movs	r2, #2
 80012c8:	4928      	ldr	r1, [pc, #160]	@ (800136c <main+0x218>)
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff fe92 	bl	8000ff4 <fragmentacion>
	  fragmentacion(Freq, COMUNICACION, 5);
 80012d0:	4b23      	ldr	r3, [pc, #140]	@ (8001360 <main+0x20c>)
 80012d2:	881b      	ldrh	r3, [r3, #0]
 80012d4:	2205      	movs	r2, #5
 80012d6:	4925      	ldr	r1, [pc, #148]	@ (800136c <main+0x218>)
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff fe8b 	bl	8000ff4 <fragmentacion>


	  /////LAB ANTERIOR


	  WDOG_TIME = __HAL_TIM_GET_COUNTER(&htim11)/10; //OBTENGO TIEMPO ESPECIFICO EN MILISEGUNDOS.
 80012de:	4b0d      	ldr	r3, [pc, #52]	@ (8001314 <main+0x1c0>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012e4:	4a1c      	ldr	r2, [pc, #112]	@ (8001358 <main+0x204>)
 80012e6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ea:	08db      	lsrs	r3, r3, #3
 80012ec:	4a21      	ldr	r2, [pc, #132]	@ (8001374 <main+0x220>)
 80012ee:	6013      	str	r3, [r2, #0]
	  */

	  //SUP=__HAL_TIM_GET_COUNTER(&htim11)/10;

  /////////////IMPORTANTE NO BORRRARRRR/////////////////
	  if(WDOG_TIME>200){
 80012f0:	4b20      	ldr	r3, [pc, #128]	@ (8001374 <main+0x220>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2bc8      	cmp	r3, #200	@ 0xc8
 80012f6:	f67f af68 	bls.w	80011ca <main+0x76>
		  EnviarPaquete(COMUNICACION, 8);
 80012fa:	2108      	movs	r1, #8
 80012fc:	481b      	ldr	r0, [pc, #108]	@ (800136c <main+0x218>)
 80012fe:	f7ff fd91 	bl	8000e24 <EnviarPaquete>

  		  WDOG_TIME=__HAL_TIM_SET_COUNTER(&htim11,0);
 8001302:	4b04      	ldr	r3, [pc, #16]	@ (8001314 <main+0x1c0>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	2300      	movs	r3, #0
 8001308:	6253      	str	r3, [r2, #36]	@ 0x24
 800130a:	4a1a      	ldr	r2, [pc, #104]	@ (8001374 <main+0x220>)
 800130c:	6013      	str	r3, [r2, #0]
	  WD_PULSOS = 0;
 800130e:	e75c      	b.n	80011ca <main+0x76>
 8001310:	200002ec 	.word	0x200002ec
 8001314:	200003c4 	.word	0x200003c4
 8001318:	2000037c 	.word	0x2000037c
 800131c:	20000334 	.word	0x20000334
 8001320:	2000025c 	.word	0x2000025c
 8001324:	200002a4 	.word	0x200002a4
 8001328:	20000410 	.word	0x20000410
 800132c:	20000118 	.word	0x20000118
 8001330:	200004c4 	.word	0x200004c4
 8001334:	20000480 	.word	0x20000480
 8001338:	200004ac 	.word	0x200004ac
 800133c:	20000424 	.word	0x20000424
 8001340:	20000420 	.word	0x20000420
 8001344:	2000041e 	.word	0x2000041e
 8001348:	200004e0 	.word	0x200004e0
 800134c:	40020800 	.word	0x40020800
 8001350:	2000040c 	.word	0x2000040c
 8001354:	200004bc 	.word	0x200004bc
 8001358:	cccccccd 	.word	0xcccccccd
 800135c:	200004b4 	.word	0x200004b4
 8001360:	2000041c 	.word	0x2000041c
 8001364:	200004b0 	.word	0x200004b0
 8001368:	200004b8 	.word	0x200004b8
 800136c:	200004c8 	.word	0x200004c8
 8001370:	200004be 	.word	0x200004be
 8001374:	200004c0 	.word	0x200004c0

08001378 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b094      	sub	sp, #80	@ 0x50
 800137c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800137e:	f107 0320 	add.w	r3, r7, #32
 8001382:	2230      	movs	r2, #48	@ 0x30
 8001384:	2100      	movs	r1, #0
 8001386:	4618      	mov	r0, r3
 8001388:	f009 fc3c 	bl	800ac04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800138c:	f107 030c 	add.w	r3, r7, #12
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
 800139a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800139c:	2300      	movs	r3, #0
 800139e:	60bb      	str	r3, [r7, #8]
 80013a0:	4b27      	ldr	r3, [pc, #156]	@ (8001440 <SystemClock_Config+0xc8>)
 80013a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a4:	4a26      	ldr	r2, [pc, #152]	@ (8001440 <SystemClock_Config+0xc8>)
 80013a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ac:	4b24      	ldr	r3, [pc, #144]	@ (8001440 <SystemClock_Config+0xc8>)
 80013ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013b8:	2300      	movs	r3, #0
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	4b21      	ldr	r3, [pc, #132]	@ (8001444 <SystemClock_Config+0xcc>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a20      	ldr	r2, [pc, #128]	@ (8001444 <SystemClock_Config+0xcc>)
 80013c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80013c6:	6013      	str	r3, [r2, #0]
 80013c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001444 <SystemClock_Config+0xcc>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013d0:	607b      	str	r3, [r7, #4]
 80013d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013d4:	2301      	movs	r3, #1
 80013d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013dc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013de:	2302      	movs	r3, #2
 80013e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013e2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80013e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80013e8:	2319      	movs	r3, #25
 80013ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80013ec:	23c0      	movs	r3, #192	@ 0xc0
 80013ee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013f0:	2302      	movs	r3, #2
 80013f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013f4:	2304      	movs	r3, #4
 80013f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013f8:	f107 0320 	add.w	r3, r7, #32
 80013fc:	4618      	mov	r0, r3
 80013fe:	f003 fe47 	bl	8005090 <HAL_RCC_OscConfig>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001408:	f000 fbe4 	bl	8001bd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800140c:	230f      	movs	r3, #15
 800140e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001410:	2302      	movs	r3, #2
 8001412:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001418:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800141c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800141e:	2300      	movs	r3, #0
 8001420:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001422:	f107 030c 	add.w	r3, r7, #12
 8001426:	2103      	movs	r1, #3
 8001428:	4618      	mov	r0, r3
 800142a:	f004 f8a9 	bl	8005580 <HAL_RCC_ClockConfig>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001434:	f000 fbce 	bl	8001bd4 <Error_Handler>
  }
}
 8001438:	bf00      	nop
 800143a:	3750      	adds	r7, #80	@ 0x50
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40023800 	.word	0x40023800
 8001444:	40007000 	.word	0x40007000

08001448 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800144e:	463b      	mov	r3, r7
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800145a:	4b3d      	ldr	r3, [pc, #244]	@ (8001550 <MX_ADC1_Init+0x108>)
 800145c:	4a3d      	ldr	r2, [pc, #244]	@ (8001554 <MX_ADC1_Init+0x10c>)
 800145e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001460:	4b3b      	ldr	r3, [pc, #236]	@ (8001550 <MX_ADC1_Init+0x108>)
 8001462:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001466:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001468:	4b39      	ldr	r3, [pc, #228]	@ (8001550 <MX_ADC1_Init+0x108>)
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800146e:	4b38      	ldr	r3, [pc, #224]	@ (8001550 <MX_ADC1_Init+0x108>)
 8001470:	2201      	movs	r2, #1
 8001472:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001474:	4b36      	ldr	r3, [pc, #216]	@ (8001550 <MX_ADC1_Init+0x108>)
 8001476:	2201      	movs	r2, #1
 8001478:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800147a:	4b35      	ldr	r3, [pc, #212]	@ (8001550 <MX_ADC1_Init+0x108>)
 800147c:	2200      	movs	r2, #0
 800147e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001482:	4b33      	ldr	r3, [pc, #204]	@ (8001550 <MX_ADC1_Init+0x108>)
 8001484:	2200      	movs	r2, #0
 8001486:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001488:	4b31      	ldr	r3, [pc, #196]	@ (8001550 <MX_ADC1_Init+0x108>)
 800148a:	4a33      	ldr	r2, [pc, #204]	@ (8001558 <MX_ADC1_Init+0x110>)
 800148c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800148e:	4b30      	ldr	r3, [pc, #192]	@ (8001550 <MX_ADC1_Init+0x108>)
 8001490:	2200      	movs	r2, #0
 8001492:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8001494:	4b2e      	ldr	r3, [pc, #184]	@ (8001550 <MX_ADC1_Init+0x108>)
 8001496:	2205      	movs	r2, #5
 8001498:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800149a:	4b2d      	ldr	r3, [pc, #180]	@ (8001550 <MX_ADC1_Init+0x108>)
 800149c:	2200      	movs	r2, #0
 800149e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001550 <MX_ADC1_Init+0x108>)
 80014a4:	2201      	movs	r2, #1
 80014a6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014a8:	4829      	ldr	r0, [pc, #164]	@ (8001550 <MX_ADC1_Init+0x108>)
 80014aa:	f001 f829 	bl	8002500 <HAL_ADC_Init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80014b4:	f000 fb8e 	bl	8001bd4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80014b8:	2300      	movs	r3, #0
 80014ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014bc:	2301      	movs	r3, #1
 80014be:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80014c0:	2300      	movs	r3, #0
 80014c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014c4:	463b      	mov	r3, r7
 80014c6:	4619      	mov	r1, r3
 80014c8:	4821      	ldr	r0, [pc, #132]	@ (8001550 <MX_ADC1_Init+0x108>)
 80014ca:	f001 f961 	bl	8002790 <HAL_ADC_ConfigChannel>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80014d4:	f000 fb7e 	bl	8001bd4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80014d8:	2301      	movs	r3, #1
 80014da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80014dc:	2302      	movs	r3, #2
 80014de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014e0:	463b      	mov	r3, r7
 80014e2:	4619      	mov	r1, r3
 80014e4:	481a      	ldr	r0, [pc, #104]	@ (8001550 <MX_ADC1_Init+0x108>)
 80014e6:	f001 f953 	bl	8002790 <HAL_ADC_ConfigChannel>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80014f0:	f000 fb70 	bl	8001bd4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80014f4:	2302      	movs	r3, #2
 80014f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80014f8:	2303      	movs	r3, #3
 80014fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014fc:	463b      	mov	r3, r7
 80014fe:	4619      	mov	r1, r3
 8001500:	4813      	ldr	r0, [pc, #76]	@ (8001550 <MX_ADC1_Init+0x108>)
 8001502:	f001 f945 	bl	8002790 <HAL_ADC_ConfigChannel>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800150c:	f000 fb62 	bl	8001bd4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001510:	2303      	movs	r3, #3
 8001512:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001514:	2304      	movs	r3, #4
 8001516:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001518:	463b      	mov	r3, r7
 800151a:	4619      	mov	r1, r3
 800151c:	480c      	ldr	r0, [pc, #48]	@ (8001550 <MX_ADC1_Init+0x108>)
 800151e:	f001 f937 	bl	8002790 <HAL_ADC_ConfigChannel>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001528:	f000 fb54 	bl	8001bd4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800152c:	2304      	movs	r3, #4
 800152e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001530:	2305      	movs	r3, #5
 8001532:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001534:	463b      	mov	r3, r7
 8001536:	4619      	mov	r1, r3
 8001538:	4805      	ldr	r0, [pc, #20]	@ (8001550 <MX_ADC1_Init+0x108>)
 800153a:	f001 f929 	bl	8002790 <HAL_ADC_ConfigChannel>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001544:	f000 fb46 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001548:	bf00      	nop
 800154a:	3710      	adds	r7, #16
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000118 	.word	0x20000118
 8001554:	40012000 	.word	0x40012000
 8001558:	0f000001 	.word	0x0f000001

0800155c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001560:	4b12      	ldr	r3, [pc, #72]	@ (80015ac <MX_I2C1_Init+0x50>)
 8001562:	4a13      	ldr	r2, [pc, #76]	@ (80015b0 <MX_I2C1_Init+0x54>)
 8001564:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001566:	4b11      	ldr	r3, [pc, #68]	@ (80015ac <MX_I2C1_Init+0x50>)
 8001568:	4a12      	ldr	r2, [pc, #72]	@ (80015b4 <MX_I2C1_Init+0x58>)
 800156a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800156c:	4b0f      	ldr	r3, [pc, #60]	@ (80015ac <MX_I2C1_Init+0x50>)
 800156e:	2200      	movs	r2, #0
 8001570:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001572:	4b0e      	ldr	r3, [pc, #56]	@ (80015ac <MX_I2C1_Init+0x50>)
 8001574:	2200      	movs	r2, #0
 8001576:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001578:	4b0c      	ldr	r3, [pc, #48]	@ (80015ac <MX_I2C1_Init+0x50>)
 800157a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800157e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001580:	4b0a      	ldr	r3, [pc, #40]	@ (80015ac <MX_I2C1_Init+0x50>)
 8001582:	2200      	movs	r2, #0
 8001584:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001586:	4b09      	ldr	r3, [pc, #36]	@ (80015ac <MX_I2C1_Init+0x50>)
 8001588:	2200      	movs	r2, #0
 800158a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800158c:	4b07      	ldr	r3, [pc, #28]	@ (80015ac <MX_I2C1_Init+0x50>)
 800158e:	2200      	movs	r2, #0
 8001590:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001592:	4b06      	ldr	r3, [pc, #24]	@ (80015ac <MX_I2C1_Init+0x50>)
 8001594:	2200      	movs	r2, #0
 8001596:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001598:	4804      	ldr	r0, [pc, #16]	@ (80015ac <MX_I2C1_Init+0x50>)
 800159a:	f002 f9e3 	bl	8003964 <HAL_I2C_Init>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015a4:	f000 fb16 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015a8:	bf00      	nop
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	200001c0 	.word	0x200001c0
 80015b0:	40005400 	.word	0x40005400
 80015b4:	00061a80 	.word	0x00061a80

080015b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015be:	f107 0308 	add.w	r3, r7, #8
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	605a      	str	r2, [r3, #4]
 80015c8:	609a      	str	r2, [r3, #8]
 80015ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015cc:	463b      	mov	r3, r7
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001654 <MX_TIM1_Init+0x9c>)
 80015d6:	4a20      	ldr	r2, [pc, #128]	@ (8001658 <MX_TIM1_Init+0xa0>)
 80015d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9600-1;
 80015da:	4b1e      	ldr	r3, [pc, #120]	@ (8001654 <MX_TIM1_Init+0x9c>)
 80015dc:	f242 527f 	movw	r2, #9599	@ 0x257f
 80015e0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001654 <MX_TIM1_Init+0x9c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80015e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001654 <MX_TIM1_Init+0x9c>)
 80015ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015ee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f0:	4b18      	ldr	r3, [pc, #96]	@ (8001654 <MX_TIM1_Init+0x9c>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015f6:	4b17      	ldr	r3, [pc, #92]	@ (8001654 <MX_TIM1_Init+0x9c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015fc:	4b15      	ldr	r3, [pc, #84]	@ (8001654 <MX_TIM1_Init+0x9c>)
 80015fe:	2200      	movs	r2, #0
 8001600:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001602:	4814      	ldr	r0, [pc, #80]	@ (8001654 <MX_TIM1_Init+0x9c>)
 8001604:	f004 f988 	bl	8005918 <HAL_TIM_Base_Init>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800160e:	f000 fae1 	bl	8001bd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001612:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001616:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001618:	f107 0308 	add.w	r3, r7, #8
 800161c:	4619      	mov	r1, r3
 800161e:	480d      	ldr	r0, [pc, #52]	@ (8001654 <MX_TIM1_Init+0x9c>)
 8001620:	f004 fe76 	bl	8006310 <HAL_TIM_ConfigClockSource>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800162a:	f000 fad3 	bl	8001bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800162e:	2300      	movs	r3, #0
 8001630:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001632:	2300      	movs	r3, #0
 8001634:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001636:	463b      	mov	r3, r7
 8001638:	4619      	mov	r1, r3
 800163a:	4806      	ldr	r0, [pc, #24]	@ (8001654 <MX_TIM1_Init+0x9c>)
 800163c:	f005 fa30 	bl	8006aa0 <HAL_TIMEx_MasterConfigSynchronization>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001646:	f000 fac5 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800164a:	bf00      	nop
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000214 	.word	0x20000214
 8001658:	40010000 	.word	0x40010000

0800165c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08c      	sub	sp, #48	@ 0x30
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001662:	f107 030c 	add.w	r3, r7, #12
 8001666:	2224      	movs	r2, #36	@ 0x24
 8001668:	2100      	movs	r1, #0
 800166a:	4618      	mov	r0, r3
 800166c:	f009 faca 	bl	800ac04 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001670:	1d3b      	adds	r3, r7, #4
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001678:	4b21      	ldr	r3, [pc, #132]	@ (8001700 <MX_TIM2_Init+0xa4>)
 800167a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800167e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001680:	4b1f      	ldr	r3, [pc, #124]	@ (8001700 <MX_TIM2_Init+0xa4>)
 8001682:	2200      	movs	r2, #0
 8001684:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001686:	4b1e      	ldr	r3, [pc, #120]	@ (8001700 <MX_TIM2_Init+0xa4>)
 8001688:	2200      	movs	r2, #0
 800168a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800168c:	4b1c      	ldr	r3, [pc, #112]	@ (8001700 <MX_TIM2_Init+0xa4>)
 800168e:	f04f 32ff 	mov.w	r2, #4294967295
 8001692:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001694:	4b1a      	ldr	r3, [pc, #104]	@ (8001700 <MX_TIM2_Init+0xa4>)
 8001696:	2200      	movs	r2, #0
 8001698:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800169a:	4b19      	ldr	r3, [pc, #100]	@ (8001700 <MX_TIM2_Init+0xa4>)
 800169c:	2200      	movs	r2, #0
 800169e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80016a0:	2303      	movs	r3, #3
 80016a2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80016a4:	2302      	movs	r3, #2
 80016a6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016a8:	2301      	movs	r3, #1
 80016aa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016ac:	2300      	movs	r3, #0
 80016ae:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80016b0:	230f      	movs	r3, #15
 80016b2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80016b4:	2302      	movs	r3, #2
 80016b6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016b8:	2301      	movs	r3, #1
 80016ba:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016bc:	2300      	movs	r3, #0
 80016be:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 80016c0:	230f      	movs	r3, #15
 80016c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80016c4:	f107 030c 	add.w	r3, r7, #12
 80016c8:	4619      	mov	r1, r3
 80016ca:	480d      	ldr	r0, [pc, #52]	@ (8001700 <MX_TIM2_Init+0xa4>)
 80016cc:	f004 fb3a 	bl	8005d44 <HAL_TIM_Encoder_Init>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80016d6:	f000 fa7d 	bl	8001bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016da:	2300      	movs	r3, #0
 80016dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016de:	2300      	movs	r3, #0
 80016e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016e2:	1d3b      	adds	r3, r7, #4
 80016e4:	4619      	mov	r1, r3
 80016e6:	4806      	ldr	r0, [pc, #24]	@ (8001700 <MX_TIM2_Init+0xa4>)
 80016e8:	f005 f9da 	bl	8006aa0 <HAL_TIMEx_MasterConfigSynchronization>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80016f2:	f000 fa6f 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016f6:	bf00      	nop
 80016f8:	3730      	adds	r7, #48	@ 0x30
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	2000025c 	.word	0x2000025c

08001704 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08c      	sub	sp, #48	@ 0x30
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800170a:	f107 030c 	add.w	r3, r7, #12
 800170e:	2224      	movs	r2, #36	@ 0x24
 8001710:	2100      	movs	r1, #0
 8001712:	4618      	mov	r0, r3
 8001714:	f009 fa76 	bl	800ac04 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001718:	1d3b      	adds	r3, r7, #4
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001720:	4b20      	ldr	r3, [pc, #128]	@ (80017a4 <MX_TIM3_Init+0xa0>)
 8001722:	4a21      	ldr	r2, [pc, #132]	@ (80017a8 <MX_TIM3_Init+0xa4>)
 8001724:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001726:	4b1f      	ldr	r3, [pc, #124]	@ (80017a4 <MX_TIM3_Init+0xa0>)
 8001728:	2200      	movs	r2, #0
 800172a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800172c:	4b1d      	ldr	r3, [pc, #116]	@ (80017a4 <MX_TIM3_Init+0xa0>)
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001732:	4b1c      	ldr	r3, [pc, #112]	@ (80017a4 <MX_TIM3_Init+0xa0>)
 8001734:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001738:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800173a:	4b1a      	ldr	r3, [pc, #104]	@ (80017a4 <MX_TIM3_Init+0xa0>)
 800173c:	2200      	movs	r2, #0
 800173e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001740:	4b18      	ldr	r3, [pc, #96]	@ (80017a4 <MX_TIM3_Init+0xa0>)
 8001742:	2200      	movs	r2, #0
 8001744:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001746:	2303      	movs	r3, #3
 8001748:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800174a:	2302      	movs	r3, #2
 800174c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800174e:	2301      	movs	r3, #1
 8001750:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001752:	2300      	movs	r3, #0
 8001754:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001756:	230f      	movs	r3, #15
 8001758:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800175a:	2302      	movs	r3, #2
 800175c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800175e:	2301      	movs	r3, #1
 8001760:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001762:	2300      	movs	r3, #0
 8001764:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001766:	230f      	movs	r3, #15
 8001768:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800176a:	f107 030c 	add.w	r3, r7, #12
 800176e:	4619      	mov	r1, r3
 8001770:	480c      	ldr	r0, [pc, #48]	@ (80017a4 <MX_TIM3_Init+0xa0>)
 8001772:	f004 fae7 	bl	8005d44 <HAL_TIM_Encoder_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800177c:	f000 fa2a 	bl	8001bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001780:	2300      	movs	r3, #0
 8001782:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001784:	2300      	movs	r3, #0
 8001786:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001788:	1d3b      	adds	r3, r7, #4
 800178a:	4619      	mov	r1, r3
 800178c:	4805      	ldr	r0, [pc, #20]	@ (80017a4 <MX_TIM3_Init+0xa0>)
 800178e:	f005 f987 	bl	8006aa0 <HAL_TIMEx_MasterConfigSynchronization>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001798:	f000 fa1c 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800179c:	bf00      	nop
 800179e:	3730      	adds	r7, #48	@ 0x30
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	200002a4 	.word	0x200002a4
 80017a8:	40000400 	.word	0x40000400

080017ac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08e      	sub	sp, #56	@ 0x38
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	605a      	str	r2, [r3, #4]
 80017bc:	609a      	str	r2, [r3, #8]
 80017be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017c0:	f107 0320 	add.w	r3, r7, #32
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017ca:	1d3b      	adds	r3, r7, #4
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
 80017d8:	615a      	str	r2, [r3, #20]
 80017da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80017dc:	4b31      	ldr	r3, [pc, #196]	@ (80018a4 <MX_TIM4_Init+0xf8>)
 80017de:	4a32      	ldr	r2, [pc, #200]	@ (80018a8 <MX_TIM4_Init+0xfc>)
 80017e0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 26-1;
 80017e2:	4b30      	ldr	r3, [pc, #192]	@ (80018a4 <MX_TIM4_Init+0xf8>)
 80017e4:	2219      	movs	r2, #25
 80017e6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e8:	4b2e      	ldr	r3, [pc, #184]	@ (80018a4 <MX_TIM4_Init+0xf8>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 80017ee:	4b2d      	ldr	r3, [pc, #180]	@ (80018a4 <MX_TIM4_Init+0xf8>)
 80017f0:	2263      	movs	r2, #99	@ 0x63
 80017f2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017f4:	4b2b      	ldr	r3, [pc, #172]	@ (80018a4 <MX_TIM4_Init+0xf8>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017fa:	4b2a      	ldr	r3, [pc, #168]	@ (80018a4 <MX_TIM4_Init+0xf8>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001800:	4828      	ldr	r0, [pc, #160]	@ (80018a4 <MX_TIM4_Init+0xf8>)
 8001802:	f004 f889 	bl	8005918 <HAL_TIM_Base_Init>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 800180c:	f000 f9e2 	bl	8001bd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001810:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001814:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001816:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800181a:	4619      	mov	r1, r3
 800181c:	4821      	ldr	r0, [pc, #132]	@ (80018a4 <MX_TIM4_Init+0xf8>)
 800181e:	f004 fd77 	bl	8006310 <HAL_TIM_ConfigClockSource>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8001828:	f000 f9d4 	bl	8001bd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800182c:	481d      	ldr	r0, [pc, #116]	@ (80018a4 <MX_TIM4_Init+0xf8>)
 800182e:	f004 f97f 	bl	8005b30 <HAL_TIM_PWM_Init>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8001838:	f000 f9cc 	bl	8001bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800183c:	2300      	movs	r3, #0
 800183e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001840:	2300      	movs	r3, #0
 8001842:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001844:	f107 0320 	add.w	r3, r7, #32
 8001848:	4619      	mov	r1, r3
 800184a:	4816      	ldr	r0, [pc, #88]	@ (80018a4 <MX_TIM4_Init+0xf8>)
 800184c:	f005 f928 	bl	8006aa0 <HAL_TIMEx_MasterConfigSynchronization>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8001856:	f000 f9bd 	bl	8001bd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800185a:	2360      	movs	r3, #96	@ 0x60
 800185c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800185e:	2300      	movs	r3, #0
 8001860:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001862:	2300      	movs	r3, #0
 8001864:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001866:	2300      	movs	r3, #0
 8001868:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800186a:	1d3b      	adds	r3, r7, #4
 800186c:	2200      	movs	r2, #0
 800186e:	4619      	mov	r1, r3
 8001870:	480c      	ldr	r0, [pc, #48]	@ (80018a4 <MX_TIM4_Init+0xf8>)
 8001872:	f004 fc8b 	bl	800618c <HAL_TIM_PWM_ConfigChannel>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 800187c:	f000 f9aa 	bl	8001bd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001880:	1d3b      	adds	r3, r7, #4
 8001882:	2204      	movs	r2, #4
 8001884:	4619      	mov	r1, r3
 8001886:	4807      	ldr	r0, [pc, #28]	@ (80018a4 <MX_TIM4_Init+0xf8>)
 8001888:	f004 fc80 	bl	800618c <HAL_TIM_PWM_ConfigChannel>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 8001892:	f000 f99f 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001896:	4803      	ldr	r0, [pc, #12]	@ (80018a4 <MX_TIM4_Init+0xf8>)
 8001898:	f000 fcca 	bl	8002230 <HAL_TIM_MspPostInit>

}
 800189c:	bf00      	nop
 800189e:	3738      	adds	r7, #56	@ 0x38
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	200002ec 	.word	0x200002ec
 80018a8:	40000800 	.word	0x40000800

080018ac <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018b2:	f107 0308 	add.w	r3, r7, #8
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	605a      	str	r2, [r3, #4]
 80018bc:	609a      	str	r2, [r3, #8]
 80018be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c0:	463b      	mov	r3, r7
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80018c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001940 <MX_TIM5_Init+0x94>)
 80018ca:	4a1e      	ldr	r2, [pc, #120]	@ (8001944 <MX_TIM5_Init+0x98>)
 80018cc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 9600-1;
 80018ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001940 <MX_TIM5_Init+0x94>)
 80018d0:	f242 527f 	movw	r2, #9599	@ 0x257f
 80018d4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001940 <MX_TIM5_Init+0x94>)
 80018d8:	2200      	movs	r2, #0
 80018da:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80018dc:	4b18      	ldr	r3, [pc, #96]	@ (8001940 <MX_TIM5_Init+0x94>)
 80018de:	f04f 32ff 	mov.w	r2, #4294967295
 80018e2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018e4:	4b16      	ldr	r3, [pc, #88]	@ (8001940 <MX_TIM5_Init+0x94>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ea:	4b15      	ldr	r3, [pc, #84]	@ (8001940 <MX_TIM5_Init+0x94>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80018f0:	4813      	ldr	r0, [pc, #76]	@ (8001940 <MX_TIM5_Init+0x94>)
 80018f2:	f004 f811 	bl	8005918 <HAL_TIM_Base_Init>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80018fc:	f000 f96a 	bl	8001bd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001900:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001904:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001906:	f107 0308 	add.w	r3, r7, #8
 800190a:	4619      	mov	r1, r3
 800190c:	480c      	ldr	r0, [pc, #48]	@ (8001940 <MX_TIM5_Init+0x94>)
 800190e:	f004 fcff 	bl	8006310 <HAL_TIM_ConfigClockSource>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001918:	f000 f95c 	bl	8001bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800191c:	2300      	movs	r3, #0
 800191e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001920:	2300      	movs	r3, #0
 8001922:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001924:	463b      	mov	r3, r7
 8001926:	4619      	mov	r1, r3
 8001928:	4805      	ldr	r0, [pc, #20]	@ (8001940 <MX_TIM5_Init+0x94>)
 800192a:	f005 f8b9 	bl	8006aa0 <HAL_TIMEx_MasterConfigSynchronization>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001934:	f000 f94e 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001938:	bf00      	nop
 800193a:	3718      	adds	r7, #24
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20000334 	.word	0x20000334
 8001944:	40000c00 	.word	0x40000c00

08001948 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800194e:	463b      	mov	r3, r7
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	609a      	str	r2, [r3, #8]
 8001958:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800195a:	4b16      	ldr	r3, [pc, #88]	@ (80019b4 <MX_TIM9_Init+0x6c>)
 800195c:	4a16      	ldr	r2, [pc, #88]	@ (80019b8 <MX_TIM9_Init+0x70>)
 800195e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 96-1;
 8001960:	4b14      	ldr	r3, [pc, #80]	@ (80019b4 <MX_TIM9_Init+0x6c>)
 8001962:	225f      	movs	r2, #95	@ 0x5f
 8001964:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001966:	4b13      	ldr	r3, [pc, #76]	@ (80019b4 <MX_TIM9_Init+0x6c>)
 8001968:	2200      	movs	r2, #0
 800196a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 800196c:	4b11      	ldr	r3, [pc, #68]	@ (80019b4 <MX_TIM9_Init+0x6c>)
 800196e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001972:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001974:	4b0f      	ldr	r3, [pc, #60]	@ (80019b4 <MX_TIM9_Init+0x6c>)
 8001976:	2200      	movs	r2, #0
 8001978:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800197a:	4b0e      	ldr	r3, [pc, #56]	@ (80019b4 <MX_TIM9_Init+0x6c>)
 800197c:	2200      	movs	r2, #0
 800197e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001980:	480c      	ldr	r0, [pc, #48]	@ (80019b4 <MX_TIM9_Init+0x6c>)
 8001982:	f003 ffc9 	bl	8005918 <HAL_TIM_Base_Init>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 800198c:	f000 f922 	bl	8001bd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001990:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001994:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001996:	463b      	mov	r3, r7
 8001998:	4619      	mov	r1, r3
 800199a:	4806      	ldr	r0, [pc, #24]	@ (80019b4 <MX_TIM9_Init+0x6c>)
 800199c:	f004 fcb8 	bl	8006310 <HAL_TIM_ConfigClockSource>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 80019a6:	f000 f915 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80019aa:	bf00      	nop
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	2000037c 	.word	0x2000037c
 80019b8:	40014000 	.word	0x40014000

080019bc <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80019c0:	4b0e      	ldr	r3, [pc, #56]	@ (80019fc <MX_TIM11_Init+0x40>)
 80019c2:	4a0f      	ldr	r2, [pc, #60]	@ (8001a00 <MX_TIM11_Init+0x44>)
 80019c4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 96-1;
 80019c6:	4b0d      	ldr	r3, [pc, #52]	@ (80019fc <MX_TIM11_Init+0x40>)
 80019c8:	225f      	movs	r2, #95	@ 0x5f
 80019ca:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019cc:	4b0b      	ldr	r3, [pc, #44]	@ (80019fc <MX_TIM11_Init+0x40>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 80019d2:	4b0a      	ldr	r3, [pc, #40]	@ (80019fc <MX_TIM11_Init+0x40>)
 80019d4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80019d8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019da:	4b08      	ldr	r3, [pc, #32]	@ (80019fc <MX_TIM11_Init+0x40>)
 80019dc:	2200      	movs	r2, #0
 80019de:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019e0:	4b06      	ldr	r3, [pc, #24]	@ (80019fc <MX_TIM11_Init+0x40>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80019e6:	4805      	ldr	r0, [pc, #20]	@ (80019fc <MX_TIM11_Init+0x40>)
 80019e8:	f003 ff96 	bl	8005918 <HAL_TIM_Base_Init>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80019f2:	f000 f8ef 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	200003c4 	.word	0x200003c4
 8001a00:	40014800 	.word	0x40014800

08001a04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	607b      	str	r3, [r7, #4]
 8001a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a40 <MX_DMA_Init+0x3c>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a12:	4a0b      	ldr	r2, [pc, #44]	@ (8001a40 <MX_DMA_Init+0x3c>)
 8001a14:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a1a:	4b09      	ldr	r3, [pc, #36]	@ (8001a40 <MX_DMA_Init+0x3c>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a22:	607b      	str	r3, [r7, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001a26:	2200      	movs	r2, #0
 8001a28:	2100      	movs	r1, #0
 8001a2a:	2038      	movs	r0, #56	@ 0x38
 8001a2c:	f001 fa3b 	bl	8002ea6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001a30:	2038      	movs	r0, #56	@ 0x38
 8001a32:	f001 fa54 	bl	8002ede <HAL_NVIC_EnableIRQ>

}
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40023800 	.word	0x40023800

08001a44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b08a      	sub	sp, #40	@ 0x28
 8001a48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4a:	f107 0314 	add.w	r3, r7, #20
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	605a      	str	r2, [r3, #4]
 8001a54:	609a      	str	r2, [r3, #8]
 8001a56:	60da      	str	r2, [r3, #12]
 8001a58:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	613b      	str	r3, [r7, #16]
 8001a5e:	4b3b      	ldr	r3, [pc, #236]	@ (8001b4c <MX_GPIO_Init+0x108>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a62:	4a3a      	ldr	r2, [pc, #232]	@ (8001b4c <MX_GPIO_Init+0x108>)
 8001a64:	f043 0304 	orr.w	r3, r3, #4
 8001a68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a6a:	4b38      	ldr	r3, [pc, #224]	@ (8001b4c <MX_GPIO_Init+0x108>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6e:	f003 0304 	and.w	r3, r3, #4
 8001a72:	613b      	str	r3, [r7, #16]
 8001a74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	4b34      	ldr	r3, [pc, #208]	@ (8001b4c <MX_GPIO_Init+0x108>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7e:	4a33      	ldr	r2, [pc, #204]	@ (8001b4c <MX_GPIO_Init+0x108>)
 8001a80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a86:	4b31      	ldr	r3, [pc, #196]	@ (8001b4c <MX_GPIO_Init+0x108>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	60bb      	str	r3, [r7, #8]
 8001a96:	4b2d      	ldr	r3, [pc, #180]	@ (8001b4c <MX_GPIO_Init+0x108>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9a:	4a2c      	ldr	r2, [pc, #176]	@ (8001b4c <MX_GPIO_Init+0x108>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aa2:	4b2a      	ldr	r3, [pc, #168]	@ (8001b4c <MX_GPIO_Init+0x108>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	60bb      	str	r3, [r7, #8]
 8001aac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	607b      	str	r3, [r7, #4]
 8001ab2:	4b26      	ldr	r3, [pc, #152]	@ (8001b4c <MX_GPIO_Init+0x108>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab6:	4a25      	ldr	r2, [pc, #148]	@ (8001b4c <MX_GPIO_Init+0x108>)
 8001ab8:	f043 0302 	orr.w	r3, r3, #2
 8001abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001abe:	4b23      	ldr	r3, [pc, #140]	@ (8001b4c <MX_GPIO_Init+0x108>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	607b      	str	r3, [r7, #4]
 8001ac8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001aca:	2200      	movs	r2, #0
 8001acc:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001ad0:	481f      	ldr	r0, [pc, #124]	@ (8001b50 <MX_GPIO_Init+0x10c>)
 8001ad2:	f001 ff13 	bl	80038fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	21c0      	movs	r1, #192	@ 0xc0
 8001ada:	481e      	ldr	r0, [pc, #120]	@ (8001b54 <MX_GPIO_Init+0x110>)
 8001adc:	f001 ff0e 	bl	80038fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ae6:	481c      	ldr	r0, [pc, #112]	@ (8001b58 <MX_GPIO_Init+0x114>)
 8001ae8:	f001 ff08 	bl	80038fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001aec:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001af0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af2:	2301      	movs	r3, #1
 8001af4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afa:	2300      	movs	r3, #0
 8001afc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001afe:	f107 0314 	add.w	r3, r7, #20
 8001b02:	4619      	mov	r1, r3
 8001b04:	4812      	ldr	r0, [pc, #72]	@ (8001b50 <MX_GPIO_Init+0x10c>)
 8001b06:	f001 fd75 	bl	80035f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b0a:	23c0      	movs	r3, #192	@ 0xc0
 8001b0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b16:	2300      	movs	r3, #0
 8001b18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1a:	f107 0314 	add.w	r3, r7, #20
 8001b1e:	4619      	mov	r1, r3
 8001b20:	480c      	ldr	r0, [pc, #48]	@ (8001b54 <MX_GPIO_Init+0x110>)
 8001b22:	f001 fd67 	bl	80035f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001b26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b34:	2300      	movs	r3, #0
 8001b36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b38:	f107 0314 	add.w	r3, r7, #20
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4806      	ldr	r0, [pc, #24]	@ (8001b58 <MX_GPIO_Init+0x114>)
 8001b40:	f001 fd58 	bl	80035f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b44:	bf00      	nop
 8001b46:	3728      	adds	r7, #40	@ 0x28
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	40020800 	.word	0x40020800
 8001b54:	40020000 	.word	0x40020000
 8001b58:	40020400 	.word	0x40020400

08001b5c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc1, adcValue,5);
 8001b64:	2205      	movs	r2, #5
 8001b66:	4904      	ldr	r1, [pc, #16]	@ (8001b78 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001b68:	4804      	ldr	r0, [pc, #16]	@ (8001b7c <HAL_ADC_ConvCpltCallback+0x20>)
 8001b6a:	f000 fd0d 	bl	8002588 <HAL_ADC_Start_DMA>
}
 8001b6e:	bf00      	nop
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	20000410 	.word	0x20000410
 8001b7c:	20000118 	.word	0x20000118

08001b80 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  //  static uint16_t ms_counter = 0; declarado arriba

    if (htim->Instance == TIM11) {
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a0f      	ldr	r2, [pc, #60]	@ (8001bcc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d116      	bne.n	8001bc0 <HAL_TIM_PeriodElapsedCallback+0x40>

        for (uint16_t i = 0; i < TTOTAL; i++) {
 8001b92:	2300      	movs	r3, #0
 8001b94:	81fb      	strh	r3, [r7, #14]
 8001b96:	e010      	b.n	8001bba <HAL_TIM_PeriodElapsedCallback+0x3a>
            if (tim_pro[i] != 0) {
 8001b98:	89fb      	ldrh	r3, [r7, #14]
 8001b9a:	4a0d      	ldr	r2, [pc, #52]	@ (8001bd0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d007      	beq.n	8001bb4 <HAL_TIM_PeriodElapsedCallback+0x34>
                tim_pro[i]--;
 8001ba4:	89fb      	ldrh	r3, [r7, #14]
 8001ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001ba8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001bac:	3a01      	subs	r2, #1
 8001bae:	4908      	ldr	r1, [pc, #32]	@ (8001bd0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001bb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (uint16_t i = 0; i < TTOTAL; i++) {
 8001bb4:	89fb      	ldrh	r3, [r7, #14]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	81fb      	strh	r3, [r7, #14]
 8001bba:	89fb      	ldrh	r3, [r7, #14]
 8001bbc:	2b03      	cmp	r3, #3
 8001bbe:	d9eb      	bls.n	8001b98 <HAL_TIM_PeriodElapsedCallback+0x18>
            }
        }

    }

}
 8001bc0:	bf00      	nop
 8001bc2:	3714      	adds	r7, #20
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	40014800 	.word	0x40014800
 8001bd0:	200004e0 	.word	0x200004e0

08001bd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bd8:	b672      	cpsid	i
}
 8001bda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bdc:	bf00      	nop
 8001bde:	e7fd      	b.n	8001bdc <Error_Handler+0x8>

08001be0 <motoresInit>:


TIM_HandleTypeDef *timmotorGlobal;


void motoresInit(TIM_HandleTypeDef *timmotor, uint32_t canal1, uint32_t canal2){
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
	timmotorGlobal = timmotor;
 8001bec:	4a18      	ldr	r2, [pc, #96]	@ (8001c50 <motoresInit+0x70>)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(timmotorGlobal, canal1);
 8001bf2:	4b17      	ldr	r3, [pc, #92]	@ (8001c50 <motoresInit+0x70>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68b9      	ldr	r1, [r7, #8]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f003 fff3 	bl	8005be4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timmotorGlobal, canal2);
 8001bfe:	4b14      	ldr	r3, [pc, #80]	@ (8001c50 <motoresInit+0x70>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	6879      	ldr	r1, [r7, #4]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f003 ffed 	bl	8005be4 <HAL_TIM_PWM_Start>
	timmotorGlobal->Instance->CCR1 = 0;
 8001c0a:	4b11      	ldr	r3, [pc, #68]	@ (8001c50 <motoresInit+0x70>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2200      	movs	r2, #0
 8001c12:	635a      	str	r2, [r3, #52]	@ 0x34
	timmotorGlobal->Instance->CCR2 = 0;
 8001c14:	4b0e      	ldr	r3, [pc, #56]	@ (8001c50 <motoresInit+0x70>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	639a      	str	r2, [r3, #56]	@ 0x38

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6,0);
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2140      	movs	r1, #64	@ 0x40
 8001c22:	480c      	ldr	r0, [pc, #48]	@ (8001c54 <motoresInit+0x74>)
 8001c24:	f001 fe6a 	bl	80038fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7,0);
 8001c28:	2200      	movs	r2, #0
 8001c2a:	2180      	movs	r1, #128	@ 0x80
 8001c2c:	4809      	ldr	r0, [pc, #36]	@ (8001c54 <motoresInit+0x74>)
 8001c2e:	f001 fe65 	bl	80038fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,0);
 8001c32:	2200      	movs	r2, #0
 8001c34:	2110      	movs	r1, #16
 8001c36:	4807      	ldr	r0, [pc, #28]	@ (8001c54 <motoresInit+0x74>)
 8001c38:	f001 fe60 	bl	80038fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,0);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	2120      	movs	r1, #32
 8001c40:	4804      	ldr	r0, [pc, #16]	@ (8001c54 <motoresInit+0x74>)
 8001c42:	f001 fe5b 	bl	80038fc <HAL_GPIO_WritePin>
}
 8001c46:	bf00      	nop
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	200004f0 	.word	0x200004f0
 8001c54:	40020000 	.word	0x40020000

08001c58 <motores>:
void motores(int8_t m1, int8_t m2){
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	460a      	mov	r2, r1
 8001c62:	71fb      	strb	r3, [r7, #7]
 8001c64:	4613      	mov	r3, r2
 8001c66:	71bb      	strb	r3, [r7, #6]

	//control motor 1
	if(m1 > 0){
 8001c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	dd16      	ble.n	8001c9e <motores+0x46>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7,1);
 8001c70:	2201      	movs	r2, #1
 8001c72:	2180      	movs	r1, #128	@ 0x80
 8001c74:	4847      	ldr	r0, [pc, #284]	@ (8001d94 <motores+0x13c>)
 8001c76:	f001 fe41 	bl	80038fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6,0);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2140      	movs	r1, #64	@ 0x40
 8001c7e:	4845      	ldr	r0, [pc, #276]	@ (8001d94 <motores+0x13c>)
 8001c80:	f001 fe3c 	bl	80038fc <HAL_GPIO_WritePin>
		if(m1 > 100)m1 = 100;
 8001c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c88:	2b64      	cmp	r3, #100	@ 0x64
 8001c8a:	dd01      	ble.n	8001c90 <motores+0x38>
 8001c8c:	2364      	movs	r3, #100	@ 0x64
 8001c8e:	71fb      	strb	r3, [r7, #7]
		timmotorGlobal->Instance->CCR1 = m1;
 8001c90:	4b41      	ldr	r3, [pc, #260]	@ (8001d98 <motores+0x140>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001c9a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c9c:	e02d      	b.n	8001cfa <motores+0xa2>
	}else if(m1 < 0){
 8001c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	da1a      	bge.n	8001cdc <motores+0x84>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7,0);
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	2180      	movs	r1, #128	@ 0x80
 8001caa:	483a      	ldr	r0, [pc, #232]	@ (8001d94 <motores+0x13c>)
 8001cac:	f001 fe26 	bl	80038fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6,1);
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	2140      	movs	r1, #64	@ 0x40
 8001cb4:	4837      	ldr	r0, [pc, #220]	@ (8001d94 <motores+0x13c>)
 8001cb6:	f001 fe21 	bl	80038fc <HAL_GPIO_WritePin>
		m1 *= -1;
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	425b      	negs	r3, r3
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	71fb      	strb	r3, [r7, #7]
		if(m1 > 100)m1 = 100;
 8001cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc6:	2b64      	cmp	r3, #100	@ 0x64
 8001cc8:	dd01      	ble.n	8001cce <motores+0x76>
 8001cca:	2364      	movs	r3, #100	@ 0x64
 8001ccc:	71fb      	strb	r3, [r7, #7]
		timmotorGlobal->Instance->CCR1 = m1;
 8001cce:	4b32      	ldr	r3, [pc, #200]	@ (8001d98 <motores+0x140>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001cd8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001cda:	e00e      	b.n	8001cfa <motores+0xa2>
	}else{                                       /// NORMALMENTE SOLO EJECUTA EN 0,0 FREE
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7,0);
 8001cdc:	2200      	movs	r2, #0
 8001cde:	2180      	movs	r1, #128	@ 0x80
 8001ce0:	482c      	ldr	r0, [pc, #176]	@ (8001d94 <motores+0x13c>)
 8001ce2:	f001 fe0b 	bl	80038fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6,0);
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	2140      	movs	r1, #64	@ 0x40
 8001cea:	482a      	ldr	r0, [pc, #168]	@ (8001d94 <motores+0x13c>)
 8001cec:	f001 fe06 	bl	80038fc <HAL_GPIO_WritePin>
		timmotorGlobal->Instance->CCR1 = 0;
 8001cf0:	4b29      	ldr	r3, [pc, #164]	@ (8001d98 <motores+0x140>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	635a      	str	r2, [r3, #52]	@ 0x34
	}

	//control motor 2
	if(m2 > 0){
 8001cfa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	dd16      	ble.n	8001d30 <motores+0xd8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,1);
 8001d02:	2201      	movs	r2, #1
 8001d04:	2110      	movs	r1, #16
 8001d06:	4823      	ldr	r0, [pc, #140]	@ (8001d94 <motores+0x13c>)
 8001d08:	f001 fdf8 	bl	80038fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,0);
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	2120      	movs	r1, #32
 8001d10:	4820      	ldr	r0, [pc, #128]	@ (8001d94 <motores+0x13c>)
 8001d12:	f001 fdf3 	bl	80038fc <HAL_GPIO_WritePin>
		if(m2 > 100)m2 = 100;
 8001d16:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001d1a:	2b64      	cmp	r3, #100	@ 0x64
 8001d1c:	dd01      	ble.n	8001d22 <motores+0xca>
 8001d1e:	2364      	movs	r3, #100	@ 0x64
 8001d20:	71bb      	strb	r3, [r7, #6]
		timmotorGlobal->Instance->CCR2 = m2;
 8001d22:	4b1d      	ldr	r3, [pc, #116]	@ (8001d98 <motores+0x140>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8001d2c:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,0);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,0);
		timmotorGlobal->Instance->CCR2 = 0;
	}

}
 8001d2e:	e02d      	b.n	8001d8c <motores+0x134>
	}else if(m2 < 0){
 8001d30:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	da1a      	bge.n	8001d6e <motores+0x116>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,0);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	2110      	movs	r1, #16
 8001d3c:	4815      	ldr	r0, [pc, #84]	@ (8001d94 <motores+0x13c>)
 8001d3e:	f001 fddd 	bl	80038fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,1);
 8001d42:	2201      	movs	r2, #1
 8001d44:	2120      	movs	r1, #32
 8001d46:	4813      	ldr	r0, [pc, #76]	@ (8001d94 <motores+0x13c>)
 8001d48:	f001 fdd8 	bl	80038fc <HAL_GPIO_WritePin>
		m2 *= -1;
 8001d4c:	79bb      	ldrb	r3, [r7, #6]
 8001d4e:	425b      	negs	r3, r3
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	71bb      	strb	r3, [r7, #6]
		if(m2 > 100)m2 = 100;
 8001d54:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001d58:	2b64      	cmp	r3, #100	@ 0x64
 8001d5a:	dd01      	ble.n	8001d60 <motores+0x108>
 8001d5c:	2364      	movs	r3, #100	@ 0x64
 8001d5e:	71bb      	strb	r3, [r7, #6]
		timmotorGlobal->Instance->CCR2 = m2;
 8001d60:	4b0d      	ldr	r3, [pc, #52]	@ (8001d98 <motores+0x140>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8001d6a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001d6c:	e00e      	b.n	8001d8c <motores+0x134>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,0);
 8001d6e:	2200      	movs	r2, #0
 8001d70:	2110      	movs	r1, #16
 8001d72:	4808      	ldr	r0, [pc, #32]	@ (8001d94 <motores+0x13c>)
 8001d74:	f001 fdc2 	bl	80038fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,0);
 8001d78:	2200      	movs	r2, #0
 8001d7a:	2120      	movs	r1, #32
 8001d7c:	4805      	ldr	r0, [pc, #20]	@ (8001d94 <motores+0x13c>)
 8001d7e:	f001 fdbd 	bl	80038fc <HAL_GPIO_WritePin>
		timmotorGlobal->Instance->CCR2 = 0;
 8001d82:	4b05      	ldr	r3, [pc, #20]	@ (8001d98 <motores+0x140>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001d8c:	bf00      	nop
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40020000 	.word	0x40020000
 8001d98:	200004f0 	.word	0x200004f0

08001d9c <delay_us_tim_init>:


#ifdef TIMX

void delay_us_tim_init()
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  // HAL_TIM_Base_Start(&TIMERX); // CON HAL inicia el timer 1


	//SIN HAL
	TIMX->CR1|=1>>0;// HABILITA EL TIMER BIT 0 EN 1 EN
 8001da0:	4b05      	ldr	r3, [pc, #20]	@ (8001db8 <delay_us_tim_init+0x1c>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a04      	ldr	r2, [pc, #16]	@ (8001db8 <delay_us_tim_init+0x1c>)
 8001da6:	f043 0301 	orr.w	r3, r3, #1
 8001daa:	6013      	str	r3, [r2, #0]

}
 8001dac:	bf00      	nop
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	40014000 	.word	0x40014000

08001dbc <delay_us_tim>:


void delay_us_tim (uint32_t us)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
	//CON HAL
	//__HAL_TIM_SET_COUNTER(&TIMERX,0);  // CON HAL  Carga el timer con 0
	//while ((uint16_t)__HAL_TIM_GET_COUNTER(&TIMERX) < us);// CON HAL espera los us deseados ojo si es 32 bit poner uint32_t

	//SIN HAL
     TIMX->CNT=0;// Resetea el timer
 8001dc4:	4b07      	ldr	r3, [pc, #28]	@ (8001de4 <delay_us_tim+0x28>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	625a      	str	r2, [r3, #36]	@ 0x24
	while (TIMX->CNT < us);// ESPERA LOS US DESEADOS
 8001dca:	bf00      	nop
 8001dcc:	4b05      	ldr	r3, [pc, #20]	@ (8001de4 <delay_us_tim+0x28>)
 8001dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d8fa      	bhi.n	8001dcc <delay_us_tim+0x10>

}
 8001dd6:	bf00      	nop
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	40014000 	.word	0x40014000

08001de8 <Delay_ms>:
while( DWT->CYCCNT<=pasos*reta);//multiplica por us
}
#endif

void Delay_ms(uint32_t ms)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
    uint32_t us = ms * 1000;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001df6:	fb02 f303 	mul.w	r3, r2, r3
 8001dfa:	60fb      	str	r3, [r7, #12]
  Delay_us(us);  //el que fue definido
 8001dfc:	68f8      	ldr	r0, [r7, #12]
 8001dfe:	f7ff ffdd 	bl	8001dbc <delay_us_tim>
}
 8001e02:	bf00      	nop
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
	...

08001e0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	607b      	str	r3, [r7, #4]
 8001e16:	4b10      	ldr	r3, [pc, #64]	@ (8001e58 <HAL_MspInit+0x4c>)
 8001e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e1a:	4a0f      	ldr	r2, [pc, #60]	@ (8001e58 <HAL_MspInit+0x4c>)
 8001e1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e20:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e22:	4b0d      	ldr	r3, [pc, #52]	@ (8001e58 <HAL_MspInit+0x4c>)
 8001e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e2a:	607b      	str	r3, [r7, #4]
 8001e2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	603b      	str	r3, [r7, #0]
 8001e32:	4b09      	ldr	r3, [pc, #36]	@ (8001e58 <HAL_MspInit+0x4c>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e36:	4a08      	ldr	r2, [pc, #32]	@ (8001e58 <HAL_MspInit+0x4c>)
 8001e38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e3e:	4b06      	ldr	r3, [pc, #24]	@ (8001e58 <HAL_MspInit+0x4c>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e46:	603b      	str	r3, [r7, #0]
 8001e48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	40023800 	.word	0x40023800

08001e5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08a      	sub	sp, #40	@ 0x28
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e64:	f107 0314 	add.w	r3, r7, #20
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	605a      	str	r2, [r3, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	60da      	str	r2, [r3, #12]
 8001e72:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a2f      	ldr	r2, [pc, #188]	@ (8001f38 <HAL_ADC_MspInit+0xdc>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d157      	bne.n	8001f2e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	613b      	str	r3, [r7, #16]
 8001e82:	4b2e      	ldr	r3, [pc, #184]	@ (8001f3c <HAL_ADC_MspInit+0xe0>)
 8001e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e86:	4a2d      	ldr	r2, [pc, #180]	@ (8001f3c <HAL_ADC_MspInit+0xe0>)
 8001e88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e8e:	4b2b      	ldr	r3, [pc, #172]	@ (8001f3c <HAL_ADC_MspInit+0xe0>)
 8001e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e96:	613b      	str	r3, [r7, #16]
 8001e98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	4b27      	ldr	r3, [pc, #156]	@ (8001f3c <HAL_ADC_MspInit+0xe0>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea2:	4a26      	ldr	r2, [pc, #152]	@ (8001f3c <HAL_ADC_MspInit+0xe0>)
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eaa:	4b24      	ldr	r3, [pc, #144]	@ (8001f3c <HAL_ADC_MspInit+0xe0>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001eb6:	231f      	movs	r3, #31
 8001eb8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec2:	f107 0314 	add.w	r3, r7, #20
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	481d      	ldr	r0, [pc, #116]	@ (8001f40 <HAL_ADC_MspInit+0xe4>)
 8001eca:	f001 fb93 	bl	80035f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001ece:	4b1d      	ldr	r3, [pc, #116]	@ (8001f44 <HAL_ADC_MspInit+0xe8>)
 8001ed0:	4a1d      	ldr	r2, [pc, #116]	@ (8001f48 <HAL_ADC_MspInit+0xec>)
 8001ed2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f44 <HAL_ADC_MspInit+0xe8>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001eda:	4b1a      	ldr	r3, [pc, #104]	@ (8001f44 <HAL_ADC_MspInit+0xe8>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ee0:	4b18      	ldr	r3, [pc, #96]	@ (8001f44 <HAL_ADC_MspInit+0xe8>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ee6:	4b17      	ldr	r3, [pc, #92]	@ (8001f44 <HAL_ADC_MspInit+0xe8>)
 8001ee8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001eec:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001eee:	4b15      	ldr	r3, [pc, #84]	@ (8001f44 <HAL_ADC_MspInit+0xe8>)
 8001ef0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ef4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ef6:	4b13      	ldr	r3, [pc, #76]	@ (8001f44 <HAL_ADC_MspInit+0xe8>)
 8001ef8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001efc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001efe:	4b11      	ldr	r3, [pc, #68]	@ (8001f44 <HAL_ADC_MspInit+0xe8>)
 8001f00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f04:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001f06:	4b0f      	ldr	r3, [pc, #60]	@ (8001f44 <HAL_ADC_MspInit+0xe8>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f0c:	4b0d      	ldr	r3, [pc, #52]	@ (8001f44 <HAL_ADC_MspInit+0xe8>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f12:	480c      	ldr	r0, [pc, #48]	@ (8001f44 <HAL_ADC_MspInit+0xe8>)
 8001f14:	f000 fffe 	bl	8002f14 <HAL_DMA_Init>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001f1e:	f7ff fe59 	bl	8001bd4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a07      	ldr	r2, [pc, #28]	@ (8001f44 <HAL_ADC_MspInit+0xe8>)
 8001f26:	639a      	str	r2, [r3, #56]	@ 0x38
 8001f28:	4a06      	ldr	r2, [pc, #24]	@ (8001f44 <HAL_ADC_MspInit+0xe8>)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001f2e:	bf00      	nop
 8001f30:	3728      	adds	r7, #40	@ 0x28
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40012000 	.word	0x40012000
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	40020000 	.word	0x40020000
 8001f44:	20000160 	.word	0x20000160
 8001f48:	40026410 	.word	0x40026410

08001f4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b08a      	sub	sp, #40	@ 0x28
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f54:	f107 0314 	add.w	r3, r7, #20
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	605a      	str	r2, [r3, #4]
 8001f5e:	609a      	str	r2, [r3, #8]
 8001f60:	60da      	str	r2, [r3, #12]
 8001f62:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a19      	ldr	r2, [pc, #100]	@ (8001fd0 <HAL_I2C_MspInit+0x84>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d12c      	bne.n	8001fc8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	613b      	str	r3, [r7, #16]
 8001f72:	4b18      	ldr	r3, [pc, #96]	@ (8001fd4 <HAL_I2C_MspInit+0x88>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f76:	4a17      	ldr	r2, [pc, #92]	@ (8001fd4 <HAL_I2C_MspInit+0x88>)
 8001f78:	f043 0302 	orr.w	r3, r3, #2
 8001f7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f7e:	4b15      	ldr	r3, [pc, #84]	@ (8001fd4 <HAL_I2C_MspInit+0x88>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	613b      	str	r3, [r7, #16]
 8001f88:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f8a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f90:	2312      	movs	r3, #18
 8001f92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f94:	2300      	movs	r3, #0
 8001f96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f9c:	2304      	movs	r3, #4
 8001f9e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fa0:	f107 0314 	add.w	r3, r7, #20
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	480c      	ldr	r0, [pc, #48]	@ (8001fd8 <HAL_I2C_MspInit+0x8c>)
 8001fa8:	f001 fb24 	bl	80035f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fac:	2300      	movs	r3, #0
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	4b08      	ldr	r3, [pc, #32]	@ (8001fd4 <HAL_I2C_MspInit+0x88>)
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb4:	4a07      	ldr	r2, [pc, #28]	@ (8001fd4 <HAL_I2C_MspInit+0x88>)
 8001fb6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001fba:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fbc:	4b05      	ldr	r3, [pc, #20]	@ (8001fd4 <HAL_I2C_MspInit+0x88>)
 8001fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001fc8:	bf00      	nop
 8001fca:	3728      	adds	r7, #40	@ 0x28
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40005400 	.word	0x40005400
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	40020400 	.word	0x40020400

08001fdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b088      	sub	sp, #32
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a3e      	ldr	r2, [pc, #248]	@ (80020e4 <HAL_TIM_Base_MspInit+0x108>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d11e      	bne.n	800202c <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61fb      	str	r3, [r7, #28]
 8001ff2:	4b3d      	ldr	r3, [pc, #244]	@ (80020e8 <HAL_TIM_Base_MspInit+0x10c>)
 8001ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ff6:	4a3c      	ldr	r2, [pc, #240]	@ (80020e8 <HAL_TIM_Base_MspInit+0x10c>)
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ffe:	4b3a      	ldr	r3, [pc, #232]	@ (80020e8 <HAL_TIM_Base_MspInit+0x10c>)
 8002000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	61fb      	str	r3, [r7, #28]
 8002008:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800200a:	2200      	movs	r2, #0
 800200c:	2100      	movs	r1, #0
 800200e:	2019      	movs	r0, #25
 8002010:	f000 ff49 	bl	8002ea6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002014:	2019      	movs	r0, #25
 8002016:	f000 ff62 	bl	8002ede <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800201a:	2200      	movs	r2, #0
 800201c:	2100      	movs	r1, #0
 800201e:	201a      	movs	r0, #26
 8002020:	f000 ff41 	bl	8002ea6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002024:	201a      	movs	r0, #26
 8002026:	f000 ff5a 	bl	8002ede <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800202a:	e056      	b.n	80020da <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM4)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a2e      	ldr	r2, [pc, #184]	@ (80020ec <HAL_TIM_Base_MspInit+0x110>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d10e      	bne.n	8002054 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002036:	2300      	movs	r3, #0
 8002038:	61bb      	str	r3, [r7, #24]
 800203a:	4b2b      	ldr	r3, [pc, #172]	@ (80020e8 <HAL_TIM_Base_MspInit+0x10c>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203e:	4a2a      	ldr	r2, [pc, #168]	@ (80020e8 <HAL_TIM_Base_MspInit+0x10c>)
 8002040:	f043 0304 	orr.w	r3, r3, #4
 8002044:	6413      	str	r3, [r2, #64]	@ 0x40
 8002046:	4b28      	ldr	r3, [pc, #160]	@ (80020e8 <HAL_TIM_Base_MspInit+0x10c>)
 8002048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204a:	f003 0304 	and.w	r3, r3, #4
 800204e:	61bb      	str	r3, [r7, #24]
 8002050:	69bb      	ldr	r3, [r7, #24]
}
 8002052:	e042      	b.n	80020da <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM5)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a25      	ldr	r2, [pc, #148]	@ (80020f0 <HAL_TIM_Base_MspInit+0x114>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d10e      	bne.n	800207c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	617b      	str	r3, [r7, #20]
 8002062:	4b21      	ldr	r3, [pc, #132]	@ (80020e8 <HAL_TIM_Base_MspInit+0x10c>)
 8002064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002066:	4a20      	ldr	r2, [pc, #128]	@ (80020e8 <HAL_TIM_Base_MspInit+0x10c>)
 8002068:	f043 0308 	orr.w	r3, r3, #8
 800206c:	6413      	str	r3, [r2, #64]	@ 0x40
 800206e:	4b1e      	ldr	r3, [pc, #120]	@ (80020e8 <HAL_TIM_Base_MspInit+0x10c>)
 8002070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002072:	f003 0308 	and.w	r3, r3, #8
 8002076:	617b      	str	r3, [r7, #20]
 8002078:	697b      	ldr	r3, [r7, #20]
}
 800207a:	e02e      	b.n	80020da <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM9)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a1c      	ldr	r2, [pc, #112]	@ (80020f4 <HAL_TIM_Base_MspInit+0x118>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d10e      	bne.n	80020a4 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	613b      	str	r3, [r7, #16]
 800208a:	4b17      	ldr	r3, [pc, #92]	@ (80020e8 <HAL_TIM_Base_MspInit+0x10c>)
 800208c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800208e:	4a16      	ldr	r2, [pc, #88]	@ (80020e8 <HAL_TIM_Base_MspInit+0x10c>)
 8002090:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002094:	6453      	str	r3, [r2, #68]	@ 0x44
 8002096:	4b14      	ldr	r3, [pc, #80]	@ (80020e8 <HAL_TIM_Base_MspInit+0x10c>)
 8002098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800209a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800209e:	613b      	str	r3, [r7, #16]
 80020a0:	693b      	ldr	r3, [r7, #16]
}
 80020a2:	e01a      	b.n	80020da <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a13      	ldr	r2, [pc, #76]	@ (80020f8 <HAL_TIM_Base_MspInit+0x11c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d115      	bne.n	80020da <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	4b0d      	ldr	r3, [pc, #52]	@ (80020e8 <HAL_TIM_Base_MspInit+0x10c>)
 80020b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020b6:	4a0c      	ldr	r2, [pc, #48]	@ (80020e8 <HAL_TIM_Base_MspInit+0x10c>)
 80020b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80020be:	4b0a      	ldr	r3, [pc, #40]	@ (80020e8 <HAL_TIM_Base_MspInit+0x10c>)
 80020c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80020ca:	2200      	movs	r2, #0
 80020cc:	2100      	movs	r1, #0
 80020ce:	201a      	movs	r0, #26
 80020d0:	f000 fee9 	bl	8002ea6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80020d4:	201a      	movs	r0, #26
 80020d6:	f000 ff02 	bl	8002ede <HAL_NVIC_EnableIRQ>
}
 80020da:	bf00      	nop
 80020dc:	3720      	adds	r7, #32
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40010000 	.word	0x40010000
 80020e8:	40023800 	.word	0x40023800
 80020ec:	40000800 	.word	0x40000800
 80020f0:	40000c00 	.word	0x40000c00
 80020f4:	40014000 	.word	0x40014000
 80020f8:	40014800 	.word	0x40014800

080020fc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b08c      	sub	sp, #48	@ 0x30
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002104:	f107 031c 	add.w	r3, r7, #28
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	609a      	str	r2, [r3, #8]
 8002110:	60da      	str	r2, [r3, #12]
 8002112:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800211c:	d14b      	bne.n	80021b6 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	61bb      	str	r3, [r7, #24]
 8002122:	4b3f      	ldr	r3, [pc, #252]	@ (8002220 <HAL_TIM_Encoder_MspInit+0x124>)
 8002124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002126:	4a3e      	ldr	r2, [pc, #248]	@ (8002220 <HAL_TIM_Encoder_MspInit+0x124>)
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	6413      	str	r3, [r2, #64]	@ 0x40
 800212e:	4b3c      	ldr	r3, [pc, #240]	@ (8002220 <HAL_TIM_Encoder_MspInit+0x124>)
 8002130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	61bb      	str	r3, [r7, #24]
 8002138:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	617b      	str	r3, [r7, #20]
 800213e:	4b38      	ldr	r3, [pc, #224]	@ (8002220 <HAL_TIM_Encoder_MspInit+0x124>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002142:	4a37      	ldr	r2, [pc, #220]	@ (8002220 <HAL_TIM_Encoder_MspInit+0x124>)
 8002144:	f043 0301 	orr.w	r3, r3, #1
 8002148:	6313      	str	r3, [r2, #48]	@ 0x30
 800214a:	4b35      	ldr	r3, [pc, #212]	@ (8002220 <HAL_TIM_Encoder_MspInit+0x124>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	617b      	str	r3, [r7, #20]
 8002154:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	613b      	str	r3, [r7, #16]
 800215a:	4b31      	ldr	r3, [pc, #196]	@ (8002220 <HAL_TIM_Encoder_MspInit+0x124>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215e:	4a30      	ldr	r2, [pc, #192]	@ (8002220 <HAL_TIM_Encoder_MspInit+0x124>)
 8002160:	f043 0302 	orr.w	r3, r3, #2
 8002164:	6313      	str	r3, [r2, #48]	@ 0x30
 8002166:	4b2e      	ldr	r3, [pc, #184]	@ (8002220 <HAL_TIM_Encoder_MspInit+0x124>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	613b      	str	r3, [r7, #16]
 8002170:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002172:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002176:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002178:	2302      	movs	r3, #2
 800217a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217c:	2300      	movs	r3, #0
 800217e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002180:	2300      	movs	r3, #0
 8002182:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002184:	2301      	movs	r3, #1
 8002186:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002188:	f107 031c 	add.w	r3, r7, #28
 800218c:	4619      	mov	r1, r3
 800218e:	4825      	ldr	r0, [pc, #148]	@ (8002224 <HAL_TIM_Encoder_MspInit+0x128>)
 8002190:	f001 fa30 	bl	80035f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002194:	2308      	movs	r3, #8
 8002196:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002198:	2302      	movs	r3, #2
 800219a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219c:	2300      	movs	r3, #0
 800219e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a0:	2300      	movs	r3, #0
 80021a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021a4:	2301      	movs	r3, #1
 80021a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a8:	f107 031c 	add.w	r3, r7, #28
 80021ac:	4619      	mov	r1, r3
 80021ae:	481e      	ldr	r0, [pc, #120]	@ (8002228 <HAL_TIM_Encoder_MspInit+0x12c>)
 80021b0:	f001 fa20 	bl	80035f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80021b4:	e030      	b.n	8002218 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a1c      	ldr	r2, [pc, #112]	@ (800222c <HAL_TIM_Encoder_MspInit+0x130>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d12b      	bne.n	8002218 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021c0:	2300      	movs	r3, #0
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	4b16      	ldr	r3, [pc, #88]	@ (8002220 <HAL_TIM_Encoder_MspInit+0x124>)
 80021c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c8:	4a15      	ldr	r2, [pc, #84]	@ (8002220 <HAL_TIM_Encoder_MspInit+0x124>)
 80021ca:	f043 0302 	orr.w	r3, r3, #2
 80021ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80021d0:	4b13      	ldr	r3, [pc, #76]	@ (8002220 <HAL_TIM_Encoder_MspInit+0x124>)
 80021d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	60fb      	str	r3, [r7, #12]
 80021da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021dc:	2300      	movs	r3, #0
 80021de:	60bb      	str	r3, [r7, #8]
 80021e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002220 <HAL_TIM_Encoder_MspInit+0x124>)
 80021e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e4:	4a0e      	ldr	r2, [pc, #56]	@ (8002220 <HAL_TIM_Encoder_MspInit+0x124>)
 80021e6:	f043 0302 	orr.w	r3, r3, #2
 80021ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002220 <HAL_TIM_Encoder_MspInit+0x124>)
 80021ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	60bb      	str	r3, [r7, #8]
 80021f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80021f8:	2330      	movs	r3, #48	@ 0x30
 80021fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fc:	2302      	movs	r3, #2
 80021fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002200:	2300      	movs	r3, #0
 8002202:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002204:	2300      	movs	r3, #0
 8002206:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002208:	2302      	movs	r3, #2
 800220a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800220c:	f107 031c 	add.w	r3, r7, #28
 8002210:	4619      	mov	r1, r3
 8002212:	4805      	ldr	r0, [pc, #20]	@ (8002228 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002214:	f001 f9ee 	bl	80035f4 <HAL_GPIO_Init>
}
 8002218:	bf00      	nop
 800221a:	3730      	adds	r7, #48	@ 0x30
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40023800 	.word	0x40023800
 8002224:	40020000 	.word	0x40020000
 8002228:	40020400 	.word	0x40020400
 800222c:	40000400 	.word	0x40000400

08002230 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b088      	sub	sp, #32
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002238:	f107 030c 	add.w	r3, r7, #12
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	605a      	str	r2, [r3, #4]
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	60da      	str	r2, [r3, #12]
 8002246:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a12      	ldr	r2, [pc, #72]	@ (8002298 <HAL_TIM_MspPostInit+0x68>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d11d      	bne.n	800228e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	60bb      	str	r3, [r7, #8]
 8002256:	4b11      	ldr	r3, [pc, #68]	@ (800229c <HAL_TIM_MspPostInit+0x6c>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225a:	4a10      	ldr	r2, [pc, #64]	@ (800229c <HAL_TIM_MspPostInit+0x6c>)
 800225c:	f043 0302 	orr.w	r3, r3, #2
 8002260:	6313      	str	r3, [r2, #48]	@ 0x30
 8002262:	4b0e      	ldr	r3, [pc, #56]	@ (800229c <HAL_TIM_MspPostInit+0x6c>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	60bb      	str	r3, [r7, #8]
 800226c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800226e:	23c0      	movs	r3, #192	@ 0xc0
 8002270:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002272:	2302      	movs	r3, #2
 8002274:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002276:	2300      	movs	r3, #0
 8002278:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227a:	2300      	movs	r3, #0
 800227c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800227e:	2302      	movs	r3, #2
 8002280:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002282:	f107 030c 	add.w	r3, r7, #12
 8002286:	4619      	mov	r1, r3
 8002288:	4805      	ldr	r0, [pc, #20]	@ (80022a0 <HAL_TIM_MspPostInit+0x70>)
 800228a:	f001 f9b3 	bl	80035f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800228e:	bf00      	nop
 8002290:	3720      	adds	r7, #32
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40000800 	.word	0x40000800
 800229c:	40023800 	.word	0x40023800
 80022a0:	40020400 	.word	0x40020400

080022a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022a8:	bf00      	nop
 80022aa:	e7fd      	b.n	80022a8 <NMI_Handler+0x4>

080022ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022b0:	bf00      	nop
 80022b2:	e7fd      	b.n	80022b0 <HardFault_Handler+0x4>

080022b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022b8:	bf00      	nop
 80022ba:	e7fd      	b.n	80022b8 <MemManage_Handler+0x4>

080022bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022c0:	bf00      	nop
 80022c2:	e7fd      	b.n	80022c0 <BusFault_Handler+0x4>

080022c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022c8:	bf00      	nop
 80022ca:	e7fd      	b.n	80022c8 <UsageFault_Handler+0x4>

080022cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022d0:	bf00      	nop
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022da:	b480      	push	{r7}
 80022dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022ec:	bf00      	nop
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022fa:	f000 f8bd 	bl	8002478 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
	...

08002304 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002308:	4802      	ldr	r0, [pc, #8]	@ (8002314 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800230a:	f003 fe4f 	bl	8005fac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800230e:	bf00      	nop
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	20000214 	.word	0x20000214

08002318 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800231c:	4803      	ldr	r0, [pc, #12]	@ (800232c <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 800231e:	f003 fe45 	bl	8005fac <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8002322:	4803      	ldr	r0, [pc, #12]	@ (8002330 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8002324:	f003 fe42 	bl	8005fac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002328:	bf00      	nop
 800232a:	bd80      	pop	{r7, pc}
 800232c:	20000214 	.word	0x20000214
 8002330:	200003c4 	.word	0x200003c4

08002334 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002338:	4802      	ldr	r0, [pc, #8]	@ (8002344 <DMA2_Stream0_IRQHandler+0x10>)
 800233a:	f000 fef1 	bl	8003120 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800233e:	bf00      	nop
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	20000160 	.word	0x20000160

08002348 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800234c:	4802      	ldr	r0, [pc, #8]	@ (8002358 <OTG_FS_IRQHandler+0x10>)
 800234e:	f001 fd91 	bl	8003e74 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002352:	bf00      	nop
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	200019d8 	.word	0x200019d8

0800235c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002360:	4b06      	ldr	r3, [pc, #24]	@ (800237c <SystemInit+0x20>)
 8002362:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002366:	4a05      	ldr	r2, [pc, #20]	@ (800237c <SystemInit+0x20>)
 8002368:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800236c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002370:	bf00      	nop
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	e000ed00 	.word	0xe000ed00

08002380 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002380:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80023b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002384:	f7ff ffea 	bl	800235c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002388:	480c      	ldr	r0, [pc, #48]	@ (80023bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800238a:	490d      	ldr	r1, [pc, #52]	@ (80023c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800238c:	4a0d      	ldr	r2, [pc, #52]	@ (80023c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800238e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002390:	e002      	b.n	8002398 <LoopCopyDataInit>

08002392 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002392:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002394:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002396:	3304      	adds	r3, #4

08002398 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002398:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800239a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800239c:	d3f9      	bcc.n	8002392 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800239e:	4a0a      	ldr	r2, [pc, #40]	@ (80023c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023a0:	4c0a      	ldr	r4, [pc, #40]	@ (80023cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80023a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023a4:	e001      	b.n	80023aa <LoopFillZerobss>

080023a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023a8:	3204      	adds	r2, #4

080023aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023ac:	d3fb      	bcc.n	80023a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023ae:	f008 fc31 	bl	800ac14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023b2:	f7fe fecf 	bl	8001154 <main>
  bx  lr    
 80023b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80023b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023c0:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 80023c4:	0800ad50 	.word	0x0800ad50
  ldr r2, =_sbss
 80023c8:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 80023cc:	200020dc 	.word	0x200020dc

080023d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023d0:	e7fe      	b.n	80023d0 <ADC_IRQHandler>
	...

080023d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002414 <HAL_Init+0x40>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002414 <HAL_Init+0x40>)
 80023de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002414 <HAL_Init+0x40>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a0a      	ldr	r2, [pc, #40]	@ (8002414 <HAL_Init+0x40>)
 80023ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023f0:	4b08      	ldr	r3, [pc, #32]	@ (8002414 <HAL_Init+0x40>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a07      	ldr	r2, [pc, #28]	@ (8002414 <HAL_Init+0x40>)
 80023f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023fc:	2003      	movs	r0, #3
 80023fe:	f000 fd47 	bl	8002e90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002402:	200f      	movs	r0, #15
 8002404:	f000 f808 	bl	8002418 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002408:	f7ff fd00 	bl	8001e0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	40023c00 	.word	0x40023c00

08002418 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002420:	4b12      	ldr	r3, [pc, #72]	@ (800246c <HAL_InitTick+0x54>)
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	4b12      	ldr	r3, [pc, #72]	@ (8002470 <HAL_InitTick+0x58>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	4619      	mov	r1, r3
 800242a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800242e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002432:	fbb2 f3f3 	udiv	r3, r2, r3
 8002436:	4618      	mov	r0, r3
 8002438:	f000 fd5f 	bl	8002efa <HAL_SYSTICK_Config>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e00e      	b.n	8002464 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2b0f      	cmp	r3, #15
 800244a:	d80a      	bhi.n	8002462 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800244c:	2200      	movs	r2, #0
 800244e:	6879      	ldr	r1, [r7, #4]
 8002450:	f04f 30ff 	mov.w	r0, #4294967295
 8002454:	f000 fd27 	bl	8002ea6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002458:	4a06      	ldr	r2, [pc, #24]	@ (8002474 <HAL_InitTick+0x5c>)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800245e:	2300      	movs	r3, #0
 8002460:	e000      	b.n	8002464 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
}
 8002464:	4618      	mov	r0, r3
 8002466:	3708      	adds	r7, #8
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	20000000 	.word	0x20000000
 8002470:	20000008 	.word	0x20000008
 8002474:	20000004 	.word	0x20000004

08002478 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800247c:	4b06      	ldr	r3, [pc, #24]	@ (8002498 <HAL_IncTick+0x20>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	461a      	mov	r2, r3
 8002482:	4b06      	ldr	r3, [pc, #24]	@ (800249c <HAL_IncTick+0x24>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4413      	add	r3, r2
 8002488:	4a04      	ldr	r2, [pc, #16]	@ (800249c <HAL_IncTick+0x24>)
 800248a:	6013      	str	r3, [r2, #0]
}
 800248c:	bf00      	nop
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	20000008 	.word	0x20000008
 800249c:	200004f4 	.word	0x200004f4

080024a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  return uwTick;
 80024a4:	4b03      	ldr	r3, [pc, #12]	@ (80024b4 <HAL_GetTick+0x14>)
 80024a6:	681b      	ldr	r3, [r3, #0]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	200004f4 	.word	0x200004f4

080024b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024c0:	f7ff ffee 	bl	80024a0 <HAL_GetTick>
 80024c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d0:	d005      	beq.n	80024de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024d2:	4b0a      	ldr	r3, [pc, #40]	@ (80024fc <HAL_Delay+0x44>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	461a      	mov	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	4413      	add	r3, r2
 80024dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024de:	bf00      	nop
 80024e0:	f7ff ffde 	bl	80024a0 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d8f7      	bhi.n	80024e0 <HAL_Delay+0x28>
  {
  }
}
 80024f0:	bf00      	nop
 80024f2:	bf00      	nop
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	20000008 	.word	0x20000008

08002500 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002508:	2300      	movs	r3, #0
 800250a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e033      	b.n	800257e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251a:	2b00      	cmp	r3, #0
 800251c:	d109      	bne.n	8002532 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7ff fc9c 	bl	8001e5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002536:	f003 0310 	and.w	r3, r3, #16
 800253a:	2b00      	cmp	r3, #0
 800253c:	d118      	bne.n	8002570 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002542:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002546:	f023 0302 	bic.w	r3, r3, #2
 800254a:	f043 0202 	orr.w	r2, r3, #2
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 fa4e 	bl	80029f4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002562:	f023 0303 	bic.w	r3, r3, #3
 8002566:	f043 0201 	orr.w	r2, r3, #1
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	641a      	str	r2, [r3, #64]	@ 0x40
 800256e:	e001      	b.n	8002574 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800257c:	7bfb      	ldrb	r3, [r7, #15]
}
 800257e:	4618      	mov	r0, r3
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
	...

08002588 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002594:	2300      	movs	r3, #0
 8002596:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d101      	bne.n	80025a6 <HAL_ADC_Start_DMA+0x1e>
 80025a2:	2302      	movs	r3, #2
 80025a4:	e0ce      	b.n	8002744 <HAL_ADC_Start_DMA+0x1bc>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d018      	beq.n	80025ee <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f042 0201 	orr.w	r2, r2, #1
 80025ca:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80025cc:	4b5f      	ldr	r3, [pc, #380]	@ (800274c <HAL_ADC_Start_DMA+0x1c4>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a5f      	ldr	r2, [pc, #380]	@ (8002750 <HAL_ADC_Start_DMA+0x1c8>)
 80025d2:	fba2 2303 	umull	r2, r3, r2, r3
 80025d6:	0c9a      	lsrs	r2, r3, #18
 80025d8:	4613      	mov	r3, r2
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	4413      	add	r3, r2
 80025de:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80025e0:	e002      	b.n	80025e8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	3b01      	subs	r3, #1
 80025e6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1f9      	bne.n	80025e2 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025fc:	d107      	bne.n	800260e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800260c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f003 0301 	and.w	r3, r3, #1
 8002618:	2b01      	cmp	r3, #1
 800261a:	f040 8086 	bne.w	800272a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002622:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002626:	f023 0301 	bic.w	r3, r3, #1
 800262a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800263c:	2b00      	cmp	r3, #0
 800263e:	d007      	beq.n	8002650 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002644:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002648:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002654:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002658:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800265c:	d106      	bne.n	800266c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002662:	f023 0206 	bic.w	r2, r3, #6
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	645a      	str	r2, [r3, #68]	@ 0x44
 800266a:	e002      	b.n	8002672 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800267a:	4b36      	ldr	r3, [pc, #216]	@ (8002754 <HAL_ADC_Start_DMA+0x1cc>)
 800267c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002682:	4a35      	ldr	r2, [pc, #212]	@ (8002758 <HAL_ADC_Start_DMA+0x1d0>)
 8002684:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800268a:	4a34      	ldr	r2, [pc, #208]	@ (800275c <HAL_ADC_Start_DMA+0x1d4>)
 800268c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002692:	4a33      	ldr	r2, [pc, #204]	@ (8002760 <HAL_ADC_Start_DMA+0x1d8>)
 8002694:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800269e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80026ae:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	689a      	ldr	r2, [r3, #8]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026be:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	334c      	adds	r3, #76	@ 0x4c
 80026ca:	4619      	mov	r1, r3
 80026cc:	68ba      	ldr	r2, [r7, #8]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f000 fcce 	bl	8003070 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f003 031f 	and.w	r3, r3, #31
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10f      	bne.n	8002700 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d129      	bne.n	8002742 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80026fc:	609a      	str	r2, [r3, #8]
 80026fe:	e020      	b.n	8002742 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a17      	ldr	r2, [pc, #92]	@ (8002764 <HAL_ADC_Start_DMA+0x1dc>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d11b      	bne.n	8002742 <HAL_ADC_Start_DMA+0x1ba>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d114      	bne.n	8002742 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689a      	ldr	r2, [r3, #8]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002726:	609a      	str	r2, [r3, #8]
 8002728:	e00b      	b.n	8002742 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800272e:	f043 0210 	orr.w	r2, r3, #16
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800273a:	f043 0201 	orr.w	r2, r3, #1
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3718      	adds	r7, #24
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	20000000 	.word	0x20000000
 8002750:	431bde83 	.word	0x431bde83
 8002754:	40012300 	.word	0x40012300
 8002758:	08002bed 	.word	0x08002bed
 800275c:	08002ca7 	.word	0x08002ca7
 8002760:	08002cc3 	.word	0x08002cc3
 8002764:	40012000 	.word	0x40012000

08002768 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800279a:	2300      	movs	r3, #0
 800279c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d101      	bne.n	80027ac <HAL_ADC_ConfigChannel+0x1c>
 80027a8:	2302      	movs	r3, #2
 80027aa:	e113      	b.n	80029d4 <HAL_ADC_ConfigChannel+0x244>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2b09      	cmp	r3, #9
 80027ba:	d925      	bls.n	8002808 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68d9      	ldr	r1, [r3, #12]
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	461a      	mov	r2, r3
 80027ca:	4613      	mov	r3, r2
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	4413      	add	r3, r2
 80027d0:	3b1e      	subs	r3, #30
 80027d2:	2207      	movs	r2, #7
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	43da      	mvns	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	400a      	ands	r2, r1
 80027e0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68d9      	ldr	r1, [r3, #12]
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	4618      	mov	r0, r3
 80027f4:	4603      	mov	r3, r0
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	4403      	add	r3, r0
 80027fa:	3b1e      	subs	r3, #30
 80027fc:	409a      	lsls	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	430a      	orrs	r2, r1
 8002804:	60da      	str	r2, [r3, #12]
 8002806:	e022      	b.n	800284e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6919      	ldr	r1, [r3, #16]
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	b29b      	uxth	r3, r3
 8002814:	461a      	mov	r2, r3
 8002816:	4613      	mov	r3, r2
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	4413      	add	r3, r2
 800281c:	2207      	movs	r2, #7
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	43da      	mvns	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	400a      	ands	r2, r1
 800282a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6919      	ldr	r1, [r3, #16]
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	689a      	ldr	r2, [r3, #8]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	b29b      	uxth	r3, r3
 800283c:	4618      	mov	r0, r3
 800283e:	4603      	mov	r3, r0
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	4403      	add	r3, r0
 8002844:	409a      	lsls	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	430a      	orrs	r2, r1
 800284c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	2b06      	cmp	r3, #6
 8002854:	d824      	bhi.n	80028a0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	4613      	mov	r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	4413      	add	r3, r2
 8002866:	3b05      	subs	r3, #5
 8002868:	221f      	movs	r2, #31
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	43da      	mvns	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	400a      	ands	r2, r1
 8002876:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	b29b      	uxth	r3, r3
 8002884:	4618      	mov	r0, r3
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685a      	ldr	r2, [r3, #4]
 800288a:	4613      	mov	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4413      	add	r3, r2
 8002890:	3b05      	subs	r3, #5
 8002892:	fa00 f203 	lsl.w	r2, r0, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	430a      	orrs	r2, r1
 800289c:	635a      	str	r2, [r3, #52]	@ 0x34
 800289e:	e04c      	b.n	800293a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	2b0c      	cmp	r3, #12
 80028a6:	d824      	bhi.n	80028f2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	4613      	mov	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	4413      	add	r3, r2
 80028b8:	3b23      	subs	r3, #35	@ 0x23
 80028ba:	221f      	movs	r2, #31
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	43da      	mvns	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	400a      	ands	r2, r1
 80028c8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	4618      	mov	r0, r3
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	4613      	mov	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4413      	add	r3, r2
 80028e2:	3b23      	subs	r3, #35	@ 0x23
 80028e4:	fa00 f203 	lsl.w	r2, r0, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	430a      	orrs	r2, r1
 80028ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80028f0:	e023      	b.n	800293a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	4613      	mov	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4413      	add	r3, r2
 8002902:	3b41      	subs	r3, #65	@ 0x41
 8002904:	221f      	movs	r2, #31
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	43da      	mvns	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	400a      	ands	r2, r1
 8002912:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	b29b      	uxth	r3, r3
 8002920:	4618      	mov	r0, r3
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685a      	ldr	r2, [r3, #4]
 8002926:	4613      	mov	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	3b41      	subs	r3, #65	@ 0x41
 800292e:	fa00 f203 	lsl.w	r2, r0, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	430a      	orrs	r2, r1
 8002938:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800293a:	4b29      	ldr	r3, [pc, #164]	@ (80029e0 <HAL_ADC_ConfigChannel+0x250>)
 800293c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a28      	ldr	r2, [pc, #160]	@ (80029e4 <HAL_ADC_ConfigChannel+0x254>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d10f      	bne.n	8002968 <HAL_ADC_ConfigChannel+0x1d8>
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2b12      	cmp	r3, #18
 800294e:	d10b      	bne.n	8002968 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a1d      	ldr	r2, [pc, #116]	@ (80029e4 <HAL_ADC_ConfigChannel+0x254>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d12b      	bne.n	80029ca <HAL_ADC_ConfigChannel+0x23a>
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a1c      	ldr	r2, [pc, #112]	@ (80029e8 <HAL_ADC_ConfigChannel+0x258>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d003      	beq.n	8002984 <HAL_ADC_ConfigChannel+0x1f4>
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2b11      	cmp	r3, #17
 8002982:	d122      	bne.n	80029ca <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a11      	ldr	r2, [pc, #68]	@ (80029e8 <HAL_ADC_ConfigChannel+0x258>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d111      	bne.n	80029ca <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80029a6:	4b11      	ldr	r3, [pc, #68]	@ (80029ec <HAL_ADC_ConfigChannel+0x25c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a11      	ldr	r2, [pc, #68]	@ (80029f0 <HAL_ADC_ConfigChannel+0x260>)
 80029ac:	fba2 2303 	umull	r2, r3, r2, r3
 80029b0:	0c9a      	lsrs	r2, r3, #18
 80029b2:	4613      	mov	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	4413      	add	r3, r2
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80029bc:	e002      	b.n	80029c4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	3b01      	subs	r3, #1
 80029c2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1f9      	bne.n	80029be <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3714      	adds	r7, #20
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	40012300 	.word	0x40012300
 80029e4:	40012000 	.word	0x40012000
 80029e8:	10000012 	.word	0x10000012
 80029ec:	20000000 	.word	0x20000000
 80029f0:	431bde83 	.word	0x431bde83

080029f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029fc:	4b79      	ldr	r3, [pc, #484]	@ (8002be4 <ADC_Init+0x1f0>)
 80029fe:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	685a      	ldr	r2, [r3, #4]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	431a      	orrs	r2, r3
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	685a      	ldr	r2, [r3, #4]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6859      	ldr	r1, [r3, #4]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	021a      	lsls	r2, r3, #8
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	685a      	ldr	r2, [r3, #4]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002a4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6859      	ldr	r1, [r3, #4]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	689a      	ldr	r2, [r3, #8]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6899      	ldr	r1, [r3, #8]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	68da      	ldr	r2, [r3, #12]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a86:	4a58      	ldr	r2, [pc, #352]	@ (8002be8 <ADC_Init+0x1f4>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d022      	beq.n	8002ad2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689a      	ldr	r2, [r3, #8]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a9a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6899      	ldr	r1, [r3, #8]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002abc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6899      	ldr	r1, [r3, #8]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	430a      	orrs	r2, r1
 8002ace:	609a      	str	r2, [r3, #8]
 8002ad0:	e00f      	b.n	8002af2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ae0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	689a      	ldr	r2, [r3, #8]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002af0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f022 0202 	bic.w	r2, r2, #2
 8002b00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	6899      	ldr	r1, [r3, #8]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	7e1b      	ldrb	r3, [r3, #24]
 8002b0c:	005a      	lsls	r2, r3, #1
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d01b      	beq.n	8002b58 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	685a      	ldr	r2, [r3, #4]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b2e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	685a      	ldr	r2, [r3, #4]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002b3e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6859      	ldr	r1, [r3, #4]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	035a      	lsls	r2, r3, #13
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	605a      	str	r2, [r3, #4]
 8002b56:	e007      	b.n	8002b68 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b66:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002b76:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	69db      	ldr	r3, [r3, #28]
 8002b82:	3b01      	subs	r3, #1
 8002b84:	051a      	lsls	r2, r3, #20
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002b9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6899      	ldr	r1, [r3, #8]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002baa:	025a      	lsls	r2, r3, #9
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bc2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6899      	ldr	r1, [r3, #8]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	029a      	lsls	r2, r3, #10
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	609a      	str	r2, [r3, #8]
}
 8002bd8:	bf00      	nop
 8002bda:	3714      	adds	r7, #20
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr
 8002be4:	40012300 	.word	0x40012300
 8002be8:	0f000001 	.word	0x0f000001

08002bec <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bf8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfe:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d13c      	bne.n	8002c80 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d12b      	bne.n	8002c78 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d127      	bne.n	8002c78 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c2e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d006      	beq.n	8002c44 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d119      	bne.n	8002c78 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	685a      	ldr	r2, [r3, #4]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f022 0220 	bic.w	r2, r2, #32
 8002c52:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c58:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c64:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d105      	bne.n	8002c78 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c70:	f043 0201 	orr.w	r2, r3, #1
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c78:	68f8      	ldr	r0, [r7, #12]
 8002c7a:	f7fe ff6f 	bl	8001b5c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c7e:	e00e      	b.n	8002c9e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c84:	f003 0310 	and.w	r3, r3, #16
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d003      	beq.n	8002c94 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f7ff fd75 	bl	800277c <HAL_ADC_ErrorCallback>
}
 8002c92:	e004      	b.n	8002c9e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	4798      	blx	r3
}
 8002c9e:	bf00      	nop
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b084      	sub	sp, #16
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cb2:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f7ff fd57 	bl	8002768 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cba:	bf00      	nop
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b084      	sub	sp, #16
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cce:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2240      	movs	r2, #64	@ 0x40
 8002cd4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cda:	f043 0204 	orr.w	r2, r3, #4
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f7ff fd4a 	bl	800277c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ce8:	bf00      	nop
 8002cea:	3710      	adds	r7, #16
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f003 0307 	and.w	r3, r3, #7
 8002cfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d00:	4b0c      	ldr	r3, [pc, #48]	@ (8002d34 <__NVIC_SetPriorityGrouping+0x44>)
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d06:	68ba      	ldr	r2, [r7, #8]
 8002d08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d22:	4a04      	ldr	r2, [pc, #16]	@ (8002d34 <__NVIC_SetPriorityGrouping+0x44>)
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	60d3      	str	r3, [r2, #12]
}
 8002d28:	bf00      	nop
 8002d2a:	3714      	adds	r7, #20
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr
 8002d34:	e000ed00 	.word	0xe000ed00

08002d38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d3c:	4b04      	ldr	r3, [pc, #16]	@ (8002d50 <__NVIC_GetPriorityGrouping+0x18>)
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	0a1b      	lsrs	r3, r3, #8
 8002d42:	f003 0307 	and.w	r3, r3, #7
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	e000ed00 	.word	0xe000ed00

08002d54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	db0b      	blt.n	8002d7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d66:	79fb      	ldrb	r3, [r7, #7]
 8002d68:	f003 021f 	and.w	r2, r3, #31
 8002d6c:	4907      	ldr	r1, [pc, #28]	@ (8002d8c <__NVIC_EnableIRQ+0x38>)
 8002d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d72:	095b      	lsrs	r3, r3, #5
 8002d74:	2001      	movs	r0, #1
 8002d76:	fa00 f202 	lsl.w	r2, r0, r2
 8002d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	e000e100 	.word	0xe000e100

08002d90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	4603      	mov	r3, r0
 8002d98:	6039      	str	r1, [r7, #0]
 8002d9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	db0a      	blt.n	8002dba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	b2da      	uxtb	r2, r3
 8002da8:	490c      	ldr	r1, [pc, #48]	@ (8002ddc <__NVIC_SetPriority+0x4c>)
 8002daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dae:	0112      	lsls	r2, r2, #4
 8002db0:	b2d2      	uxtb	r2, r2
 8002db2:	440b      	add	r3, r1
 8002db4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002db8:	e00a      	b.n	8002dd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	b2da      	uxtb	r2, r3
 8002dbe:	4908      	ldr	r1, [pc, #32]	@ (8002de0 <__NVIC_SetPriority+0x50>)
 8002dc0:	79fb      	ldrb	r3, [r7, #7]
 8002dc2:	f003 030f 	and.w	r3, r3, #15
 8002dc6:	3b04      	subs	r3, #4
 8002dc8:	0112      	lsls	r2, r2, #4
 8002dca:	b2d2      	uxtb	r2, r2
 8002dcc:	440b      	add	r3, r1
 8002dce:	761a      	strb	r2, [r3, #24]
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr
 8002ddc:	e000e100 	.word	0xe000e100
 8002de0:	e000ed00 	.word	0xe000ed00

08002de4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b089      	sub	sp, #36	@ 0x24
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f003 0307 	and.w	r3, r3, #7
 8002df6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	f1c3 0307 	rsb	r3, r3, #7
 8002dfe:	2b04      	cmp	r3, #4
 8002e00:	bf28      	it	cs
 8002e02:	2304      	movcs	r3, #4
 8002e04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	3304      	adds	r3, #4
 8002e0a:	2b06      	cmp	r3, #6
 8002e0c:	d902      	bls.n	8002e14 <NVIC_EncodePriority+0x30>
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	3b03      	subs	r3, #3
 8002e12:	e000      	b.n	8002e16 <NVIC_EncodePriority+0x32>
 8002e14:	2300      	movs	r3, #0
 8002e16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e18:	f04f 32ff 	mov.w	r2, #4294967295
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	43da      	mvns	r2, r3
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	401a      	ands	r2, r3
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	fa01 f303 	lsl.w	r3, r1, r3
 8002e36:	43d9      	mvns	r1, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e3c:	4313      	orrs	r3, r2
         );
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3724      	adds	r7, #36	@ 0x24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
	...

08002e4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	3b01      	subs	r3, #1
 8002e58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e5c:	d301      	bcc.n	8002e62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e00f      	b.n	8002e82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e62:	4a0a      	ldr	r2, [pc, #40]	@ (8002e8c <SysTick_Config+0x40>)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	3b01      	subs	r3, #1
 8002e68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e6a:	210f      	movs	r1, #15
 8002e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e70:	f7ff ff8e 	bl	8002d90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e74:	4b05      	ldr	r3, [pc, #20]	@ (8002e8c <SysTick_Config+0x40>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e7a:	4b04      	ldr	r3, [pc, #16]	@ (8002e8c <SysTick_Config+0x40>)
 8002e7c:	2207      	movs	r2, #7
 8002e7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	e000e010 	.word	0xe000e010

08002e90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f7ff ff29 	bl	8002cf0 <__NVIC_SetPriorityGrouping>
}
 8002e9e:	bf00      	nop
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b086      	sub	sp, #24
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	4603      	mov	r3, r0
 8002eae:	60b9      	str	r1, [r7, #8]
 8002eb0:	607a      	str	r2, [r7, #4]
 8002eb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002eb8:	f7ff ff3e 	bl	8002d38 <__NVIC_GetPriorityGrouping>
 8002ebc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	68b9      	ldr	r1, [r7, #8]
 8002ec2:	6978      	ldr	r0, [r7, #20]
 8002ec4:	f7ff ff8e 	bl	8002de4 <NVIC_EncodePriority>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ece:	4611      	mov	r1, r2
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff ff5d 	bl	8002d90 <__NVIC_SetPriority>
}
 8002ed6:	bf00      	nop
 8002ed8:	3718      	adds	r7, #24
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b082      	sub	sp, #8
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff ff31 	bl	8002d54 <__NVIC_EnableIRQ>
}
 8002ef2:	bf00      	nop
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b082      	sub	sp, #8
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f7ff ffa2 	bl	8002e4c <SysTick_Config>
 8002f08:	4603      	mov	r3, r0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
	...

08002f14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f20:	f7ff fabe 	bl	80024a0 <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d101      	bne.n	8002f30 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e099      	b.n	8003064 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2202      	movs	r2, #2
 8002f34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 0201 	bic.w	r2, r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f50:	e00f      	b.n	8002f72 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f52:	f7ff faa5 	bl	80024a0 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b05      	cmp	r3, #5
 8002f5e:	d908      	bls.n	8002f72 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2220      	movs	r2, #32
 8002f64:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2203      	movs	r2, #3
 8002f6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e078      	b.n	8003064 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1e8      	bne.n	8002f52 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f88:	697a      	ldr	r2, [r7, #20]
 8002f8a:	4b38      	ldr	r3, [pc, #224]	@ (800306c <HAL_DMA_Init+0x158>)
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685a      	ldr	r2, [r3, #4]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002faa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fb6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc8:	2b04      	cmp	r3, #4
 8002fca:	d107      	bne.n	8002fdc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	f023 0307 	bic.w	r3, r3, #7
 8002ff2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003002:	2b04      	cmp	r3, #4
 8003004:	d117      	bne.n	8003036 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	4313      	orrs	r3, r2
 800300e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00e      	beq.n	8003036 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 fa6f 	bl	80034fc <DMA_CheckFifoParam>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d008      	beq.n	8003036 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2240      	movs	r2, #64	@ 0x40
 8003028:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003032:	2301      	movs	r3, #1
 8003034:	e016      	b.n	8003064 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 fa26 	bl	8003490 <DMA_CalcBaseAndBitshift>
 8003044:	4603      	mov	r3, r0
 8003046:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800304c:	223f      	movs	r2, #63	@ 0x3f
 800304e:	409a      	lsls	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3718      	adds	r7, #24
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	f010803f 	.word	0xf010803f

08003070 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
 800307c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800307e:	2300      	movs	r3, #0
 8003080:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003086:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800308e:	2b01      	cmp	r3, #1
 8003090:	d101      	bne.n	8003096 <HAL_DMA_Start_IT+0x26>
 8003092:	2302      	movs	r3, #2
 8003094:	e040      	b.n	8003118 <HAL_DMA_Start_IT+0xa8>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d12f      	bne.n	800310a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2202      	movs	r2, #2
 80030ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	68b9      	ldr	r1, [r7, #8]
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 f9b8 	bl	8003434 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030c8:	223f      	movs	r2, #63	@ 0x3f
 80030ca:	409a      	lsls	r2, r3
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f042 0216 	orr.w	r2, r2, #22
 80030de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d007      	beq.n	80030f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f042 0208 	orr.w	r2, r2, #8
 80030f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f042 0201 	orr.w	r2, r2, #1
 8003106:	601a      	str	r2, [r3, #0]
 8003108:	e005      	b.n	8003116 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003112:	2302      	movs	r3, #2
 8003114:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003116:	7dfb      	ldrb	r3, [r7, #23]
}
 8003118:	4618      	mov	r0, r3
 800311a:	3718      	adds	r7, #24
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b086      	sub	sp, #24
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003128:	2300      	movs	r3, #0
 800312a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800312c:	4b8e      	ldr	r3, [pc, #568]	@ (8003368 <HAL_DMA_IRQHandler+0x248>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a8e      	ldr	r2, [pc, #568]	@ (800336c <HAL_DMA_IRQHandler+0x24c>)
 8003132:	fba2 2303 	umull	r2, r3, r2, r3
 8003136:	0a9b      	lsrs	r3, r3, #10
 8003138:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800313e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800314a:	2208      	movs	r2, #8
 800314c:	409a      	lsls	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	4013      	ands	r3, r2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d01a      	beq.n	800318c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0304 	and.w	r3, r3, #4
 8003160:	2b00      	cmp	r3, #0
 8003162:	d013      	beq.n	800318c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f022 0204 	bic.w	r2, r2, #4
 8003172:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003178:	2208      	movs	r2, #8
 800317a:	409a      	lsls	r2, r3
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003184:	f043 0201 	orr.w	r2, r3, #1
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003190:	2201      	movs	r2, #1
 8003192:	409a      	lsls	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	4013      	ands	r3, r2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d012      	beq.n	80031c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00b      	beq.n	80031c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ae:	2201      	movs	r2, #1
 80031b0:	409a      	lsls	r2, r3
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ba:	f043 0202 	orr.w	r2, r3, #2
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031c6:	2204      	movs	r2, #4
 80031c8:	409a      	lsls	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	4013      	ands	r3, r2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d012      	beq.n	80031f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00b      	beq.n	80031f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031e4:	2204      	movs	r2, #4
 80031e6:	409a      	lsls	r2, r3
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031f0:	f043 0204 	orr.w	r2, r3, #4
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031fc:	2210      	movs	r2, #16
 80031fe:	409a      	lsls	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	4013      	ands	r3, r2
 8003204:	2b00      	cmp	r3, #0
 8003206:	d043      	beq.n	8003290 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0308 	and.w	r3, r3, #8
 8003212:	2b00      	cmp	r3, #0
 8003214:	d03c      	beq.n	8003290 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800321a:	2210      	movs	r2, #16
 800321c:	409a      	lsls	r2, r3
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d018      	beq.n	8003262 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d108      	bne.n	8003250 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003242:	2b00      	cmp	r3, #0
 8003244:	d024      	beq.n	8003290 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	4798      	blx	r3
 800324e:	e01f      	b.n	8003290 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003254:	2b00      	cmp	r3, #0
 8003256:	d01b      	beq.n	8003290 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	4798      	blx	r3
 8003260:	e016      	b.n	8003290 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800326c:	2b00      	cmp	r3, #0
 800326e:	d107      	bne.n	8003280 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 0208 	bic.w	r2, r2, #8
 800327e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003284:	2b00      	cmp	r3, #0
 8003286:	d003      	beq.n	8003290 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003294:	2220      	movs	r2, #32
 8003296:	409a      	lsls	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4013      	ands	r3, r2
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 808f 	beq.w	80033c0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0310 	and.w	r3, r3, #16
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 8087 	beq.w	80033c0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032b6:	2220      	movs	r2, #32
 80032b8:	409a      	lsls	r2, r3
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b05      	cmp	r3, #5
 80032c8:	d136      	bne.n	8003338 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f022 0216 	bic.w	r2, r2, #22
 80032d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	695a      	ldr	r2, [r3, #20]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80032e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d103      	bne.n	80032fa <HAL_DMA_IRQHandler+0x1da>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d007      	beq.n	800330a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 0208 	bic.w	r2, r2, #8
 8003308:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800330e:	223f      	movs	r2, #63	@ 0x3f
 8003310:	409a      	lsls	r2, r3
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800332a:	2b00      	cmp	r3, #0
 800332c:	d07e      	beq.n	800342c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	4798      	blx	r3
        }
        return;
 8003336:	e079      	b.n	800342c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d01d      	beq.n	8003382 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10d      	bne.n	8003370 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003358:	2b00      	cmp	r3, #0
 800335a:	d031      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	4798      	blx	r3
 8003364:	e02c      	b.n	80033c0 <HAL_DMA_IRQHandler+0x2a0>
 8003366:	bf00      	nop
 8003368:	20000000 	.word	0x20000000
 800336c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003374:	2b00      	cmp	r3, #0
 8003376:	d023      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	4798      	blx	r3
 8003380:	e01e      	b.n	80033c0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800338c:	2b00      	cmp	r3, #0
 800338e:	d10f      	bne.n	80033b0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 0210 	bic.w	r2, r2, #16
 800339e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d003      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d032      	beq.n	800342e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d022      	beq.n	800341a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2205      	movs	r2, #5
 80033d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f022 0201 	bic.w	r2, r2, #1
 80033ea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	3301      	adds	r3, #1
 80033f0:	60bb      	str	r3, [r7, #8]
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d307      	bcc.n	8003408 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1f2      	bne.n	80033ec <HAL_DMA_IRQHandler+0x2cc>
 8003406:	e000      	b.n	800340a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003408:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800341e:	2b00      	cmp	r3, #0
 8003420:	d005      	beq.n	800342e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	4798      	blx	r3
 800342a:	e000      	b.n	800342e <HAL_DMA_IRQHandler+0x30e>
        return;
 800342c:	bf00      	nop
    }
  }
}
 800342e:	3718      	adds	r7, #24
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003434:	b480      	push	{r7}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
 8003440:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003450:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	2b40      	cmp	r3, #64	@ 0x40
 8003460:	d108      	bne.n	8003474 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003472:	e007      	b.n	8003484 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	60da      	str	r2, [r3, #12]
}
 8003484:	bf00      	nop
 8003486:	3714      	adds	r7, #20
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	b2db      	uxtb	r3, r3
 800349e:	3b10      	subs	r3, #16
 80034a0:	4a14      	ldr	r2, [pc, #80]	@ (80034f4 <DMA_CalcBaseAndBitshift+0x64>)
 80034a2:	fba2 2303 	umull	r2, r3, r2, r3
 80034a6:	091b      	lsrs	r3, r3, #4
 80034a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80034aa:	4a13      	ldr	r2, [pc, #76]	@ (80034f8 <DMA_CalcBaseAndBitshift+0x68>)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	4413      	add	r3, r2
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	461a      	mov	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2b03      	cmp	r3, #3
 80034bc:	d909      	bls.n	80034d2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80034c6:	f023 0303 	bic.w	r3, r3, #3
 80034ca:	1d1a      	adds	r2, r3, #4
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	659a      	str	r2, [r3, #88]	@ 0x58
 80034d0:	e007      	b.n	80034e2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80034da:	f023 0303 	bic.w	r3, r3, #3
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3714      	adds	r7, #20
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	aaaaaaab 	.word	0xaaaaaaab
 80034f8:	0800ad38 	.word	0x0800ad38

080034fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003504:	2300      	movs	r3, #0
 8003506:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800350c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d11f      	bne.n	8003556 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	2b03      	cmp	r3, #3
 800351a:	d856      	bhi.n	80035ca <DMA_CheckFifoParam+0xce>
 800351c:	a201      	add	r2, pc, #4	@ (adr r2, 8003524 <DMA_CheckFifoParam+0x28>)
 800351e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003522:	bf00      	nop
 8003524:	08003535 	.word	0x08003535
 8003528:	08003547 	.word	0x08003547
 800352c:	08003535 	.word	0x08003535
 8003530:	080035cb 	.word	0x080035cb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003538:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d046      	beq.n	80035ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003544:	e043      	b.n	80035ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800354a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800354e:	d140      	bne.n	80035d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003554:	e03d      	b.n	80035d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800355e:	d121      	bne.n	80035a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	2b03      	cmp	r3, #3
 8003564:	d837      	bhi.n	80035d6 <DMA_CheckFifoParam+0xda>
 8003566:	a201      	add	r2, pc, #4	@ (adr r2, 800356c <DMA_CheckFifoParam+0x70>)
 8003568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800356c:	0800357d 	.word	0x0800357d
 8003570:	08003583 	.word	0x08003583
 8003574:	0800357d 	.word	0x0800357d
 8003578:	08003595 	.word	0x08003595
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	73fb      	strb	r3, [r7, #15]
      break;
 8003580:	e030      	b.n	80035e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003586:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d025      	beq.n	80035da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003592:	e022      	b.n	80035da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003598:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800359c:	d11f      	bne.n	80035de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80035a2:	e01c      	b.n	80035de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d903      	bls.n	80035b2 <DMA_CheckFifoParam+0xb6>
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	2b03      	cmp	r3, #3
 80035ae:	d003      	beq.n	80035b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80035b0:	e018      	b.n	80035e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	73fb      	strb	r3, [r7, #15]
      break;
 80035b6:	e015      	b.n	80035e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00e      	beq.n	80035e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	73fb      	strb	r3, [r7, #15]
      break;
 80035c8:	e00b      	b.n	80035e2 <DMA_CheckFifoParam+0xe6>
      break;
 80035ca:	bf00      	nop
 80035cc:	e00a      	b.n	80035e4 <DMA_CheckFifoParam+0xe8>
      break;
 80035ce:	bf00      	nop
 80035d0:	e008      	b.n	80035e4 <DMA_CheckFifoParam+0xe8>
      break;
 80035d2:	bf00      	nop
 80035d4:	e006      	b.n	80035e4 <DMA_CheckFifoParam+0xe8>
      break;
 80035d6:	bf00      	nop
 80035d8:	e004      	b.n	80035e4 <DMA_CheckFifoParam+0xe8>
      break;
 80035da:	bf00      	nop
 80035dc:	e002      	b.n	80035e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80035de:	bf00      	nop
 80035e0:	e000      	b.n	80035e4 <DMA_CheckFifoParam+0xe8>
      break;
 80035e2:	bf00      	nop
    }
  } 
  
  return status; 
 80035e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3714      	adds	r7, #20
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop

080035f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b089      	sub	sp, #36	@ 0x24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035fe:	2300      	movs	r3, #0
 8003600:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003602:	2300      	movs	r3, #0
 8003604:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003606:	2300      	movs	r3, #0
 8003608:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800360a:	2300      	movs	r3, #0
 800360c:	61fb      	str	r3, [r7, #28]
 800360e:	e159      	b.n	80038c4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003610:	2201      	movs	r2, #1
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	fa02 f303 	lsl.w	r3, r2, r3
 8003618:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	4013      	ands	r3, r2
 8003622:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	429a      	cmp	r2, r3
 800362a:	f040 8148 	bne.w	80038be <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f003 0303 	and.w	r3, r3, #3
 8003636:	2b01      	cmp	r3, #1
 8003638:	d005      	beq.n	8003646 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003642:	2b02      	cmp	r3, #2
 8003644:	d130      	bne.n	80036a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	2203      	movs	r2, #3
 8003652:	fa02 f303 	lsl.w	r3, r2, r3
 8003656:	43db      	mvns	r3, r3
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	4013      	ands	r3, r2
 800365c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	68da      	ldr	r2, [r3, #12]
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	fa02 f303 	lsl.w	r3, r2, r3
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	4313      	orrs	r3, r2
 800366e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800367c:	2201      	movs	r2, #1
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	fa02 f303 	lsl.w	r3, r2, r3
 8003684:	43db      	mvns	r3, r3
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	4013      	ands	r3, r2
 800368a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	091b      	lsrs	r3, r3, #4
 8003692:	f003 0201 	and.w	r2, r3, #1
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	fa02 f303 	lsl.w	r3, r2, r3
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	4313      	orrs	r3, r2
 80036a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f003 0303 	and.w	r3, r3, #3
 80036b0:	2b03      	cmp	r3, #3
 80036b2:	d017      	beq.n	80036e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	2203      	movs	r2, #3
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	43db      	mvns	r3, r3
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	4013      	ands	r3, r2
 80036ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	689a      	ldr	r2, [r3, #8]
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	fa02 f303 	lsl.w	r3, r2, r3
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	4313      	orrs	r3, r2
 80036dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f003 0303 	and.w	r3, r3, #3
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d123      	bne.n	8003738 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	08da      	lsrs	r2, r3, #3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	3208      	adds	r2, #8
 80036f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	f003 0307 	and.w	r3, r3, #7
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	220f      	movs	r2, #15
 8003708:	fa02 f303 	lsl.w	r3, r2, r3
 800370c:	43db      	mvns	r3, r3
 800370e:	69ba      	ldr	r2, [r7, #24]
 8003710:	4013      	ands	r3, r2
 8003712:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	691a      	ldr	r2, [r3, #16]
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	f003 0307 	and.w	r3, r3, #7
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	fa02 f303 	lsl.w	r3, r2, r3
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	4313      	orrs	r3, r2
 8003728:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	08da      	lsrs	r2, r3, #3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	3208      	adds	r2, #8
 8003732:	69b9      	ldr	r1, [r7, #24]
 8003734:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	2203      	movs	r2, #3
 8003744:	fa02 f303 	lsl.w	r3, r2, r3
 8003748:	43db      	mvns	r3, r3
 800374a:	69ba      	ldr	r2, [r7, #24]
 800374c:	4013      	ands	r3, r2
 800374e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f003 0203 	and.w	r2, r3, #3
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	fa02 f303 	lsl.w	r3, r2, r3
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	4313      	orrs	r3, r2
 8003764:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003774:	2b00      	cmp	r3, #0
 8003776:	f000 80a2 	beq.w	80038be <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800377a:	2300      	movs	r3, #0
 800377c:	60fb      	str	r3, [r7, #12]
 800377e:	4b57      	ldr	r3, [pc, #348]	@ (80038dc <HAL_GPIO_Init+0x2e8>)
 8003780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003782:	4a56      	ldr	r2, [pc, #344]	@ (80038dc <HAL_GPIO_Init+0x2e8>)
 8003784:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003788:	6453      	str	r3, [r2, #68]	@ 0x44
 800378a:	4b54      	ldr	r3, [pc, #336]	@ (80038dc <HAL_GPIO_Init+0x2e8>)
 800378c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800378e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003792:	60fb      	str	r3, [r7, #12]
 8003794:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003796:	4a52      	ldr	r2, [pc, #328]	@ (80038e0 <HAL_GPIO_Init+0x2ec>)
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	089b      	lsrs	r3, r3, #2
 800379c:	3302      	adds	r3, #2
 800379e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	f003 0303 	and.w	r3, r3, #3
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	220f      	movs	r2, #15
 80037ae:	fa02 f303 	lsl.w	r3, r2, r3
 80037b2:	43db      	mvns	r3, r3
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	4013      	ands	r3, r2
 80037b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a49      	ldr	r2, [pc, #292]	@ (80038e4 <HAL_GPIO_Init+0x2f0>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d019      	beq.n	80037f6 <HAL_GPIO_Init+0x202>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a48      	ldr	r2, [pc, #288]	@ (80038e8 <HAL_GPIO_Init+0x2f4>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d013      	beq.n	80037f2 <HAL_GPIO_Init+0x1fe>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a47      	ldr	r2, [pc, #284]	@ (80038ec <HAL_GPIO_Init+0x2f8>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d00d      	beq.n	80037ee <HAL_GPIO_Init+0x1fa>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a46      	ldr	r2, [pc, #280]	@ (80038f0 <HAL_GPIO_Init+0x2fc>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d007      	beq.n	80037ea <HAL_GPIO_Init+0x1f6>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a45      	ldr	r2, [pc, #276]	@ (80038f4 <HAL_GPIO_Init+0x300>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d101      	bne.n	80037e6 <HAL_GPIO_Init+0x1f2>
 80037e2:	2304      	movs	r3, #4
 80037e4:	e008      	b.n	80037f8 <HAL_GPIO_Init+0x204>
 80037e6:	2307      	movs	r3, #7
 80037e8:	e006      	b.n	80037f8 <HAL_GPIO_Init+0x204>
 80037ea:	2303      	movs	r3, #3
 80037ec:	e004      	b.n	80037f8 <HAL_GPIO_Init+0x204>
 80037ee:	2302      	movs	r3, #2
 80037f0:	e002      	b.n	80037f8 <HAL_GPIO_Init+0x204>
 80037f2:	2301      	movs	r3, #1
 80037f4:	e000      	b.n	80037f8 <HAL_GPIO_Init+0x204>
 80037f6:	2300      	movs	r3, #0
 80037f8:	69fa      	ldr	r2, [r7, #28]
 80037fa:	f002 0203 	and.w	r2, r2, #3
 80037fe:	0092      	lsls	r2, r2, #2
 8003800:	4093      	lsls	r3, r2
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	4313      	orrs	r3, r2
 8003806:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003808:	4935      	ldr	r1, [pc, #212]	@ (80038e0 <HAL_GPIO_Init+0x2ec>)
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	089b      	lsrs	r3, r3, #2
 800380e:	3302      	adds	r3, #2
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003816:	4b38      	ldr	r3, [pc, #224]	@ (80038f8 <HAL_GPIO_Init+0x304>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	43db      	mvns	r3, r3
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	4013      	ands	r3, r2
 8003824:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d003      	beq.n	800383a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	4313      	orrs	r3, r2
 8003838:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800383a:	4a2f      	ldr	r2, [pc, #188]	@ (80038f8 <HAL_GPIO_Init+0x304>)
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003840:	4b2d      	ldr	r3, [pc, #180]	@ (80038f8 <HAL_GPIO_Init+0x304>)
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	43db      	mvns	r3, r3
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	4013      	ands	r3, r2
 800384e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d003      	beq.n	8003864 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800385c:	69ba      	ldr	r2, [r7, #24]
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	4313      	orrs	r3, r2
 8003862:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003864:	4a24      	ldr	r2, [pc, #144]	@ (80038f8 <HAL_GPIO_Init+0x304>)
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800386a:	4b23      	ldr	r3, [pc, #140]	@ (80038f8 <HAL_GPIO_Init+0x304>)
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	43db      	mvns	r3, r3
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	4013      	ands	r3, r2
 8003878:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d003      	beq.n	800388e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	4313      	orrs	r3, r2
 800388c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800388e:	4a1a      	ldr	r2, [pc, #104]	@ (80038f8 <HAL_GPIO_Init+0x304>)
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003894:	4b18      	ldr	r3, [pc, #96]	@ (80038f8 <HAL_GPIO_Init+0x304>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	43db      	mvns	r3, r3
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	4013      	ands	r3, r2
 80038a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d003      	beq.n	80038b8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038b8:	4a0f      	ldr	r2, [pc, #60]	@ (80038f8 <HAL_GPIO_Init+0x304>)
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	3301      	adds	r3, #1
 80038c2:	61fb      	str	r3, [r7, #28]
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	2b0f      	cmp	r3, #15
 80038c8:	f67f aea2 	bls.w	8003610 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038cc:	bf00      	nop
 80038ce:	bf00      	nop
 80038d0:	3724      	adds	r7, #36	@ 0x24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	40023800 	.word	0x40023800
 80038e0:	40013800 	.word	0x40013800
 80038e4:	40020000 	.word	0x40020000
 80038e8:	40020400 	.word	0x40020400
 80038ec:	40020800 	.word	0x40020800
 80038f0:	40020c00 	.word	0x40020c00
 80038f4:	40021000 	.word	0x40021000
 80038f8:	40013c00 	.word	0x40013c00

080038fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	460b      	mov	r3, r1
 8003906:	807b      	strh	r3, [r7, #2]
 8003908:	4613      	mov	r3, r2
 800390a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800390c:	787b      	ldrb	r3, [r7, #1]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d003      	beq.n	800391a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003912:	887a      	ldrh	r2, [r7, #2]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003918:	e003      	b.n	8003922 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800391a:	887b      	ldrh	r3, [r7, #2]
 800391c:	041a      	lsls	r2, r3, #16
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	619a      	str	r2, [r3, #24]
}
 8003922:	bf00      	nop
 8003924:	370c      	adds	r7, #12
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr

0800392e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800392e:	b480      	push	{r7}
 8003930:	b085      	sub	sp, #20
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
 8003936:	460b      	mov	r3, r1
 8003938:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003940:	887a      	ldrh	r2, [r7, #2]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	4013      	ands	r3, r2
 8003946:	041a      	lsls	r2, r3, #16
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	43d9      	mvns	r1, r3
 800394c:	887b      	ldrh	r3, [r7, #2]
 800394e:	400b      	ands	r3, r1
 8003950:	431a      	orrs	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	619a      	str	r2, [r3, #24]
}
 8003956:	bf00      	nop
 8003958:	3714      	adds	r7, #20
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
	...

08003964 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d101      	bne.n	8003976 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e12b      	b.n	8003bce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d106      	bne.n	8003990 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f7fe fade 	bl	8001f4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2224      	movs	r2, #36	@ 0x24
 8003994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 0201 	bic.w	r2, r2, #1
 80039a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80039b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80039c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039c8:	f001 ff92 	bl	80058f0 <HAL_RCC_GetPCLK1Freq>
 80039cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	4a81      	ldr	r2, [pc, #516]	@ (8003bd8 <HAL_I2C_Init+0x274>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d807      	bhi.n	80039e8 <HAL_I2C_Init+0x84>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	4a80      	ldr	r2, [pc, #512]	@ (8003bdc <HAL_I2C_Init+0x278>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	bf94      	ite	ls
 80039e0:	2301      	movls	r3, #1
 80039e2:	2300      	movhi	r3, #0
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	e006      	b.n	80039f6 <HAL_I2C_Init+0x92>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	4a7d      	ldr	r2, [pc, #500]	@ (8003be0 <HAL_I2C_Init+0x27c>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	bf94      	ite	ls
 80039f0:	2301      	movls	r3, #1
 80039f2:	2300      	movhi	r3, #0
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e0e7      	b.n	8003bce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	4a78      	ldr	r2, [pc, #480]	@ (8003be4 <HAL_I2C_Init+0x280>)
 8003a02:	fba2 2303 	umull	r2, r3, r2, r3
 8003a06:	0c9b      	lsrs	r3, r3, #18
 8003a08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68ba      	ldr	r2, [r7, #8]
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	6a1b      	ldr	r3, [r3, #32]
 8003a24:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	4a6a      	ldr	r2, [pc, #424]	@ (8003bd8 <HAL_I2C_Init+0x274>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d802      	bhi.n	8003a38 <HAL_I2C_Init+0xd4>
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	3301      	adds	r3, #1
 8003a36:	e009      	b.n	8003a4c <HAL_I2C_Init+0xe8>
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003a3e:	fb02 f303 	mul.w	r3, r2, r3
 8003a42:	4a69      	ldr	r2, [pc, #420]	@ (8003be8 <HAL_I2C_Init+0x284>)
 8003a44:	fba2 2303 	umull	r2, r3, r2, r3
 8003a48:	099b      	lsrs	r3, r3, #6
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	6812      	ldr	r2, [r2, #0]
 8003a50:	430b      	orrs	r3, r1
 8003a52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	69db      	ldr	r3, [r3, #28]
 8003a5a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003a5e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	495c      	ldr	r1, [pc, #368]	@ (8003bd8 <HAL_I2C_Init+0x274>)
 8003a68:	428b      	cmp	r3, r1
 8003a6a:	d819      	bhi.n	8003aa0 <HAL_I2C_Init+0x13c>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	1e59      	subs	r1, r3, #1
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a7a:	1c59      	adds	r1, r3, #1
 8003a7c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003a80:	400b      	ands	r3, r1
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00a      	beq.n	8003a9c <HAL_I2C_Init+0x138>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	1e59      	subs	r1, r3, #1
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	005b      	lsls	r3, r3, #1
 8003a90:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a94:	3301      	adds	r3, #1
 8003a96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a9a:	e051      	b.n	8003b40 <HAL_I2C_Init+0x1dc>
 8003a9c:	2304      	movs	r3, #4
 8003a9e:	e04f      	b.n	8003b40 <HAL_I2C_Init+0x1dc>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d111      	bne.n	8003acc <HAL_I2C_Init+0x168>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	1e58      	subs	r0, r3, #1
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6859      	ldr	r1, [r3, #4]
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	440b      	add	r3, r1
 8003ab6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aba:	3301      	adds	r3, #1
 8003abc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	bf0c      	ite	eq
 8003ac4:	2301      	moveq	r3, #1
 8003ac6:	2300      	movne	r3, #0
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	e012      	b.n	8003af2 <HAL_I2C_Init+0x18e>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	1e58      	subs	r0, r3, #1
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6859      	ldr	r1, [r3, #4]
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	440b      	add	r3, r1
 8003ada:	0099      	lsls	r1, r3, #2
 8003adc:	440b      	add	r3, r1
 8003ade:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	bf0c      	ite	eq
 8003aec:	2301      	moveq	r3, #1
 8003aee:	2300      	movne	r3, #0
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <HAL_I2C_Init+0x196>
 8003af6:	2301      	movs	r3, #1
 8003af8:	e022      	b.n	8003b40 <HAL_I2C_Init+0x1dc>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d10e      	bne.n	8003b20 <HAL_I2C_Init+0x1bc>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	1e58      	subs	r0, r3, #1
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6859      	ldr	r1, [r3, #4]
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	005b      	lsls	r3, r3, #1
 8003b0e:	440b      	add	r3, r1
 8003b10:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b14:	3301      	adds	r3, #1
 8003b16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b1e:	e00f      	b.n	8003b40 <HAL_I2C_Init+0x1dc>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	1e58      	subs	r0, r3, #1
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6859      	ldr	r1, [r3, #4]
 8003b28:	460b      	mov	r3, r1
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	440b      	add	r3, r1
 8003b2e:	0099      	lsls	r1, r3, #2
 8003b30:	440b      	add	r3, r1
 8003b32:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b36:	3301      	adds	r3, #1
 8003b38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b3c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b40:	6879      	ldr	r1, [r7, #4]
 8003b42:	6809      	ldr	r1, [r1, #0]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	69da      	ldr	r2, [r3, #28]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	430a      	orrs	r2, r1
 8003b62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003b6e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	6911      	ldr	r1, [r2, #16]
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	68d2      	ldr	r2, [r2, #12]
 8003b7a:	4311      	orrs	r1, r2
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	6812      	ldr	r2, [r2, #0]
 8003b80:	430b      	orrs	r3, r1
 8003b82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	695a      	ldr	r2, [r3, #20]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	431a      	orrs	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f042 0201 	orr.w	r2, r2, #1
 8003bae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2220      	movs	r2, #32
 8003bba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	000186a0 	.word	0x000186a0
 8003bdc:	001e847f 	.word	0x001e847f
 8003be0:	003d08ff 	.word	0x003d08ff
 8003be4:	431bde83 	.word	0x431bde83
 8003be8:	10624dd3 	.word	0x10624dd3

08003bec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af02      	add	r7, sp, #8
 8003bf2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e101      	b.n	8003e02 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d106      	bne.n	8003c1e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f006 fce9 	bl	800a5f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2203      	movs	r2, #3
 8003c22:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c2c:	d102      	bne.n	8003c34 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f003 f8ca 	bl	8006dd2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6818      	ldr	r0, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	7c1a      	ldrb	r2, [r3, #16]
 8003c46:	f88d 2000 	strb.w	r2, [sp]
 8003c4a:	3304      	adds	r3, #4
 8003c4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c4e:	f002 ffa9 	bl	8006ba4 <USB_CoreInit>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d005      	beq.n	8003c64 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e0ce      	b.n	8003e02 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2100      	movs	r1, #0
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f003 f8c2 	bl	8006df4 <USB_SetCurrentMode>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d005      	beq.n	8003c82 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2202      	movs	r2, #2
 8003c7a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e0bf      	b.n	8003e02 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c82:	2300      	movs	r3, #0
 8003c84:	73fb      	strb	r3, [r7, #15]
 8003c86:	e04a      	b.n	8003d1e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003c88:	7bfa      	ldrb	r2, [r7, #15]
 8003c8a:	6879      	ldr	r1, [r7, #4]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	4413      	add	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	440b      	add	r3, r1
 8003c96:	3315      	adds	r3, #21
 8003c98:	2201      	movs	r2, #1
 8003c9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003c9c:	7bfa      	ldrb	r2, [r7, #15]
 8003c9e:	6879      	ldr	r1, [r7, #4]
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	00db      	lsls	r3, r3, #3
 8003ca4:	4413      	add	r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	440b      	add	r3, r1
 8003caa:	3314      	adds	r3, #20
 8003cac:	7bfa      	ldrb	r2, [r7, #15]
 8003cae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003cb0:	7bfa      	ldrb	r2, [r7, #15]
 8003cb2:	7bfb      	ldrb	r3, [r7, #15]
 8003cb4:	b298      	uxth	r0, r3
 8003cb6:	6879      	ldr	r1, [r7, #4]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	00db      	lsls	r3, r3, #3
 8003cbc:	4413      	add	r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	440b      	add	r3, r1
 8003cc2:	332e      	adds	r3, #46	@ 0x2e
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003cc8:	7bfa      	ldrb	r2, [r7, #15]
 8003cca:	6879      	ldr	r1, [r7, #4]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	4413      	add	r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	440b      	add	r3, r1
 8003cd6:	3318      	adds	r3, #24
 8003cd8:	2200      	movs	r2, #0
 8003cda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003cdc:	7bfa      	ldrb	r2, [r7, #15]
 8003cde:	6879      	ldr	r1, [r7, #4]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	4413      	add	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	440b      	add	r3, r1
 8003cea:	331c      	adds	r3, #28
 8003cec:	2200      	movs	r2, #0
 8003cee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003cf0:	7bfa      	ldrb	r2, [r7, #15]
 8003cf2:	6879      	ldr	r1, [r7, #4]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	00db      	lsls	r3, r3, #3
 8003cf8:	4413      	add	r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	440b      	add	r3, r1
 8003cfe:	3320      	adds	r3, #32
 8003d00:	2200      	movs	r2, #0
 8003d02:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003d04:	7bfa      	ldrb	r2, [r7, #15]
 8003d06:	6879      	ldr	r1, [r7, #4]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	00db      	lsls	r3, r3, #3
 8003d0c:	4413      	add	r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	440b      	add	r3, r1
 8003d12:	3324      	adds	r3, #36	@ 0x24
 8003d14:	2200      	movs	r2, #0
 8003d16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d18:	7bfb      	ldrb	r3, [r7, #15]
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	73fb      	strb	r3, [r7, #15]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	791b      	ldrb	r3, [r3, #4]
 8003d22:	7bfa      	ldrb	r2, [r7, #15]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d3af      	bcc.n	8003c88 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d28:	2300      	movs	r3, #0
 8003d2a:	73fb      	strb	r3, [r7, #15]
 8003d2c:	e044      	b.n	8003db8 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003d2e:	7bfa      	ldrb	r2, [r7, #15]
 8003d30:	6879      	ldr	r1, [r7, #4]
 8003d32:	4613      	mov	r3, r2
 8003d34:	00db      	lsls	r3, r3, #3
 8003d36:	4413      	add	r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	440b      	add	r3, r1
 8003d3c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003d40:	2200      	movs	r2, #0
 8003d42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003d44:	7bfa      	ldrb	r2, [r7, #15]
 8003d46:	6879      	ldr	r1, [r7, #4]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	00db      	lsls	r3, r3, #3
 8003d4c:	4413      	add	r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	440b      	add	r3, r1
 8003d52:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003d56:	7bfa      	ldrb	r2, [r7, #15]
 8003d58:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003d5a:	7bfa      	ldrb	r2, [r7, #15]
 8003d5c:	6879      	ldr	r1, [r7, #4]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	00db      	lsls	r3, r3, #3
 8003d62:	4413      	add	r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	440b      	add	r3, r1
 8003d68:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003d70:	7bfa      	ldrb	r2, [r7, #15]
 8003d72:	6879      	ldr	r1, [r7, #4]
 8003d74:	4613      	mov	r3, r2
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	4413      	add	r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	440b      	add	r3, r1
 8003d7e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003d82:	2200      	movs	r2, #0
 8003d84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003d86:	7bfa      	ldrb	r2, [r7, #15]
 8003d88:	6879      	ldr	r1, [r7, #4]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	00db      	lsls	r3, r3, #3
 8003d8e:	4413      	add	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	440b      	add	r3, r1
 8003d94:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003d98:	2200      	movs	r2, #0
 8003d9a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003d9c:	7bfa      	ldrb	r2, [r7, #15]
 8003d9e:	6879      	ldr	r1, [r7, #4]
 8003da0:	4613      	mov	r3, r2
 8003da2:	00db      	lsls	r3, r3, #3
 8003da4:	4413      	add	r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	440b      	add	r3, r1
 8003daa:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003dae:	2200      	movs	r2, #0
 8003db0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003db2:	7bfb      	ldrb	r3, [r7, #15]
 8003db4:	3301      	adds	r3, #1
 8003db6:	73fb      	strb	r3, [r7, #15]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	791b      	ldrb	r3, [r3, #4]
 8003dbc:	7bfa      	ldrb	r2, [r7, #15]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d3b5      	bcc.n	8003d2e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6818      	ldr	r0, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	7c1a      	ldrb	r2, [r3, #16]
 8003dca:	f88d 2000 	strb.w	r2, [sp]
 8003dce:	3304      	adds	r3, #4
 8003dd0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003dd2:	f003 f85b 	bl	8006e8c <USB_DevInit>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d005      	beq.n	8003de8 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2202      	movs	r2, #2
 8003de0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e00c      	b.n	8003e02 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f004 f8a5 	bl	8007f4a <USB_DevDisconnect>

  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b084      	sub	sp, #16
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d101      	bne.n	8003e26 <HAL_PCD_Start+0x1c>
 8003e22:	2302      	movs	r3, #2
 8003e24:	e022      	b.n	8003e6c <HAL_PCD_Start+0x62>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d009      	beq.n	8003e4e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d105      	bne.n	8003e4e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e46:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f002 ffac 	bl	8006db0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f004 f853 	bl	8007f08 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003e74:	b590      	push	{r4, r7, lr}
 8003e76:	b08d      	sub	sp, #52	@ 0x34
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e82:	6a3b      	ldr	r3, [r7, #32]
 8003e84:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f004 f911 	bl	80080b2 <USB_GetMode>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f040 848c 	bne.w	80047b0 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f004 f875 	bl	8007f8c <USB_ReadInterrupts>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f000 8482 	beq.w	80047ae <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	0a1b      	lsrs	r3, r3, #8
 8003eb4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f004 f862 	bl	8007f8c <USB_ReadInterrupts>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d107      	bne.n	8003ee2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	695a      	ldr	r2, [r3, #20]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f002 0202 	and.w	r2, r2, #2
 8003ee0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f004 f850 	bl	8007f8c <USB_ReadInterrupts>
 8003eec:	4603      	mov	r3, r0
 8003eee:	f003 0310 	and.w	r3, r3, #16
 8003ef2:	2b10      	cmp	r3, #16
 8003ef4:	d161      	bne.n	8003fba <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	699a      	ldr	r2, [r3, #24]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 0210 	bic.w	r2, r2, #16
 8003f04:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003f06:	6a3b      	ldr	r3, [r7, #32]
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	f003 020f 	and.w	r2, r3, #15
 8003f12:	4613      	mov	r3, r2
 8003f14:	00db      	lsls	r3, r3, #3
 8003f16:	4413      	add	r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	4413      	add	r3, r2
 8003f22:	3304      	adds	r3, #4
 8003f24:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	0c5b      	lsrs	r3, r3, #17
 8003f2a:	f003 030f 	and.w	r3, r3, #15
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d124      	bne.n	8003f7c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003f32:	69ba      	ldr	r2, [r7, #24]
 8003f34:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003f38:	4013      	ands	r3, r2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d035      	beq.n	8003faa <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	091b      	lsrs	r3, r3, #4
 8003f46:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003f48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	461a      	mov	r2, r3
 8003f50:	6a38      	ldr	r0, [r7, #32]
 8003f52:	f003 fe87 	bl	8007c64 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	68da      	ldr	r2, [r3, #12]
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	091b      	lsrs	r3, r3, #4
 8003f5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f62:	441a      	add	r2, r3
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	695a      	ldr	r2, [r3, #20]
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	091b      	lsrs	r3, r3, #4
 8003f70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f74:	441a      	add	r2, r3
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	615a      	str	r2, [r3, #20]
 8003f7a:	e016      	b.n	8003faa <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	0c5b      	lsrs	r3, r3, #17
 8003f80:	f003 030f 	and.w	r3, r3, #15
 8003f84:	2b06      	cmp	r3, #6
 8003f86:	d110      	bne.n	8003faa <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003f8e:	2208      	movs	r2, #8
 8003f90:	4619      	mov	r1, r3
 8003f92:	6a38      	ldr	r0, [r7, #32]
 8003f94:	f003 fe66 	bl	8007c64 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	695a      	ldr	r2, [r3, #20]
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	091b      	lsrs	r3, r3, #4
 8003fa0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fa4:	441a      	add	r2, r3
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	699a      	ldr	r2, [r3, #24]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f042 0210 	orr.w	r2, r2, #16
 8003fb8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f003 ffe4 	bl	8007f8c <USB_ReadInterrupts>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003fca:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003fce:	f040 80a7 	bne.w	8004120 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f003 ffe9 	bl	8007fb2 <USB_ReadDevAllOutEpInterrupt>
 8003fe0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003fe2:	e099      	b.n	8004118 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	f000 808e 	beq.w	800410c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ff6:	b2d2      	uxtb	r2, r2
 8003ff8:	4611      	mov	r1, r2
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f004 f80d 	bl	800801a <USB_ReadDevOutEPInterrupt>
 8004000:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	f003 0301 	and.w	r3, r3, #1
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00c      	beq.n	8004026 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800400c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400e:	015a      	lsls	r2, r3, #5
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	4413      	add	r3, r2
 8004014:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004018:	461a      	mov	r2, r3
 800401a:	2301      	movs	r3, #1
 800401c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800401e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 fea3 	bl	8004d6c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	f003 0308 	and.w	r3, r3, #8
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00c      	beq.n	800404a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004032:	015a      	lsls	r2, r3, #5
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	4413      	add	r3, r2
 8004038:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800403c:	461a      	mov	r2, r3
 800403e:	2308      	movs	r3, #8
 8004040:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004042:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f000 ff79 	bl	8004f3c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	f003 0310 	and.w	r3, r3, #16
 8004050:	2b00      	cmp	r3, #0
 8004052:	d008      	beq.n	8004066 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004056:	015a      	lsls	r2, r3, #5
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	4413      	add	r3, r2
 800405c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004060:	461a      	mov	r2, r3
 8004062:	2310      	movs	r3, #16
 8004064:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	f003 0302 	and.w	r3, r3, #2
 800406c:	2b00      	cmp	r3, #0
 800406e:	d030      	beq.n	80040d2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004070:	6a3b      	ldr	r3, [r7, #32]
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004078:	2b80      	cmp	r3, #128	@ 0x80
 800407a:	d109      	bne.n	8004090 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	69fa      	ldr	r2, [r7, #28]
 8004086:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800408a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800408e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004090:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004092:	4613      	mov	r3, r2
 8004094:	00db      	lsls	r3, r3, #3
 8004096:	4413      	add	r3, r2
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	4413      	add	r3, r2
 80040a2:	3304      	adds	r3, #4
 80040a4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	78db      	ldrb	r3, [r3, #3]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d108      	bne.n	80040c0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	2200      	movs	r2, #0
 80040b2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80040b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	4619      	mov	r1, r3
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f006 fb94 	bl	800a7e8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80040c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c2:	015a      	lsls	r2, r3, #5
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	4413      	add	r3, r2
 80040c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040cc:	461a      	mov	r2, r3
 80040ce:	2302      	movs	r3, #2
 80040d0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	f003 0320 	and.w	r3, r3, #32
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d008      	beq.n	80040ee <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80040dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040de:	015a      	lsls	r2, r3, #5
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	4413      	add	r3, r2
 80040e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040e8:	461a      	mov	r2, r3
 80040ea:	2320      	movs	r3, #32
 80040ec:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d009      	beq.n	800410c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80040f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040fa:	015a      	lsls	r2, r3, #5
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	4413      	add	r3, r2
 8004100:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004104:	461a      	mov	r2, r3
 8004106:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800410a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800410c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800410e:	3301      	adds	r3, #1
 8004110:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004114:	085b      	lsrs	r3, r3, #1
 8004116:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800411a:	2b00      	cmp	r3, #0
 800411c:	f47f af62 	bne.w	8003fe4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4618      	mov	r0, r3
 8004126:	f003 ff31 	bl	8007f8c <USB_ReadInterrupts>
 800412a:	4603      	mov	r3, r0
 800412c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004130:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004134:	f040 80db 	bne.w	80042ee <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4618      	mov	r0, r3
 800413e:	f003 ff52 	bl	8007fe6 <USB_ReadDevAllInEpInterrupt>
 8004142:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004144:	2300      	movs	r3, #0
 8004146:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004148:	e0cd      	b.n	80042e6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800414a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	2b00      	cmp	r3, #0
 8004152:	f000 80c2 	beq.w	80042da <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800415c:	b2d2      	uxtb	r2, r2
 800415e:	4611      	mov	r1, r2
 8004160:	4618      	mov	r0, r3
 8004162:	f003 ff78 	bl	8008056 <USB_ReadDevInEPInterrupt>
 8004166:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b00      	cmp	r3, #0
 8004170:	d057      	beq.n	8004222 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004174:	f003 030f 	and.w	r3, r3, #15
 8004178:	2201      	movs	r2, #1
 800417a:	fa02 f303 	lsl.w	r3, r2, r3
 800417e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004186:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	43db      	mvns	r3, r3
 800418c:	69f9      	ldr	r1, [r7, #28]
 800418e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004192:	4013      	ands	r3, r2
 8004194:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004198:	015a      	lsls	r2, r3, #5
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	4413      	add	r3, r2
 800419e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041a2:	461a      	mov	r2, r3
 80041a4:	2301      	movs	r3, #1
 80041a6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	799b      	ldrb	r3, [r3, #6]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d132      	bne.n	8004216 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80041b0:	6879      	ldr	r1, [r7, #4]
 80041b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041b4:	4613      	mov	r3, r2
 80041b6:	00db      	lsls	r3, r3, #3
 80041b8:	4413      	add	r3, r2
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	440b      	add	r3, r1
 80041be:	3320      	adds	r3, #32
 80041c0:	6819      	ldr	r1, [r3, #0]
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041c6:	4613      	mov	r3, r2
 80041c8:	00db      	lsls	r3, r3, #3
 80041ca:	4413      	add	r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	4403      	add	r3, r0
 80041d0:	331c      	adds	r3, #28
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4419      	add	r1, r3
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041da:	4613      	mov	r3, r2
 80041dc:	00db      	lsls	r3, r3, #3
 80041de:	4413      	add	r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4403      	add	r3, r0
 80041e4:	3320      	adds	r3, #32
 80041e6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80041e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d113      	bne.n	8004216 <HAL_PCD_IRQHandler+0x3a2>
 80041ee:	6879      	ldr	r1, [r7, #4]
 80041f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041f2:	4613      	mov	r3, r2
 80041f4:	00db      	lsls	r3, r3, #3
 80041f6:	4413      	add	r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	440b      	add	r3, r1
 80041fc:	3324      	adds	r3, #36	@ 0x24
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d108      	bne.n	8004216 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6818      	ldr	r0, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800420e:	461a      	mov	r2, r3
 8004210:	2101      	movs	r1, #1
 8004212:	f003 ff7f 	bl	8008114 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004218:	b2db      	uxtb	r3, r3
 800421a:	4619      	mov	r1, r3
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f006 fa68 	bl	800a6f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	f003 0308 	and.w	r3, r3, #8
 8004228:	2b00      	cmp	r3, #0
 800422a:	d008      	beq.n	800423e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800422c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800422e:	015a      	lsls	r2, r3, #5
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	4413      	add	r3, r2
 8004234:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004238:	461a      	mov	r2, r3
 800423a:	2308      	movs	r3, #8
 800423c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	f003 0310 	and.w	r3, r3, #16
 8004244:	2b00      	cmp	r3, #0
 8004246:	d008      	beq.n	800425a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424a:	015a      	lsls	r2, r3, #5
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	4413      	add	r3, r2
 8004250:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004254:	461a      	mov	r2, r3
 8004256:	2310      	movs	r3, #16
 8004258:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004260:	2b00      	cmp	r3, #0
 8004262:	d008      	beq.n	8004276 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004266:	015a      	lsls	r2, r3, #5
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	4413      	add	r3, r2
 800426c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004270:	461a      	mov	r2, r3
 8004272:	2340      	movs	r3, #64	@ 0x40
 8004274:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	f003 0302 	and.w	r3, r3, #2
 800427c:	2b00      	cmp	r3, #0
 800427e:	d023      	beq.n	80042c8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004280:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004282:	6a38      	ldr	r0, [r7, #32]
 8004284:	f002 ff66 	bl	8007154 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004288:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800428a:	4613      	mov	r3, r2
 800428c:	00db      	lsls	r3, r3, #3
 800428e:	4413      	add	r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	3310      	adds	r3, #16
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	4413      	add	r3, r2
 8004298:	3304      	adds	r3, #4
 800429a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	78db      	ldrb	r3, [r3, #3]
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d108      	bne.n	80042b6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	2200      	movs	r2, #0
 80042a8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80042aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	4619      	mov	r1, r3
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f006 faab 	bl	800a80c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80042b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b8:	015a      	lsls	r2, r3, #5
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	4413      	add	r3, r2
 80042be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042c2:	461a      	mov	r2, r3
 80042c4:	2302      	movs	r3, #2
 80042c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d003      	beq.n	80042da <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80042d2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 fcbd 	bl	8004c54 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80042da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042dc:	3301      	adds	r3, #1
 80042de:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80042e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042e2:	085b      	lsrs	r3, r3, #1
 80042e4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80042e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f47f af2e 	bne.w	800414a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f003 fe4a 	bl	8007f8c <USB_ReadInterrupts>
 80042f8:	4603      	mov	r3, r0
 80042fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80042fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004302:	d122      	bne.n	800434a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	69fa      	ldr	r2, [r7, #28]
 800430e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004312:	f023 0301 	bic.w	r3, r3, #1
 8004316:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800431e:	2b01      	cmp	r3, #1
 8004320:	d108      	bne.n	8004334 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800432a:	2100      	movs	r1, #0
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f000 fea3 	bl	8005078 <HAL_PCDEx_LPM_Callback>
 8004332:	e002      	b.n	800433a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f006 fa49 	bl	800a7cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	695a      	ldr	r2, [r3, #20]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004348:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4618      	mov	r0, r3
 8004350:	f003 fe1c 	bl	8007f8c <USB_ReadInterrupts>
 8004354:	4603      	mov	r3, r0
 8004356:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800435a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800435e:	d112      	bne.n	8004386 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	2b01      	cmp	r3, #1
 800436e:	d102      	bne.n	8004376 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f006 fa05 	bl	800a780 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	695a      	ldr	r2, [r3, #20]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004384:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4618      	mov	r0, r3
 800438c:	f003 fdfe 	bl	8007f8c <USB_ReadInterrupts>
 8004390:	4603      	mov	r3, r0
 8004392:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004396:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800439a:	f040 80b7 	bne.w	800450c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	69fa      	ldr	r2, [r7, #28]
 80043a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043ac:	f023 0301 	bic.w	r3, r3, #1
 80043b0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2110      	movs	r1, #16
 80043b8:	4618      	mov	r0, r3
 80043ba:	f002 fecb 	bl	8007154 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043be:	2300      	movs	r3, #0
 80043c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043c2:	e046      	b.n	8004452 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80043c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043c6:	015a      	lsls	r2, r3, #5
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	4413      	add	r3, r2
 80043cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043d0:	461a      	mov	r2, r3
 80043d2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80043d6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80043d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043da:	015a      	lsls	r2, r3, #5
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	4413      	add	r3, r2
 80043e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043e8:	0151      	lsls	r1, r2, #5
 80043ea:	69fa      	ldr	r2, [r7, #28]
 80043ec:	440a      	add	r2, r1
 80043ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80043f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80043f6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80043f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043fa:	015a      	lsls	r2, r3, #5
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	4413      	add	r3, r2
 8004400:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004404:	461a      	mov	r2, r3
 8004406:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800440a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800440c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800440e:	015a      	lsls	r2, r3, #5
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	4413      	add	r3, r2
 8004414:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800441c:	0151      	lsls	r1, r2, #5
 800441e:	69fa      	ldr	r2, [r7, #28]
 8004420:	440a      	add	r2, r1
 8004422:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004426:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800442a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800442c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800442e:	015a      	lsls	r2, r3, #5
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	4413      	add	r3, r2
 8004434:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800443c:	0151      	lsls	r1, r2, #5
 800443e:	69fa      	ldr	r2, [r7, #28]
 8004440:	440a      	add	r2, r1
 8004442:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004446:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800444a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800444c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800444e:	3301      	adds	r3, #1
 8004450:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	791b      	ldrb	r3, [r3, #4]
 8004456:	461a      	mov	r2, r3
 8004458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800445a:	4293      	cmp	r3, r2
 800445c:	d3b2      	bcc.n	80043c4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004464:	69db      	ldr	r3, [r3, #28]
 8004466:	69fa      	ldr	r2, [r7, #28]
 8004468:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800446c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004470:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	7bdb      	ldrb	r3, [r3, #15]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d016      	beq.n	80044a8 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004480:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004484:	69fa      	ldr	r2, [r7, #28]
 8004486:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800448a:	f043 030b 	orr.w	r3, r3, #11
 800448e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800449a:	69fa      	ldr	r2, [r7, #28]
 800449c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044a0:	f043 030b 	orr.w	r3, r3, #11
 80044a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80044a6:	e015      	b.n	80044d4 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	69fa      	ldr	r2, [r7, #28]
 80044b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044b6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80044ba:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80044be:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	69fa      	ldr	r2, [r7, #28]
 80044ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044ce:	f043 030b 	orr.w	r3, r3, #11
 80044d2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	69fa      	ldr	r2, [r7, #28]
 80044de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044e2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80044e6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6818      	ldr	r0, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80044f6:	461a      	mov	r2, r3
 80044f8:	f003 fe0c 	bl	8008114 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	695a      	ldr	r2, [r3, #20]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800450a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4618      	mov	r0, r3
 8004512:	f003 fd3b 	bl	8007f8c <USB_ReadInterrupts>
 8004516:	4603      	mov	r3, r0
 8004518:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800451c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004520:	d123      	bne.n	800456a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4618      	mov	r0, r3
 8004528:	f003 fdd1 	bl	80080ce <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4618      	mov	r0, r3
 8004532:	f002 fe88 	bl	8007246 <USB_GetDevSpeed>
 8004536:	4603      	mov	r3, r0
 8004538:	461a      	mov	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681c      	ldr	r4, [r3, #0]
 8004542:	f001 f9c9 	bl	80058d8 <HAL_RCC_GetHCLKFreq>
 8004546:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800454c:	461a      	mov	r2, r3
 800454e:	4620      	mov	r0, r4
 8004550:	f002 fb8c 	bl	8006c6c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f006 f8f4 	bl	800a742 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	695a      	ldr	r2, [r3, #20]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004568:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4618      	mov	r0, r3
 8004570:	f003 fd0c 	bl	8007f8c <USB_ReadInterrupts>
 8004574:	4603      	mov	r3, r0
 8004576:	f003 0308 	and.w	r3, r3, #8
 800457a:	2b08      	cmp	r3, #8
 800457c:	d10a      	bne.n	8004594 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f006 f8d1 	bl	800a726 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	695a      	ldr	r2, [r3, #20]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f002 0208 	and.w	r2, r2, #8
 8004592:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4618      	mov	r0, r3
 800459a:	f003 fcf7 	bl	8007f8c <USB_ReadInterrupts>
 800459e:	4603      	mov	r3, r0
 80045a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045a4:	2b80      	cmp	r3, #128	@ 0x80
 80045a6:	d123      	bne.n	80045f0 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80045a8:	6a3b      	ldr	r3, [r7, #32]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80045b0:	6a3b      	ldr	r3, [r7, #32]
 80045b2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80045b4:	2301      	movs	r3, #1
 80045b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80045b8:	e014      	b.n	80045e4 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80045ba:	6879      	ldr	r1, [r7, #4]
 80045bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045be:	4613      	mov	r3, r2
 80045c0:	00db      	lsls	r3, r3, #3
 80045c2:	4413      	add	r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	440b      	add	r3, r1
 80045c8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d105      	bne.n	80045de <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80045d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	4619      	mov	r1, r3
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 fb0a 	bl	8004bf2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80045de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e0:	3301      	adds	r3, #1
 80045e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	791b      	ldrb	r3, [r3, #4]
 80045e8:	461a      	mov	r2, r3
 80045ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d3e4      	bcc.n	80045ba <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4618      	mov	r0, r3
 80045f6:	f003 fcc9 	bl	8007f8c <USB_ReadInterrupts>
 80045fa:	4603      	mov	r3, r0
 80045fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004600:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004604:	d13c      	bne.n	8004680 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004606:	2301      	movs	r3, #1
 8004608:	627b      	str	r3, [r7, #36]	@ 0x24
 800460a:	e02b      	b.n	8004664 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800460c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800460e:	015a      	lsls	r2, r3, #5
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	4413      	add	r3, r2
 8004614:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800461c:	6879      	ldr	r1, [r7, #4]
 800461e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004620:	4613      	mov	r3, r2
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	4413      	add	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	440b      	add	r3, r1
 800462a:	3318      	adds	r3, #24
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d115      	bne.n	800465e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004632:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004634:	2b00      	cmp	r3, #0
 8004636:	da12      	bge.n	800465e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004638:	6879      	ldr	r1, [r7, #4]
 800463a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800463c:	4613      	mov	r3, r2
 800463e:	00db      	lsls	r3, r3, #3
 8004640:	4413      	add	r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	440b      	add	r3, r1
 8004646:	3317      	adds	r3, #23
 8004648:	2201      	movs	r2, #1
 800464a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800464c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800464e:	b2db      	uxtb	r3, r3
 8004650:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004654:	b2db      	uxtb	r3, r3
 8004656:	4619      	mov	r1, r3
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 faca 	bl	8004bf2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800465e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004660:	3301      	adds	r3, #1
 8004662:	627b      	str	r3, [r7, #36]	@ 0x24
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	791b      	ldrb	r3, [r3, #4]
 8004668:	461a      	mov	r2, r3
 800466a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800466c:	4293      	cmp	r3, r2
 800466e:	d3cd      	bcc.n	800460c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	695a      	ldr	r2, [r3, #20]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800467e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4618      	mov	r0, r3
 8004686:	f003 fc81 	bl	8007f8c <USB_ReadInterrupts>
 800468a:	4603      	mov	r3, r0
 800468c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004690:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004694:	d156      	bne.n	8004744 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004696:	2301      	movs	r3, #1
 8004698:	627b      	str	r3, [r7, #36]	@ 0x24
 800469a:	e045      	b.n	8004728 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800469c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800469e:	015a      	lsls	r2, r3, #5
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	4413      	add	r3, r2
 80046a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80046ac:	6879      	ldr	r1, [r7, #4]
 80046ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046b0:	4613      	mov	r3, r2
 80046b2:	00db      	lsls	r3, r3, #3
 80046b4:	4413      	add	r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	440b      	add	r3, r1
 80046ba:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d12e      	bne.n	8004722 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80046c4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	da2b      	bge.n	8004722 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80046d6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80046da:	429a      	cmp	r2, r3
 80046dc:	d121      	bne.n	8004722 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80046de:	6879      	ldr	r1, [r7, #4]
 80046e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046e2:	4613      	mov	r3, r2
 80046e4:	00db      	lsls	r3, r3, #3
 80046e6:	4413      	add	r3, r2
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	440b      	add	r3, r1
 80046ec:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80046f0:	2201      	movs	r2, #1
 80046f2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80046f4:	6a3b      	ldr	r3, [r7, #32]
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80046fc:	6a3b      	ldr	r3, [r7, #32]
 80046fe:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004700:	6a3b      	ldr	r3, [r7, #32]
 8004702:	695b      	ldr	r3, [r3, #20]
 8004704:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004708:	2b00      	cmp	r3, #0
 800470a:	d10a      	bne.n	8004722 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	69fa      	ldr	r2, [r7, #28]
 8004716:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800471a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800471e:	6053      	str	r3, [r2, #4]
            break;
 8004720:	e008      	b.n	8004734 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004724:	3301      	adds	r3, #1
 8004726:	627b      	str	r3, [r7, #36]	@ 0x24
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	791b      	ldrb	r3, [r3, #4]
 800472c:	461a      	mov	r2, r3
 800472e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004730:	4293      	cmp	r3, r2
 8004732:	d3b3      	bcc.n	800469c <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	695a      	ldr	r2, [r3, #20]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004742:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4618      	mov	r0, r3
 800474a:	f003 fc1f 	bl	8007f8c <USB_ReadInterrupts>
 800474e:	4603      	mov	r3, r0
 8004750:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004754:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004758:	d10a      	bne.n	8004770 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f006 f868 	bl	800a830 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	695a      	ldr	r2, [r3, #20]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800476e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4618      	mov	r0, r3
 8004776:	f003 fc09 	bl	8007f8c <USB_ReadInterrupts>
 800477a:	4603      	mov	r3, r0
 800477c:	f003 0304 	and.w	r3, r3, #4
 8004780:	2b04      	cmp	r3, #4
 8004782:	d115      	bne.n	80047b0 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	f003 0304 	and.w	r3, r3, #4
 8004792:	2b00      	cmp	r3, #0
 8004794:	d002      	beq.n	800479c <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f006 f858 	bl	800a84c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	6859      	ldr	r1, [r3, #4]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	69ba      	ldr	r2, [r7, #24]
 80047a8:	430a      	orrs	r2, r1
 80047aa:	605a      	str	r2, [r3, #4]
 80047ac:	e000      	b.n	80047b0 <HAL_PCD_IRQHandler+0x93c>
      return;
 80047ae:	bf00      	nop
    }
  }
}
 80047b0:	3734      	adds	r7, #52	@ 0x34
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd90      	pop	{r4, r7, pc}

080047b6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80047b6:	b580      	push	{r7, lr}
 80047b8:	b082      	sub	sp, #8
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
 80047be:	460b      	mov	r3, r1
 80047c0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d101      	bne.n	80047d0 <HAL_PCD_SetAddress+0x1a>
 80047cc:	2302      	movs	r3, #2
 80047ce:	e012      	b.n	80047f6 <HAL_PCD_SetAddress+0x40>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	78fa      	ldrb	r2, [r7, #3]
 80047dc:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	78fa      	ldrb	r2, [r7, #3]
 80047e4:	4611      	mov	r1, r2
 80047e6:	4618      	mov	r0, r3
 80047e8:	f003 fb68 	bl	8007ebc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3708      	adds	r7, #8
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b084      	sub	sp, #16
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
 8004806:	4608      	mov	r0, r1
 8004808:	4611      	mov	r1, r2
 800480a:	461a      	mov	r2, r3
 800480c:	4603      	mov	r3, r0
 800480e:	70fb      	strb	r3, [r7, #3]
 8004810:	460b      	mov	r3, r1
 8004812:	803b      	strh	r3, [r7, #0]
 8004814:	4613      	mov	r3, r2
 8004816:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004818:	2300      	movs	r3, #0
 800481a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800481c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004820:	2b00      	cmp	r3, #0
 8004822:	da0f      	bge.n	8004844 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004824:	78fb      	ldrb	r3, [r7, #3]
 8004826:	f003 020f 	and.w	r2, r3, #15
 800482a:	4613      	mov	r3, r2
 800482c:	00db      	lsls	r3, r3, #3
 800482e:	4413      	add	r3, r2
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	3310      	adds	r3, #16
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	4413      	add	r3, r2
 8004838:	3304      	adds	r3, #4
 800483a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2201      	movs	r2, #1
 8004840:	705a      	strb	r2, [r3, #1]
 8004842:	e00f      	b.n	8004864 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004844:	78fb      	ldrb	r3, [r7, #3]
 8004846:	f003 020f 	and.w	r2, r3, #15
 800484a:	4613      	mov	r3, r2
 800484c:	00db      	lsls	r3, r3, #3
 800484e:	4413      	add	r3, r2
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	4413      	add	r3, r2
 800485a:	3304      	adds	r3, #4
 800485c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004864:	78fb      	ldrb	r3, [r7, #3]
 8004866:	f003 030f 	and.w	r3, r3, #15
 800486a:	b2da      	uxtb	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004870:	883b      	ldrh	r3, [r7, #0]
 8004872:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	78ba      	ldrb	r2, [r7, #2]
 800487e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	785b      	ldrb	r3, [r3, #1]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d004      	beq.n	8004892 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	461a      	mov	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004892:	78bb      	ldrb	r3, [r7, #2]
 8004894:	2b02      	cmp	r3, #2
 8004896:	d102      	bne.n	800489e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d101      	bne.n	80048ac <HAL_PCD_EP_Open+0xae>
 80048a8:	2302      	movs	r3, #2
 80048aa:	e00e      	b.n	80048ca <HAL_PCD_EP_Open+0xcc>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68f9      	ldr	r1, [r7, #12]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f002 fce8 	bl	8007290 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80048c8:	7afb      	ldrb	r3, [r7, #11]
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3710      	adds	r7, #16
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b084      	sub	sp, #16
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
 80048da:	460b      	mov	r3, r1
 80048dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80048de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	da0f      	bge.n	8004906 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048e6:	78fb      	ldrb	r3, [r7, #3]
 80048e8:	f003 020f 	and.w	r2, r3, #15
 80048ec:	4613      	mov	r3, r2
 80048ee:	00db      	lsls	r3, r3, #3
 80048f0:	4413      	add	r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	3310      	adds	r3, #16
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	4413      	add	r3, r2
 80048fa:	3304      	adds	r3, #4
 80048fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2201      	movs	r2, #1
 8004902:	705a      	strb	r2, [r3, #1]
 8004904:	e00f      	b.n	8004926 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004906:	78fb      	ldrb	r3, [r7, #3]
 8004908:	f003 020f 	and.w	r2, r3, #15
 800490c:	4613      	mov	r3, r2
 800490e:	00db      	lsls	r3, r3, #3
 8004910:	4413      	add	r3, r2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	4413      	add	r3, r2
 800491c:	3304      	adds	r3, #4
 800491e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2200      	movs	r2, #0
 8004924:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004926:	78fb      	ldrb	r3, [r7, #3]
 8004928:	f003 030f 	and.w	r3, r3, #15
 800492c:	b2da      	uxtb	r2, r3
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004938:	2b01      	cmp	r3, #1
 800493a:	d101      	bne.n	8004940 <HAL_PCD_EP_Close+0x6e>
 800493c:	2302      	movs	r3, #2
 800493e:	e00e      	b.n	800495e <HAL_PCD_EP_Close+0x8c>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68f9      	ldr	r1, [r7, #12]
 800494e:	4618      	mov	r0, r3
 8004950:	f002 fd26 	bl	80073a0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3710      	adds	r7, #16
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}

08004966 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004966:	b580      	push	{r7, lr}
 8004968:	b086      	sub	sp, #24
 800496a:	af00      	add	r7, sp, #0
 800496c:	60f8      	str	r0, [r7, #12]
 800496e:	607a      	str	r2, [r7, #4]
 8004970:	603b      	str	r3, [r7, #0]
 8004972:	460b      	mov	r3, r1
 8004974:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004976:	7afb      	ldrb	r3, [r7, #11]
 8004978:	f003 020f 	and.w	r2, r3, #15
 800497c:	4613      	mov	r3, r2
 800497e:	00db      	lsls	r3, r3, #3
 8004980:	4413      	add	r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	4413      	add	r3, r2
 800498c:	3304      	adds	r3, #4
 800498e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	683a      	ldr	r2, [r7, #0]
 800499a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	2200      	movs	r2, #0
 80049a0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	2200      	movs	r2, #0
 80049a6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049a8:	7afb      	ldrb	r3, [r7, #11]
 80049aa:	f003 030f 	and.w	r3, r3, #15
 80049ae:	b2da      	uxtb	r2, r3
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	799b      	ldrb	r3, [r3, #6]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d102      	bne.n	80049c2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6818      	ldr	r0, [r3, #0]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	799b      	ldrb	r3, [r3, #6]
 80049ca:	461a      	mov	r2, r3
 80049cc:	6979      	ldr	r1, [r7, #20]
 80049ce:	f002 fdc3 	bl	8007558 <USB_EPStartXfer>

  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3718      	adds	r7, #24
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	460b      	mov	r3, r1
 80049e6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80049e8:	78fb      	ldrb	r3, [r7, #3]
 80049ea:	f003 020f 	and.w	r2, r3, #15
 80049ee:	6879      	ldr	r1, [r7, #4]
 80049f0:	4613      	mov	r3, r2
 80049f2:	00db      	lsls	r3, r3, #3
 80049f4:	4413      	add	r3, r2
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	440b      	add	r3, r1
 80049fa:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80049fe:	681b      	ldr	r3, [r3, #0]
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b086      	sub	sp, #24
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	607a      	str	r2, [r7, #4]
 8004a16:	603b      	str	r3, [r7, #0]
 8004a18:	460b      	mov	r3, r1
 8004a1a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a1c:	7afb      	ldrb	r3, [r7, #11]
 8004a1e:	f003 020f 	and.w	r2, r3, #15
 8004a22:	4613      	mov	r3, r2
 8004a24:	00db      	lsls	r3, r3, #3
 8004a26:	4413      	add	r3, r2
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	3310      	adds	r3, #16
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	4413      	add	r3, r2
 8004a30:	3304      	adds	r3, #4
 8004a32:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	683a      	ldr	r2, [r7, #0]
 8004a3e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	2200      	movs	r2, #0
 8004a44:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a4c:	7afb      	ldrb	r3, [r7, #11]
 8004a4e:	f003 030f 	and.w	r3, r3, #15
 8004a52:	b2da      	uxtb	r2, r3
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	799b      	ldrb	r3, [r3, #6]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d102      	bne.n	8004a66 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6818      	ldr	r0, [r3, #0]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	799b      	ldrb	r3, [r3, #6]
 8004a6e:	461a      	mov	r2, r3
 8004a70:	6979      	ldr	r1, [r7, #20]
 8004a72:	f002 fd71 	bl	8007558 <USB_EPStartXfer>

  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3718      	adds	r7, #24
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	460b      	mov	r3, r1
 8004a8a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004a8c:	78fb      	ldrb	r3, [r7, #3]
 8004a8e:	f003 030f 	and.w	r3, r3, #15
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	7912      	ldrb	r2, [r2, #4]
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d901      	bls.n	8004a9e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e04f      	b.n	8004b3e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004a9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	da0f      	bge.n	8004ac6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004aa6:	78fb      	ldrb	r3, [r7, #3]
 8004aa8:	f003 020f 	and.w	r2, r3, #15
 8004aac:	4613      	mov	r3, r2
 8004aae:	00db      	lsls	r3, r3, #3
 8004ab0:	4413      	add	r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	3310      	adds	r3, #16
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	4413      	add	r3, r2
 8004aba:	3304      	adds	r3, #4
 8004abc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	705a      	strb	r2, [r3, #1]
 8004ac4:	e00d      	b.n	8004ae2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004ac6:	78fa      	ldrb	r2, [r7, #3]
 8004ac8:	4613      	mov	r3, r2
 8004aca:	00db      	lsls	r3, r3, #3
 8004acc:	4413      	add	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	3304      	adds	r3, #4
 8004ada:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ae8:	78fb      	ldrb	r3, [r7, #3]
 8004aea:	f003 030f 	and.w	r3, r3, #15
 8004aee:	b2da      	uxtb	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d101      	bne.n	8004b02 <HAL_PCD_EP_SetStall+0x82>
 8004afe:	2302      	movs	r3, #2
 8004b00:	e01d      	b.n	8004b3e <HAL_PCD_EP_SetStall+0xbe>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68f9      	ldr	r1, [r7, #12]
 8004b10:	4618      	mov	r0, r3
 8004b12:	f003 f8ff 	bl	8007d14 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004b16:	78fb      	ldrb	r3, [r7, #3]
 8004b18:	f003 030f 	and.w	r3, r3, #15
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d109      	bne.n	8004b34 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6818      	ldr	r0, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	7999      	ldrb	r1, [r3, #6]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004b2e:	461a      	mov	r2, r3
 8004b30:	f003 faf0 	bl	8008114 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b084      	sub	sp, #16
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
 8004b4e:	460b      	mov	r3, r1
 8004b50:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004b52:	78fb      	ldrb	r3, [r7, #3]
 8004b54:	f003 030f 	and.w	r3, r3, #15
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	7912      	ldrb	r2, [r2, #4]
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d901      	bls.n	8004b64 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e042      	b.n	8004bea <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004b64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	da0f      	bge.n	8004b8c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b6c:	78fb      	ldrb	r3, [r7, #3]
 8004b6e:	f003 020f 	and.w	r2, r3, #15
 8004b72:	4613      	mov	r3, r2
 8004b74:	00db      	lsls	r3, r3, #3
 8004b76:	4413      	add	r3, r2
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	3310      	adds	r3, #16
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	4413      	add	r3, r2
 8004b80:	3304      	adds	r3, #4
 8004b82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2201      	movs	r2, #1
 8004b88:	705a      	strb	r2, [r3, #1]
 8004b8a:	e00f      	b.n	8004bac <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b8c:	78fb      	ldrb	r3, [r7, #3]
 8004b8e:	f003 020f 	and.w	r2, r3, #15
 8004b92:	4613      	mov	r3, r2
 8004b94:	00db      	lsls	r3, r3, #3
 8004b96:	4413      	add	r3, r2
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	3304      	adds	r3, #4
 8004ba4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004bb2:	78fb      	ldrb	r3, [r7, #3]
 8004bb4:	f003 030f 	and.w	r3, r3, #15
 8004bb8:	b2da      	uxtb	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d101      	bne.n	8004bcc <HAL_PCD_EP_ClrStall+0x86>
 8004bc8:	2302      	movs	r3, #2
 8004bca:	e00e      	b.n	8004bea <HAL_PCD_EP_ClrStall+0xa4>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68f9      	ldr	r1, [r7, #12]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f003 f908 	bl	8007df0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3710      	adds	r7, #16
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}

08004bf2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b084      	sub	sp, #16
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004bfe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	da0c      	bge.n	8004c20 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c06:	78fb      	ldrb	r3, [r7, #3]
 8004c08:	f003 020f 	and.w	r2, r3, #15
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	4413      	add	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	3310      	adds	r3, #16
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	4413      	add	r3, r2
 8004c1a:	3304      	adds	r3, #4
 8004c1c:	60fb      	str	r3, [r7, #12]
 8004c1e:	e00c      	b.n	8004c3a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c20:	78fb      	ldrb	r3, [r7, #3]
 8004c22:	f003 020f 	and.w	r2, r3, #15
 8004c26:	4613      	mov	r3, r2
 8004c28:	00db      	lsls	r3, r3, #3
 8004c2a:	4413      	add	r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	4413      	add	r3, r2
 8004c36:	3304      	adds	r3, #4
 8004c38:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68f9      	ldr	r1, [r7, #12]
 8004c40:	4618      	mov	r0, r3
 8004c42:	f002 ff27 	bl	8007a94 <USB_EPStopXfer>
 8004c46:	4603      	mov	r3, r0
 8004c48:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004c4a:	7afb      	ldrb	r3, [r7, #11]
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3710      	adds	r7, #16
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b08a      	sub	sp, #40	@ 0x28
 8004c58:	af02      	add	r7, sp, #8
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004c68:	683a      	ldr	r2, [r7, #0]
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	00db      	lsls	r3, r3, #3
 8004c6e:	4413      	add	r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	3310      	adds	r3, #16
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	4413      	add	r3, r2
 8004c78:	3304      	adds	r3, #4
 8004c7a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	695a      	ldr	r2, [r3, #20]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d901      	bls.n	8004c8c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e06b      	b.n	8004d64 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	691a      	ldr	r2, [r3, #16]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	695b      	ldr	r3, [r3, #20]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	69fa      	ldr	r2, [r7, #28]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d902      	bls.n	8004ca8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	3303      	adds	r3, #3
 8004cac:	089b      	lsrs	r3, r3, #2
 8004cae:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004cb0:	e02a      	b.n	8004d08 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	691a      	ldr	r2, [r3, #16]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	69fa      	ldr	r2, [r7, #28]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d902      	bls.n	8004cce <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	3303      	adds	r3, #3
 8004cd2:	089b      	lsrs	r3, r3, #2
 8004cd4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	68d9      	ldr	r1, [r3, #12]
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	b2da      	uxtb	r2, r3
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004ce6:	9300      	str	r3, [sp, #0]
 8004ce8:	4603      	mov	r3, r0
 8004cea:	6978      	ldr	r0, [r7, #20]
 8004cec:	f002 ff7c 	bl	8007be8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	68da      	ldr	r2, [r3, #12]
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	441a      	add	r2, r3
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	695a      	ldr	r2, [r3, #20]
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	441a      	add	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	015a      	lsls	r2, r3, #5
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	4413      	add	r3, r2
 8004d10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004d18:	69ba      	ldr	r2, [r7, #24]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d809      	bhi.n	8004d32 <PCD_WriteEmptyTxFifo+0xde>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	695a      	ldr	r2, [r3, #20]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d203      	bcs.n	8004d32 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1bf      	bne.n	8004cb2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	691a      	ldr	r2, [r3, #16]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d811      	bhi.n	8004d62 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	f003 030f 	and.w	r3, r3, #15
 8004d44:	2201      	movs	r2, #1
 8004d46:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	43db      	mvns	r3, r3
 8004d58:	6939      	ldr	r1, [r7, #16]
 8004d5a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004d5e:	4013      	ands	r3, r2
 8004d60:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3720      	adds	r7, #32
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b088      	sub	sp, #32
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	333c      	adds	r3, #60	@ 0x3c
 8004d84:	3304      	adds	r3, #4
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	015a      	lsls	r2, r3, #5
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	4413      	add	r3, r2
 8004d92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	799b      	ldrb	r3, [r3, #6]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d17b      	bne.n	8004e9a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	f003 0308 	and.w	r3, r3, #8
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d015      	beq.n	8004dd8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	4a61      	ldr	r2, [pc, #388]	@ (8004f34 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	f240 80b9 	bls.w	8004f28 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f000 80b3 	beq.w	8004f28 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	015a      	lsls	r2, r3, #5
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	4413      	add	r3, r2
 8004dca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dce:	461a      	mov	r2, r3
 8004dd0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dd4:	6093      	str	r3, [r2, #8]
 8004dd6:	e0a7      	b.n	8004f28 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	f003 0320 	and.w	r3, r3, #32
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d009      	beq.n	8004df6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	015a      	lsls	r2, r3, #5
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	4413      	add	r3, r2
 8004dea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dee:	461a      	mov	r2, r3
 8004df0:	2320      	movs	r3, #32
 8004df2:	6093      	str	r3, [r2, #8]
 8004df4:	e098      	b.n	8004f28 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f040 8093 	bne.w	8004f28 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	4a4b      	ldr	r2, [pc, #300]	@ (8004f34 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d90f      	bls.n	8004e2a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00a      	beq.n	8004e2a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	015a      	lsls	r2, r3, #5
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e20:	461a      	mov	r2, r3
 8004e22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e26:	6093      	str	r3, [r2, #8]
 8004e28:	e07e      	b.n	8004f28 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004e2a:	683a      	ldr	r2, [r7, #0]
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	00db      	lsls	r3, r3, #3
 8004e30:	4413      	add	r3, r2
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	3304      	adds	r3, #4
 8004e3e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6a1a      	ldr	r2, [r3, #32]
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	0159      	lsls	r1, r3, #5
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	440b      	add	r3, r1
 8004e4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e56:	1ad2      	subs	r2, r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d114      	bne.n	8004e8c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d109      	bne.n	8004e7e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6818      	ldr	r0, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004e74:	461a      	mov	r2, r3
 8004e76:	2101      	movs	r1, #1
 8004e78:	f003 f94c 	bl	8008114 <USB_EP0_OutStart>
 8004e7c:	e006      	b.n	8004e8c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	68da      	ldr	r2, [r3, #12]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	441a      	add	r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	4619      	mov	r1, r3
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f005 fc12 	bl	800a6bc <HAL_PCD_DataOutStageCallback>
 8004e98:	e046      	b.n	8004f28 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	4a26      	ldr	r2, [pc, #152]	@ (8004f38 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d124      	bne.n	8004eec <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d00a      	beq.n	8004ec2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	015a      	lsls	r2, r3, #5
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004eb8:	461a      	mov	r2, r3
 8004eba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ebe:	6093      	str	r3, [r2, #8]
 8004ec0:	e032      	b.n	8004f28 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	f003 0320 	and.w	r3, r3, #32
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d008      	beq.n	8004ede <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	015a      	lsls	r2, r3, #5
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ed8:	461a      	mov	r2, r3
 8004eda:	2320      	movs	r3, #32
 8004edc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f005 fbe9 	bl	800a6bc <HAL_PCD_DataOutStageCallback>
 8004eea:	e01d      	b.n	8004f28 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d114      	bne.n	8004f1c <PCD_EP_OutXfrComplete_int+0x1b0>
 8004ef2:	6879      	ldr	r1, [r7, #4]
 8004ef4:	683a      	ldr	r2, [r7, #0]
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	00db      	lsls	r3, r3, #3
 8004efa:	4413      	add	r3, r2
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	440b      	add	r3, r1
 8004f00:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d108      	bne.n	8004f1c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6818      	ldr	r0, [r3, #0]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004f14:	461a      	mov	r2, r3
 8004f16:	2100      	movs	r1, #0
 8004f18:	f003 f8fc 	bl	8008114 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	4619      	mov	r1, r3
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f005 fbca 	bl	800a6bc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3720      	adds	r7, #32
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	4f54300a 	.word	0x4f54300a
 8004f38:	4f54310a 	.word	0x4f54310a

08004f3c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b086      	sub	sp, #24
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	333c      	adds	r3, #60	@ 0x3c
 8004f54:	3304      	adds	r3, #4
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	015a      	lsls	r2, r3, #5
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	4413      	add	r3, r2
 8004f62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	4a15      	ldr	r2, [pc, #84]	@ (8004fc4 <PCD_EP_OutSetupPacket_int+0x88>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d90e      	bls.n	8004f90 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d009      	beq.n	8004f90 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	015a      	lsls	r2, r3, #5
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	4413      	add	r3, r2
 8004f84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f88:	461a      	mov	r2, r3
 8004f8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f8e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f005 fb81 	bl	800a698 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	4a0a      	ldr	r2, [pc, #40]	@ (8004fc4 <PCD_EP_OutSetupPacket_int+0x88>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d90c      	bls.n	8004fb8 <PCD_EP_OutSetupPacket_int+0x7c>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	799b      	ldrb	r3, [r3, #6]
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d108      	bne.n	8004fb8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6818      	ldr	r0, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	2101      	movs	r1, #1
 8004fb4:	f003 f8ae 	bl	8008114 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3718      	adds	r7, #24
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	4f54300a 	.word	0x4f54300a

08004fc8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	70fb      	strb	r3, [r7, #3]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fde:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004fe0:	78fb      	ldrb	r3, [r7, #3]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d107      	bne.n	8004ff6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004fe6:	883b      	ldrh	r3, [r7, #0]
 8004fe8:	0419      	lsls	r1, r3, #16
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	629a      	str	r2, [r3, #40]	@ 0x28
 8004ff4:	e028      	b.n	8005048 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ffc:	0c1b      	lsrs	r3, r3, #16
 8004ffe:	68ba      	ldr	r2, [r7, #8]
 8005000:	4413      	add	r3, r2
 8005002:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005004:	2300      	movs	r3, #0
 8005006:	73fb      	strb	r3, [r7, #15]
 8005008:	e00d      	b.n	8005026 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	7bfb      	ldrb	r3, [r7, #15]
 8005010:	3340      	adds	r3, #64	@ 0x40
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	4413      	add	r3, r2
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	0c1b      	lsrs	r3, r3, #16
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	4413      	add	r3, r2
 800501e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005020:	7bfb      	ldrb	r3, [r7, #15]
 8005022:	3301      	adds	r3, #1
 8005024:	73fb      	strb	r3, [r7, #15]
 8005026:	7bfa      	ldrb	r2, [r7, #15]
 8005028:	78fb      	ldrb	r3, [r7, #3]
 800502a:	3b01      	subs	r3, #1
 800502c:	429a      	cmp	r2, r3
 800502e:	d3ec      	bcc.n	800500a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005030:	883b      	ldrh	r3, [r7, #0]
 8005032:	0418      	lsls	r0, r3, #16
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6819      	ldr	r1, [r3, #0]
 8005038:	78fb      	ldrb	r3, [r7, #3]
 800503a:	3b01      	subs	r3, #1
 800503c:	68ba      	ldr	r2, [r7, #8]
 800503e:	4302      	orrs	r2, r0
 8005040:	3340      	adds	r3, #64	@ 0x40
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	440b      	add	r3, r1
 8005046:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3714      	adds	r7, #20
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr

08005056 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005056:	b480      	push	{r7}
 8005058:	b083      	sub	sp, #12
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
 800505e:	460b      	mov	r3, r1
 8005060:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	887a      	ldrh	r2, [r7, #2]
 8005068:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	460b      	mov	r3, r1
 8005082:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005084:	bf00      	nop
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b086      	sub	sp, #24
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d101      	bne.n	80050a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e267      	b.n	8005572 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0301 	and.w	r3, r3, #1
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d075      	beq.n	800519a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80050ae:	4b88      	ldr	r3, [pc, #544]	@ (80052d0 <HAL_RCC_OscConfig+0x240>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f003 030c 	and.w	r3, r3, #12
 80050b6:	2b04      	cmp	r3, #4
 80050b8:	d00c      	beq.n	80050d4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050ba:	4b85      	ldr	r3, [pc, #532]	@ (80052d0 <HAL_RCC_OscConfig+0x240>)
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80050c2:	2b08      	cmp	r3, #8
 80050c4:	d112      	bne.n	80050ec <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050c6:	4b82      	ldr	r3, [pc, #520]	@ (80052d0 <HAL_RCC_OscConfig+0x240>)
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050d2:	d10b      	bne.n	80050ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050d4:	4b7e      	ldr	r3, [pc, #504]	@ (80052d0 <HAL_RCC_OscConfig+0x240>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d05b      	beq.n	8005198 <HAL_RCC_OscConfig+0x108>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d157      	bne.n	8005198 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e242      	b.n	8005572 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050f4:	d106      	bne.n	8005104 <HAL_RCC_OscConfig+0x74>
 80050f6:	4b76      	ldr	r3, [pc, #472]	@ (80052d0 <HAL_RCC_OscConfig+0x240>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a75      	ldr	r2, [pc, #468]	@ (80052d0 <HAL_RCC_OscConfig+0x240>)
 80050fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005100:	6013      	str	r3, [r2, #0]
 8005102:	e01d      	b.n	8005140 <HAL_RCC_OscConfig+0xb0>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800510c:	d10c      	bne.n	8005128 <HAL_RCC_OscConfig+0x98>
 800510e:	4b70      	ldr	r3, [pc, #448]	@ (80052d0 <HAL_RCC_OscConfig+0x240>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a6f      	ldr	r2, [pc, #444]	@ (80052d0 <HAL_RCC_OscConfig+0x240>)
 8005114:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005118:	6013      	str	r3, [r2, #0]
 800511a:	4b6d      	ldr	r3, [pc, #436]	@ (80052d0 <HAL_RCC_OscConfig+0x240>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a6c      	ldr	r2, [pc, #432]	@ (80052d0 <HAL_RCC_OscConfig+0x240>)
 8005120:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005124:	6013      	str	r3, [r2, #0]
 8005126:	e00b      	b.n	8005140 <HAL_RCC_OscConfig+0xb0>
 8005128:	4b69      	ldr	r3, [pc, #420]	@ (80052d0 <HAL_RCC_OscConfig+0x240>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a68      	ldr	r2, [pc, #416]	@ (80052d0 <HAL_RCC_OscConfig+0x240>)
 800512e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005132:	6013      	str	r3, [r2, #0]
 8005134:	4b66      	ldr	r3, [pc, #408]	@ (80052d0 <HAL_RCC_OscConfig+0x240>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a65      	ldr	r2, [pc, #404]	@ (80052d0 <HAL_RCC_OscConfig+0x240>)
 800513a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800513e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d013      	beq.n	8005170 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005148:	f7fd f9aa 	bl	80024a0 <HAL_GetTick>
 800514c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800514e:	e008      	b.n	8005162 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005150:	f7fd f9a6 	bl	80024a0 <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	2b64      	cmp	r3, #100	@ 0x64
 800515c:	d901      	bls.n	8005162 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e207      	b.n	8005572 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005162:	4b5b      	ldr	r3, [pc, #364]	@ (80052d0 <HAL_RCC_OscConfig+0x240>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800516a:	2b00      	cmp	r3, #0
 800516c:	d0f0      	beq.n	8005150 <HAL_RCC_OscConfig+0xc0>
 800516e:	e014      	b.n	800519a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005170:	f7fd f996 	bl	80024a0 <HAL_GetTick>
 8005174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005176:	e008      	b.n	800518a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005178:	f7fd f992 	bl	80024a0 <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	2b64      	cmp	r3, #100	@ 0x64
 8005184:	d901      	bls.n	800518a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e1f3      	b.n	8005572 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800518a:	4b51      	ldr	r3, [pc, #324]	@ (80052d0 <HAL_RCC_OscConfig+0x240>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1f0      	bne.n	8005178 <HAL_RCC_OscConfig+0xe8>
 8005196:	e000      	b.n	800519a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005198:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0302 	and.w	r3, r3, #2
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d063      	beq.n	800526e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80051a6:	4b4a      	ldr	r3, [pc, #296]	@ (80052d0 <HAL_RCC_OscConfig+0x240>)
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	f003 030c 	and.w	r3, r3, #12
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00b      	beq.n	80051ca <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051b2:	4b47      	ldr	r3, [pc, #284]	@ (80052d0 <HAL_RCC_OscConfig+0x240>)
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80051ba:	2b08      	cmp	r3, #8
 80051bc:	d11c      	bne.n	80051f8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051be:	4b44      	ldr	r3, [pc, #272]	@ (80052d0 <HAL_RCC_OscConfig+0x240>)
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d116      	bne.n	80051f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051ca:	4b41      	ldr	r3, [pc, #260]	@ (80052d0 <HAL_RCC_OscConfig+0x240>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0302 	and.w	r3, r3, #2
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d005      	beq.n	80051e2 <HAL_RCC_OscConfig+0x152>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d001      	beq.n	80051e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e1c7      	b.n	8005572 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051e2:	4b3b      	ldr	r3, [pc, #236]	@ (80052d0 <HAL_RCC_OscConfig+0x240>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	00db      	lsls	r3, r3, #3
 80051f0:	4937      	ldr	r1, [pc, #220]	@ (80052d0 <HAL_RCC_OscConfig+0x240>)
 80051f2:	4313      	orrs	r3, r2
 80051f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051f6:	e03a      	b.n	800526e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d020      	beq.n	8005242 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005200:	4b34      	ldr	r3, [pc, #208]	@ (80052d4 <HAL_RCC_OscConfig+0x244>)
 8005202:	2201      	movs	r2, #1
 8005204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005206:	f7fd f94b 	bl	80024a0 <HAL_GetTick>
 800520a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800520c:	e008      	b.n	8005220 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800520e:	f7fd f947 	bl	80024a0 <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	2b02      	cmp	r3, #2
 800521a:	d901      	bls.n	8005220 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e1a8      	b.n	8005572 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005220:	4b2b      	ldr	r3, [pc, #172]	@ (80052d0 <HAL_RCC_OscConfig+0x240>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0302 	and.w	r3, r3, #2
 8005228:	2b00      	cmp	r3, #0
 800522a:	d0f0      	beq.n	800520e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800522c:	4b28      	ldr	r3, [pc, #160]	@ (80052d0 <HAL_RCC_OscConfig+0x240>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	691b      	ldr	r3, [r3, #16]
 8005238:	00db      	lsls	r3, r3, #3
 800523a:	4925      	ldr	r1, [pc, #148]	@ (80052d0 <HAL_RCC_OscConfig+0x240>)
 800523c:	4313      	orrs	r3, r2
 800523e:	600b      	str	r3, [r1, #0]
 8005240:	e015      	b.n	800526e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005242:	4b24      	ldr	r3, [pc, #144]	@ (80052d4 <HAL_RCC_OscConfig+0x244>)
 8005244:	2200      	movs	r2, #0
 8005246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005248:	f7fd f92a 	bl	80024a0 <HAL_GetTick>
 800524c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800524e:	e008      	b.n	8005262 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005250:	f7fd f926 	bl	80024a0 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	2b02      	cmp	r3, #2
 800525c:	d901      	bls.n	8005262 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e187      	b.n	8005572 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005262:	4b1b      	ldr	r3, [pc, #108]	@ (80052d0 <HAL_RCC_OscConfig+0x240>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0302 	and.w	r3, r3, #2
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1f0      	bne.n	8005250 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0308 	and.w	r3, r3, #8
 8005276:	2b00      	cmp	r3, #0
 8005278:	d036      	beq.n	80052e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	695b      	ldr	r3, [r3, #20]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d016      	beq.n	80052b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005282:	4b15      	ldr	r3, [pc, #84]	@ (80052d8 <HAL_RCC_OscConfig+0x248>)
 8005284:	2201      	movs	r2, #1
 8005286:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005288:	f7fd f90a 	bl	80024a0 <HAL_GetTick>
 800528c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800528e:	e008      	b.n	80052a2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005290:	f7fd f906 	bl	80024a0 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	2b02      	cmp	r3, #2
 800529c:	d901      	bls.n	80052a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e167      	b.n	8005572 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052a2:	4b0b      	ldr	r3, [pc, #44]	@ (80052d0 <HAL_RCC_OscConfig+0x240>)
 80052a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052a6:	f003 0302 	and.w	r3, r3, #2
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d0f0      	beq.n	8005290 <HAL_RCC_OscConfig+0x200>
 80052ae:	e01b      	b.n	80052e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052b0:	4b09      	ldr	r3, [pc, #36]	@ (80052d8 <HAL_RCC_OscConfig+0x248>)
 80052b2:	2200      	movs	r2, #0
 80052b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052b6:	f7fd f8f3 	bl	80024a0 <HAL_GetTick>
 80052ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052bc:	e00e      	b.n	80052dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052be:	f7fd f8ef 	bl	80024a0 <HAL_GetTick>
 80052c2:	4602      	mov	r2, r0
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d907      	bls.n	80052dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80052cc:	2303      	movs	r3, #3
 80052ce:	e150      	b.n	8005572 <HAL_RCC_OscConfig+0x4e2>
 80052d0:	40023800 	.word	0x40023800
 80052d4:	42470000 	.word	0x42470000
 80052d8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052dc:	4b88      	ldr	r3, [pc, #544]	@ (8005500 <HAL_RCC_OscConfig+0x470>)
 80052de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052e0:	f003 0302 	and.w	r3, r3, #2
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1ea      	bne.n	80052be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0304 	and.w	r3, r3, #4
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	f000 8097 	beq.w	8005424 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052f6:	2300      	movs	r3, #0
 80052f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052fa:	4b81      	ldr	r3, [pc, #516]	@ (8005500 <HAL_RCC_OscConfig+0x470>)
 80052fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d10f      	bne.n	8005326 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005306:	2300      	movs	r3, #0
 8005308:	60bb      	str	r3, [r7, #8]
 800530a:	4b7d      	ldr	r3, [pc, #500]	@ (8005500 <HAL_RCC_OscConfig+0x470>)
 800530c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800530e:	4a7c      	ldr	r2, [pc, #496]	@ (8005500 <HAL_RCC_OscConfig+0x470>)
 8005310:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005314:	6413      	str	r3, [r2, #64]	@ 0x40
 8005316:	4b7a      	ldr	r3, [pc, #488]	@ (8005500 <HAL_RCC_OscConfig+0x470>)
 8005318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800531a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800531e:	60bb      	str	r3, [r7, #8]
 8005320:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005322:	2301      	movs	r3, #1
 8005324:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005326:	4b77      	ldr	r3, [pc, #476]	@ (8005504 <HAL_RCC_OscConfig+0x474>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800532e:	2b00      	cmp	r3, #0
 8005330:	d118      	bne.n	8005364 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005332:	4b74      	ldr	r3, [pc, #464]	@ (8005504 <HAL_RCC_OscConfig+0x474>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a73      	ldr	r2, [pc, #460]	@ (8005504 <HAL_RCC_OscConfig+0x474>)
 8005338:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800533c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800533e:	f7fd f8af 	bl	80024a0 <HAL_GetTick>
 8005342:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005344:	e008      	b.n	8005358 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005346:	f7fd f8ab 	bl	80024a0 <HAL_GetTick>
 800534a:	4602      	mov	r2, r0
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	2b02      	cmp	r3, #2
 8005352:	d901      	bls.n	8005358 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005354:	2303      	movs	r3, #3
 8005356:	e10c      	b.n	8005572 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005358:	4b6a      	ldr	r3, [pc, #424]	@ (8005504 <HAL_RCC_OscConfig+0x474>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005360:	2b00      	cmp	r3, #0
 8005362:	d0f0      	beq.n	8005346 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	2b01      	cmp	r3, #1
 800536a:	d106      	bne.n	800537a <HAL_RCC_OscConfig+0x2ea>
 800536c:	4b64      	ldr	r3, [pc, #400]	@ (8005500 <HAL_RCC_OscConfig+0x470>)
 800536e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005370:	4a63      	ldr	r2, [pc, #396]	@ (8005500 <HAL_RCC_OscConfig+0x470>)
 8005372:	f043 0301 	orr.w	r3, r3, #1
 8005376:	6713      	str	r3, [r2, #112]	@ 0x70
 8005378:	e01c      	b.n	80053b4 <HAL_RCC_OscConfig+0x324>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	2b05      	cmp	r3, #5
 8005380:	d10c      	bne.n	800539c <HAL_RCC_OscConfig+0x30c>
 8005382:	4b5f      	ldr	r3, [pc, #380]	@ (8005500 <HAL_RCC_OscConfig+0x470>)
 8005384:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005386:	4a5e      	ldr	r2, [pc, #376]	@ (8005500 <HAL_RCC_OscConfig+0x470>)
 8005388:	f043 0304 	orr.w	r3, r3, #4
 800538c:	6713      	str	r3, [r2, #112]	@ 0x70
 800538e:	4b5c      	ldr	r3, [pc, #368]	@ (8005500 <HAL_RCC_OscConfig+0x470>)
 8005390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005392:	4a5b      	ldr	r2, [pc, #364]	@ (8005500 <HAL_RCC_OscConfig+0x470>)
 8005394:	f043 0301 	orr.w	r3, r3, #1
 8005398:	6713      	str	r3, [r2, #112]	@ 0x70
 800539a:	e00b      	b.n	80053b4 <HAL_RCC_OscConfig+0x324>
 800539c:	4b58      	ldr	r3, [pc, #352]	@ (8005500 <HAL_RCC_OscConfig+0x470>)
 800539e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053a0:	4a57      	ldr	r2, [pc, #348]	@ (8005500 <HAL_RCC_OscConfig+0x470>)
 80053a2:	f023 0301 	bic.w	r3, r3, #1
 80053a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80053a8:	4b55      	ldr	r3, [pc, #340]	@ (8005500 <HAL_RCC_OscConfig+0x470>)
 80053aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ac:	4a54      	ldr	r2, [pc, #336]	@ (8005500 <HAL_RCC_OscConfig+0x470>)
 80053ae:	f023 0304 	bic.w	r3, r3, #4
 80053b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d015      	beq.n	80053e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053bc:	f7fd f870 	bl	80024a0 <HAL_GetTick>
 80053c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053c2:	e00a      	b.n	80053da <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053c4:	f7fd f86c 	bl	80024a0 <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d901      	bls.n	80053da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e0cb      	b.n	8005572 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053da:	4b49      	ldr	r3, [pc, #292]	@ (8005500 <HAL_RCC_OscConfig+0x470>)
 80053dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053de:	f003 0302 	and.w	r3, r3, #2
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d0ee      	beq.n	80053c4 <HAL_RCC_OscConfig+0x334>
 80053e6:	e014      	b.n	8005412 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053e8:	f7fd f85a 	bl	80024a0 <HAL_GetTick>
 80053ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053ee:	e00a      	b.n	8005406 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053f0:	f7fd f856 	bl	80024a0 <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053fe:	4293      	cmp	r3, r2
 8005400:	d901      	bls.n	8005406 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	e0b5      	b.n	8005572 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005406:	4b3e      	ldr	r3, [pc, #248]	@ (8005500 <HAL_RCC_OscConfig+0x470>)
 8005408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800540a:	f003 0302 	and.w	r3, r3, #2
 800540e:	2b00      	cmp	r3, #0
 8005410:	d1ee      	bne.n	80053f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005412:	7dfb      	ldrb	r3, [r7, #23]
 8005414:	2b01      	cmp	r3, #1
 8005416:	d105      	bne.n	8005424 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005418:	4b39      	ldr	r3, [pc, #228]	@ (8005500 <HAL_RCC_OscConfig+0x470>)
 800541a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800541c:	4a38      	ldr	r2, [pc, #224]	@ (8005500 <HAL_RCC_OscConfig+0x470>)
 800541e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005422:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	699b      	ldr	r3, [r3, #24]
 8005428:	2b00      	cmp	r3, #0
 800542a:	f000 80a1 	beq.w	8005570 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800542e:	4b34      	ldr	r3, [pc, #208]	@ (8005500 <HAL_RCC_OscConfig+0x470>)
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	f003 030c 	and.w	r3, r3, #12
 8005436:	2b08      	cmp	r3, #8
 8005438:	d05c      	beq.n	80054f4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	2b02      	cmp	r3, #2
 8005440:	d141      	bne.n	80054c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005442:	4b31      	ldr	r3, [pc, #196]	@ (8005508 <HAL_RCC_OscConfig+0x478>)
 8005444:	2200      	movs	r2, #0
 8005446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005448:	f7fd f82a 	bl	80024a0 <HAL_GetTick>
 800544c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800544e:	e008      	b.n	8005462 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005450:	f7fd f826 	bl	80024a0 <HAL_GetTick>
 8005454:	4602      	mov	r2, r0
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	2b02      	cmp	r3, #2
 800545c:	d901      	bls.n	8005462 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e087      	b.n	8005572 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005462:	4b27      	ldr	r3, [pc, #156]	@ (8005500 <HAL_RCC_OscConfig+0x470>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1f0      	bne.n	8005450 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	69da      	ldr	r2, [r3, #28]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	431a      	orrs	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800547c:	019b      	lsls	r3, r3, #6
 800547e:	431a      	orrs	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005484:	085b      	lsrs	r3, r3, #1
 8005486:	3b01      	subs	r3, #1
 8005488:	041b      	lsls	r3, r3, #16
 800548a:	431a      	orrs	r2, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005490:	061b      	lsls	r3, r3, #24
 8005492:	491b      	ldr	r1, [pc, #108]	@ (8005500 <HAL_RCC_OscConfig+0x470>)
 8005494:	4313      	orrs	r3, r2
 8005496:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005498:	4b1b      	ldr	r3, [pc, #108]	@ (8005508 <HAL_RCC_OscConfig+0x478>)
 800549a:	2201      	movs	r2, #1
 800549c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800549e:	f7fc ffff 	bl	80024a0 <HAL_GetTick>
 80054a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054a4:	e008      	b.n	80054b8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054a6:	f7fc fffb 	bl	80024a0 <HAL_GetTick>
 80054aa:	4602      	mov	r2, r0
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d901      	bls.n	80054b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e05c      	b.n	8005572 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054b8:	4b11      	ldr	r3, [pc, #68]	@ (8005500 <HAL_RCC_OscConfig+0x470>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d0f0      	beq.n	80054a6 <HAL_RCC_OscConfig+0x416>
 80054c4:	e054      	b.n	8005570 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054c6:	4b10      	ldr	r3, [pc, #64]	@ (8005508 <HAL_RCC_OscConfig+0x478>)
 80054c8:	2200      	movs	r2, #0
 80054ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054cc:	f7fc ffe8 	bl	80024a0 <HAL_GetTick>
 80054d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054d2:	e008      	b.n	80054e6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054d4:	f7fc ffe4 	bl	80024a0 <HAL_GetTick>
 80054d8:	4602      	mov	r2, r0
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d901      	bls.n	80054e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e045      	b.n	8005572 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054e6:	4b06      	ldr	r3, [pc, #24]	@ (8005500 <HAL_RCC_OscConfig+0x470>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d1f0      	bne.n	80054d4 <HAL_RCC_OscConfig+0x444>
 80054f2:	e03d      	b.n	8005570 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	699b      	ldr	r3, [r3, #24]
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d107      	bne.n	800550c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e038      	b.n	8005572 <HAL_RCC_OscConfig+0x4e2>
 8005500:	40023800 	.word	0x40023800
 8005504:	40007000 	.word	0x40007000
 8005508:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800550c:	4b1b      	ldr	r3, [pc, #108]	@ (800557c <HAL_RCC_OscConfig+0x4ec>)
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	2b01      	cmp	r3, #1
 8005518:	d028      	beq.n	800556c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005524:	429a      	cmp	r2, r3
 8005526:	d121      	bne.n	800556c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005532:	429a      	cmp	r2, r3
 8005534:	d11a      	bne.n	800556c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800553c:	4013      	ands	r3, r2
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005542:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005544:	4293      	cmp	r3, r2
 8005546:	d111      	bne.n	800556c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005552:	085b      	lsrs	r3, r3, #1
 8005554:	3b01      	subs	r3, #1
 8005556:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005558:	429a      	cmp	r2, r3
 800555a:	d107      	bne.n	800556c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005566:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005568:	429a      	cmp	r2, r3
 800556a:	d001      	beq.n	8005570 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e000      	b.n	8005572 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3718      	adds	r7, #24
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	40023800 	.word	0x40023800

08005580 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d101      	bne.n	8005594 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e0cc      	b.n	800572e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005594:	4b68      	ldr	r3, [pc, #416]	@ (8005738 <HAL_RCC_ClockConfig+0x1b8>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0307 	and.w	r3, r3, #7
 800559c:	683a      	ldr	r2, [r7, #0]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d90c      	bls.n	80055bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055a2:	4b65      	ldr	r3, [pc, #404]	@ (8005738 <HAL_RCC_ClockConfig+0x1b8>)
 80055a4:	683a      	ldr	r2, [r7, #0]
 80055a6:	b2d2      	uxtb	r2, r2
 80055a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055aa:	4b63      	ldr	r3, [pc, #396]	@ (8005738 <HAL_RCC_ClockConfig+0x1b8>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0307 	and.w	r3, r3, #7
 80055b2:	683a      	ldr	r2, [r7, #0]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d001      	beq.n	80055bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e0b8      	b.n	800572e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0302 	and.w	r3, r3, #2
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d020      	beq.n	800560a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0304 	and.w	r3, r3, #4
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d005      	beq.n	80055e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055d4:	4b59      	ldr	r3, [pc, #356]	@ (800573c <HAL_RCC_ClockConfig+0x1bc>)
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	4a58      	ldr	r2, [pc, #352]	@ (800573c <HAL_RCC_ClockConfig+0x1bc>)
 80055da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80055de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0308 	and.w	r3, r3, #8
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d005      	beq.n	80055f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055ec:	4b53      	ldr	r3, [pc, #332]	@ (800573c <HAL_RCC_ClockConfig+0x1bc>)
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	4a52      	ldr	r2, [pc, #328]	@ (800573c <HAL_RCC_ClockConfig+0x1bc>)
 80055f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80055f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055f8:	4b50      	ldr	r3, [pc, #320]	@ (800573c <HAL_RCC_ClockConfig+0x1bc>)
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	494d      	ldr	r1, [pc, #308]	@ (800573c <HAL_RCC_ClockConfig+0x1bc>)
 8005606:	4313      	orrs	r3, r2
 8005608:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0301 	and.w	r3, r3, #1
 8005612:	2b00      	cmp	r3, #0
 8005614:	d044      	beq.n	80056a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	2b01      	cmp	r3, #1
 800561c:	d107      	bne.n	800562e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800561e:	4b47      	ldr	r3, [pc, #284]	@ (800573c <HAL_RCC_ClockConfig+0x1bc>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005626:	2b00      	cmp	r3, #0
 8005628:	d119      	bne.n	800565e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e07f      	b.n	800572e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	2b02      	cmp	r3, #2
 8005634:	d003      	beq.n	800563e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800563a:	2b03      	cmp	r3, #3
 800563c:	d107      	bne.n	800564e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800563e:	4b3f      	ldr	r3, [pc, #252]	@ (800573c <HAL_RCC_ClockConfig+0x1bc>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d109      	bne.n	800565e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e06f      	b.n	800572e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800564e:	4b3b      	ldr	r3, [pc, #236]	@ (800573c <HAL_RCC_ClockConfig+0x1bc>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0302 	and.w	r3, r3, #2
 8005656:	2b00      	cmp	r3, #0
 8005658:	d101      	bne.n	800565e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e067      	b.n	800572e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800565e:	4b37      	ldr	r3, [pc, #220]	@ (800573c <HAL_RCC_ClockConfig+0x1bc>)
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f023 0203 	bic.w	r2, r3, #3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	4934      	ldr	r1, [pc, #208]	@ (800573c <HAL_RCC_ClockConfig+0x1bc>)
 800566c:	4313      	orrs	r3, r2
 800566e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005670:	f7fc ff16 	bl	80024a0 <HAL_GetTick>
 8005674:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005676:	e00a      	b.n	800568e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005678:	f7fc ff12 	bl	80024a0 <HAL_GetTick>
 800567c:	4602      	mov	r2, r0
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005686:	4293      	cmp	r3, r2
 8005688:	d901      	bls.n	800568e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e04f      	b.n	800572e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800568e:	4b2b      	ldr	r3, [pc, #172]	@ (800573c <HAL_RCC_ClockConfig+0x1bc>)
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	f003 020c 	and.w	r2, r3, #12
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	429a      	cmp	r2, r3
 800569e:	d1eb      	bne.n	8005678 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056a0:	4b25      	ldr	r3, [pc, #148]	@ (8005738 <HAL_RCC_ClockConfig+0x1b8>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0307 	and.w	r3, r3, #7
 80056a8:	683a      	ldr	r2, [r7, #0]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d20c      	bcs.n	80056c8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056ae:	4b22      	ldr	r3, [pc, #136]	@ (8005738 <HAL_RCC_ClockConfig+0x1b8>)
 80056b0:	683a      	ldr	r2, [r7, #0]
 80056b2:	b2d2      	uxtb	r2, r2
 80056b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056b6:	4b20      	ldr	r3, [pc, #128]	@ (8005738 <HAL_RCC_ClockConfig+0x1b8>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0307 	and.w	r3, r3, #7
 80056be:	683a      	ldr	r2, [r7, #0]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d001      	beq.n	80056c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e032      	b.n	800572e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0304 	and.w	r3, r3, #4
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d008      	beq.n	80056e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056d4:	4b19      	ldr	r3, [pc, #100]	@ (800573c <HAL_RCC_ClockConfig+0x1bc>)
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	4916      	ldr	r1, [pc, #88]	@ (800573c <HAL_RCC_ClockConfig+0x1bc>)
 80056e2:	4313      	orrs	r3, r2
 80056e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 0308 	and.w	r3, r3, #8
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d009      	beq.n	8005706 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056f2:	4b12      	ldr	r3, [pc, #72]	@ (800573c <HAL_RCC_ClockConfig+0x1bc>)
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	00db      	lsls	r3, r3, #3
 8005700:	490e      	ldr	r1, [pc, #56]	@ (800573c <HAL_RCC_ClockConfig+0x1bc>)
 8005702:	4313      	orrs	r3, r2
 8005704:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005706:	f000 f821 	bl	800574c <HAL_RCC_GetSysClockFreq>
 800570a:	4602      	mov	r2, r0
 800570c:	4b0b      	ldr	r3, [pc, #44]	@ (800573c <HAL_RCC_ClockConfig+0x1bc>)
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	091b      	lsrs	r3, r3, #4
 8005712:	f003 030f 	and.w	r3, r3, #15
 8005716:	490a      	ldr	r1, [pc, #40]	@ (8005740 <HAL_RCC_ClockConfig+0x1c0>)
 8005718:	5ccb      	ldrb	r3, [r1, r3]
 800571a:	fa22 f303 	lsr.w	r3, r2, r3
 800571e:	4a09      	ldr	r2, [pc, #36]	@ (8005744 <HAL_RCC_ClockConfig+0x1c4>)
 8005720:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005722:	4b09      	ldr	r3, [pc, #36]	@ (8005748 <HAL_RCC_ClockConfig+0x1c8>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4618      	mov	r0, r3
 8005728:	f7fc fe76 	bl	8002418 <HAL_InitTick>

  return HAL_OK;
 800572c:	2300      	movs	r3, #0
}
 800572e:	4618      	mov	r0, r3
 8005730:	3710      	adds	r7, #16
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	40023c00 	.word	0x40023c00
 800573c:	40023800 	.word	0x40023800
 8005740:	0800ad20 	.word	0x0800ad20
 8005744:	20000000 	.word	0x20000000
 8005748:	20000004 	.word	0x20000004

0800574c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800574c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005750:	b090      	sub	sp, #64	@ 0x40
 8005752:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005754:	2300      	movs	r3, #0
 8005756:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005758:	2300      	movs	r3, #0
 800575a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800575c:	2300      	movs	r3, #0
 800575e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005760:	2300      	movs	r3, #0
 8005762:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005764:	4b59      	ldr	r3, [pc, #356]	@ (80058cc <HAL_RCC_GetSysClockFreq+0x180>)
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	f003 030c 	and.w	r3, r3, #12
 800576c:	2b08      	cmp	r3, #8
 800576e:	d00d      	beq.n	800578c <HAL_RCC_GetSysClockFreq+0x40>
 8005770:	2b08      	cmp	r3, #8
 8005772:	f200 80a1 	bhi.w	80058b8 <HAL_RCC_GetSysClockFreq+0x16c>
 8005776:	2b00      	cmp	r3, #0
 8005778:	d002      	beq.n	8005780 <HAL_RCC_GetSysClockFreq+0x34>
 800577a:	2b04      	cmp	r3, #4
 800577c:	d003      	beq.n	8005786 <HAL_RCC_GetSysClockFreq+0x3a>
 800577e:	e09b      	b.n	80058b8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005780:	4b53      	ldr	r3, [pc, #332]	@ (80058d0 <HAL_RCC_GetSysClockFreq+0x184>)
 8005782:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005784:	e09b      	b.n	80058be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005786:	4b53      	ldr	r3, [pc, #332]	@ (80058d4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005788:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800578a:	e098      	b.n	80058be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800578c:	4b4f      	ldr	r3, [pc, #316]	@ (80058cc <HAL_RCC_GetSysClockFreq+0x180>)
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005794:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005796:	4b4d      	ldr	r3, [pc, #308]	@ (80058cc <HAL_RCC_GetSysClockFreq+0x180>)
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d028      	beq.n	80057f4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057a2:	4b4a      	ldr	r3, [pc, #296]	@ (80058cc <HAL_RCC_GetSysClockFreq+0x180>)
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	099b      	lsrs	r3, r3, #6
 80057a8:	2200      	movs	r2, #0
 80057aa:	623b      	str	r3, [r7, #32]
 80057ac:	627a      	str	r2, [r7, #36]	@ 0x24
 80057ae:	6a3b      	ldr	r3, [r7, #32]
 80057b0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80057b4:	2100      	movs	r1, #0
 80057b6:	4b47      	ldr	r3, [pc, #284]	@ (80058d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80057b8:	fb03 f201 	mul.w	r2, r3, r1
 80057bc:	2300      	movs	r3, #0
 80057be:	fb00 f303 	mul.w	r3, r0, r3
 80057c2:	4413      	add	r3, r2
 80057c4:	4a43      	ldr	r2, [pc, #268]	@ (80058d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80057c6:	fba0 1202 	umull	r1, r2, r0, r2
 80057ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80057cc:	460a      	mov	r2, r1
 80057ce:	62ba      	str	r2, [r7, #40]	@ 0x28
 80057d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057d2:	4413      	add	r3, r2
 80057d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057d8:	2200      	movs	r2, #0
 80057da:	61bb      	str	r3, [r7, #24]
 80057dc:	61fa      	str	r2, [r7, #28]
 80057de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80057e6:	f7fb f915 	bl	8000a14 <__aeabi_uldivmod>
 80057ea:	4602      	mov	r2, r0
 80057ec:	460b      	mov	r3, r1
 80057ee:	4613      	mov	r3, r2
 80057f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057f2:	e053      	b.n	800589c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057f4:	4b35      	ldr	r3, [pc, #212]	@ (80058cc <HAL_RCC_GetSysClockFreq+0x180>)
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	099b      	lsrs	r3, r3, #6
 80057fa:	2200      	movs	r2, #0
 80057fc:	613b      	str	r3, [r7, #16]
 80057fe:	617a      	str	r2, [r7, #20]
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005806:	f04f 0b00 	mov.w	fp, #0
 800580a:	4652      	mov	r2, sl
 800580c:	465b      	mov	r3, fp
 800580e:	f04f 0000 	mov.w	r0, #0
 8005812:	f04f 0100 	mov.w	r1, #0
 8005816:	0159      	lsls	r1, r3, #5
 8005818:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800581c:	0150      	lsls	r0, r2, #5
 800581e:	4602      	mov	r2, r0
 8005820:	460b      	mov	r3, r1
 8005822:	ebb2 080a 	subs.w	r8, r2, sl
 8005826:	eb63 090b 	sbc.w	r9, r3, fp
 800582a:	f04f 0200 	mov.w	r2, #0
 800582e:	f04f 0300 	mov.w	r3, #0
 8005832:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005836:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800583a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800583e:	ebb2 0408 	subs.w	r4, r2, r8
 8005842:	eb63 0509 	sbc.w	r5, r3, r9
 8005846:	f04f 0200 	mov.w	r2, #0
 800584a:	f04f 0300 	mov.w	r3, #0
 800584e:	00eb      	lsls	r3, r5, #3
 8005850:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005854:	00e2      	lsls	r2, r4, #3
 8005856:	4614      	mov	r4, r2
 8005858:	461d      	mov	r5, r3
 800585a:	eb14 030a 	adds.w	r3, r4, sl
 800585e:	603b      	str	r3, [r7, #0]
 8005860:	eb45 030b 	adc.w	r3, r5, fp
 8005864:	607b      	str	r3, [r7, #4]
 8005866:	f04f 0200 	mov.w	r2, #0
 800586a:	f04f 0300 	mov.w	r3, #0
 800586e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005872:	4629      	mov	r1, r5
 8005874:	028b      	lsls	r3, r1, #10
 8005876:	4621      	mov	r1, r4
 8005878:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800587c:	4621      	mov	r1, r4
 800587e:	028a      	lsls	r2, r1, #10
 8005880:	4610      	mov	r0, r2
 8005882:	4619      	mov	r1, r3
 8005884:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005886:	2200      	movs	r2, #0
 8005888:	60bb      	str	r3, [r7, #8]
 800588a:	60fa      	str	r2, [r7, #12]
 800588c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005890:	f7fb f8c0 	bl	8000a14 <__aeabi_uldivmod>
 8005894:	4602      	mov	r2, r0
 8005896:	460b      	mov	r3, r1
 8005898:	4613      	mov	r3, r2
 800589a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800589c:	4b0b      	ldr	r3, [pc, #44]	@ (80058cc <HAL_RCC_GetSysClockFreq+0x180>)
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	0c1b      	lsrs	r3, r3, #16
 80058a2:	f003 0303 	and.w	r3, r3, #3
 80058a6:	3301      	adds	r3, #1
 80058a8:	005b      	lsls	r3, r3, #1
 80058aa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80058ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80058ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058b4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80058b6:	e002      	b.n	80058be <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80058b8:	4b05      	ldr	r3, [pc, #20]	@ (80058d0 <HAL_RCC_GetSysClockFreq+0x184>)
 80058ba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80058bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3740      	adds	r7, #64	@ 0x40
 80058c4:	46bd      	mov	sp, r7
 80058c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058ca:	bf00      	nop
 80058cc:	40023800 	.word	0x40023800
 80058d0:	00f42400 	.word	0x00f42400
 80058d4:	017d7840 	.word	0x017d7840

080058d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058d8:	b480      	push	{r7}
 80058da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058dc:	4b03      	ldr	r3, [pc, #12]	@ (80058ec <HAL_RCC_GetHCLKFreq+0x14>)
 80058de:	681b      	ldr	r3, [r3, #0]
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr
 80058ea:	bf00      	nop
 80058ec:	20000000 	.word	0x20000000

080058f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80058f4:	f7ff fff0 	bl	80058d8 <HAL_RCC_GetHCLKFreq>
 80058f8:	4602      	mov	r2, r0
 80058fa:	4b05      	ldr	r3, [pc, #20]	@ (8005910 <HAL_RCC_GetPCLK1Freq+0x20>)
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	0a9b      	lsrs	r3, r3, #10
 8005900:	f003 0307 	and.w	r3, r3, #7
 8005904:	4903      	ldr	r1, [pc, #12]	@ (8005914 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005906:	5ccb      	ldrb	r3, [r1, r3]
 8005908:	fa22 f303 	lsr.w	r3, r2, r3
}
 800590c:	4618      	mov	r0, r3
 800590e:	bd80      	pop	{r7, pc}
 8005910:	40023800 	.word	0x40023800
 8005914:	0800ad30 	.word	0x0800ad30

08005918 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b082      	sub	sp, #8
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d101      	bne.n	800592a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e041      	b.n	80059ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b00      	cmp	r3, #0
 8005934:	d106      	bne.n	8005944 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f7fc fb4c 	bl	8001fdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2202      	movs	r2, #2
 8005948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	3304      	adds	r3, #4
 8005954:	4619      	mov	r1, r3
 8005956:	4610      	mov	r0, r2
 8005958:	f000 fdca 	bl	80064f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3708      	adds	r7, #8
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
	...

080059b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d001      	beq.n	80059d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e03c      	b.n	8005a4a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2202      	movs	r2, #2
 80059d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a1e      	ldr	r2, [pc, #120]	@ (8005a58 <HAL_TIM_Base_Start+0xa0>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d018      	beq.n	8005a14 <HAL_TIM_Base_Start+0x5c>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059ea:	d013      	beq.n	8005a14 <HAL_TIM_Base_Start+0x5c>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a1a      	ldr	r2, [pc, #104]	@ (8005a5c <HAL_TIM_Base_Start+0xa4>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d00e      	beq.n	8005a14 <HAL_TIM_Base_Start+0x5c>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a19      	ldr	r2, [pc, #100]	@ (8005a60 <HAL_TIM_Base_Start+0xa8>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d009      	beq.n	8005a14 <HAL_TIM_Base_Start+0x5c>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a17      	ldr	r2, [pc, #92]	@ (8005a64 <HAL_TIM_Base_Start+0xac>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d004      	beq.n	8005a14 <HAL_TIM_Base_Start+0x5c>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a16      	ldr	r2, [pc, #88]	@ (8005a68 <HAL_TIM_Base_Start+0xb0>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d111      	bne.n	8005a38 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	f003 0307 	and.w	r3, r3, #7
 8005a1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2b06      	cmp	r3, #6
 8005a24:	d010      	beq.n	8005a48 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f042 0201 	orr.w	r2, r2, #1
 8005a34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a36:	e007      	b.n	8005a48 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f042 0201 	orr.w	r2, r2, #1
 8005a46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3714      	adds	r7, #20
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	40010000 	.word	0x40010000
 8005a5c:	40000400 	.word	0x40000400
 8005a60:	40000800 	.word	0x40000800
 8005a64:	40000c00 	.word	0x40000c00
 8005a68:	40014000 	.word	0x40014000

08005a6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d001      	beq.n	8005a84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e044      	b.n	8005b0e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2202      	movs	r2, #2
 8005a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68da      	ldr	r2, [r3, #12]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f042 0201 	orr.w	r2, r2, #1
 8005a9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a1e      	ldr	r2, [pc, #120]	@ (8005b1c <HAL_TIM_Base_Start_IT+0xb0>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d018      	beq.n	8005ad8 <HAL_TIM_Base_Start_IT+0x6c>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005aae:	d013      	beq.n	8005ad8 <HAL_TIM_Base_Start_IT+0x6c>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a1a      	ldr	r2, [pc, #104]	@ (8005b20 <HAL_TIM_Base_Start_IT+0xb4>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d00e      	beq.n	8005ad8 <HAL_TIM_Base_Start_IT+0x6c>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a19      	ldr	r2, [pc, #100]	@ (8005b24 <HAL_TIM_Base_Start_IT+0xb8>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d009      	beq.n	8005ad8 <HAL_TIM_Base_Start_IT+0x6c>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a17      	ldr	r2, [pc, #92]	@ (8005b28 <HAL_TIM_Base_Start_IT+0xbc>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d004      	beq.n	8005ad8 <HAL_TIM_Base_Start_IT+0x6c>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a16      	ldr	r2, [pc, #88]	@ (8005b2c <HAL_TIM_Base_Start_IT+0xc0>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d111      	bne.n	8005afc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	f003 0307 	and.w	r3, r3, #7
 8005ae2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2b06      	cmp	r3, #6
 8005ae8:	d010      	beq.n	8005b0c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f042 0201 	orr.w	r2, r2, #1
 8005af8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005afa:	e007      	b.n	8005b0c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f042 0201 	orr.w	r2, r2, #1
 8005b0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3714      	adds	r7, #20
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop
 8005b1c:	40010000 	.word	0x40010000
 8005b20:	40000400 	.word	0x40000400
 8005b24:	40000800 	.word	0x40000800
 8005b28:	40000c00 	.word	0x40000c00
 8005b2c:	40014000 	.word	0x40014000

08005b30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b082      	sub	sp, #8
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d101      	bne.n	8005b42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e041      	b.n	8005bc6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d106      	bne.n	8005b5c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 f839 	bl	8005bce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2202      	movs	r2, #2
 8005b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	3304      	adds	r3, #4
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	4610      	mov	r0, r2
 8005b70:	f000 fcbe 	bl	80064f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3708      	adds	r7, #8
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}

08005bce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005bce:	b480      	push	{r7}
 8005bd0:	b083      	sub	sp, #12
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005bd6:	bf00      	nop
 8005bd8:	370c      	adds	r7, #12
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
	...

08005be4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d109      	bne.n	8005c08 <HAL_TIM_PWM_Start+0x24>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	bf14      	ite	ne
 8005c00:	2301      	movne	r3, #1
 8005c02:	2300      	moveq	r3, #0
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	e022      	b.n	8005c4e <HAL_TIM_PWM_Start+0x6a>
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	2b04      	cmp	r3, #4
 8005c0c:	d109      	bne.n	8005c22 <HAL_TIM_PWM_Start+0x3e>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	bf14      	ite	ne
 8005c1a:	2301      	movne	r3, #1
 8005c1c:	2300      	moveq	r3, #0
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	e015      	b.n	8005c4e <HAL_TIM_PWM_Start+0x6a>
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	2b08      	cmp	r3, #8
 8005c26:	d109      	bne.n	8005c3c <HAL_TIM_PWM_Start+0x58>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	bf14      	ite	ne
 8005c34:	2301      	movne	r3, #1
 8005c36:	2300      	moveq	r3, #0
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	e008      	b.n	8005c4e <HAL_TIM_PWM_Start+0x6a>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	bf14      	ite	ne
 8005c48:	2301      	movne	r3, #1
 8005c4a:	2300      	moveq	r3, #0
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d001      	beq.n	8005c56 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e068      	b.n	8005d28 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d104      	bne.n	8005c66 <HAL_TIM_PWM_Start+0x82>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2202      	movs	r2, #2
 8005c60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c64:	e013      	b.n	8005c8e <HAL_TIM_PWM_Start+0xaa>
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	2b04      	cmp	r3, #4
 8005c6a:	d104      	bne.n	8005c76 <HAL_TIM_PWM_Start+0x92>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2202      	movs	r2, #2
 8005c70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c74:	e00b      	b.n	8005c8e <HAL_TIM_PWM_Start+0xaa>
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	2b08      	cmp	r3, #8
 8005c7a:	d104      	bne.n	8005c86 <HAL_TIM_PWM_Start+0xa2>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2202      	movs	r2, #2
 8005c80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c84:	e003      	b.n	8005c8e <HAL_TIM_PWM_Start+0xaa>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2202      	movs	r2, #2
 8005c8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2201      	movs	r2, #1
 8005c94:	6839      	ldr	r1, [r7, #0]
 8005c96:	4618      	mov	r0, r3
 8005c98:	f000 fedc 	bl	8006a54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a23      	ldr	r2, [pc, #140]	@ (8005d30 <HAL_TIM_PWM_Start+0x14c>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d107      	bne.n	8005cb6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005cb4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a1d      	ldr	r2, [pc, #116]	@ (8005d30 <HAL_TIM_PWM_Start+0x14c>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d018      	beq.n	8005cf2 <HAL_TIM_PWM_Start+0x10e>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cc8:	d013      	beq.n	8005cf2 <HAL_TIM_PWM_Start+0x10e>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a19      	ldr	r2, [pc, #100]	@ (8005d34 <HAL_TIM_PWM_Start+0x150>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d00e      	beq.n	8005cf2 <HAL_TIM_PWM_Start+0x10e>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a17      	ldr	r2, [pc, #92]	@ (8005d38 <HAL_TIM_PWM_Start+0x154>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d009      	beq.n	8005cf2 <HAL_TIM_PWM_Start+0x10e>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a16      	ldr	r2, [pc, #88]	@ (8005d3c <HAL_TIM_PWM_Start+0x158>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d004      	beq.n	8005cf2 <HAL_TIM_PWM_Start+0x10e>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a14      	ldr	r2, [pc, #80]	@ (8005d40 <HAL_TIM_PWM_Start+0x15c>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d111      	bne.n	8005d16 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	f003 0307 	and.w	r3, r3, #7
 8005cfc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2b06      	cmp	r3, #6
 8005d02:	d010      	beq.n	8005d26 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f042 0201 	orr.w	r2, r2, #1
 8005d12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d14:	e007      	b.n	8005d26 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f042 0201 	orr.w	r2, r2, #1
 8005d24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3710      	adds	r7, #16
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	40010000 	.word	0x40010000
 8005d34:	40000400 	.word	0x40000400
 8005d38:	40000800 	.word	0x40000800
 8005d3c:	40000c00 	.word	0x40000c00
 8005d40:	40014000 	.word	0x40014000

08005d44 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b086      	sub	sp, #24
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d101      	bne.n	8005d58 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e097      	b.n	8005e88 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d106      	bne.n	8005d72 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f7fc f9c5 	bl	80020fc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2202      	movs	r2, #2
 8005d76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	6812      	ldr	r2, [r2, #0]
 8005d84:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d88:	f023 0307 	bic.w	r3, r3, #7
 8005d8c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	3304      	adds	r3, #4
 8005d96:	4619      	mov	r1, r3
 8005d98:	4610      	mov	r0, r2
 8005d9a:	f000 fba9 	bl	80064f0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	699b      	ldr	r3, [r3, #24]
 8005dac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	6a1b      	ldr	r3, [r3, #32]
 8005db4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	697a      	ldr	r2, [r7, #20]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dc6:	f023 0303 	bic.w	r3, r3, #3
 8005dca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	689a      	ldr	r2, [r3, #8]
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	021b      	lsls	r3, r3, #8
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005de4:	f023 030c 	bic.w	r3, r3, #12
 8005de8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005df0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005df4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	68da      	ldr	r2, [r3, #12]
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	69db      	ldr	r3, [r3, #28]
 8005dfe:	021b      	lsls	r3, r3, #8
 8005e00:	4313      	orrs	r3, r2
 8005e02:	693a      	ldr	r2, [r7, #16]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	011a      	lsls	r2, r3, #4
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	6a1b      	ldr	r3, [r3, #32]
 8005e12:	031b      	lsls	r3, r3, #12
 8005e14:	4313      	orrs	r3, r2
 8005e16:	693a      	ldr	r2, [r7, #16]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005e22:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005e2a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	685a      	ldr	r2, [r3, #4]
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	695b      	ldr	r3, [r3, #20]
 8005e34:	011b      	lsls	r3, r3, #4
 8005e36:	4313      	orrs	r3, r2
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	697a      	ldr	r2, [r7, #20]
 8005e44:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	693a      	ldr	r2, [r7, #16]
 8005e4c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2201      	movs	r2, #1
 8005e62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2201      	movs	r2, #1
 8005e72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2201      	movs	r2, #1
 8005e82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3718      	adds	r7, #24
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005ea0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005ea8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005eb0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005eb8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d110      	bne.n	8005ee2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ec0:	7bfb      	ldrb	r3, [r7, #15]
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d102      	bne.n	8005ecc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ec6:	7b7b      	ldrb	r3, [r7, #13]
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d001      	beq.n	8005ed0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e069      	b.n	8005fa4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2202      	movs	r2, #2
 8005edc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ee0:	e031      	b.n	8005f46 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	2b04      	cmp	r3, #4
 8005ee6:	d110      	bne.n	8005f0a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ee8:	7bbb      	ldrb	r3, [r7, #14]
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d102      	bne.n	8005ef4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005eee:	7b3b      	ldrb	r3, [r7, #12]
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d001      	beq.n	8005ef8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e055      	b.n	8005fa4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2202      	movs	r2, #2
 8005efc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2202      	movs	r2, #2
 8005f04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005f08:	e01d      	b.n	8005f46 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f0a:	7bfb      	ldrb	r3, [r7, #15]
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d108      	bne.n	8005f22 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f10:	7bbb      	ldrb	r3, [r7, #14]
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d105      	bne.n	8005f22 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f16:	7b7b      	ldrb	r3, [r7, #13]
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d102      	bne.n	8005f22 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f1c:	7b3b      	ldrb	r3, [r7, #12]
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d001      	beq.n	8005f26 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e03e      	b.n	8005fa4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2202      	movs	r2, #2
 8005f2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2202      	movs	r2, #2
 8005f32:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2202      	movs	r2, #2
 8005f3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2202      	movs	r2, #2
 8005f42:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d003      	beq.n	8005f54 <HAL_TIM_Encoder_Start+0xc4>
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	2b04      	cmp	r3, #4
 8005f50:	d008      	beq.n	8005f64 <HAL_TIM_Encoder_Start+0xd4>
 8005f52:	e00f      	b.n	8005f74 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	2100      	movs	r1, #0
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f000 fd79 	bl	8006a54 <TIM_CCxChannelCmd>
      break;
 8005f62:	e016      	b.n	8005f92 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	2104      	movs	r1, #4
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f000 fd71 	bl	8006a54 <TIM_CCxChannelCmd>
      break;
 8005f72:	e00e      	b.n	8005f92 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	2100      	movs	r1, #0
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f000 fd69 	bl	8006a54 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2201      	movs	r2, #1
 8005f88:	2104      	movs	r1, #4
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f000 fd62 	bl	8006a54 <TIM_CCxChannelCmd>
      break;
 8005f90:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f042 0201 	orr.w	r2, r2, #1
 8005fa0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005fa2:	2300      	movs	r3, #0
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3710      	adds	r7, #16
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	f003 0302 	and.w	r3, r3, #2
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d020      	beq.n	8006010 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f003 0302 	and.w	r3, r3, #2
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d01b      	beq.n	8006010 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f06f 0202 	mvn.w	r2, #2
 8005fe0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	699b      	ldr	r3, [r3, #24]
 8005fee:	f003 0303 	and.w	r3, r3, #3
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d003      	beq.n	8005ffe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 fa5b 	bl	80064b2 <HAL_TIM_IC_CaptureCallback>
 8005ffc:	e005      	b.n	800600a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 fa4d 	bl	800649e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 fa5e 	bl	80064c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	f003 0304 	and.w	r3, r3, #4
 8006016:	2b00      	cmp	r3, #0
 8006018:	d020      	beq.n	800605c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f003 0304 	and.w	r3, r3, #4
 8006020:	2b00      	cmp	r3, #0
 8006022:	d01b      	beq.n	800605c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f06f 0204 	mvn.w	r2, #4
 800602c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2202      	movs	r2, #2
 8006032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	699b      	ldr	r3, [r3, #24]
 800603a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800603e:	2b00      	cmp	r3, #0
 8006040:	d003      	beq.n	800604a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 fa35 	bl	80064b2 <HAL_TIM_IC_CaptureCallback>
 8006048:	e005      	b.n	8006056 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 fa27 	bl	800649e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 fa38 	bl	80064c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	f003 0308 	and.w	r3, r3, #8
 8006062:	2b00      	cmp	r3, #0
 8006064:	d020      	beq.n	80060a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f003 0308 	and.w	r3, r3, #8
 800606c:	2b00      	cmp	r3, #0
 800606e:	d01b      	beq.n	80060a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f06f 0208 	mvn.w	r2, #8
 8006078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2204      	movs	r2, #4
 800607e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	69db      	ldr	r3, [r3, #28]
 8006086:	f003 0303 	and.w	r3, r3, #3
 800608a:	2b00      	cmp	r3, #0
 800608c:	d003      	beq.n	8006096 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 fa0f 	bl	80064b2 <HAL_TIM_IC_CaptureCallback>
 8006094:	e005      	b.n	80060a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 fa01 	bl	800649e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f000 fa12 	bl	80064c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	f003 0310 	and.w	r3, r3, #16
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d020      	beq.n	80060f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f003 0310 	and.w	r3, r3, #16
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d01b      	beq.n	80060f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f06f 0210 	mvn.w	r2, #16
 80060c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2208      	movs	r2, #8
 80060ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	69db      	ldr	r3, [r3, #28]
 80060d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d003      	beq.n	80060e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 f9e9 	bl	80064b2 <HAL_TIM_IC_CaptureCallback>
 80060e0:	e005      	b.n	80060ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 f9db 	bl	800649e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 f9ec 	bl	80064c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	f003 0301 	and.w	r3, r3, #1
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00c      	beq.n	8006118 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f003 0301 	and.w	r3, r3, #1
 8006104:	2b00      	cmp	r3, #0
 8006106:	d007      	beq.n	8006118 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f06f 0201 	mvn.w	r2, #1
 8006110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f7fb fd34 	bl	8001b80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800611e:	2b00      	cmp	r3, #0
 8006120:	d00c      	beq.n	800613c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006128:	2b00      	cmp	r3, #0
 800612a:	d007      	beq.n	800613c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 fd2a 	bl	8006b90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00c      	beq.n	8006160 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800614c:	2b00      	cmp	r3, #0
 800614e:	d007      	beq.n	8006160 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 f9bd 	bl	80064da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	f003 0320 	and.w	r3, r3, #32
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00c      	beq.n	8006184 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f003 0320 	and.w	r3, r3, #32
 8006170:	2b00      	cmp	r3, #0
 8006172:	d007      	beq.n	8006184 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f06f 0220 	mvn.w	r2, #32
 800617c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 fcfc 	bl	8006b7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006184:	bf00      	nop
 8006186:	3710      	adds	r7, #16
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b086      	sub	sp, #24
 8006190:	af00      	add	r7, sp, #0
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006198:	2300      	movs	r3, #0
 800619a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d101      	bne.n	80061aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80061a6:	2302      	movs	r3, #2
 80061a8:	e0ae      	b.n	8006308 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2201      	movs	r2, #1
 80061ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2b0c      	cmp	r3, #12
 80061b6:	f200 809f 	bhi.w	80062f8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80061ba:	a201      	add	r2, pc, #4	@ (adr r2, 80061c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80061bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c0:	080061f5 	.word	0x080061f5
 80061c4:	080062f9 	.word	0x080062f9
 80061c8:	080062f9 	.word	0x080062f9
 80061cc:	080062f9 	.word	0x080062f9
 80061d0:	08006235 	.word	0x08006235
 80061d4:	080062f9 	.word	0x080062f9
 80061d8:	080062f9 	.word	0x080062f9
 80061dc:	080062f9 	.word	0x080062f9
 80061e0:	08006277 	.word	0x08006277
 80061e4:	080062f9 	.word	0x080062f9
 80061e8:	080062f9 	.word	0x080062f9
 80061ec:	080062f9 	.word	0x080062f9
 80061f0:	080062b7 	.word	0x080062b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68b9      	ldr	r1, [r7, #8]
 80061fa:	4618      	mov	r0, r3
 80061fc:	f000 fa04 	bl	8006608 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	699a      	ldr	r2, [r3, #24]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f042 0208 	orr.w	r2, r2, #8
 800620e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	699a      	ldr	r2, [r3, #24]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f022 0204 	bic.w	r2, r2, #4
 800621e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	6999      	ldr	r1, [r3, #24]
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	691a      	ldr	r2, [r3, #16]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	430a      	orrs	r2, r1
 8006230:	619a      	str	r2, [r3, #24]
      break;
 8006232:	e064      	b.n	80062fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68b9      	ldr	r1, [r7, #8]
 800623a:	4618      	mov	r0, r3
 800623c:	f000 fa4a 	bl	80066d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	699a      	ldr	r2, [r3, #24]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800624e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	699a      	ldr	r2, [r3, #24]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800625e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	6999      	ldr	r1, [r3, #24]
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	021a      	lsls	r2, r3, #8
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	430a      	orrs	r2, r1
 8006272:	619a      	str	r2, [r3, #24]
      break;
 8006274:	e043      	b.n	80062fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	68b9      	ldr	r1, [r7, #8]
 800627c:	4618      	mov	r0, r3
 800627e:	f000 fa95 	bl	80067ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	69da      	ldr	r2, [r3, #28]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f042 0208 	orr.w	r2, r2, #8
 8006290:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	69da      	ldr	r2, [r3, #28]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f022 0204 	bic.w	r2, r2, #4
 80062a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	69d9      	ldr	r1, [r3, #28]
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	691a      	ldr	r2, [r3, #16]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	430a      	orrs	r2, r1
 80062b2:	61da      	str	r2, [r3, #28]
      break;
 80062b4:	e023      	b.n	80062fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	68b9      	ldr	r1, [r7, #8]
 80062bc:	4618      	mov	r0, r3
 80062be:	f000 fadf 	bl	8006880 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	69da      	ldr	r2, [r3, #28]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80062d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	69da      	ldr	r2, [r3, #28]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	69d9      	ldr	r1, [r3, #28]
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	021a      	lsls	r2, r3, #8
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	430a      	orrs	r2, r1
 80062f4:	61da      	str	r2, [r3, #28]
      break;
 80062f6:	e002      	b.n	80062fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	75fb      	strb	r3, [r7, #23]
      break;
 80062fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2200      	movs	r2, #0
 8006302:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006306:	7dfb      	ldrb	r3, [r7, #23]
}
 8006308:	4618      	mov	r0, r3
 800630a:	3718      	adds	r7, #24
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800631a:	2300      	movs	r3, #0
 800631c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006324:	2b01      	cmp	r3, #1
 8006326:	d101      	bne.n	800632c <HAL_TIM_ConfigClockSource+0x1c>
 8006328:	2302      	movs	r3, #2
 800632a:	e0b4      	b.n	8006496 <HAL_TIM_ConfigClockSource+0x186>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2202      	movs	r2, #2
 8006338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800634a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006352:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	68ba      	ldr	r2, [r7, #8]
 800635a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006364:	d03e      	beq.n	80063e4 <HAL_TIM_ConfigClockSource+0xd4>
 8006366:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800636a:	f200 8087 	bhi.w	800647c <HAL_TIM_ConfigClockSource+0x16c>
 800636e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006372:	f000 8086 	beq.w	8006482 <HAL_TIM_ConfigClockSource+0x172>
 8006376:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800637a:	d87f      	bhi.n	800647c <HAL_TIM_ConfigClockSource+0x16c>
 800637c:	2b70      	cmp	r3, #112	@ 0x70
 800637e:	d01a      	beq.n	80063b6 <HAL_TIM_ConfigClockSource+0xa6>
 8006380:	2b70      	cmp	r3, #112	@ 0x70
 8006382:	d87b      	bhi.n	800647c <HAL_TIM_ConfigClockSource+0x16c>
 8006384:	2b60      	cmp	r3, #96	@ 0x60
 8006386:	d050      	beq.n	800642a <HAL_TIM_ConfigClockSource+0x11a>
 8006388:	2b60      	cmp	r3, #96	@ 0x60
 800638a:	d877      	bhi.n	800647c <HAL_TIM_ConfigClockSource+0x16c>
 800638c:	2b50      	cmp	r3, #80	@ 0x50
 800638e:	d03c      	beq.n	800640a <HAL_TIM_ConfigClockSource+0xfa>
 8006390:	2b50      	cmp	r3, #80	@ 0x50
 8006392:	d873      	bhi.n	800647c <HAL_TIM_ConfigClockSource+0x16c>
 8006394:	2b40      	cmp	r3, #64	@ 0x40
 8006396:	d058      	beq.n	800644a <HAL_TIM_ConfigClockSource+0x13a>
 8006398:	2b40      	cmp	r3, #64	@ 0x40
 800639a:	d86f      	bhi.n	800647c <HAL_TIM_ConfigClockSource+0x16c>
 800639c:	2b30      	cmp	r3, #48	@ 0x30
 800639e:	d064      	beq.n	800646a <HAL_TIM_ConfigClockSource+0x15a>
 80063a0:	2b30      	cmp	r3, #48	@ 0x30
 80063a2:	d86b      	bhi.n	800647c <HAL_TIM_ConfigClockSource+0x16c>
 80063a4:	2b20      	cmp	r3, #32
 80063a6:	d060      	beq.n	800646a <HAL_TIM_ConfigClockSource+0x15a>
 80063a8:	2b20      	cmp	r3, #32
 80063aa:	d867      	bhi.n	800647c <HAL_TIM_ConfigClockSource+0x16c>
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d05c      	beq.n	800646a <HAL_TIM_ConfigClockSource+0x15a>
 80063b0:	2b10      	cmp	r3, #16
 80063b2:	d05a      	beq.n	800646a <HAL_TIM_ConfigClockSource+0x15a>
 80063b4:	e062      	b.n	800647c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80063c6:	f000 fb25 	bl	8006a14 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80063d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68ba      	ldr	r2, [r7, #8]
 80063e0:	609a      	str	r2, [r3, #8]
      break;
 80063e2:	e04f      	b.n	8006484 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80063f4:	f000 fb0e 	bl	8006a14 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	689a      	ldr	r2, [r3, #8]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006406:	609a      	str	r2, [r3, #8]
      break;
 8006408:	e03c      	b.n	8006484 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006416:	461a      	mov	r2, r3
 8006418:	f000 fa82 	bl	8006920 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2150      	movs	r1, #80	@ 0x50
 8006422:	4618      	mov	r0, r3
 8006424:	f000 fadb 	bl	80069de <TIM_ITRx_SetConfig>
      break;
 8006428:	e02c      	b.n	8006484 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006436:	461a      	mov	r2, r3
 8006438:	f000 faa1 	bl	800697e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	2160      	movs	r1, #96	@ 0x60
 8006442:	4618      	mov	r0, r3
 8006444:	f000 facb 	bl	80069de <TIM_ITRx_SetConfig>
      break;
 8006448:	e01c      	b.n	8006484 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006456:	461a      	mov	r2, r3
 8006458:	f000 fa62 	bl	8006920 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2140      	movs	r1, #64	@ 0x40
 8006462:	4618      	mov	r0, r3
 8006464:	f000 fabb 	bl	80069de <TIM_ITRx_SetConfig>
      break;
 8006468:	e00c      	b.n	8006484 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4619      	mov	r1, r3
 8006474:	4610      	mov	r0, r2
 8006476:	f000 fab2 	bl	80069de <TIM_ITRx_SetConfig>
      break;
 800647a:	e003      	b.n	8006484 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	73fb      	strb	r3, [r7, #15]
      break;
 8006480:	e000      	b.n	8006484 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006482:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006494:	7bfb      	ldrb	r3, [r7, #15]
}
 8006496:	4618      	mov	r0, r3
 8006498:	3710      	adds	r7, #16
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}

0800649e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800649e:	b480      	push	{r7}
 80064a0:	b083      	sub	sp, #12
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064a6:	bf00      	nop
 80064a8:	370c      	adds	r7, #12
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr

080064b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064b2:	b480      	push	{r7}
 80064b4:	b083      	sub	sp, #12
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064ba:	bf00      	nop
 80064bc:	370c      	adds	r7, #12
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr

080064c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064c6:	b480      	push	{r7}
 80064c8:	b083      	sub	sp, #12
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064ce:	bf00      	nop
 80064d0:	370c      	adds	r7, #12
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr

080064da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064da:	b480      	push	{r7}
 80064dc:	b083      	sub	sp, #12
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064e2:	bf00      	nop
 80064e4:	370c      	adds	r7, #12
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr
	...

080064f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b085      	sub	sp, #20
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a3a      	ldr	r2, [pc, #232]	@ (80065ec <TIM_Base_SetConfig+0xfc>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d00f      	beq.n	8006528 <TIM_Base_SetConfig+0x38>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800650e:	d00b      	beq.n	8006528 <TIM_Base_SetConfig+0x38>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4a37      	ldr	r2, [pc, #220]	@ (80065f0 <TIM_Base_SetConfig+0x100>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d007      	beq.n	8006528 <TIM_Base_SetConfig+0x38>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4a36      	ldr	r2, [pc, #216]	@ (80065f4 <TIM_Base_SetConfig+0x104>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d003      	beq.n	8006528 <TIM_Base_SetConfig+0x38>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4a35      	ldr	r2, [pc, #212]	@ (80065f8 <TIM_Base_SetConfig+0x108>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d108      	bne.n	800653a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800652e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	4313      	orrs	r3, r2
 8006538:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4a2b      	ldr	r2, [pc, #172]	@ (80065ec <TIM_Base_SetConfig+0xfc>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d01b      	beq.n	800657a <TIM_Base_SetConfig+0x8a>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006548:	d017      	beq.n	800657a <TIM_Base_SetConfig+0x8a>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a28      	ldr	r2, [pc, #160]	@ (80065f0 <TIM_Base_SetConfig+0x100>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d013      	beq.n	800657a <TIM_Base_SetConfig+0x8a>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4a27      	ldr	r2, [pc, #156]	@ (80065f4 <TIM_Base_SetConfig+0x104>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d00f      	beq.n	800657a <TIM_Base_SetConfig+0x8a>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a26      	ldr	r2, [pc, #152]	@ (80065f8 <TIM_Base_SetConfig+0x108>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d00b      	beq.n	800657a <TIM_Base_SetConfig+0x8a>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a25      	ldr	r2, [pc, #148]	@ (80065fc <TIM_Base_SetConfig+0x10c>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d007      	beq.n	800657a <TIM_Base_SetConfig+0x8a>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a24      	ldr	r2, [pc, #144]	@ (8006600 <TIM_Base_SetConfig+0x110>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d003      	beq.n	800657a <TIM_Base_SetConfig+0x8a>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a23      	ldr	r2, [pc, #140]	@ (8006604 <TIM_Base_SetConfig+0x114>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d108      	bne.n	800658c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006580:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	4313      	orrs	r3, r2
 800658a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	695b      	ldr	r3, [r3, #20]
 8006596:	4313      	orrs	r3, r2
 8006598:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	689a      	ldr	r2, [r3, #8]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a0e      	ldr	r2, [pc, #56]	@ (80065ec <TIM_Base_SetConfig+0xfc>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d103      	bne.n	80065c0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	691a      	ldr	r2, [r3, #16]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	f003 0301 	and.w	r3, r3, #1
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d105      	bne.n	80065de <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	f023 0201 	bic.w	r2, r3, #1
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	611a      	str	r2, [r3, #16]
  }
}
 80065de:	bf00      	nop
 80065e0:	3714      	adds	r7, #20
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr
 80065ea:	bf00      	nop
 80065ec:	40010000 	.word	0x40010000
 80065f0:	40000400 	.word	0x40000400
 80065f4:	40000800 	.word	0x40000800
 80065f8:	40000c00 	.word	0x40000c00
 80065fc:	40014000 	.word	0x40014000
 8006600:	40014400 	.word	0x40014400
 8006604:	40014800 	.word	0x40014800

08006608 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006608:	b480      	push	{r7}
 800660a:	b087      	sub	sp, #28
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6a1b      	ldr	r3, [r3, #32]
 8006616:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6a1b      	ldr	r3, [r3, #32]
 800661c:	f023 0201 	bic.w	r2, r3, #1
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	699b      	ldr	r3, [r3, #24]
 800662e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f023 0303 	bic.w	r3, r3, #3
 800663e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	68fa      	ldr	r2, [r7, #12]
 8006646:	4313      	orrs	r3, r2
 8006648:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	f023 0302 	bic.w	r3, r3, #2
 8006650:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	697a      	ldr	r2, [r7, #20]
 8006658:	4313      	orrs	r3, r2
 800665a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a1c      	ldr	r2, [pc, #112]	@ (80066d0 <TIM_OC1_SetConfig+0xc8>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d10c      	bne.n	800667e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	f023 0308 	bic.w	r3, r3, #8
 800666a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	697a      	ldr	r2, [r7, #20]
 8006672:	4313      	orrs	r3, r2
 8006674:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	f023 0304 	bic.w	r3, r3, #4
 800667c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a13      	ldr	r2, [pc, #76]	@ (80066d0 <TIM_OC1_SetConfig+0xc8>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d111      	bne.n	80066aa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800668c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006694:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	695b      	ldr	r3, [r3, #20]
 800669a:	693a      	ldr	r2, [r7, #16]
 800669c:	4313      	orrs	r3, r2
 800669e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	699b      	ldr	r3, [r3, #24]
 80066a4:	693a      	ldr	r2, [r7, #16]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	68fa      	ldr	r2, [r7, #12]
 80066b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	685a      	ldr	r2, [r3, #4]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	697a      	ldr	r2, [r7, #20]
 80066c2:	621a      	str	r2, [r3, #32]
}
 80066c4:	bf00      	nop
 80066c6:	371c      	adds	r7, #28
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr
 80066d0:	40010000 	.word	0x40010000

080066d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b087      	sub	sp, #28
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a1b      	ldr	r3, [r3, #32]
 80066e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6a1b      	ldr	r3, [r3, #32]
 80066e8:	f023 0210 	bic.w	r2, r3, #16
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	699b      	ldr	r3, [r3, #24]
 80066fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800670a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	021b      	lsls	r3, r3, #8
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	4313      	orrs	r3, r2
 8006716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	f023 0320 	bic.w	r3, r3, #32
 800671e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	011b      	lsls	r3, r3, #4
 8006726:	697a      	ldr	r2, [r7, #20]
 8006728:	4313      	orrs	r3, r2
 800672a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	4a1e      	ldr	r2, [pc, #120]	@ (80067a8 <TIM_OC2_SetConfig+0xd4>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d10d      	bne.n	8006750 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800673a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	011b      	lsls	r3, r3, #4
 8006742:	697a      	ldr	r2, [r7, #20]
 8006744:	4313      	orrs	r3, r2
 8006746:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800674e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4a15      	ldr	r2, [pc, #84]	@ (80067a8 <TIM_OC2_SetConfig+0xd4>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d113      	bne.n	8006780 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800675e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006766:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	695b      	ldr	r3, [r3, #20]
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	693a      	ldr	r2, [r7, #16]
 8006770:	4313      	orrs	r3, r2
 8006772:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	699b      	ldr	r3, [r3, #24]
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	693a      	ldr	r2, [r7, #16]
 800677c:	4313      	orrs	r3, r2
 800677e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	693a      	ldr	r2, [r7, #16]
 8006784:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	685a      	ldr	r2, [r3, #4]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	697a      	ldr	r2, [r7, #20]
 8006798:	621a      	str	r2, [r3, #32]
}
 800679a:	bf00      	nop
 800679c:	371c      	adds	r7, #28
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr
 80067a6:	bf00      	nop
 80067a8:	40010000 	.word	0x40010000

080067ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b087      	sub	sp, #28
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a1b      	ldr	r3, [r3, #32]
 80067ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6a1b      	ldr	r3, [r3, #32]
 80067c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	69db      	ldr	r3, [r3, #28]
 80067d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f023 0303 	bic.w	r3, r3, #3
 80067e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80067f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	021b      	lsls	r3, r3, #8
 80067fc:	697a      	ldr	r2, [r7, #20]
 80067fe:	4313      	orrs	r3, r2
 8006800:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a1d      	ldr	r2, [pc, #116]	@ (800687c <TIM_OC3_SetConfig+0xd0>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d10d      	bne.n	8006826 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006810:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	021b      	lsls	r3, r3, #8
 8006818:	697a      	ldr	r2, [r7, #20]
 800681a:	4313      	orrs	r3, r2
 800681c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006824:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a14      	ldr	r2, [pc, #80]	@ (800687c <TIM_OC3_SetConfig+0xd0>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d113      	bne.n	8006856 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006834:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800683c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	695b      	ldr	r3, [r3, #20]
 8006842:	011b      	lsls	r3, r3, #4
 8006844:	693a      	ldr	r2, [r7, #16]
 8006846:	4313      	orrs	r3, r2
 8006848:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	699b      	ldr	r3, [r3, #24]
 800684e:	011b      	lsls	r3, r3, #4
 8006850:	693a      	ldr	r2, [r7, #16]
 8006852:	4313      	orrs	r3, r2
 8006854:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	693a      	ldr	r2, [r7, #16]
 800685a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	685a      	ldr	r2, [r3, #4]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	697a      	ldr	r2, [r7, #20]
 800686e:	621a      	str	r2, [r3, #32]
}
 8006870:	bf00      	nop
 8006872:	371c      	adds	r7, #28
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr
 800687c:	40010000 	.word	0x40010000

08006880 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006880:	b480      	push	{r7}
 8006882:	b087      	sub	sp, #28
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a1b      	ldr	r3, [r3, #32]
 800688e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6a1b      	ldr	r3, [r3, #32]
 8006894:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	69db      	ldr	r3, [r3, #28]
 80068a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	021b      	lsls	r3, r3, #8
 80068be:	68fa      	ldr	r2, [r7, #12]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80068ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	031b      	lsls	r3, r3, #12
 80068d2:	693a      	ldr	r2, [r7, #16]
 80068d4:	4313      	orrs	r3, r2
 80068d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	4a10      	ldr	r2, [pc, #64]	@ (800691c <TIM_OC4_SetConfig+0x9c>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d109      	bne.n	80068f4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	695b      	ldr	r3, [r3, #20]
 80068ec:	019b      	lsls	r3, r3, #6
 80068ee:	697a      	ldr	r2, [r7, #20]
 80068f0:	4313      	orrs	r3, r2
 80068f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	697a      	ldr	r2, [r7, #20]
 80068f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	685a      	ldr	r2, [r3, #4]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	693a      	ldr	r2, [r7, #16]
 800690c:	621a      	str	r2, [r3, #32]
}
 800690e:	bf00      	nop
 8006910:	371c      	adds	r7, #28
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr
 800691a:	bf00      	nop
 800691c:	40010000 	.word	0x40010000

08006920 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006920:	b480      	push	{r7}
 8006922:	b087      	sub	sp, #28
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6a1b      	ldr	r3, [r3, #32]
 8006930:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6a1b      	ldr	r3, [r3, #32]
 8006936:	f023 0201 	bic.w	r2, r3, #1
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	699b      	ldr	r3, [r3, #24]
 8006942:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800694a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	011b      	lsls	r3, r3, #4
 8006950:	693a      	ldr	r2, [r7, #16]
 8006952:	4313      	orrs	r3, r2
 8006954:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	f023 030a 	bic.w	r3, r3, #10
 800695c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800695e:	697a      	ldr	r2, [r7, #20]
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	4313      	orrs	r3, r2
 8006964:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	693a      	ldr	r2, [r7, #16]
 800696a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	697a      	ldr	r2, [r7, #20]
 8006970:	621a      	str	r2, [r3, #32]
}
 8006972:	bf00      	nop
 8006974:	371c      	adds	r7, #28
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr

0800697e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800697e:	b480      	push	{r7}
 8006980:	b087      	sub	sp, #28
 8006982:	af00      	add	r7, sp, #0
 8006984:	60f8      	str	r0, [r7, #12]
 8006986:	60b9      	str	r1, [r7, #8]
 8006988:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6a1b      	ldr	r3, [r3, #32]
 800698e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6a1b      	ldr	r3, [r3, #32]
 8006994:	f023 0210 	bic.w	r2, r3, #16
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	699b      	ldr	r3, [r3, #24]
 80069a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80069a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	031b      	lsls	r3, r3, #12
 80069ae:	693a      	ldr	r2, [r7, #16]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80069ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	011b      	lsls	r3, r3, #4
 80069c0:	697a      	ldr	r2, [r7, #20]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	693a      	ldr	r2, [r7, #16]
 80069ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	697a      	ldr	r2, [r7, #20]
 80069d0:	621a      	str	r2, [r3, #32]
}
 80069d2:	bf00      	nop
 80069d4:	371c      	adds	r7, #28
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr

080069de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069de:	b480      	push	{r7}
 80069e0:	b085      	sub	sp, #20
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
 80069e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069f6:	683a      	ldr	r2, [r7, #0]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	f043 0307 	orr.w	r3, r3, #7
 8006a00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	609a      	str	r2, [r3, #8]
}
 8006a08:	bf00      	nop
 8006a0a:	3714      	adds	r7, #20
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b087      	sub	sp, #28
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	60f8      	str	r0, [r7, #12]
 8006a1c:	60b9      	str	r1, [r7, #8]
 8006a1e:	607a      	str	r2, [r7, #4]
 8006a20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006a2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	021a      	lsls	r2, r3, #8
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	431a      	orrs	r2, r3
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	697a      	ldr	r2, [r7, #20]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	697a      	ldr	r2, [r7, #20]
 8006a46:	609a      	str	r2, [r3, #8]
}
 8006a48:	bf00      	nop
 8006a4a:	371c      	adds	r7, #28
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b087      	sub	sp, #28
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	f003 031f 	and.w	r3, r3, #31
 8006a66:	2201      	movs	r2, #1
 8006a68:	fa02 f303 	lsl.w	r3, r2, r3
 8006a6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	6a1a      	ldr	r2, [r3, #32]
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	43db      	mvns	r3, r3
 8006a76:	401a      	ands	r2, r3
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6a1a      	ldr	r2, [r3, #32]
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	f003 031f 	and.w	r3, r3, #31
 8006a86:	6879      	ldr	r1, [r7, #4]
 8006a88:	fa01 f303 	lsl.w	r3, r1, r3
 8006a8c:	431a      	orrs	r2, r3
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	621a      	str	r2, [r3, #32]
}
 8006a92:	bf00      	nop
 8006a94:	371c      	adds	r7, #28
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr
	...

08006aa0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b085      	sub	sp, #20
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d101      	bne.n	8006ab8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ab4:	2302      	movs	r3, #2
 8006ab6:	e050      	b.n	8006b5a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2202      	movs	r2, #2
 8006ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ade:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	68fa      	ldr	r2, [r7, #12]
 8006af0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a1c      	ldr	r2, [pc, #112]	@ (8006b68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d018      	beq.n	8006b2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b04:	d013      	beq.n	8006b2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a18      	ldr	r2, [pc, #96]	@ (8006b6c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d00e      	beq.n	8006b2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a16      	ldr	r2, [pc, #88]	@ (8006b70 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d009      	beq.n	8006b2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a15      	ldr	r2, [pc, #84]	@ (8006b74 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d004      	beq.n	8006b2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a13      	ldr	r2, [pc, #76]	@ (8006b78 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d10c      	bne.n	8006b48 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	68ba      	ldr	r2, [r7, #8]
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	68ba      	ldr	r2, [r7, #8]
 8006b46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3714      	adds	r7, #20
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	40010000 	.word	0x40010000
 8006b6c:	40000400 	.word	0x40000400
 8006b70:	40000800 	.word	0x40000800
 8006b74:	40000c00 	.word	0x40000c00
 8006b78:	40014000 	.word	0x40014000

08006b7c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b84:	bf00      	nop
 8006b86:	370c      	adds	r7, #12
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b98:	bf00      	nop
 8006b9a:	370c      	adds	r7, #12
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr

08006ba4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ba4:	b084      	sub	sp, #16
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b084      	sub	sp, #16
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
 8006bae:	f107 001c 	add.w	r0, r7, #28
 8006bb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006bb6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d123      	bne.n	8006c06 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bc2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006bd2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006be6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d105      	bne.n	8006bfa <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f001 fae8 	bl	80081d0 <USB_CoreReset>
 8006c00:	4603      	mov	r3, r0
 8006c02:	73fb      	strb	r3, [r7, #15]
 8006c04:	e01b      	b.n	8006c3e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f001 fadc 	bl	80081d0 <USB_CoreReset>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006c1c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d106      	bne.n	8006c32 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c28:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006c30:	e005      	b.n	8006c3e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c36:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006c3e:	7fbb      	ldrb	r3, [r7, #30]
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d10b      	bne.n	8006c5c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	f043 0206 	orr.w	r2, r3, #6
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	f043 0220 	orr.w	r2, r3, #32
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3710      	adds	r7, #16
 8006c62:	46bd      	mov	sp, r7
 8006c64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c68:	b004      	add	sp, #16
 8006c6a:	4770      	bx	lr

08006c6c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b087      	sub	sp, #28
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	4613      	mov	r3, r2
 8006c78:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006c7a:	79fb      	ldrb	r3, [r7, #7]
 8006c7c:	2b02      	cmp	r3, #2
 8006c7e:	d165      	bne.n	8006d4c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	4a41      	ldr	r2, [pc, #260]	@ (8006d88 <USB_SetTurnaroundTime+0x11c>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d906      	bls.n	8006c96 <USB_SetTurnaroundTime+0x2a>
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	4a40      	ldr	r2, [pc, #256]	@ (8006d8c <USB_SetTurnaroundTime+0x120>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d202      	bcs.n	8006c96 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006c90:	230f      	movs	r3, #15
 8006c92:	617b      	str	r3, [r7, #20]
 8006c94:	e062      	b.n	8006d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	4a3c      	ldr	r2, [pc, #240]	@ (8006d8c <USB_SetTurnaroundTime+0x120>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d306      	bcc.n	8006cac <USB_SetTurnaroundTime+0x40>
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	4a3b      	ldr	r2, [pc, #236]	@ (8006d90 <USB_SetTurnaroundTime+0x124>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d202      	bcs.n	8006cac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006ca6:	230e      	movs	r3, #14
 8006ca8:	617b      	str	r3, [r7, #20]
 8006caa:	e057      	b.n	8006d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	4a38      	ldr	r2, [pc, #224]	@ (8006d90 <USB_SetTurnaroundTime+0x124>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d306      	bcc.n	8006cc2 <USB_SetTurnaroundTime+0x56>
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	4a37      	ldr	r2, [pc, #220]	@ (8006d94 <USB_SetTurnaroundTime+0x128>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d202      	bcs.n	8006cc2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006cbc:	230d      	movs	r3, #13
 8006cbe:	617b      	str	r3, [r7, #20]
 8006cc0:	e04c      	b.n	8006d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	4a33      	ldr	r2, [pc, #204]	@ (8006d94 <USB_SetTurnaroundTime+0x128>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d306      	bcc.n	8006cd8 <USB_SetTurnaroundTime+0x6c>
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	4a32      	ldr	r2, [pc, #200]	@ (8006d98 <USB_SetTurnaroundTime+0x12c>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d802      	bhi.n	8006cd8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006cd2:	230c      	movs	r3, #12
 8006cd4:	617b      	str	r3, [r7, #20]
 8006cd6:	e041      	b.n	8006d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	4a2f      	ldr	r2, [pc, #188]	@ (8006d98 <USB_SetTurnaroundTime+0x12c>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d906      	bls.n	8006cee <USB_SetTurnaroundTime+0x82>
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	4a2e      	ldr	r2, [pc, #184]	@ (8006d9c <USB_SetTurnaroundTime+0x130>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d802      	bhi.n	8006cee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006ce8:	230b      	movs	r3, #11
 8006cea:	617b      	str	r3, [r7, #20]
 8006cec:	e036      	b.n	8006d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	4a2a      	ldr	r2, [pc, #168]	@ (8006d9c <USB_SetTurnaroundTime+0x130>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d906      	bls.n	8006d04 <USB_SetTurnaroundTime+0x98>
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	4a29      	ldr	r2, [pc, #164]	@ (8006da0 <USB_SetTurnaroundTime+0x134>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d802      	bhi.n	8006d04 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006cfe:	230a      	movs	r3, #10
 8006d00:	617b      	str	r3, [r7, #20]
 8006d02:	e02b      	b.n	8006d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	4a26      	ldr	r2, [pc, #152]	@ (8006da0 <USB_SetTurnaroundTime+0x134>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d906      	bls.n	8006d1a <USB_SetTurnaroundTime+0xae>
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	4a25      	ldr	r2, [pc, #148]	@ (8006da4 <USB_SetTurnaroundTime+0x138>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d202      	bcs.n	8006d1a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006d14:	2309      	movs	r3, #9
 8006d16:	617b      	str	r3, [r7, #20]
 8006d18:	e020      	b.n	8006d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	4a21      	ldr	r2, [pc, #132]	@ (8006da4 <USB_SetTurnaroundTime+0x138>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d306      	bcc.n	8006d30 <USB_SetTurnaroundTime+0xc4>
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	4a20      	ldr	r2, [pc, #128]	@ (8006da8 <USB_SetTurnaroundTime+0x13c>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d802      	bhi.n	8006d30 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006d2a:	2308      	movs	r3, #8
 8006d2c:	617b      	str	r3, [r7, #20]
 8006d2e:	e015      	b.n	8006d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	4a1d      	ldr	r2, [pc, #116]	@ (8006da8 <USB_SetTurnaroundTime+0x13c>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d906      	bls.n	8006d46 <USB_SetTurnaroundTime+0xda>
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	4a1c      	ldr	r2, [pc, #112]	@ (8006dac <USB_SetTurnaroundTime+0x140>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d202      	bcs.n	8006d46 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006d40:	2307      	movs	r3, #7
 8006d42:	617b      	str	r3, [r7, #20]
 8006d44:	e00a      	b.n	8006d5c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006d46:	2306      	movs	r3, #6
 8006d48:	617b      	str	r3, [r7, #20]
 8006d4a:	e007      	b.n	8006d5c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006d4c:	79fb      	ldrb	r3, [r7, #7]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d102      	bne.n	8006d58 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006d52:	2309      	movs	r3, #9
 8006d54:	617b      	str	r3, [r7, #20]
 8006d56:	e001      	b.n	8006d5c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006d58:	2309      	movs	r3, #9
 8006d5a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	68db      	ldr	r3, [r3, #12]
 8006d60:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	68da      	ldr	r2, [r3, #12]
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	029b      	lsls	r3, r3, #10
 8006d70:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006d74:	431a      	orrs	r2, r3
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006d7a:	2300      	movs	r3, #0
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	371c      	adds	r7, #28
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr
 8006d88:	00d8acbf 	.word	0x00d8acbf
 8006d8c:	00e4e1c0 	.word	0x00e4e1c0
 8006d90:	00f42400 	.word	0x00f42400
 8006d94:	01067380 	.word	0x01067380
 8006d98:	011a499f 	.word	0x011a499f
 8006d9c:	01312cff 	.word	0x01312cff
 8006da0:	014ca43f 	.word	0x014ca43f
 8006da4:	016e3600 	.word	0x016e3600
 8006da8:	01a6ab1f 	.word	0x01a6ab1f
 8006dac:	01e84800 	.word	0x01e84800

08006db0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	f043 0201 	orr.w	r2, r3, #1
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006dc4:	2300      	movs	r3, #0
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	370c      	adds	r7, #12
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr

08006dd2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006dd2:	b480      	push	{r7}
 8006dd4:	b083      	sub	sp, #12
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	f023 0201 	bic.w	r2, r3, #1
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006e00:	2300      	movs	r3, #0
 8006e02:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006e10:	78fb      	ldrb	r3, [r7, #3]
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d115      	bne.n	8006e42 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006e22:	200a      	movs	r0, #10
 8006e24:	f7fb fb48 	bl	80024b8 <HAL_Delay>
      ms += 10U;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	330a      	adds	r3, #10
 8006e2c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f001 f93f 	bl	80080b2 <USB_GetMode>
 8006e34:	4603      	mov	r3, r0
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d01e      	beq.n	8006e78 <USB_SetCurrentMode+0x84>
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2bc7      	cmp	r3, #199	@ 0xc7
 8006e3e:	d9f0      	bls.n	8006e22 <USB_SetCurrentMode+0x2e>
 8006e40:	e01a      	b.n	8006e78 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006e42:	78fb      	ldrb	r3, [r7, #3]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d115      	bne.n	8006e74 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006e54:	200a      	movs	r0, #10
 8006e56:	f7fb fb2f 	bl	80024b8 <HAL_Delay>
      ms += 10U;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	330a      	adds	r3, #10
 8006e5e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f001 f926 	bl	80080b2 <USB_GetMode>
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d005      	beq.n	8006e78 <USB_SetCurrentMode+0x84>
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2bc7      	cmp	r3, #199	@ 0xc7
 8006e70:	d9f0      	bls.n	8006e54 <USB_SetCurrentMode+0x60>
 8006e72:	e001      	b.n	8006e78 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	e005      	b.n	8006e84 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2bc8      	cmp	r3, #200	@ 0xc8
 8006e7c:	d101      	bne.n	8006e82 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e000      	b.n	8006e84 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006e82:	2300      	movs	r3, #0
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3710      	adds	r7, #16
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e8c:	b084      	sub	sp, #16
 8006e8e:	b580      	push	{r7, lr}
 8006e90:	b086      	sub	sp, #24
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
 8006e96:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006e9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	613b      	str	r3, [r7, #16]
 8006eaa:	e009      	b.n	8006ec0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	3340      	adds	r3, #64	@ 0x40
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	4413      	add	r3, r2
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	613b      	str	r3, [r7, #16]
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	2b0e      	cmp	r3, #14
 8006ec4:	d9f2      	bls.n	8006eac <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006ec6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d11c      	bne.n	8006f08 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	68fa      	ldr	r2, [r7, #12]
 8006ed8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006edc:	f043 0302 	orr.w	r3, r3, #2
 8006ee0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ee6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ef2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006efe:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	639a      	str	r2, [r3, #56]	@ 0x38
 8006f06:	e00b      	b.n	8006f20 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f0c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f18:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006f26:	461a      	mov	r2, r3
 8006f28:	2300      	movs	r3, #0
 8006f2a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f2c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d10d      	bne.n	8006f50 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006f34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d104      	bne.n	8006f46 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006f3c:	2100      	movs	r1, #0
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 f968 	bl	8007214 <USB_SetDevSpeed>
 8006f44:	e008      	b.n	8006f58 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006f46:	2101      	movs	r1, #1
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 f963 	bl	8007214 <USB_SetDevSpeed>
 8006f4e:	e003      	b.n	8006f58 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006f50:	2103      	movs	r1, #3
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 f95e 	bl	8007214 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006f58:	2110      	movs	r1, #16
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 f8fa 	bl	8007154 <USB_FlushTxFifo>
 8006f60:	4603      	mov	r3, r0
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d001      	beq.n	8006f6a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 f924 	bl	80071b8 <USB_FlushRxFifo>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d001      	beq.n	8006f7a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f80:	461a      	mov	r2, r3
 8006f82:	2300      	movs	r3, #0
 8006f84:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	2300      	movs	r3, #0
 8006f90:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f98:	461a      	mov	r2, r3
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	613b      	str	r3, [r7, #16]
 8006fa2:	e043      	b.n	800702c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	015a      	lsls	r2, r3, #5
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	4413      	add	r3, r2
 8006fac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006fb6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006fba:	d118      	bne.n	8006fee <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d10a      	bne.n	8006fd8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	015a      	lsls	r2, r3, #5
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	4413      	add	r3, r2
 8006fca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fce:	461a      	mov	r2, r3
 8006fd0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006fd4:	6013      	str	r3, [r2, #0]
 8006fd6:	e013      	b.n	8007000 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	015a      	lsls	r2, r3, #5
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	4413      	add	r3, r2
 8006fe0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006fea:	6013      	str	r3, [r2, #0]
 8006fec:	e008      	b.n	8007000 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	015a      	lsls	r2, r3, #5
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	4413      	add	r3, r2
 8006ff6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	015a      	lsls	r2, r3, #5
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	4413      	add	r3, r2
 8007008:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800700c:	461a      	mov	r2, r3
 800700e:	2300      	movs	r3, #0
 8007010:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	015a      	lsls	r2, r3, #5
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	4413      	add	r3, r2
 800701a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800701e:	461a      	mov	r2, r3
 8007020:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007024:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	3301      	adds	r3, #1
 800702a:	613b      	str	r3, [r7, #16]
 800702c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007030:	461a      	mov	r2, r3
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	4293      	cmp	r3, r2
 8007036:	d3b5      	bcc.n	8006fa4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007038:	2300      	movs	r3, #0
 800703a:	613b      	str	r3, [r7, #16]
 800703c:	e043      	b.n	80070c6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	015a      	lsls	r2, r3, #5
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	4413      	add	r3, r2
 8007046:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007050:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007054:	d118      	bne.n	8007088 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d10a      	bne.n	8007072 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	015a      	lsls	r2, r3, #5
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	4413      	add	r3, r2
 8007064:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007068:	461a      	mov	r2, r3
 800706a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800706e:	6013      	str	r3, [r2, #0]
 8007070:	e013      	b.n	800709a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	015a      	lsls	r2, r3, #5
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	4413      	add	r3, r2
 800707a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800707e:	461a      	mov	r2, r3
 8007080:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007084:	6013      	str	r3, [r2, #0]
 8007086:	e008      	b.n	800709a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	015a      	lsls	r2, r3, #5
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	4413      	add	r3, r2
 8007090:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007094:	461a      	mov	r2, r3
 8007096:	2300      	movs	r3, #0
 8007098:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	015a      	lsls	r2, r3, #5
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	4413      	add	r3, r2
 80070a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070a6:	461a      	mov	r2, r3
 80070a8:	2300      	movs	r3, #0
 80070aa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	015a      	lsls	r2, r3, #5
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	4413      	add	r3, r2
 80070b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070b8:	461a      	mov	r2, r3
 80070ba:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80070be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	3301      	adds	r3, #1
 80070c4:	613b      	str	r3, [r7, #16]
 80070c6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80070ca:	461a      	mov	r2, r3
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d3b5      	bcc.n	800703e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	68fa      	ldr	r2, [r7, #12]
 80070dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80070e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80070e4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80070f2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80070f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d105      	bne.n	8007108 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	699b      	ldr	r3, [r3, #24]
 8007100:	f043 0210 	orr.w	r2, r3, #16
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	699a      	ldr	r2, [r3, #24]
 800710c:	4b10      	ldr	r3, [pc, #64]	@ (8007150 <USB_DevInit+0x2c4>)
 800710e:	4313      	orrs	r3, r2
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007114:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007118:	2b00      	cmp	r3, #0
 800711a:	d005      	beq.n	8007128 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	699b      	ldr	r3, [r3, #24]
 8007120:	f043 0208 	orr.w	r2, r3, #8
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007128:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800712c:	2b01      	cmp	r3, #1
 800712e:	d107      	bne.n	8007140 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	699b      	ldr	r3, [r3, #24]
 8007134:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007138:	f043 0304 	orr.w	r3, r3, #4
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007140:	7dfb      	ldrb	r3, [r7, #23]
}
 8007142:	4618      	mov	r0, r3
 8007144:	3718      	adds	r7, #24
 8007146:	46bd      	mov	sp, r7
 8007148:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800714c:	b004      	add	sp, #16
 800714e:	4770      	bx	lr
 8007150:	803c3800 	.word	0x803c3800

08007154 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007154:	b480      	push	{r7}
 8007156:	b085      	sub	sp, #20
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800715e:	2300      	movs	r3, #0
 8007160:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	3301      	adds	r3, #1
 8007166:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800716e:	d901      	bls.n	8007174 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007170:	2303      	movs	r3, #3
 8007172:	e01b      	b.n	80071ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	2b00      	cmp	r3, #0
 800717a:	daf2      	bge.n	8007162 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800717c:	2300      	movs	r3, #0
 800717e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	019b      	lsls	r3, r3, #6
 8007184:	f043 0220 	orr.w	r2, r3, #32
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	3301      	adds	r3, #1
 8007190:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007198:	d901      	bls.n	800719e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800719a:	2303      	movs	r3, #3
 800719c:	e006      	b.n	80071ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	f003 0320 	and.w	r3, r3, #32
 80071a6:	2b20      	cmp	r3, #32
 80071a8:	d0f0      	beq.n	800718c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3714      	adds	r7, #20
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b085      	sub	sp, #20
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80071c0:	2300      	movs	r3, #0
 80071c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	3301      	adds	r3, #1
 80071c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80071d0:	d901      	bls.n	80071d6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80071d2:	2303      	movs	r3, #3
 80071d4:	e018      	b.n	8007208 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	daf2      	bge.n	80071c4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80071de:	2300      	movs	r3, #0
 80071e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2210      	movs	r2, #16
 80071e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	3301      	adds	r3, #1
 80071ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80071f4:	d901      	bls.n	80071fa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80071f6:	2303      	movs	r3, #3
 80071f8:	e006      	b.n	8007208 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	f003 0310 	and.w	r3, r3, #16
 8007202:	2b10      	cmp	r3, #16
 8007204:	d0f0      	beq.n	80071e8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	3714      	adds	r7, #20
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007214:	b480      	push	{r7}
 8007216:	b085      	sub	sp, #20
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	460b      	mov	r3, r1
 800721e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	78fb      	ldrb	r3, [r7, #3]
 800722e:	68f9      	ldr	r1, [r7, #12]
 8007230:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007234:	4313      	orrs	r3, r2
 8007236:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007238:	2300      	movs	r3, #0
}
 800723a:	4618      	mov	r0, r3
 800723c:	3714      	adds	r7, #20
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr

08007246 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007246:	b480      	push	{r7}
 8007248:	b087      	sub	sp, #28
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	f003 0306 	and.w	r3, r3, #6
 800725e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d102      	bne.n	800726c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007266:	2300      	movs	r3, #0
 8007268:	75fb      	strb	r3, [r7, #23]
 800726a:	e00a      	b.n	8007282 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2b02      	cmp	r3, #2
 8007270:	d002      	beq.n	8007278 <USB_GetDevSpeed+0x32>
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2b06      	cmp	r3, #6
 8007276:	d102      	bne.n	800727e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007278:	2302      	movs	r3, #2
 800727a:	75fb      	strb	r3, [r7, #23]
 800727c:	e001      	b.n	8007282 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800727e:	230f      	movs	r3, #15
 8007280:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007282:	7dfb      	ldrb	r3, [r7, #23]
}
 8007284:	4618      	mov	r0, r3
 8007286:	371c      	adds	r7, #28
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007290:	b480      	push	{r7}
 8007292:	b085      	sub	sp, #20
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	785b      	ldrb	r3, [r3, #1]
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d13a      	bne.n	8007322 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072b2:	69da      	ldr	r2, [r3, #28]
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	f003 030f 	and.w	r3, r3, #15
 80072bc:	2101      	movs	r1, #1
 80072be:	fa01 f303 	lsl.w	r3, r1, r3
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	68f9      	ldr	r1, [r7, #12]
 80072c6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80072ca:	4313      	orrs	r3, r2
 80072cc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	015a      	lsls	r2, r3, #5
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	4413      	add	r3, r2
 80072d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d155      	bne.n	8007390 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	015a      	lsls	r2, r3, #5
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	4413      	add	r3, r2
 80072ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	791b      	ldrb	r3, [r3, #4]
 80072fe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007300:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	059b      	lsls	r3, r3, #22
 8007306:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007308:	4313      	orrs	r3, r2
 800730a:	68ba      	ldr	r2, [r7, #8]
 800730c:	0151      	lsls	r1, r2, #5
 800730e:	68fa      	ldr	r2, [r7, #12]
 8007310:	440a      	add	r2, r1
 8007312:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007316:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800731a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800731e:	6013      	str	r3, [r2, #0]
 8007320:	e036      	b.n	8007390 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007328:	69da      	ldr	r2, [r3, #28]
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	f003 030f 	and.w	r3, r3, #15
 8007332:	2101      	movs	r1, #1
 8007334:	fa01 f303 	lsl.w	r3, r1, r3
 8007338:	041b      	lsls	r3, r3, #16
 800733a:	68f9      	ldr	r1, [r7, #12]
 800733c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007340:	4313      	orrs	r3, r2
 8007342:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	015a      	lsls	r2, r3, #5
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	4413      	add	r3, r2
 800734c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007356:	2b00      	cmp	r3, #0
 8007358:	d11a      	bne.n	8007390 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	015a      	lsls	r2, r3, #5
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	4413      	add	r3, r2
 8007362:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	791b      	ldrb	r3, [r3, #4]
 8007374:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007376:	430b      	orrs	r3, r1
 8007378:	4313      	orrs	r3, r2
 800737a:	68ba      	ldr	r2, [r7, #8]
 800737c:	0151      	lsls	r1, r2, #5
 800737e:	68fa      	ldr	r2, [r7, #12]
 8007380:	440a      	add	r2, r1
 8007382:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007386:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800738a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800738e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007390:	2300      	movs	r3, #0
}
 8007392:	4618      	mov	r0, r3
 8007394:	3714      	adds	r7, #20
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr
	...

080073a0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b085      	sub	sp, #20
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	785b      	ldrb	r3, [r3, #1]
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d161      	bne.n	8007480 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	015a      	lsls	r2, r3, #5
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	4413      	add	r3, r2
 80073c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80073ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80073d2:	d11f      	bne.n	8007414 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	015a      	lsls	r2, r3, #5
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	4413      	add	r3, r2
 80073dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68ba      	ldr	r2, [r7, #8]
 80073e4:	0151      	lsls	r1, r2, #5
 80073e6:	68fa      	ldr	r2, [r7, #12]
 80073e8:	440a      	add	r2, r1
 80073ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073ee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80073f2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	015a      	lsls	r2, r3, #5
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	4413      	add	r3, r2
 80073fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	68ba      	ldr	r2, [r7, #8]
 8007404:	0151      	lsls	r1, r2, #5
 8007406:	68fa      	ldr	r2, [r7, #12]
 8007408:	440a      	add	r2, r1
 800740a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800740e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007412:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800741a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	f003 030f 	and.w	r3, r3, #15
 8007424:	2101      	movs	r1, #1
 8007426:	fa01 f303 	lsl.w	r3, r1, r3
 800742a:	b29b      	uxth	r3, r3
 800742c:	43db      	mvns	r3, r3
 800742e:	68f9      	ldr	r1, [r7, #12]
 8007430:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007434:	4013      	ands	r3, r2
 8007436:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800743e:	69da      	ldr	r2, [r3, #28]
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	f003 030f 	and.w	r3, r3, #15
 8007448:	2101      	movs	r1, #1
 800744a:	fa01 f303 	lsl.w	r3, r1, r3
 800744e:	b29b      	uxth	r3, r3
 8007450:	43db      	mvns	r3, r3
 8007452:	68f9      	ldr	r1, [r7, #12]
 8007454:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007458:	4013      	ands	r3, r2
 800745a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	015a      	lsls	r2, r3, #5
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	4413      	add	r3, r2
 8007464:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	0159      	lsls	r1, r3, #5
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	440b      	add	r3, r1
 8007472:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007476:	4619      	mov	r1, r3
 8007478:	4b35      	ldr	r3, [pc, #212]	@ (8007550 <USB_DeactivateEndpoint+0x1b0>)
 800747a:	4013      	ands	r3, r2
 800747c:	600b      	str	r3, [r1, #0]
 800747e:	e060      	b.n	8007542 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	015a      	lsls	r2, r3, #5
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	4413      	add	r3, r2
 8007488:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007492:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007496:	d11f      	bne.n	80074d8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	015a      	lsls	r2, r3, #5
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	4413      	add	r3, r2
 80074a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	68ba      	ldr	r2, [r7, #8]
 80074a8:	0151      	lsls	r1, r2, #5
 80074aa:	68fa      	ldr	r2, [r7, #12]
 80074ac:	440a      	add	r2, r1
 80074ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074b2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80074b6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	015a      	lsls	r2, r3, #5
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	4413      	add	r3, r2
 80074c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	68ba      	ldr	r2, [r7, #8]
 80074c8:	0151      	lsls	r1, r2, #5
 80074ca:	68fa      	ldr	r2, [r7, #12]
 80074cc:	440a      	add	r2, r1
 80074ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074d2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80074d6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	f003 030f 	and.w	r3, r3, #15
 80074e8:	2101      	movs	r1, #1
 80074ea:	fa01 f303 	lsl.w	r3, r1, r3
 80074ee:	041b      	lsls	r3, r3, #16
 80074f0:	43db      	mvns	r3, r3
 80074f2:	68f9      	ldr	r1, [r7, #12]
 80074f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80074f8:	4013      	ands	r3, r2
 80074fa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007502:	69da      	ldr	r2, [r3, #28]
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	f003 030f 	and.w	r3, r3, #15
 800750c:	2101      	movs	r1, #1
 800750e:	fa01 f303 	lsl.w	r3, r1, r3
 8007512:	041b      	lsls	r3, r3, #16
 8007514:	43db      	mvns	r3, r3
 8007516:	68f9      	ldr	r1, [r7, #12]
 8007518:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800751c:	4013      	ands	r3, r2
 800751e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	015a      	lsls	r2, r3, #5
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	4413      	add	r3, r2
 8007528:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	0159      	lsls	r1, r3, #5
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	440b      	add	r3, r1
 8007536:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800753a:	4619      	mov	r1, r3
 800753c:	4b05      	ldr	r3, [pc, #20]	@ (8007554 <USB_DeactivateEndpoint+0x1b4>)
 800753e:	4013      	ands	r3, r2
 8007540:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007542:	2300      	movs	r3, #0
}
 8007544:	4618      	mov	r0, r3
 8007546:	3714      	adds	r7, #20
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr
 8007550:	ec337800 	.word	0xec337800
 8007554:	eff37800 	.word	0xeff37800

08007558 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b08a      	sub	sp, #40	@ 0x28
 800755c:	af02      	add	r7, sp, #8
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	4613      	mov	r3, r2
 8007564:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	785b      	ldrb	r3, [r3, #1]
 8007574:	2b01      	cmp	r3, #1
 8007576:	f040 817f 	bne.w	8007878 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d132      	bne.n	80075e8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007582:	69bb      	ldr	r3, [r7, #24]
 8007584:	015a      	lsls	r2, r3, #5
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	4413      	add	r3, r2
 800758a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800758e:	691b      	ldr	r3, [r3, #16]
 8007590:	69ba      	ldr	r2, [r7, #24]
 8007592:	0151      	lsls	r1, r2, #5
 8007594:	69fa      	ldr	r2, [r7, #28]
 8007596:	440a      	add	r2, r1
 8007598:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800759c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80075a0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80075a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	015a      	lsls	r2, r3, #5
 80075aa:	69fb      	ldr	r3, [r7, #28]
 80075ac:	4413      	add	r3, r2
 80075ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075b2:	691b      	ldr	r3, [r3, #16]
 80075b4:	69ba      	ldr	r2, [r7, #24]
 80075b6:	0151      	lsls	r1, r2, #5
 80075b8:	69fa      	ldr	r2, [r7, #28]
 80075ba:	440a      	add	r2, r1
 80075bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80075c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80075c6:	69bb      	ldr	r3, [r7, #24]
 80075c8:	015a      	lsls	r2, r3, #5
 80075ca:	69fb      	ldr	r3, [r7, #28]
 80075cc:	4413      	add	r3, r2
 80075ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075d2:	691b      	ldr	r3, [r3, #16]
 80075d4:	69ba      	ldr	r2, [r7, #24]
 80075d6:	0151      	lsls	r1, r2, #5
 80075d8:	69fa      	ldr	r2, [r7, #28]
 80075da:	440a      	add	r2, r1
 80075dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075e0:	0cdb      	lsrs	r3, r3, #19
 80075e2:	04db      	lsls	r3, r3, #19
 80075e4:	6113      	str	r3, [r2, #16]
 80075e6:	e097      	b.n	8007718 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80075e8:	69bb      	ldr	r3, [r7, #24]
 80075ea:	015a      	lsls	r2, r3, #5
 80075ec:	69fb      	ldr	r3, [r7, #28]
 80075ee:	4413      	add	r3, r2
 80075f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075f4:	691b      	ldr	r3, [r3, #16]
 80075f6:	69ba      	ldr	r2, [r7, #24]
 80075f8:	0151      	lsls	r1, r2, #5
 80075fa:	69fa      	ldr	r2, [r7, #28]
 80075fc:	440a      	add	r2, r1
 80075fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007602:	0cdb      	lsrs	r3, r3, #19
 8007604:	04db      	lsls	r3, r3, #19
 8007606:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007608:	69bb      	ldr	r3, [r7, #24]
 800760a:	015a      	lsls	r2, r3, #5
 800760c:	69fb      	ldr	r3, [r7, #28]
 800760e:	4413      	add	r3, r2
 8007610:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007614:	691b      	ldr	r3, [r3, #16]
 8007616:	69ba      	ldr	r2, [r7, #24]
 8007618:	0151      	lsls	r1, r2, #5
 800761a:	69fa      	ldr	r2, [r7, #28]
 800761c:	440a      	add	r2, r1
 800761e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007622:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007626:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800762a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800762c:	69bb      	ldr	r3, [r7, #24]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d11a      	bne.n	8007668 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	691a      	ldr	r2, [r3, #16]
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	429a      	cmp	r2, r3
 800763c:	d903      	bls.n	8007646 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	689a      	ldr	r2, [r3, #8]
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007646:	69bb      	ldr	r3, [r7, #24]
 8007648:	015a      	lsls	r2, r3, #5
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	4413      	add	r3, r2
 800764e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007652:	691b      	ldr	r3, [r3, #16]
 8007654:	69ba      	ldr	r2, [r7, #24]
 8007656:	0151      	lsls	r1, r2, #5
 8007658:	69fa      	ldr	r2, [r7, #28]
 800765a:	440a      	add	r2, r1
 800765c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007660:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007664:	6113      	str	r3, [r2, #16]
 8007666:	e044      	b.n	80076f2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	691a      	ldr	r2, [r3, #16]
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	4413      	add	r3, r2
 8007672:	1e5a      	subs	r2, r3, #1
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	fbb2 f3f3 	udiv	r3, r2, r3
 800767c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	015a      	lsls	r2, r3, #5
 8007682:	69fb      	ldr	r3, [r7, #28]
 8007684:	4413      	add	r3, r2
 8007686:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800768a:	691a      	ldr	r2, [r3, #16]
 800768c:	8afb      	ldrh	r3, [r7, #22]
 800768e:	04d9      	lsls	r1, r3, #19
 8007690:	4ba4      	ldr	r3, [pc, #656]	@ (8007924 <USB_EPStartXfer+0x3cc>)
 8007692:	400b      	ands	r3, r1
 8007694:	69b9      	ldr	r1, [r7, #24]
 8007696:	0148      	lsls	r0, r1, #5
 8007698:	69f9      	ldr	r1, [r7, #28]
 800769a:	4401      	add	r1, r0
 800769c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80076a0:	4313      	orrs	r3, r2
 80076a2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	791b      	ldrb	r3, [r3, #4]
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d122      	bne.n	80076f2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80076ac:	69bb      	ldr	r3, [r7, #24]
 80076ae:	015a      	lsls	r2, r3, #5
 80076b0:	69fb      	ldr	r3, [r7, #28]
 80076b2:	4413      	add	r3, r2
 80076b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076b8:	691b      	ldr	r3, [r3, #16]
 80076ba:	69ba      	ldr	r2, [r7, #24]
 80076bc:	0151      	lsls	r1, r2, #5
 80076be:	69fa      	ldr	r2, [r7, #28]
 80076c0:	440a      	add	r2, r1
 80076c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076c6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80076ca:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80076cc:	69bb      	ldr	r3, [r7, #24]
 80076ce:	015a      	lsls	r2, r3, #5
 80076d0:	69fb      	ldr	r3, [r7, #28]
 80076d2:	4413      	add	r3, r2
 80076d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076d8:	691a      	ldr	r2, [r3, #16]
 80076da:	8afb      	ldrh	r3, [r7, #22]
 80076dc:	075b      	lsls	r3, r3, #29
 80076de:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80076e2:	69b9      	ldr	r1, [r7, #24]
 80076e4:	0148      	lsls	r0, r1, #5
 80076e6:	69f9      	ldr	r1, [r7, #28]
 80076e8:	4401      	add	r1, r0
 80076ea:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80076ee:	4313      	orrs	r3, r2
 80076f0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	015a      	lsls	r2, r3, #5
 80076f6:	69fb      	ldr	r3, [r7, #28]
 80076f8:	4413      	add	r3, r2
 80076fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076fe:	691a      	ldr	r2, [r3, #16]
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	691b      	ldr	r3, [r3, #16]
 8007704:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007708:	69b9      	ldr	r1, [r7, #24]
 800770a:	0148      	lsls	r0, r1, #5
 800770c:	69f9      	ldr	r1, [r7, #28]
 800770e:	4401      	add	r1, r0
 8007710:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007714:	4313      	orrs	r3, r2
 8007716:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007718:	79fb      	ldrb	r3, [r7, #7]
 800771a:	2b01      	cmp	r3, #1
 800771c:	d14b      	bne.n	80077b6 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	69db      	ldr	r3, [r3, #28]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d009      	beq.n	800773a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007726:	69bb      	ldr	r3, [r7, #24]
 8007728:	015a      	lsls	r2, r3, #5
 800772a:	69fb      	ldr	r3, [r7, #28]
 800772c:	4413      	add	r3, r2
 800772e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007732:	461a      	mov	r2, r3
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	69db      	ldr	r3, [r3, #28]
 8007738:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	791b      	ldrb	r3, [r3, #4]
 800773e:	2b01      	cmp	r3, #1
 8007740:	d128      	bne.n	8007794 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007742:	69fb      	ldr	r3, [r7, #28]
 8007744:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800774e:	2b00      	cmp	r3, #0
 8007750:	d110      	bne.n	8007774 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007752:	69bb      	ldr	r3, [r7, #24]
 8007754:	015a      	lsls	r2, r3, #5
 8007756:	69fb      	ldr	r3, [r7, #28]
 8007758:	4413      	add	r3, r2
 800775a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	69ba      	ldr	r2, [r7, #24]
 8007762:	0151      	lsls	r1, r2, #5
 8007764:	69fa      	ldr	r2, [r7, #28]
 8007766:	440a      	add	r2, r1
 8007768:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800776c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007770:	6013      	str	r3, [r2, #0]
 8007772:	e00f      	b.n	8007794 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007774:	69bb      	ldr	r3, [r7, #24]
 8007776:	015a      	lsls	r2, r3, #5
 8007778:	69fb      	ldr	r3, [r7, #28]
 800777a:	4413      	add	r3, r2
 800777c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	69ba      	ldr	r2, [r7, #24]
 8007784:	0151      	lsls	r1, r2, #5
 8007786:	69fa      	ldr	r2, [r7, #28]
 8007788:	440a      	add	r2, r1
 800778a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800778e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007792:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007794:	69bb      	ldr	r3, [r7, #24]
 8007796:	015a      	lsls	r2, r3, #5
 8007798:	69fb      	ldr	r3, [r7, #28]
 800779a:	4413      	add	r3, r2
 800779c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	69ba      	ldr	r2, [r7, #24]
 80077a4:	0151      	lsls	r1, r2, #5
 80077a6:	69fa      	ldr	r2, [r7, #28]
 80077a8:	440a      	add	r2, r1
 80077aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80077ae:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80077b2:	6013      	str	r3, [r2, #0]
 80077b4:	e166      	b.n	8007a84 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80077b6:	69bb      	ldr	r3, [r7, #24]
 80077b8:	015a      	lsls	r2, r3, #5
 80077ba:	69fb      	ldr	r3, [r7, #28]
 80077bc:	4413      	add	r3, r2
 80077be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	69ba      	ldr	r2, [r7, #24]
 80077c6:	0151      	lsls	r1, r2, #5
 80077c8:	69fa      	ldr	r2, [r7, #28]
 80077ca:	440a      	add	r2, r1
 80077cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80077d0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80077d4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	791b      	ldrb	r3, [r3, #4]
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d015      	beq.n	800780a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	f000 814e 	beq.w	8007a84 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	f003 030f 	and.w	r3, r3, #15
 80077f8:	2101      	movs	r1, #1
 80077fa:	fa01 f303 	lsl.w	r3, r1, r3
 80077fe:	69f9      	ldr	r1, [r7, #28]
 8007800:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007804:	4313      	orrs	r3, r2
 8007806:	634b      	str	r3, [r1, #52]	@ 0x34
 8007808:	e13c      	b.n	8007a84 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800780a:	69fb      	ldr	r3, [r7, #28]
 800780c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007816:	2b00      	cmp	r3, #0
 8007818:	d110      	bne.n	800783c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800781a:	69bb      	ldr	r3, [r7, #24]
 800781c:	015a      	lsls	r2, r3, #5
 800781e:	69fb      	ldr	r3, [r7, #28]
 8007820:	4413      	add	r3, r2
 8007822:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	69ba      	ldr	r2, [r7, #24]
 800782a:	0151      	lsls	r1, r2, #5
 800782c:	69fa      	ldr	r2, [r7, #28]
 800782e:	440a      	add	r2, r1
 8007830:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007834:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007838:	6013      	str	r3, [r2, #0]
 800783a:	e00f      	b.n	800785c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800783c:	69bb      	ldr	r3, [r7, #24]
 800783e:	015a      	lsls	r2, r3, #5
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	4413      	add	r3, r2
 8007844:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	69ba      	ldr	r2, [r7, #24]
 800784c:	0151      	lsls	r1, r2, #5
 800784e:	69fa      	ldr	r2, [r7, #28]
 8007850:	440a      	add	r2, r1
 8007852:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007856:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800785a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	68d9      	ldr	r1, [r3, #12]
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	781a      	ldrb	r2, [r3, #0]
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	691b      	ldr	r3, [r3, #16]
 8007868:	b298      	uxth	r0, r3
 800786a:	79fb      	ldrb	r3, [r7, #7]
 800786c:	9300      	str	r3, [sp, #0]
 800786e:	4603      	mov	r3, r0
 8007870:	68f8      	ldr	r0, [r7, #12]
 8007872:	f000 f9b9 	bl	8007be8 <USB_WritePacket>
 8007876:	e105      	b.n	8007a84 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007878:	69bb      	ldr	r3, [r7, #24]
 800787a:	015a      	lsls	r2, r3, #5
 800787c:	69fb      	ldr	r3, [r7, #28]
 800787e:	4413      	add	r3, r2
 8007880:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007884:	691b      	ldr	r3, [r3, #16]
 8007886:	69ba      	ldr	r2, [r7, #24]
 8007888:	0151      	lsls	r1, r2, #5
 800788a:	69fa      	ldr	r2, [r7, #28]
 800788c:	440a      	add	r2, r1
 800788e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007892:	0cdb      	lsrs	r3, r3, #19
 8007894:	04db      	lsls	r3, r3, #19
 8007896:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007898:	69bb      	ldr	r3, [r7, #24]
 800789a:	015a      	lsls	r2, r3, #5
 800789c:	69fb      	ldr	r3, [r7, #28]
 800789e:	4413      	add	r3, r2
 80078a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078a4:	691b      	ldr	r3, [r3, #16]
 80078a6:	69ba      	ldr	r2, [r7, #24]
 80078a8:	0151      	lsls	r1, r2, #5
 80078aa:	69fa      	ldr	r2, [r7, #28]
 80078ac:	440a      	add	r2, r1
 80078ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80078b2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80078b6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80078ba:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80078bc:	69bb      	ldr	r3, [r7, #24]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d132      	bne.n	8007928 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	691b      	ldr	r3, [r3, #16]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d003      	beq.n	80078d2 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	689a      	ldr	r2, [r3, #8]
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	689a      	ldr	r2, [r3, #8]
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80078da:	69bb      	ldr	r3, [r7, #24]
 80078dc:	015a      	lsls	r2, r3, #5
 80078de:	69fb      	ldr	r3, [r7, #28]
 80078e0:	4413      	add	r3, r2
 80078e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078e6:	691a      	ldr	r2, [r3, #16]
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	6a1b      	ldr	r3, [r3, #32]
 80078ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078f0:	69b9      	ldr	r1, [r7, #24]
 80078f2:	0148      	lsls	r0, r1, #5
 80078f4:	69f9      	ldr	r1, [r7, #28]
 80078f6:	4401      	add	r1, r0
 80078f8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80078fc:	4313      	orrs	r3, r2
 80078fe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007900:	69bb      	ldr	r3, [r7, #24]
 8007902:	015a      	lsls	r2, r3, #5
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	4413      	add	r3, r2
 8007908:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800790c:	691b      	ldr	r3, [r3, #16]
 800790e:	69ba      	ldr	r2, [r7, #24]
 8007910:	0151      	lsls	r1, r2, #5
 8007912:	69fa      	ldr	r2, [r7, #28]
 8007914:	440a      	add	r2, r1
 8007916:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800791a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800791e:	6113      	str	r3, [r2, #16]
 8007920:	e062      	b.n	80079e8 <USB_EPStartXfer+0x490>
 8007922:	bf00      	nop
 8007924:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	691b      	ldr	r3, [r3, #16]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d123      	bne.n	8007978 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007930:	69bb      	ldr	r3, [r7, #24]
 8007932:	015a      	lsls	r2, r3, #5
 8007934:	69fb      	ldr	r3, [r7, #28]
 8007936:	4413      	add	r3, r2
 8007938:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800793c:	691a      	ldr	r2, [r3, #16]
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007946:	69b9      	ldr	r1, [r7, #24]
 8007948:	0148      	lsls	r0, r1, #5
 800794a:	69f9      	ldr	r1, [r7, #28]
 800794c:	4401      	add	r1, r0
 800794e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007952:	4313      	orrs	r3, r2
 8007954:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007956:	69bb      	ldr	r3, [r7, #24]
 8007958:	015a      	lsls	r2, r3, #5
 800795a:	69fb      	ldr	r3, [r7, #28]
 800795c:	4413      	add	r3, r2
 800795e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007962:	691b      	ldr	r3, [r3, #16]
 8007964:	69ba      	ldr	r2, [r7, #24]
 8007966:	0151      	lsls	r1, r2, #5
 8007968:	69fa      	ldr	r2, [r7, #28]
 800796a:	440a      	add	r2, r1
 800796c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007970:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007974:	6113      	str	r3, [r2, #16]
 8007976:	e037      	b.n	80079e8 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	691a      	ldr	r2, [r3, #16]
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	4413      	add	r3, r2
 8007982:	1e5a      	subs	r2, r3, #1
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	fbb2 f3f3 	udiv	r3, r2, r3
 800798c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	8afa      	ldrh	r2, [r7, #22]
 8007994:	fb03 f202 	mul.w	r2, r3, r2
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800799c:	69bb      	ldr	r3, [r7, #24]
 800799e:	015a      	lsls	r2, r3, #5
 80079a0:	69fb      	ldr	r3, [r7, #28]
 80079a2:	4413      	add	r3, r2
 80079a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079a8:	691a      	ldr	r2, [r3, #16]
 80079aa:	8afb      	ldrh	r3, [r7, #22]
 80079ac:	04d9      	lsls	r1, r3, #19
 80079ae:	4b38      	ldr	r3, [pc, #224]	@ (8007a90 <USB_EPStartXfer+0x538>)
 80079b0:	400b      	ands	r3, r1
 80079b2:	69b9      	ldr	r1, [r7, #24]
 80079b4:	0148      	lsls	r0, r1, #5
 80079b6:	69f9      	ldr	r1, [r7, #28]
 80079b8:	4401      	add	r1, r0
 80079ba:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80079be:	4313      	orrs	r3, r2
 80079c0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80079c2:	69bb      	ldr	r3, [r7, #24]
 80079c4:	015a      	lsls	r2, r3, #5
 80079c6:	69fb      	ldr	r3, [r7, #28]
 80079c8:	4413      	add	r3, r2
 80079ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079ce:	691a      	ldr	r2, [r3, #16]
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	6a1b      	ldr	r3, [r3, #32]
 80079d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079d8:	69b9      	ldr	r1, [r7, #24]
 80079da:	0148      	lsls	r0, r1, #5
 80079dc:	69f9      	ldr	r1, [r7, #28]
 80079de:	4401      	add	r1, r0
 80079e0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80079e4:	4313      	orrs	r3, r2
 80079e6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80079e8:	79fb      	ldrb	r3, [r7, #7]
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d10d      	bne.n	8007a0a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	68db      	ldr	r3, [r3, #12]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d009      	beq.n	8007a0a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	68d9      	ldr	r1, [r3, #12]
 80079fa:	69bb      	ldr	r3, [r7, #24]
 80079fc:	015a      	lsls	r2, r3, #5
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	4413      	add	r3, r2
 8007a02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a06:	460a      	mov	r2, r1
 8007a08:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	791b      	ldrb	r3, [r3, #4]
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d128      	bne.n	8007a64 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007a12:	69fb      	ldr	r3, [r7, #28]
 8007a14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d110      	bne.n	8007a44 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007a22:	69bb      	ldr	r3, [r7, #24]
 8007a24:	015a      	lsls	r2, r3, #5
 8007a26:	69fb      	ldr	r3, [r7, #28]
 8007a28:	4413      	add	r3, r2
 8007a2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	69ba      	ldr	r2, [r7, #24]
 8007a32:	0151      	lsls	r1, r2, #5
 8007a34:	69fa      	ldr	r2, [r7, #28]
 8007a36:	440a      	add	r2, r1
 8007a38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a3c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007a40:	6013      	str	r3, [r2, #0]
 8007a42:	e00f      	b.n	8007a64 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007a44:	69bb      	ldr	r3, [r7, #24]
 8007a46:	015a      	lsls	r2, r3, #5
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	4413      	add	r3, r2
 8007a4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	69ba      	ldr	r2, [r7, #24]
 8007a54:	0151      	lsls	r1, r2, #5
 8007a56:	69fa      	ldr	r2, [r7, #28]
 8007a58:	440a      	add	r2, r1
 8007a5a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a62:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007a64:	69bb      	ldr	r3, [r7, #24]
 8007a66:	015a      	lsls	r2, r3, #5
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	69ba      	ldr	r2, [r7, #24]
 8007a74:	0151      	lsls	r1, r2, #5
 8007a76:	69fa      	ldr	r2, [r7, #28]
 8007a78:	440a      	add	r2, r1
 8007a7a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a7e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007a82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a84:	2300      	movs	r3, #0
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3720      	adds	r7, #32
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	1ff80000 	.word	0x1ff80000

08007a94 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b087      	sub	sp, #28
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	785b      	ldrb	r3, [r3, #1]
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d14a      	bne.n	8007b48 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	015a      	lsls	r2, r3, #5
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	4413      	add	r3, r2
 8007abc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ac6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007aca:	f040 8086 	bne.w	8007bda <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	781b      	ldrb	r3, [r3, #0]
 8007ad2:	015a      	lsls	r2, r3, #5
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	683a      	ldr	r2, [r7, #0]
 8007ae0:	7812      	ldrb	r2, [r2, #0]
 8007ae2:	0151      	lsls	r1, r2, #5
 8007ae4:	693a      	ldr	r2, [r7, #16]
 8007ae6:	440a      	add	r2, r1
 8007ae8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007aec:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007af0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	015a      	lsls	r2, r3, #5
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	4413      	add	r3, r2
 8007afc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	683a      	ldr	r2, [r7, #0]
 8007b04:	7812      	ldrb	r2, [r2, #0]
 8007b06:	0151      	lsls	r1, r2, #5
 8007b08:	693a      	ldr	r2, [r7, #16]
 8007b0a:	440a      	add	r2, r1
 8007b0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b10:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007b14:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	3301      	adds	r3, #1
 8007b1a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d902      	bls.n	8007b2c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007b26:	2301      	movs	r3, #1
 8007b28:	75fb      	strb	r3, [r7, #23]
          break;
 8007b2a:	e056      	b.n	8007bda <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	015a      	lsls	r2, r3, #5
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	4413      	add	r3, r2
 8007b36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007b40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b44:	d0e7      	beq.n	8007b16 <USB_EPStopXfer+0x82>
 8007b46:	e048      	b.n	8007bda <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	015a      	lsls	r2, r3, #5
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	4413      	add	r3, r2
 8007b52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007b5c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b60:	d13b      	bne.n	8007bda <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	015a      	lsls	r2, r3, #5
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	4413      	add	r3, r2
 8007b6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	683a      	ldr	r2, [r7, #0]
 8007b74:	7812      	ldrb	r2, [r2, #0]
 8007b76:	0151      	lsls	r1, r2, #5
 8007b78:	693a      	ldr	r2, [r7, #16]
 8007b7a:	440a      	add	r2, r1
 8007b7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b80:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007b84:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	015a      	lsls	r2, r3, #5
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	4413      	add	r3, r2
 8007b90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	683a      	ldr	r2, [r7, #0]
 8007b98:	7812      	ldrb	r2, [r2, #0]
 8007b9a:	0151      	lsls	r1, r2, #5
 8007b9c:	693a      	ldr	r2, [r7, #16]
 8007b9e:	440a      	add	r2, r1
 8007ba0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ba4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007ba8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	3301      	adds	r3, #1
 8007bae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d902      	bls.n	8007bc0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	75fb      	strb	r3, [r7, #23]
          break;
 8007bbe:	e00c      	b.n	8007bda <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	015a      	lsls	r2, r3, #5
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	4413      	add	r3, r2
 8007bca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007bd4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007bd8:	d0e7      	beq.n	8007baa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007bda:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	371c      	adds	r7, #28
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr

08007be8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b089      	sub	sp, #36	@ 0x24
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	60f8      	str	r0, [r7, #12]
 8007bf0:	60b9      	str	r1, [r7, #8]
 8007bf2:	4611      	mov	r1, r2
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	460b      	mov	r3, r1
 8007bf8:	71fb      	strb	r3, [r7, #7]
 8007bfa:	4613      	mov	r3, r2
 8007bfc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007c06:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d123      	bne.n	8007c56 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007c0e:	88bb      	ldrh	r3, [r7, #4]
 8007c10:	3303      	adds	r3, #3
 8007c12:	089b      	lsrs	r3, r3, #2
 8007c14:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007c16:	2300      	movs	r3, #0
 8007c18:	61bb      	str	r3, [r7, #24]
 8007c1a:	e018      	b.n	8007c4e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007c1c:	79fb      	ldrb	r3, [r7, #7]
 8007c1e:	031a      	lsls	r2, r3, #12
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	4413      	add	r3, r2
 8007c24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c28:	461a      	mov	r2, r3
 8007c2a:	69fb      	ldr	r3, [r7, #28]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007c30:	69fb      	ldr	r3, [r7, #28]
 8007c32:	3301      	adds	r3, #1
 8007c34:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007c36:	69fb      	ldr	r3, [r7, #28]
 8007c38:	3301      	adds	r3, #1
 8007c3a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007c3c:	69fb      	ldr	r3, [r7, #28]
 8007c3e:	3301      	adds	r3, #1
 8007c40:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007c42:	69fb      	ldr	r3, [r7, #28]
 8007c44:	3301      	adds	r3, #1
 8007c46:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007c48:	69bb      	ldr	r3, [r7, #24]
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	61bb      	str	r3, [r7, #24]
 8007c4e:	69ba      	ldr	r2, [r7, #24]
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d3e2      	bcc.n	8007c1c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007c56:	2300      	movs	r3, #0
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3724      	adds	r7, #36	@ 0x24
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr

08007c64 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b08b      	sub	sp, #44	@ 0x2c
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	4613      	mov	r3, r2
 8007c70:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007c7a:	88fb      	ldrh	r3, [r7, #6]
 8007c7c:	089b      	lsrs	r3, r3, #2
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007c82:	88fb      	ldrh	r3, [r7, #6]
 8007c84:	f003 0303 	and.w	r3, r3, #3
 8007c88:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	623b      	str	r3, [r7, #32]
 8007c8e:	e014      	b.n	8007cba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007c90:	69bb      	ldr	r3, [r7, #24]
 8007c92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c9a:	601a      	str	r2, [r3, #0]
    pDest++;
 8007c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c9e:	3301      	adds	r3, #1
 8007ca0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007caa:	3301      	adds	r3, #1
 8007cac:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007cb4:	6a3b      	ldr	r3, [r7, #32]
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	623b      	str	r3, [r7, #32]
 8007cba:	6a3a      	ldr	r2, [r7, #32]
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	d3e6      	bcc.n	8007c90 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007cc2:	8bfb      	ldrh	r3, [r7, #30]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d01e      	beq.n	8007d06 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007ccc:	69bb      	ldr	r3, [r7, #24]
 8007cce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	f107 0310 	add.w	r3, r7, #16
 8007cd8:	6812      	ldr	r2, [r2, #0]
 8007cda:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007cdc:	693a      	ldr	r2, [r7, #16]
 8007cde:	6a3b      	ldr	r3, [r7, #32]
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	00db      	lsls	r3, r3, #3
 8007ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ce8:	b2da      	uxtb	r2, r3
 8007cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cec:	701a      	strb	r2, [r3, #0]
      i++;
 8007cee:	6a3b      	ldr	r3, [r7, #32]
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	623b      	str	r3, [r7, #32]
      pDest++;
 8007cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007cfa:	8bfb      	ldrh	r3, [r7, #30]
 8007cfc:	3b01      	subs	r3, #1
 8007cfe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007d00:	8bfb      	ldrh	r3, [r7, #30]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d1ea      	bne.n	8007cdc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	372c      	adds	r7, #44	@ 0x2c
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr

08007d14 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b085      	sub	sp, #20
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	785b      	ldrb	r3, [r3, #1]
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d12c      	bne.n	8007d8a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	015a      	lsls	r2, r3, #5
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	4413      	add	r3, r2
 8007d38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	db12      	blt.n	8007d68 <USB_EPSetStall+0x54>
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d00f      	beq.n	8007d68 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	015a      	lsls	r2, r3, #5
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	4413      	add	r3, r2
 8007d50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	68ba      	ldr	r2, [r7, #8]
 8007d58:	0151      	lsls	r1, r2, #5
 8007d5a:	68fa      	ldr	r2, [r7, #12]
 8007d5c:	440a      	add	r2, r1
 8007d5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d62:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007d66:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	015a      	lsls	r2, r3, #5
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	4413      	add	r3, r2
 8007d70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	68ba      	ldr	r2, [r7, #8]
 8007d78:	0151      	lsls	r1, r2, #5
 8007d7a:	68fa      	ldr	r2, [r7, #12]
 8007d7c:	440a      	add	r2, r1
 8007d7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d82:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007d86:	6013      	str	r3, [r2, #0]
 8007d88:	e02b      	b.n	8007de2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	015a      	lsls	r2, r3, #5
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	4413      	add	r3, r2
 8007d92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	db12      	blt.n	8007dc2 <USB_EPSetStall+0xae>
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d00f      	beq.n	8007dc2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	015a      	lsls	r2, r3, #5
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	4413      	add	r3, r2
 8007daa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	68ba      	ldr	r2, [r7, #8]
 8007db2:	0151      	lsls	r1, r2, #5
 8007db4:	68fa      	ldr	r2, [r7, #12]
 8007db6:	440a      	add	r2, r1
 8007db8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007dbc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007dc0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	015a      	lsls	r2, r3, #5
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	4413      	add	r3, r2
 8007dca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	68ba      	ldr	r2, [r7, #8]
 8007dd2:	0151      	lsls	r1, r2, #5
 8007dd4:	68fa      	ldr	r2, [r7, #12]
 8007dd6:	440a      	add	r2, r1
 8007dd8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ddc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007de0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007de2:	2300      	movs	r3, #0
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3714      	adds	r7, #20
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr

08007df0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b085      	sub	sp, #20
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	785b      	ldrb	r3, [r3, #1]
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d128      	bne.n	8007e5e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	015a      	lsls	r2, r3, #5
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	4413      	add	r3, r2
 8007e14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	68ba      	ldr	r2, [r7, #8]
 8007e1c:	0151      	lsls	r1, r2, #5
 8007e1e:	68fa      	ldr	r2, [r7, #12]
 8007e20:	440a      	add	r2, r1
 8007e22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e26:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007e2a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	791b      	ldrb	r3, [r3, #4]
 8007e30:	2b03      	cmp	r3, #3
 8007e32:	d003      	beq.n	8007e3c <USB_EPClearStall+0x4c>
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	791b      	ldrb	r3, [r3, #4]
 8007e38:	2b02      	cmp	r3, #2
 8007e3a:	d138      	bne.n	8007eae <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	015a      	lsls	r2, r3, #5
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	4413      	add	r3, r2
 8007e44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	68ba      	ldr	r2, [r7, #8]
 8007e4c:	0151      	lsls	r1, r2, #5
 8007e4e:	68fa      	ldr	r2, [r7, #12]
 8007e50:	440a      	add	r2, r1
 8007e52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e5a:	6013      	str	r3, [r2, #0]
 8007e5c:	e027      	b.n	8007eae <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	015a      	lsls	r2, r3, #5
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	4413      	add	r3, r2
 8007e66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	68ba      	ldr	r2, [r7, #8]
 8007e6e:	0151      	lsls	r1, r2, #5
 8007e70:	68fa      	ldr	r2, [r7, #12]
 8007e72:	440a      	add	r2, r1
 8007e74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e78:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007e7c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	791b      	ldrb	r3, [r3, #4]
 8007e82:	2b03      	cmp	r3, #3
 8007e84:	d003      	beq.n	8007e8e <USB_EPClearStall+0x9e>
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	791b      	ldrb	r3, [r3, #4]
 8007e8a:	2b02      	cmp	r3, #2
 8007e8c:	d10f      	bne.n	8007eae <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	015a      	lsls	r2, r3, #5
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	4413      	add	r3, r2
 8007e96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	68ba      	ldr	r2, [r7, #8]
 8007e9e:	0151      	lsls	r1, r2, #5
 8007ea0:	68fa      	ldr	r2, [r7, #12]
 8007ea2:	440a      	add	r2, r1
 8007ea4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ea8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007eac:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007eae:	2300      	movs	r3, #0
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3714      	adds	r7, #20
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr

08007ebc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b085      	sub	sp, #20
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	460b      	mov	r3, r1
 8007ec6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	68fa      	ldr	r2, [r7, #12]
 8007ed6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007eda:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007ede:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	78fb      	ldrb	r3, [r7, #3]
 8007eea:	011b      	lsls	r3, r3, #4
 8007eec:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007ef0:	68f9      	ldr	r1, [r7, #12]
 8007ef2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007efa:	2300      	movs	r3, #0
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3714      	adds	r7, #20
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr

08007f08 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b085      	sub	sp, #20
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	68fa      	ldr	r2, [r7, #12]
 8007f1e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007f22:	f023 0303 	bic.w	r3, r3, #3
 8007f26:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	68fa      	ldr	r2, [r7, #12]
 8007f32:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007f36:	f023 0302 	bic.w	r3, r3, #2
 8007f3a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007f3c:	2300      	movs	r3, #0
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3714      	adds	r7, #20
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr

08007f4a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007f4a:	b480      	push	{r7}
 8007f4c:	b085      	sub	sp, #20
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	68fa      	ldr	r2, [r7, #12]
 8007f60:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007f64:	f023 0303 	bic.w	r3, r3, #3
 8007f68:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	68fa      	ldr	r2, [r7, #12]
 8007f74:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007f78:	f043 0302 	orr.w	r3, r3, #2
 8007f7c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007f7e:	2300      	movs	r3, #0
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3714      	adds	r7, #20
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b085      	sub	sp, #20
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	695b      	ldr	r3, [r3, #20]
 8007f98:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	699b      	ldr	r3, [r3, #24]
 8007f9e:	68fa      	ldr	r2, [r7, #12]
 8007fa0:	4013      	ands	r3, r2
 8007fa2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3714      	adds	r7, #20
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr

08007fb2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007fb2:	b480      	push	{r7}
 8007fb4:	b085      	sub	sp, #20
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fc4:	699b      	ldr	r3, [r3, #24]
 8007fc6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fce:	69db      	ldr	r3, [r3, #28]
 8007fd0:	68ba      	ldr	r2, [r7, #8]
 8007fd2:	4013      	ands	r3, r2
 8007fd4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	0c1b      	lsrs	r3, r3, #16
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3714      	adds	r7, #20
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr

08007fe6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007fe6:	b480      	push	{r7}
 8007fe8:	b085      	sub	sp, #20
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ff8:	699b      	ldr	r3, [r3, #24]
 8007ffa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008002:	69db      	ldr	r3, [r3, #28]
 8008004:	68ba      	ldr	r2, [r7, #8]
 8008006:	4013      	ands	r3, r2
 8008008:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	b29b      	uxth	r3, r3
}
 800800e:	4618      	mov	r0, r3
 8008010:	3714      	adds	r7, #20
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr

0800801a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800801a:	b480      	push	{r7}
 800801c:	b085      	sub	sp, #20
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
 8008022:	460b      	mov	r3, r1
 8008024:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800802a:	78fb      	ldrb	r3, [r7, #3]
 800802c:	015a      	lsls	r2, r3, #5
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	4413      	add	r3, r2
 8008032:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008040:	695b      	ldr	r3, [r3, #20]
 8008042:	68ba      	ldr	r2, [r7, #8]
 8008044:	4013      	ands	r3, r2
 8008046:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008048:	68bb      	ldr	r3, [r7, #8]
}
 800804a:	4618      	mov	r0, r3
 800804c:	3714      	adds	r7, #20
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr

08008056 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008056:	b480      	push	{r7}
 8008058:	b087      	sub	sp, #28
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
 800805e:	460b      	mov	r3, r1
 8008060:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800806c:	691b      	ldr	r3, [r3, #16]
 800806e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008076:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008078:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800807a:	78fb      	ldrb	r3, [r7, #3]
 800807c:	f003 030f 	and.w	r3, r3, #15
 8008080:	68fa      	ldr	r2, [r7, #12]
 8008082:	fa22 f303 	lsr.w	r3, r2, r3
 8008086:	01db      	lsls	r3, r3, #7
 8008088:	b2db      	uxtb	r3, r3
 800808a:	693a      	ldr	r2, [r7, #16]
 800808c:	4313      	orrs	r3, r2
 800808e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008090:	78fb      	ldrb	r3, [r7, #3]
 8008092:	015a      	lsls	r2, r3, #5
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	4413      	add	r3, r2
 8008098:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	693a      	ldr	r2, [r7, #16]
 80080a0:	4013      	ands	r3, r2
 80080a2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80080a4:	68bb      	ldr	r3, [r7, #8]
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	371c      	adds	r7, #28
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr

080080b2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80080b2:	b480      	push	{r7}
 80080b4:	b083      	sub	sp, #12
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	695b      	ldr	r3, [r3, #20]
 80080be:	f003 0301 	and.w	r3, r3, #1
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	370c      	adds	r7, #12
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr

080080ce <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80080ce:	b480      	push	{r7}
 80080d0:	b085      	sub	sp, #20
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	68fa      	ldr	r2, [r7, #12]
 80080e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080e8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80080ec:	f023 0307 	bic.w	r3, r3, #7
 80080f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	68fa      	ldr	r2, [r7, #12]
 80080fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008100:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008104:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008106:	2300      	movs	r3, #0
}
 8008108:	4618      	mov	r0, r3
 800810a:	3714      	adds	r7, #20
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr

08008114 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008114:	b480      	push	{r7}
 8008116:	b087      	sub	sp, #28
 8008118:	af00      	add	r7, sp, #0
 800811a:	60f8      	str	r0, [r7, #12]
 800811c:	460b      	mov	r3, r1
 800811e:	607a      	str	r2, [r7, #4]
 8008120:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	333c      	adds	r3, #60	@ 0x3c
 800812a:	3304      	adds	r3, #4
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	4a26      	ldr	r2, [pc, #152]	@ (80081cc <USB_EP0_OutStart+0xb8>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d90a      	bls.n	800814e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008144:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008148:	d101      	bne.n	800814e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800814a:	2300      	movs	r3, #0
 800814c:	e037      	b.n	80081be <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008154:	461a      	mov	r2, r3
 8008156:	2300      	movs	r3, #0
 8008158:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008160:	691b      	ldr	r3, [r3, #16]
 8008162:	697a      	ldr	r2, [r7, #20]
 8008164:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008168:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800816c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008174:	691b      	ldr	r3, [r3, #16]
 8008176:	697a      	ldr	r2, [r7, #20]
 8008178:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800817c:	f043 0318 	orr.w	r3, r3, #24
 8008180:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008188:	691b      	ldr	r3, [r3, #16]
 800818a:	697a      	ldr	r2, [r7, #20]
 800818c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008190:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008194:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008196:	7afb      	ldrb	r3, [r7, #11]
 8008198:	2b01      	cmp	r3, #1
 800819a:	d10f      	bne.n	80081bc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081a2:	461a      	mov	r2, r3
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	697a      	ldr	r2, [r7, #20]
 80081b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80081b6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80081ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80081bc:	2300      	movs	r3, #0
}
 80081be:	4618      	mov	r0, r3
 80081c0:	371c      	adds	r7, #28
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr
 80081ca:	bf00      	nop
 80081cc:	4f54300a 	.word	0x4f54300a

080081d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b085      	sub	sp, #20
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80081d8:	2300      	movs	r3, #0
 80081da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	3301      	adds	r3, #1
 80081e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80081e8:	d901      	bls.n	80081ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80081ea:	2303      	movs	r3, #3
 80081ec:	e01b      	b.n	8008226 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	691b      	ldr	r3, [r3, #16]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	daf2      	bge.n	80081dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80081f6:	2300      	movs	r3, #0
 80081f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	691b      	ldr	r3, [r3, #16]
 80081fe:	f043 0201 	orr.w	r2, r3, #1
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	3301      	adds	r3, #1
 800820a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008212:	d901      	bls.n	8008218 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008214:	2303      	movs	r3, #3
 8008216:	e006      	b.n	8008226 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	691b      	ldr	r3, [r3, #16]
 800821c:	f003 0301 	and.w	r3, r3, #1
 8008220:	2b01      	cmp	r3, #1
 8008222:	d0f0      	beq.n	8008206 <USB_CoreReset+0x36>

  return HAL_OK;
 8008224:	2300      	movs	r3, #0
}
 8008226:	4618      	mov	r0, r3
 8008228:	3714      	adds	r7, #20
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr
	...

08008234 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b084      	sub	sp, #16
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	460b      	mov	r3, r1
 800823e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008240:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008244:	f002 fc9a 	bl	800ab7c <USBD_static_malloc>
 8008248:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d109      	bne.n	8008264 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	32b0      	adds	r2, #176	@ 0xb0
 800825a:	2100      	movs	r1, #0
 800825c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008260:	2302      	movs	r3, #2
 8008262:	e0d4      	b.n	800840e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008264:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008268:	2100      	movs	r1, #0
 800826a:	68f8      	ldr	r0, [r7, #12]
 800826c:	f002 fcca 	bl	800ac04 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	32b0      	adds	r2, #176	@ 0xb0
 800827a:	68f9      	ldr	r1, [r7, #12]
 800827c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	32b0      	adds	r2, #176	@ 0xb0
 800828a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	7c1b      	ldrb	r3, [r3, #16]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d138      	bne.n	800830e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800829c:	4b5e      	ldr	r3, [pc, #376]	@ (8008418 <USBD_CDC_Init+0x1e4>)
 800829e:	7819      	ldrb	r1, [r3, #0]
 80082a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80082a4:	2202      	movs	r2, #2
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f002 fb45 	bl	800a936 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80082ac:	4b5a      	ldr	r3, [pc, #360]	@ (8008418 <USBD_CDC_Init+0x1e4>)
 80082ae:	781b      	ldrb	r3, [r3, #0]
 80082b0:	f003 020f 	and.w	r2, r3, #15
 80082b4:	6879      	ldr	r1, [r7, #4]
 80082b6:	4613      	mov	r3, r2
 80082b8:	009b      	lsls	r3, r3, #2
 80082ba:	4413      	add	r3, r2
 80082bc:	009b      	lsls	r3, r3, #2
 80082be:	440b      	add	r3, r1
 80082c0:	3324      	adds	r3, #36	@ 0x24
 80082c2:	2201      	movs	r2, #1
 80082c4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80082c6:	4b55      	ldr	r3, [pc, #340]	@ (800841c <USBD_CDC_Init+0x1e8>)
 80082c8:	7819      	ldrb	r1, [r3, #0]
 80082ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80082ce:	2202      	movs	r2, #2
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f002 fb30 	bl	800a936 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80082d6:	4b51      	ldr	r3, [pc, #324]	@ (800841c <USBD_CDC_Init+0x1e8>)
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	f003 020f 	and.w	r2, r3, #15
 80082de:	6879      	ldr	r1, [r7, #4]
 80082e0:	4613      	mov	r3, r2
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	4413      	add	r3, r2
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	440b      	add	r3, r1
 80082ea:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80082ee:	2201      	movs	r2, #1
 80082f0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80082f2:	4b4b      	ldr	r3, [pc, #300]	@ (8008420 <USBD_CDC_Init+0x1ec>)
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	f003 020f 	and.w	r2, r3, #15
 80082fa:	6879      	ldr	r1, [r7, #4]
 80082fc:	4613      	mov	r3, r2
 80082fe:	009b      	lsls	r3, r3, #2
 8008300:	4413      	add	r3, r2
 8008302:	009b      	lsls	r3, r3, #2
 8008304:	440b      	add	r3, r1
 8008306:	3326      	adds	r3, #38	@ 0x26
 8008308:	2210      	movs	r2, #16
 800830a:	801a      	strh	r2, [r3, #0]
 800830c:	e035      	b.n	800837a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800830e:	4b42      	ldr	r3, [pc, #264]	@ (8008418 <USBD_CDC_Init+0x1e4>)
 8008310:	7819      	ldrb	r1, [r3, #0]
 8008312:	2340      	movs	r3, #64	@ 0x40
 8008314:	2202      	movs	r2, #2
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f002 fb0d 	bl	800a936 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800831c:	4b3e      	ldr	r3, [pc, #248]	@ (8008418 <USBD_CDC_Init+0x1e4>)
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	f003 020f 	and.w	r2, r3, #15
 8008324:	6879      	ldr	r1, [r7, #4]
 8008326:	4613      	mov	r3, r2
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	4413      	add	r3, r2
 800832c:	009b      	lsls	r3, r3, #2
 800832e:	440b      	add	r3, r1
 8008330:	3324      	adds	r3, #36	@ 0x24
 8008332:	2201      	movs	r2, #1
 8008334:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008336:	4b39      	ldr	r3, [pc, #228]	@ (800841c <USBD_CDC_Init+0x1e8>)
 8008338:	7819      	ldrb	r1, [r3, #0]
 800833a:	2340      	movs	r3, #64	@ 0x40
 800833c:	2202      	movs	r2, #2
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f002 faf9 	bl	800a936 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008344:	4b35      	ldr	r3, [pc, #212]	@ (800841c <USBD_CDC_Init+0x1e8>)
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	f003 020f 	and.w	r2, r3, #15
 800834c:	6879      	ldr	r1, [r7, #4]
 800834e:	4613      	mov	r3, r2
 8008350:	009b      	lsls	r3, r3, #2
 8008352:	4413      	add	r3, r2
 8008354:	009b      	lsls	r3, r3, #2
 8008356:	440b      	add	r3, r1
 8008358:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800835c:	2201      	movs	r2, #1
 800835e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008360:	4b2f      	ldr	r3, [pc, #188]	@ (8008420 <USBD_CDC_Init+0x1ec>)
 8008362:	781b      	ldrb	r3, [r3, #0]
 8008364:	f003 020f 	and.w	r2, r3, #15
 8008368:	6879      	ldr	r1, [r7, #4]
 800836a:	4613      	mov	r3, r2
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	4413      	add	r3, r2
 8008370:	009b      	lsls	r3, r3, #2
 8008372:	440b      	add	r3, r1
 8008374:	3326      	adds	r3, #38	@ 0x26
 8008376:	2210      	movs	r2, #16
 8008378:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800837a:	4b29      	ldr	r3, [pc, #164]	@ (8008420 <USBD_CDC_Init+0x1ec>)
 800837c:	7819      	ldrb	r1, [r3, #0]
 800837e:	2308      	movs	r3, #8
 8008380:	2203      	movs	r2, #3
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f002 fad7 	bl	800a936 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008388:	4b25      	ldr	r3, [pc, #148]	@ (8008420 <USBD_CDC_Init+0x1ec>)
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	f003 020f 	and.w	r2, r3, #15
 8008390:	6879      	ldr	r1, [r7, #4]
 8008392:	4613      	mov	r3, r2
 8008394:	009b      	lsls	r3, r3, #2
 8008396:	4413      	add	r3, r2
 8008398:	009b      	lsls	r3, r3, #2
 800839a:	440b      	add	r3, r1
 800839c:	3324      	adds	r3, #36	@ 0x24
 800839e:	2201      	movs	r2, #1
 80083a0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2200      	movs	r2, #0
 80083a6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80083b0:	687a      	ldr	r2, [r7, #4]
 80083b2:	33b0      	adds	r3, #176	@ 0xb0
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	4413      	add	r3, r2
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2200      	movs	r2, #0
 80083c2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2200      	movs	r2, #0
 80083ca:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d101      	bne.n	80083dc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80083d8:	2302      	movs	r3, #2
 80083da:	e018      	b.n	800840e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	7c1b      	ldrb	r3, [r3, #16]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d10a      	bne.n	80083fa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80083e4:	4b0d      	ldr	r3, [pc, #52]	@ (800841c <USBD_CDC_Init+0x1e8>)
 80083e6:	7819      	ldrb	r1, [r3, #0]
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80083ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f002 fb8e 	bl	800ab14 <USBD_LL_PrepareReceive>
 80083f8:	e008      	b.n	800840c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80083fa:	4b08      	ldr	r3, [pc, #32]	@ (800841c <USBD_CDC_Init+0x1e8>)
 80083fc:	7819      	ldrb	r1, [r3, #0]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008404:	2340      	movs	r3, #64	@ 0x40
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f002 fb84 	bl	800ab14 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800840c:	2300      	movs	r3, #0
}
 800840e:	4618      	mov	r0, r3
 8008410:	3710      	adds	r7, #16
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop
 8008418:	20000093 	.word	0x20000093
 800841c:	20000094 	.word	0x20000094
 8008420:	20000095 	.word	0x20000095

08008424 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b082      	sub	sp, #8
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	460b      	mov	r3, r1
 800842e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008430:	4b3a      	ldr	r3, [pc, #232]	@ (800851c <USBD_CDC_DeInit+0xf8>)
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	4619      	mov	r1, r3
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f002 faa3 	bl	800a982 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800843c:	4b37      	ldr	r3, [pc, #220]	@ (800851c <USBD_CDC_DeInit+0xf8>)
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	f003 020f 	and.w	r2, r3, #15
 8008444:	6879      	ldr	r1, [r7, #4]
 8008446:	4613      	mov	r3, r2
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	4413      	add	r3, r2
 800844c:	009b      	lsls	r3, r3, #2
 800844e:	440b      	add	r3, r1
 8008450:	3324      	adds	r3, #36	@ 0x24
 8008452:	2200      	movs	r2, #0
 8008454:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008456:	4b32      	ldr	r3, [pc, #200]	@ (8008520 <USBD_CDC_DeInit+0xfc>)
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	4619      	mov	r1, r3
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f002 fa90 	bl	800a982 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008462:	4b2f      	ldr	r3, [pc, #188]	@ (8008520 <USBD_CDC_DeInit+0xfc>)
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	f003 020f 	and.w	r2, r3, #15
 800846a:	6879      	ldr	r1, [r7, #4]
 800846c:	4613      	mov	r3, r2
 800846e:	009b      	lsls	r3, r3, #2
 8008470:	4413      	add	r3, r2
 8008472:	009b      	lsls	r3, r3, #2
 8008474:	440b      	add	r3, r1
 8008476:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800847a:	2200      	movs	r2, #0
 800847c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800847e:	4b29      	ldr	r3, [pc, #164]	@ (8008524 <USBD_CDC_DeInit+0x100>)
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	4619      	mov	r1, r3
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f002 fa7c 	bl	800a982 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800848a:	4b26      	ldr	r3, [pc, #152]	@ (8008524 <USBD_CDC_DeInit+0x100>)
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	f003 020f 	and.w	r2, r3, #15
 8008492:	6879      	ldr	r1, [r7, #4]
 8008494:	4613      	mov	r3, r2
 8008496:	009b      	lsls	r3, r3, #2
 8008498:	4413      	add	r3, r2
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	440b      	add	r3, r1
 800849e:	3324      	adds	r3, #36	@ 0x24
 80084a0:	2200      	movs	r2, #0
 80084a2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80084a4:	4b1f      	ldr	r3, [pc, #124]	@ (8008524 <USBD_CDC_DeInit+0x100>)
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	f003 020f 	and.w	r2, r3, #15
 80084ac:	6879      	ldr	r1, [r7, #4]
 80084ae:	4613      	mov	r3, r2
 80084b0:	009b      	lsls	r3, r3, #2
 80084b2:	4413      	add	r3, r2
 80084b4:	009b      	lsls	r3, r3, #2
 80084b6:	440b      	add	r3, r1
 80084b8:	3326      	adds	r3, #38	@ 0x26
 80084ba:	2200      	movs	r2, #0
 80084bc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	32b0      	adds	r2, #176	@ 0xb0
 80084c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d01f      	beq.n	8008510 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80084d6:	687a      	ldr	r2, [r7, #4]
 80084d8:	33b0      	adds	r3, #176	@ 0xb0
 80084da:	009b      	lsls	r3, r3, #2
 80084dc:	4413      	add	r3, r2
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	32b0      	adds	r2, #176	@ 0xb0
 80084ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084f2:	4618      	mov	r0, r3
 80084f4:	f002 fb50 	bl	800ab98 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	32b0      	adds	r2, #176	@ 0xb0
 8008502:	2100      	movs	r1, #0
 8008504:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2200      	movs	r2, #0
 800850c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008510:	2300      	movs	r3, #0
}
 8008512:	4618      	mov	r0, r3
 8008514:	3708      	adds	r7, #8
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
 800851a:	bf00      	nop
 800851c:	20000093 	.word	0x20000093
 8008520:	20000094 	.word	0x20000094
 8008524:	20000095 	.word	0x20000095

08008528 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b086      	sub	sp, #24
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	32b0      	adds	r2, #176	@ 0xb0
 800853c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008540:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008542:	2300      	movs	r3, #0
 8008544:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008546:	2300      	movs	r3, #0
 8008548:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800854a:	2300      	movs	r3, #0
 800854c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d101      	bne.n	8008558 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008554:	2303      	movs	r3, #3
 8008556:	e0bf      	b.n	80086d8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	781b      	ldrb	r3, [r3, #0]
 800855c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008560:	2b00      	cmp	r3, #0
 8008562:	d050      	beq.n	8008606 <USBD_CDC_Setup+0xde>
 8008564:	2b20      	cmp	r3, #32
 8008566:	f040 80af 	bne.w	80086c8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	88db      	ldrh	r3, [r3, #6]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d03a      	beq.n	80085e8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	b25b      	sxtb	r3, r3
 8008578:	2b00      	cmp	r3, #0
 800857a:	da1b      	bge.n	80085b4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	33b0      	adds	r3, #176	@ 0xb0
 8008586:	009b      	lsls	r3, r3, #2
 8008588:	4413      	add	r3, r2
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	683a      	ldr	r2, [r7, #0]
 8008590:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008592:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008594:	683a      	ldr	r2, [r7, #0]
 8008596:	88d2      	ldrh	r2, [r2, #6]
 8008598:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	88db      	ldrh	r3, [r3, #6]
 800859e:	2b07      	cmp	r3, #7
 80085a0:	bf28      	it	cs
 80085a2:	2307      	movcs	r3, #7
 80085a4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	89fa      	ldrh	r2, [r7, #14]
 80085aa:	4619      	mov	r1, r3
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f001 fd93 	bl	800a0d8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80085b2:	e090      	b.n	80086d6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	785a      	ldrb	r2, [r3, #1]
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	88db      	ldrh	r3, [r3, #6]
 80085c2:	2b3f      	cmp	r3, #63	@ 0x3f
 80085c4:	d803      	bhi.n	80085ce <USBD_CDC_Setup+0xa6>
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	88db      	ldrh	r3, [r3, #6]
 80085ca:	b2da      	uxtb	r2, r3
 80085cc:	e000      	b.n	80085d0 <USBD_CDC_Setup+0xa8>
 80085ce:	2240      	movs	r2, #64	@ 0x40
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80085d6:	6939      	ldr	r1, [r7, #16]
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80085de:	461a      	mov	r2, r3
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f001 fda5 	bl	800a130 <USBD_CtlPrepareRx>
      break;
 80085e6:	e076      	b.n	80086d6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80085ee:	687a      	ldr	r2, [r7, #4]
 80085f0:	33b0      	adds	r3, #176	@ 0xb0
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	4413      	add	r3, r2
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	689b      	ldr	r3, [r3, #8]
 80085fa:	683a      	ldr	r2, [r7, #0]
 80085fc:	7850      	ldrb	r0, [r2, #1]
 80085fe:	2200      	movs	r2, #0
 8008600:	6839      	ldr	r1, [r7, #0]
 8008602:	4798      	blx	r3
      break;
 8008604:	e067      	b.n	80086d6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	785b      	ldrb	r3, [r3, #1]
 800860a:	2b0b      	cmp	r3, #11
 800860c:	d851      	bhi.n	80086b2 <USBD_CDC_Setup+0x18a>
 800860e:	a201      	add	r2, pc, #4	@ (adr r2, 8008614 <USBD_CDC_Setup+0xec>)
 8008610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008614:	08008645 	.word	0x08008645
 8008618:	080086c1 	.word	0x080086c1
 800861c:	080086b3 	.word	0x080086b3
 8008620:	080086b3 	.word	0x080086b3
 8008624:	080086b3 	.word	0x080086b3
 8008628:	080086b3 	.word	0x080086b3
 800862c:	080086b3 	.word	0x080086b3
 8008630:	080086b3 	.word	0x080086b3
 8008634:	080086b3 	.word	0x080086b3
 8008638:	080086b3 	.word	0x080086b3
 800863c:	0800866f 	.word	0x0800866f
 8008640:	08008699 	.word	0x08008699
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800864a:	b2db      	uxtb	r3, r3
 800864c:	2b03      	cmp	r3, #3
 800864e:	d107      	bne.n	8008660 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008650:	f107 030a 	add.w	r3, r7, #10
 8008654:	2202      	movs	r2, #2
 8008656:	4619      	mov	r1, r3
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f001 fd3d 	bl	800a0d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800865e:	e032      	b.n	80086c6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008660:	6839      	ldr	r1, [r7, #0]
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f001 fcbb 	bl	8009fde <USBD_CtlError>
            ret = USBD_FAIL;
 8008668:	2303      	movs	r3, #3
 800866a:	75fb      	strb	r3, [r7, #23]
          break;
 800866c:	e02b      	b.n	80086c6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008674:	b2db      	uxtb	r3, r3
 8008676:	2b03      	cmp	r3, #3
 8008678:	d107      	bne.n	800868a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800867a:	f107 030d 	add.w	r3, r7, #13
 800867e:	2201      	movs	r2, #1
 8008680:	4619      	mov	r1, r3
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f001 fd28 	bl	800a0d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008688:	e01d      	b.n	80086c6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800868a:	6839      	ldr	r1, [r7, #0]
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f001 fca6 	bl	8009fde <USBD_CtlError>
            ret = USBD_FAIL;
 8008692:	2303      	movs	r3, #3
 8008694:	75fb      	strb	r3, [r7, #23]
          break;
 8008696:	e016      	b.n	80086c6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800869e:	b2db      	uxtb	r3, r3
 80086a0:	2b03      	cmp	r3, #3
 80086a2:	d00f      	beq.n	80086c4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80086a4:	6839      	ldr	r1, [r7, #0]
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f001 fc99 	bl	8009fde <USBD_CtlError>
            ret = USBD_FAIL;
 80086ac:	2303      	movs	r3, #3
 80086ae:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80086b0:	e008      	b.n	80086c4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80086b2:	6839      	ldr	r1, [r7, #0]
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f001 fc92 	bl	8009fde <USBD_CtlError>
          ret = USBD_FAIL;
 80086ba:	2303      	movs	r3, #3
 80086bc:	75fb      	strb	r3, [r7, #23]
          break;
 80086be:	e002      	b.n	80086c6 <USBD_CDC_Setup+0x19e>
          break;
 80086c0:	bf00      	nop
 80086c2:	e008      	b.n	80086d6 <USBD_CDC_Setup+0x1ae>
          break;
 80086c4:	bf00      	nop
      }
      break;
 80086c6:	e006      	b.n	80086d6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80086c8:	6839      	ldr	r1, [r7, #0]
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f001 fc87 	bl	8009fde <USBD_CtlError>
      ret = USBD_FAIL;
 80086d0:	2303      	movs	r3, #3
 80086d2:	75fb      	strb	r3, [r7, #23]
      break;
 80086d4:	bf00      	nop
  }

  return (uint8_t)ret;
 80086d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3718      	adds	r7, #24
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	460b      	mov	r3, r1
 80086ea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80086f2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	32b0      	adds	r2, #176	@ 0xb0
 80086fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d101      	bne.n	800870a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008706:	2303      	movs	r3, #3
 8008708:	e065      	b.n	80087d6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	32b0      	adds	r2, #176	@ 0xb0
 8008714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008718:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800871a:	78fb      	ldrb	r3, [r7, #3]
 800871c:	f003 020f 	and.w	r2, r3, #15
 8008720:	6879      	ldr	r1, [r7, #4]
 8008722:	4613      	mov	r3, r2
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	4413      	add	r3, r2
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	440b      	add	r3, r1
 800872c:	3318      	adds	r3, #24
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d02f      	beq.n	8008794 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008734:	78fb      	ldrb	r3, [r7, #3]
 8008736:	f003 020f 	and.w	r2, r3, #15
 800873a:	6879      	ldr	r1, [r7, #4]
 800873c:	4613      	mov	r3, r2
 800873e:	009b      	lsls	r3, r3, #2
 8008740:	4413      	add	r3, r2
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	440b      	add	r3, r1
 8008746:	3318      	adds	r3, #24
 8008748:	681a      	ldr	r2, [r3, #0]
 800874a:	78fb      	ldrb	r3, [r7, #3]
 800874c:	f003 010f 	and.w	r1, r3, #15
 8008750:	68f8      	ldr	r0, [r7, #12]
 8008752:	460b      	mov	r3, r1
 8008754:	00db      	lsls	r3, r3, #3
 8008756:	440b      	add	r3, r1
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	4403      	add	r3, r0
 800875c:	331c      	adds	r3, #28
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	fbb2 f1f3 	udiv	r1, r2, r3
 8008764:	fb01 f303 	mul.w	r3, r1, r3
 8008768:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800876a:	2b00      	cmp	r3, #0
 800876c:	d112      	bne.n	8008794 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800876e:	78fb      	ldrb	r3, [r7, #3]
 8008770:	f003 020f 	and.w	r2, r3, #15
 8008774:	6879      	ldr	r1, [r7, #4]
 8008776:	4613      	mov	r3, r2
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	4413      	add	r3, r2
 800877c:	009b      	lsls	r3, r3, #2
 800877e:	440b      	add	r3, r1
 8008780:	3318      	adds	r3, #24
 8008782:	2200      	movs	r2, #0
 8008784:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008786:	78f9      	ldrb	r1, [r7, #3]
 8008788:	2300      	movs	r3, #0
 800878a:	2200      	movs	r2, #0
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f002 f9a0 	bl	800aad2 <USBD_LL_Transmit>
 8008792:	e01f      	b.n	80087d4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	2200      	movs	r2, #0
 8008798:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	33b0      	adds	r3, #176	@ 0xb0
 80087a6:	009b      	lsls	r3, r3, #2
 80087a8:	4413      	add	r3, r2
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	691b      	ldr	r3, [r3, #16]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d010      	beq.n	80087d4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	33b0      	adds	r3, #176	@ 0xb0
 80087bc:	009b      	lsls	r3, r3, #2
 80087be:	4413      	add	r3, r2
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	691b      	ldr	r3, [r3, #16]
 80087c4:	68ba      	ldr	r2, [r7, #8]
 80087c6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80087ca:	68ba      	ldr	r2, [r7, #8]
 80087cc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80087d0:	78fa      	ldrb	r2, [r7, #3]
 80087d2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80087d4:	2300      	movs	r3, #0
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3710      	adds	r7, #16
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}

080087de <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80087de:	b580      	push	{r7, lr}
 80087e0:	b084      	sub	sp, #16
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]
 80087e6:	460b      	mov	r3, r1
 80087e8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	32b0      	adds	r2, #176	@ 0xb0
 80087f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087f8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	32b0      	adds	r2, #176	@ 0xb0
 8008804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d101      	bne.n	8008810 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800880c:	2303      	movs	r3, #3
 800880e:	e01a      	b.n	8008846 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008810:	78fb      	ldrb	r3, [r7, #3]
 8008812:	4619      	mov	r1, r3
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f002 f99e 	bl	800ab56 <USBD_LL_GetRxDataSize>
 800881a:	4602      	mov	r2, r0
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008828:	687a      	ldr	r2, [r7, #4]
 800882a:	33b0      	adds	r3, #176	@ 0xb0
 800882c:	009b      	lsls	r3, r3, #2
 800882e:	4413      	add	r3, r2
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	68db      	ldr	r3, [r3, #12]
 8008834:	68fa      	ldr	r2, [r7, #12]
 8008836:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800883a:	68fa      	ldr	r2, [r7, #12]
 800883c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008840:	4611      	mov	r1, r2
 8008842:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008844:	2300      	movs	r3, #0
}
 8008846:	4618      	mov	r0, r3
 8008848:	3710      	adds	r7, #16
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}

0800884e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800884e:	b580      	push	{r7, lr}
 8008850:	b084      	sub	sp, #16
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	32b0      	adds	r2, #176	@ 0xb0
 8008860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008864:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d101      	bne.n	8008870 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800886c:	2303      	movs	r3, #3
 800886e:	e024      	b.n	80088ba <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008876:	687a      	ldr	r2, [r7, #4]
 8008878:	33b0      	adds	r3, #176	@ 0xb0
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	4413      	add	r3, r2
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d019      	beq.n	80088b8 <USBD_CDC_EP0_RxReady+0x6a>
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800888a:	2bff      	cmp	r3, #255	@ 0xff
 800888c:	d014      	beq.n	80088b8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008894:	687a      	ldr	r2, [r7, #4]
 8008896:	33b0      	adds	r3, #176	@ 0xb0
 8008898:	009b      	lsls	r3, r3, #2
 800889a:	4413      	add	r3, r2
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	689b      	ldr	r3, [r3, #8]
 80088a0:	68fa      	ldr	r2, [r7, #12]
 80088a2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80088a6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80088a8:	68fa      	ldr	r2, [r7, #12]
 80088aa:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80088ae:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	22ff      	movs	r2, #255	@ 0xff
 80088b4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80088b8:	2300      	movs	r3, #0
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3710      	adds	r7, #16
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
	...

080088c4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b086      	sub	sp, #24
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80088cc:	2182      	movs	r1, #130	@ 0x82
 80088ce:	4818      	ldr	r0, [pc, #96]	@ (8008930 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80088d0:	f000 fd4f 	bl	8009372 <USBD_GetEpDesc>
 80088d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80088d6:	2101      	movs	r1, #1
 80088d8:	4815      	ldr	r0, [pc, #84]	@ (8008930 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80088da:	f000 fd4a 	bl	8009372 <USBD_GetEpDesc>
 80088de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80088e0:	2181      	movs	r1, #129	@ 0x81
 80088e2:	4813      	ldr	r0, [pc, #76]	@ (8008930 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80088e4:	f000 fd45 	bl	8009372 <USBD_GetEpDesc>
 80088e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d002      	beq.n	80088f6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	2210      	movs	r2, #16
 80088f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d006      	beq.n	800890a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	2200      	movs	r2, #0
 8008900:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008904:	711a      	strb	r2, [r3, #4]
 8008906:	2200      	movs	r2, #0
 8008908:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d006      	beq.n	800891e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2200      	movs	r2, #0
 8008914:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008918:	711a      	strb	r2, [r3, #4]
 800891a:	2200      	movs	r2, #0
 800891c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2243      	movs	r2, #67	@ 0x43
 8008922:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008924:	4b02      	ldr	r3, [pc, #8]	@ (8008930 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008926:	4618      	mov	r0, r3
 8008928:	3718      	adds	r7, #24
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
 800892e:	bf00      	nop
 8008930:	20000050 	.word	0x20000050

08008934 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b086      	sub	sp, #24
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800893c:	2182      	movs	r1, #130	@ 0x82
 800893e:	4818      	ldr	r0, [pc, #96]	@ (80089a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008940:	f000 fd17 	bl	8009372 <USBD_GetEpDesc>
 8008944:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008946:	2101      	movs	r1, #1
 8008948:	4815      	ldr	r0, [pc, #84]	@ (80089a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800894a:	f000 fd12 	bl	8009372 <USBD_GetEpDesc>
 800894e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008950:	2181      	movs	r1, #129	@ 0x81
 8008952:	4813      	ldr	r0, [pc, #76]	@ (80089a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008954:	f000 fd0d 	bl	8009372 <USBD_GetEpDesc>
 8008958:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d002      	beq.n	8008966 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	2210      	movs	r2, #16
 8008964:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d006      	beq.n	800897a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	2200      	movs	r2, #0
 8008970:	711a      	strb	r2, [r3, #4]
 8008972:	2200      	movs	r2, #0
 8008974:	f042 0202 	orr.w	r2, r2, #2
 8008978:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d006      	beq.n	800898e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2200      	movs	r2, #0
 8008984:	711a      	strb	r2, [r3, #4]
 8008986:	2200      	movs	r2, #0
 8008988:	f042 0202 	orr.w	r2, r2, #2
 800898c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2243      	movs	r2, #67	@ 0x43
 8008992:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008994:	4b02      	ldr	r3, [pc, #8]	@ (80089a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008996:	4618      	mov	r0, r3
 8008998:	3718      	adds	r7, #24
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
 800899e:	bf00      	nop
 80089a0:	20000050 	.word	0x20000050

080089a4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b086      	sub	sp, #24
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80089ac:	2182      	movs	r1, #130	@ 0x82
 80089ae:	4818      	ldr	r0, [pc, #96]	@ (8008a10 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80089b0:	f000 fcdf 	bl	8009372 <USBD_GetEpDesc>
 80089b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80089b6:	2101      	movs	r1, #1
 80089b8:	4815      	ldr	r0, [pc, #84]	@ (8008a10 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80089ba:	f000 fcda 	bl	8009372 <USBD_GetEpDesc>
 80089be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80089c0:	2181      	movs	r1, #129	@ 0x81
 80089c2:	4813      	ldr	r0, [pc, #76]	@ (8008a10 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80089c4:	f000 fcd5 	bl	8009372 <USBD_GetEpDesc>
 80089c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d002      	beq.n	80089d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	2210      	movs	r2, #16
 80089d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d006      	beq.n	80089ea <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	2200      	movs	r2, #0
 80089e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80089e4:	711a      	strb	r2, [r3, #4]
 80089e6:	2200      	movs	r2, #0
 80089e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d006      	beq.n	80089fe <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2200      	movs	r2, #0
 80089f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80089f8:	711a      	strb	r2, [r3, #4]
 80089fa:	2200      	movs	r2, #0
 80089fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2243      	movs	r2, #67	@ 0x43
 8008a02:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008a04:	4b02      	ldr	r3, [pc, #8]	@ (8008a10 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3718      	adds	r7, #24
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}
 8008a0e:	bf00      	nop
 8008a10:	20000050 	.word	0x20000050

08008a14 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b083      	sub	sp, #12
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	220a      	movs	r2, #10
 8008a20:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008a22:	4b03      	ldr	r3, [pc, #12]	@ (8008a30 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	370c      	adds	r7, #12
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr
 8008a30:	2000000c 	.word	0x2000000c

08008a34 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b083      	sub	sp, #12
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d101      	bne.n	8008a48 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008a44:	2303      	movs	r3, #3
 8008a46:	e009      	b.n	8008a5c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008a4e:	687a      	ldr	r2, [r7, #4]
 8008a50:	33b0      	adds	r3, #176	@ 0xb0
 8008a52:	009b      	lsls	r3, r3, #2
 8008a54:	4413      	add	r3, r2
 8008a56:	683a      	ldr	r2, [r7, #0]
 8008a58:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008a5a:	2300      	movs	r3, #0
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	370c      	adds	r7, #12
 8008a60:	46bd      	mov	sp, r7
 8008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a66:	4770      	bx	lr

08008a68 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b087      	sub	sp, #28
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	60b9      	str	r1, [r7, #8]
 8008a72:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	32b0      	adds	r2, #176	@ 0xb0
 8008a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a82:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d101      	bne.n	8008a8e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008a8a:	2303      	movs	r3, #3
 8008a8c:	e008      	b.n	8008aa0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	68ba      	ldr	r2, [r7, #8]
 8008a92:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	687a      	ldr	r2, [r7, #4]
 8008a9a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008a9e:	2300      	movs	r3, #0
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	371c      	adds	r7, #28
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr

08008aac <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b085      	sub	sp, #20
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	32b0      	adds	r2, #176	@ 0xb0
 8008ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ac4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d101      	bne.n	8008ad0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008acc:	2303      	movs	r3, #3
 8008ace:	e004      	b.n	8008ada <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	683a      	ldr	r2, [r7, #0]
 8008ad4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008ad8:	2300      	movs	r3, #0
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3714      	adds	r7, #20
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae4:	4770      	bx	lr
	...

08008ae8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b084      	sub	sp, #16
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	32b0      	adds	r2, #176	@ 0xb0
 8008afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008afe:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008b00:	2301      	movs	r3, #1
 8008b02:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d101      	bne.n	8008b0e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008b0a:	2303      	movs	r3, #3
 8008b0c:	e025      	b.n	8008b5a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d11f      	bne.n	8008b58 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008b20:	4b10      	ldr	r3, [pc, #64]	@ (8008b64 <USBD_CDC_TransmitPacket+0x7c>)
 8008b22:	781b      	ldrb	r3, [r3, #0]
 8008b24:	f003 020f 	and.w	r2, r3, #15
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	4613      	mov	r3, r2
 8008b32:	009b      	lsls	r3, r3, #2
 8008b34:	4413      	add	r3, r2
 8008b36:	009b      	lsls	r3, r3, #2
 8008b38:	4403      	add	r3, r0
 8008b3a:	3318      	adds	r3, #24
 8008b3c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008b3e:	4b09      	ldr	r3, [pc, #36]	@ (8008b64 <USBD_CDC_TransmitPacket+0x7c>)
 8008b40:	7819      	ldrb	r1, [r3, #0]
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f001 ffbf 	bl	800aad2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008b54:	2300      	movs	r3, #0
 8008b56:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3710      	adds	r7, #16
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop
 8008b64:	20000093 	.word	0x20000093

08008b68 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b084      	sub	sp, #16
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	32b0      	adds	r2, #176	@ 0xb0
 8008b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b7e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	32b0      	adds	r2, #176	@ 0xb0
 8008b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d101      	bne.n	8008b96 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008b92:	2303      	movs	r3, #3
 8008b94:	e018      	b.n	8008bc8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	7c1b      	ldrb	r3, [r3, #16]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d10a      	bne.n	8008bb4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008b9e:	4b0c      	ldr	r3, [pc, #48]	@ (8008bd0 <USBD_CDC_ReceivePacket+0x68>)
 8008ba0:	7819      	ldrb	r1, [r3, #0]
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008ba8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f001 ffb1 	bl	800ab14 <USBD_LL_PrepareReceive>
 8008bb2:	e008      	b.n	8008bc6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008bb4:	4b06      	ldr	r3, [pc, #24]	@ (8008bd0 <USBD_CDC_ReceivePacket+0x68>)
 8008bb6:	7819      	ldrb	r1, [r3, #0]
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008bbe:	2340      	movs	r3, #64	@ 0x40
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f001 ffa7 	bl	800ab14 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008bc6:	2300      	movs	r3, #0
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3710      	adds	r7, #16
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}
 8008bd0:	20000094 	.word	0x20000094

08008bd4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b086      	sub	sp, #24
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	60f8      	str	r0, [r7, #12]
 8008bdc:	60b9      	str	r1, [r7, #8]
 8008bde:	4613      	mov	r3, r2
 8008be0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d101      	bne.n	8008bec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008be8:	2303      	movs	r3, #3
 8008bea:	e01f      	b.n	8008c2c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d003      	beq.n	8008c12 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	68ba      	ldr	r2, [r7, #8]
 8008c0e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2201      	movs	r2, #1
 8008c16:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	79fa      	ldrb	r2, [r7, #7]
 8008c1e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008c20:	68f8      	ldr	r0, [r7, #12]
 8008c22:	f001 fe21 	bl	800a868 <USBD_LL_Init>
 8008c26:	4603      	mov	r3, r0
 8008c28:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3718      	adds	r7, #24
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b084      	sub	sp, #16
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d101      	bne.n	8008c4c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008c48:	2303      	movs	r3, #3
 8008c4a:	e025      	b.n	8008c98 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	683a      	ldr	r2, [r7, #0]
 8008c50:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	32ae      	adds	r2, #174	@ 0xae
 8008c5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d00f      	beq.n	8008c88 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	32ae      	adds	r2, #174	@ 0xae
 8008c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c78:	f107 020e 	add.w	r2, r7, #14
 8008c7c:	4610      	mov	r0, r2
 8008c7e:	4798      	blx	r3
 8008c80:	4602      	mov	r2, r0
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008c8e:	1c5a      	adds	r2, r3, #1
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008c96:	2300      	movs	r3, #0
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3710      	adds	r7, #16
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}

08008ca0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b082      	sub	sp, #8
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f001 fe29 	bl	800a900 <USBD_LL_Start>
 8008cae:	4603      	mov	r3, r0
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3708      	adds	r7, #8
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}

08008cb8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b083      	sub	sp, #12
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008cc0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	370c      	adds	r7, #12
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr

08008cce <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008cce:	b580      	push	{r7, lr}
 8008cd0:	b084      	sub	sp, #16
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
 8008cd6:	460b      	mov	r3, r1
 8008cd8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d009      	beq.n	8008cfc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	78fa      	ldrb	r2, [r7, #3]
 8008cf2:	4611      	mov	r1, r2
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	4798      	blx	r3
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3710      	adds	r7, #16
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}

08008d06 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d06:	b580      	push	{r7, lr}
 8008d08:	b084      	sub	sp, #16
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
 8008d0e:	460b      	mov	r3, r1
 8008d10:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d12:	2300      	movs	r3, #0
 8008d14:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	78fa      	ldrb	r2, [r7, #3]
 8008d20:	4611      	mov	r1, r2
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	4798      	blx	r3
 8008d26:	4603      	mov	r3, r0
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d001      	beq.n	8008d30 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008d2c:	2303      	movs	r3, #3
 8008d2e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3710      	adds	r7, #16
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}

08008d3a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008d3a:	b580      	push	{r7, lr}
 8008d3c:	b084      	sub	sp, #16
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	6078      	str	r0, [r7, #4]
 8008d42:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008d4a:	6839      	ldr	r1, [r7, #0]
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f001 f90c 	bl	8009f6a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2201      	movs	r2, #1
 8008d56:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008d60:	461a      	mov	r2, r3
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008d6e:	f003 031f 	and.w	r3, r3, #31
 8008d72:	2b02      	cmp	r3, #2
 8008d74:	d01a      	beq.n	8008dac <USBD_LL_SetupStage+0x72>
 8008d76:	2b02      	cmp	r3, #2
 8008d78:	d822      	bhi.n	8008dc0 <USBD_LL_SetupStage+0x86>
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d002      	beq.n	8008d84 <USBD_LL_SetupStage+0x4a>
 8008d7e:	2b01      	cmp	r3, #1
 8008d80:	d00a      	beq.n	8008d98 <USBD_LL_SetupStage+0x5e>
 8008d82:	e01d      	b.n	8008dc0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008d8a:	4619      	mov	r1, r3
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f000 fb63 	bl	8009458 <USBD_StdDevReq>
 8008d92:	4603      	mov	r3, r0
 8008d94:	73fb      	strb	r3, [r7, #15]
      break;
 8008d96:	e020      	b.n	8008dda <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008d9e:	4619      	mov	r1, r3
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 fbcb 	bl	800953c <USBD_StdItfReq>
 8008da6:	4603      	mov	r3, r0
 8008da8:	73fb      	strb	r3, [r7, #15]
      break;
 8008daa:	e016      	b.n	8008dda <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008db2:	4619      	mov	r1, r3
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f000 fc2d 	bl	8009614 <USBD_StdEPReq>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	73fb      	strb	r3, [r7, #15]
      break;
 8008dbe:	e00c      	b.n	8008dda <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008dc6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008dca:	b2db      	uxtb	r3, r3
 8008dcc:	4619      	mov	r1, r3
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f001 fdf6 	bl	800a9c0 <USBD_LL_StallEP>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	73fb      	strb	r3, [r7, #15]
      break;
 8008dd8:	bf00      	nop
  }

  return ret;
 8008dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3710      	adds	r7, #16
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b086      	sub	sp, #24
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	60f8      	str	r0, [r7, #12]
 8008dec:	460b      	mov	r3, r1
 8008dee:	607a      	str	r2, [r7, #4]
 8008df0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008df2:	2300      	movs	r3, #0
 8008df4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008df6:	7afb      	ldrb	r3, [r7, #11]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d16e      	bne.n	8008eda <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008e02:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008e0a:	2b03      	cmp	r3, #3
 8008e0c:	f040 8098 	bne.w	8008f40 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	689a      	ldr	r2, [r3, #8]
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	68db      	ldr	r3, [r3, #12]
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d913      	bls.n	8008e44 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	689a      	ldr	r2, [r3, #8]
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	68db      	ldr	r3, [r3, #12]
 8008e24:	1ad2      	subs	r2, r2, r3
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	68da      	ldr	r2, [r3, #12]
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	689b      	ldr	r3, [r3, #8]
 8008e32:	4293      	cmp	r3, r2
 8008e34:	bf28      	it	cs
 8008e36:	4613      	movcs	r3, r2
 8008e38:	461a      	mov	r2, r3
 8008e3a:	6879      	ldr	r1, [r7, #4]
 8008e3c:	68f8      	ldr	r0, [r7, #12]
 8008e3e:	f001 f994 	bl	800a16a <USBD_CtlContinueRx>
 8008e42:	e07d      	b.n	8008f40 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008e4a:	f003 031f 	and.w	r3, r3, #31
 8008e4e:	2b02      	cmp	r3, #2
 8008e50:	d014      	beq.n	8008e7c <USBD_LL_DataOutStage+0x98>
 8008e52:	2b02      	cmp	r3, #2
 8008e54:	d81d      	bhi.n	8008e92 <USBD_LL_DataOutStage+0xae>
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d002      	beq.n	8008e60 <USBD_LL_DataOutStage+0x7c>
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	d003      	beq.n	8008e66 <USBD_LL_DataOutStage+0x82>
 8008e5e:	e018      	b.n	8008e92 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008e60:	2300      	movs	r3, #0
 8008e62:	75bb      	strb	r3, [r7, #22]
            break;
 8008e64:	e018      	b.n	8008e98 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008e6c:	b2db      	uxtb	r3, r3
 8008e6e:	4619      	mov	r1, r3
 8008e70:	68f8      	ldr	r0, [r7, #12]
 8008e72:	f000 fa64 	bl	800933e <USBD_CoreFindIF>
 8008e76:	4603      	mov	r3, r0
 8008e78:	75bb      	strb	r3, [r7, #22]
            break;
 8008e7a:	e00d      	b.n	8008e98 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008e82:	b2db      	uxtb	r3, r3
 8008e84:	4619      	mov	r1, r3
 8008e86:	68f8      	ldr	r0, [r7, #12]
 8008e88:	f000 fa66 	bl	8009358 <USBD_CoreFindEP>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	75bb      	strb	r3, [r7, #22]
            break;
 8008e90:	e002      	b.n	8008e98 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008e92:	2300      	movs	r3, #0
 8008e94:	75bb      	strb	r3, [r7, #22]
            break;
 8008e96:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008e98:	7dbb      	ldrb	r3, [r7, #22]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d119      	bne.n	8008ed2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ea4:	b2db      	uxtb	r3, r3
 8008ea6:	2b03      	cmp	r3, #3
 8008ea8:	d113      	bne.n	8008ed2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008eaa:	7dba      	ldrb	r2, [r7, #22]
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	32ae      	adds	r2, #174	@ 0xae
 8008eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eb4:	691b      	ldr	r3, [r3, #16]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d00b      	beq.n	8008ed2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008eba:	7dba      	ldrb	r2, [r7, #22]
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008ec2:	7dba      	ldrb	r2, [r7, #22]
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	32ae      	adds	r2, #174	@ 0xae
 8008ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ecc:	691b      	ldr	r3, [r3, #16]
 8008ece:	68f8      	ldr	r0, [r7, #12]
 8008ed0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008ed2:	68f8      	ldr	r0, [r7, #12]
 8008ed4:	f001 f95a 	bl	800a18c <USBD_CtlSendStatus>
 8008ed8:	e032      	b.n	8008f40 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008eda:	7afb      	ldrb	r3, [r7, #11]
 8008edc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ee0:	b2db      	uxtb	r3, r3
 8008ee2:	4619      	mov	r1, r3
 8008ee4:	68f8      	ldr	r0, [r7, #12]
 8008ee6:	f000 fa37 	bl	8009358 <USBD_CoreFindEP>
 8008eea:	4603      	mov	r3, r0
 8008eec:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008eee:	7dbb      	ldrb	r3, [r7, #22]
 8008ef0:	2bff      	cmp	r3, #255	@ 0xff
 8008ef2:	d025      	beq.n	8008f40 <USBD_LL_DataOutStage+0x15c>
 8008ef4:	7dbb      	ldrb	r3, [r7, #22]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d122      	bne.n	8008f40 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	2b03      	cmp	r3, #3
 8008f04:	d117      	bne.n	8008f36 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008f06:	7dba      	ldrb	r2, [r7, #22]
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	32ae      	adds	r2, #174	@ 0xae
 8008f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f10:	699b      	ldr	r3, [r3, #24]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d00f      	beq.n	8008f36 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008f16:	7dba      	ldrb	r2, [r7, #22]
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008f1e:	7dba      	ldrb	r2, [r7, #22]
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	32ae      	adds	r2, #174	@ 0xae
 8008f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f28:	699b      	ldr	r3, [r3, #24]
 8008f2a:	7afa      	ldrb	r2, [r7, #11]
 8008f2c:	4611      	mov	r1, r2
 8008f2e:	68f8      	ldr	r0, [r7, #12]
 8008f30:	4798      	blx	r3
 8008f32:	4603      	mov	r3, r0
 8008f34:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008f36:	7dfb      	ldrb	r3, [r7, #23]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d001      	beq.n	8008f40 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008f3c:	7dfb      	ldrb	r3, [r7, #23]
 8008f3e:	e000      	b.n	8008f42 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008f40:	2300      	movs	r3, #0
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3718      	adds	r7, #24
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}

08008f4a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008f4a:	b580      	push	{r7, lr}
 8008f4c:	b086      	sub	sp, #24
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	60f8      	str	r0, [r7, #12]
 8008f52:	460b      	mov	r3, r1
 8008f54:	607a      	str	r2, [r7, #4]
 8008f56:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008f58:	7afb      	ldrb	r3, [r7, #11]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d16f      	bne.n	800903e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	3314      	adds	r3, #20
 8008f62:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008f6a:	2b02      	cmp	r3, #2
 8008f6c:	d15a      	bne.n	8009024 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	689a      	ldr	r2, [r3, #8]
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	68db      	ldr	r3, [r3, #12]
 8008f76:	429a      	cmp	r2, r3
 8008f78:	d914      	bls.n	8008fa4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	689a      	ldr	r2, [r3, #8]
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	68db      	ldr	r3, [r3, #12]
 8008f82:	1ad2      	subs	r2, r2, r3
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	689b      	ldr	r3, [r3, #8]
 8008f8c:	461a      	mov	r2, r3
 8008f8e:	6879      	ldr	r1, [r7, #4]
 8008f90:	68f8      	ldr	r0, [r7, #12]
 8008f92:	f001 f8bc 	bl	800a10e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f96:	2300      	movs	r3, #0
 8008f98:	2200      	movs	r2, #0
 8008f9a:	2100      	movs	r1, #0
 8008f9c:	68f8      	ldr	r0, [r7, #12]
 8008f9e:	f001 fdb9 	bl	800ab14 <USBD_LL_PrepareReceive>
 8008fa2:	e03f      	b.n	8009024 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	68da      	ldr	r2, [r3, #12]
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	689b      	ldr	r3, [r3, #8]
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d11c      	bne.n	8008fea <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	685a      	ldr	r2, [r3, #4]
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	d316      	bcc.n	8008fea <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	685a      	ldr	r2, [r3, #4]
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d20f      	bcs.n	8008fea <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008fca:	2200      	movs	r2, #0
 8008fcc:	2100      	movs	r1, #0
 8008fce:	68f8      	ldr	r0, [r7, #12]
 8008fd0:	f001 f89d 	bl	800a10e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008fdc:	2300      	movs	r3, #0
 8008fde:	2200      	movs	r2, #0
 8008fe0:	2100      	movs	r1, #0
 8008fe2:	68f8      	ldr	r0, [r7, #12]
 8008fe4:	f001 fd96 	bl	800ab14 <USBD_LL_PrepareReceive>
 8008fe8:	e01c      	b.n	8009024 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ff0:	b2db      	uxtb	r3, r3
 8008ff2:	2b03      	cmp	r3, #3
 8008ff4:	d10f      	bne.n	8009016 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ffc:	68db      	ldr	r3, [r3, #12]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d009      	beq.n	8009016 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2200      	movs	r2, #0
 8009006:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009010:	68db      	ldr	r3, [r3, #12]
 8009012:	68f8      	ldr	r0, [r7, #12]
 8009014:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009016:	2180      	movs	r1, #128	@ 0x80
 8009018:	68f8      	ldr	r0, [r7, #12]
 800901a:	f001 fcd1 	bl	800a9c0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800901e:	68f8      	ldr	r0, [r7, #12]
 8009020:	f001 f8c7 	bl	800a1b2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800902a:	2b00      	cmp	r3, #0
 800902c:	d03a      	beq.n	80090a4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800902e:	68f8      	ldr	r0, [r7, #12]
 8009030:	f7ff fe42 	bl	8008cb8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2200      	movs	r2, #0
 8009038:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800903c:	e032      	b.n	80090a4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800903e:	7afb      	ldrb	r3, [r7, #11]
 8009040:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009044:	b2db      	uxtb	r3, r3
 8009046:	4619      	mov	r1, r3
 8009048:	68f8      	ldr	r0, [r7, #12]
 800904a:	f000 f985 	bl	8009358 <USBD_CoreFindEP>
 800904e:	4603      	mov	r3, r0
 8009050:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009052:	7dfb      	ldrb	r3, [r7, #23]
 8009054:	2bff      	cmp	r3, #255	@ 0xff
 8009056:	d025      	beq.n	80090a4 <USBD_LL_DataInStage+0x15a>
 8009058:	7dfb      	ldrb	r3, [r7, #23]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d122      	bne.n	80090a4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009064:	b2db      	uxtb	r3, r3
 8009066:	2b03      	cmp	r3, #3
 8009068:	d11c      	bne.n	80090a4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800906a:	7dfa      	ldrb	r2, [r7, #23]
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	32ae      	adds	r2, #174	@ 0xae
 8009070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009074:	695b      	ldr	r3, [r3, #20]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d014      	beq.n	80090a4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800907a:	7dfa      	ldrb	r2, [r7, #23]
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009082:	7dfa      	ldrb	r2, [r7, #23]
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	32ae      	adds	r2, #174	@ 0xae
 8009088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800908c:	695b      	ldr	r3, [r3, #20]
 800908e:	7afa      	ldrb	r2, [r7, #11]
 8009090:	4611      	mov	r1, r2
 8009092:	68f8      	ldr	r0, [r7, #12]
 8009094:	4798      	blx	r3
 8009096:	4603      	mov	r3, r0
 8009098:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800909a:	7dbb      	ldrb	r3, [r7, #22]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d001      	beq.n	80090a4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80090a0:	7dbb      	ldrb	r3, [r7, #22]
 80090a2:	e000      	b.n	80090a6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80090a4:	2300      	movs	r3, #0
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3718      	adds	r7, #24
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}

080090ae <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80090ae:	b580      	push	{r7, lr}
 80090b0:	b084      	sub	sp, #16
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80090b6:	2300      	movs	r3, #0
 80090b8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2201      	movs	r2, #1
 80090be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2200      	movs	r2, #0
 80090c6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2200      	movs	r2, #0
 80090ce:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2200      	movs	r2, #0
 80090d4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2200      	movs	r2, #0
 80090dc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d014      	beq.n	8009114 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090f0:	685b      	ldr	r3, [r3, #4]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d00e      	beq.n	8009114 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	687a      	ldr	r2, [r7, #4]
 8009100:	6852      	ldr	r2, [r2, #4]
 8009102:	b2d2      	uxtb	r2, r2
 8009104:	4611      	mov	r1, r2
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	4798      	blx	r3
 800910a:	4603      	mov	r3, r0
 800910c:	2b00      	cmp	r3, #0
 800910e:	d001      	beq.n	8009114 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009110:	2303      	movs	r3, #3
 8009112:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009114:	2340      	movs	r3, #64	@ 0x40
 8009116:	2200      	movs	r2, #0
 8009118:	2100      	movs	r1, #0
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f001 fc0b 	bl	800a936 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2201      	movs	r2, #1
 8009124:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2240      	movs	r2, #64	@ 0x40
 800912c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009130:	2340      	movs	r3, #64	@ 0x40
 8009132:	2200      	movs	r2, #0
 8009134:	2180      	movs	r1, #128	@ 0x80
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f001 fbfd 	bl	800a936 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2201      	movs	r2, #1
 8009140:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2240      	movs	r2, #64	@ 0x40
 8009146:	621a      	str	r2, [r3, #32]

  return ret;
 8009148:	7bfb      	ldrb	r3, [r7, #15]
}
 800914a:	4618      	mov	r0, r3
 800914c:	3710      	adds	r7, #16
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}

08009152 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009152:	b480      	push	{r7}
 8009154:	b083      	sub	sp, #12
 8009156:	af00      	add	r7, sp, #0
 8009158:	6078      	str	r0, [r7, #4]
 800915a:	460b      	mov	r3, r1
 800915c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	78fa      	ldrb	r2, [r7, #3]
 8009162:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009164:	2300      	movs	r3, #0
}
 8009166:	4618      	mov	r0, r3
 8009168:	370c      	adds	r7, #12
 800916a:	46bd      	mov	sp, r7
 800916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009170:	4770      	bx	lr

08009172 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009172:	b480      	push	{r7}
 8009174:	b083      	sub	sp, #12
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009180:	b2db      	uxtb	r3, r3
 8009182:	2b04      	cmp	r3, #4
 8009184:	d006      	beq.n	8009194 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800918c:	b2da      	uxtb	r2, r3
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2204      	movs	r2, #4
 8009198:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800919c:	2300      	movs	r3, #0
}
 800919e:	4618      	mov	r0, r3
 80091a0:	370c      	adds	r7, #12
 80091a2:	46bd      	mov	sp, r7
 80091a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a8:	4770      	bx	lr

080091aa <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80091aa:	b480      	push	{r7}
 80091ac:	b083      	sub	sp, #12
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091b8:	b2db      	uxtb	r3, r3
 80091ba:	2b04      	cmp	r3, #4
 80091bc:	d106      	bne.n	80091cc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80091c4:	b2da      	uxtb	r2, r3
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80091cc:	2300      	movs	r3, #0
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	370c      	adds	r7, #12
 80091d2:	46bd      	mov	sp, r7
 80091d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d8:	4770      	bx	lr

080091da <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80091da:	b580      	push	{r7, lr}
 80091dc:	b082      	sub	sp, #8
 80091de:	af00      	add	r7, sp, #0
 80091e0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091e8:	b2db      	uxtb	r3, r3
 80091ea:	2b03      	cmp	r3, #3
 80091ec:	d110      	bne.n	8009210 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d00b      	beq.n	8009210 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091fe:	69db      	ldr	r3, [r3, #28]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d005      	beq.n	8009210 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800920a:	69db      	ldr	r3, [r3, #28]
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009210:	2300      	movs	r3, #0
}
 8009212:	4618      	mov	r0, r3
 8009214:	3708      	adds	r7, #8
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}

0800921a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800921a:	b580      	push	{r7, lr}
 800921c:	b082      	sub	sp, #8
 800921e:	af00      	add	r7, sp, #0
 8009220:	6078      	str	r0, [r7, #4]
 8009222:	460b      	mov	r3, r1
 8009224:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	32ae      	adds	r2, #174	@ 0xae
 8009230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d101      	bne.n	800923c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009238:	2303      	movs	r3, #3
 800923a:	e01c      	b.n	8009276 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009242:	b2db      	uxtb	r3, r3
 8009244:	2b03      	cmp	r3, #3
 8009246:	d115      	bne.n	8009274 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	32ae      	adds	r2, #174	@ 0xae
 8009252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009256:	6a1b      	ldr	r3, [r3, #32]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d00b      	beq.n	8009274 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	32ae      	adds	r2, #174	@ 0xae
 8009266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800926a:	6a1b      	ldr	r3, [r3, #32]
 800926c:	78fa      	ldrb	r2, [r7, #3]
 800926e:	4611      	mov	r1, r2
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009274:	2300      	movs	r3, #0
}
 8009276:	4618      	mov	r0, r3
 8009278:	3708      	adds	r7, #8
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}

0800927e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800927e:	b580      	push	{r7, lr}
 8009280:	b082      	sub	sp, #8
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
 8009286:	460b      	mov	r3, r1
 8009288:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	32ae      	adds	r2, #174	@ 0xae
 8009294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d101      	bne.n	80092a0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800929c:	2303      	movs	r3, #3
 800929e:	e01c      	b.n	80092da <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092a6:	b2db      	uxtb	r3, r3
 80092a8:	2b03      	cmp	r3, #3
 80092aa:	d115      	bne.n	80092d8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	32ae      	adds	r2, #174	@ 0xae
 80092b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d00b      	beq.n	80092d8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	32ae      	adds	r2, #174	@ 0xae
 80092ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092d0:	78fa      	ldrb	r2, [r7, #3]
 80092d2:	4611      	mov	r1, r2
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80092d8:	2300      	movs	r3, #0
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3708      	adds	r7, #8
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}

080092e2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80092e2:	b480      	push	{r7}
 80092e4:	b083      	sub	sp, #12
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80092ea:	2300      	movs	r3, #0
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	370c      	adds	r7, #12
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr

080092f8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009300:	2300      	movs	r3, #0
 8009302:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2201      	movs	r2, #1
 8009308:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009312:	2b00      	cmp	r3, #0
 8009314:	d00e      	beq.n	8009334 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800931c:	685b      	ldr	r3, [r3, #4]
 800931e:	687a      	ldr	r2, [r7, #4]
 8009320:	6852      	ldr	r2, [r2, #4]
 8009322:	b2d2      	uxtb	r2, r2
 8009324:	4611      	mov	r1, r2
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	4798      	blx	r3
 800932a:	4603      	mov	r3, r0
 800932c:	2b00      	cmp	r3, #0
 800932e:	d001      	beq.n	8009334 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009330:	2303      	movs	r3, #3
 8009332:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009334:	7bfb      	ldrb	r3, [r7, #15]
}
 8009336:	4618      	mov	r0, r3
 8009338:	3710      	adds	r7, #16
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}

0800933e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800933e:	b480      	push	{r7}
 8009340:	b083      	sub	sp, #12
 8009342:	af00      	add	r7, sp, #0
 8009344:	6078      	str	r0, [r7, #4]
 8009346:	460b      	mov	r3, r1
 8009348:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800934a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800934c:	4618      	mov	r0, r3
 800934e:	370c      	adds	r7, #12
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr

08009358 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	460b      	mov	r3, r1
 8009362:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009364:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009366:	4618      	mov	r0, r3
 8009368:	370c      	adds	r7, #12
 800936a:	46bd      	mov	sp, r7
 800936c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009370:	4770      	bx	lr

08009372 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009372:	b580      	push	{r7, lr}
 8009374:	b086      	sub	sp, #24
 8009376:	af00      	add	r7, sp, #0
 8009378:	6078      	str	r0, [r7, #4]
 800937a:	460b      	mov	r3, r1
 800937c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009386:	2300      	movs	r3, #0
 8009388:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	885b      	ldrh	r3, [r3, #2]
 800938e:	b29b      	uxth	r3, r3
 8009390:	68fa      	ldr	r2, [r7, #12]
 8009392:	7812      	ldrb	r2, [r2, #0]
 8009394:	4293      	cmp	r3, r2
 8009396:	d91f      	bls.n	80093d8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	781b      	ldrb	r3, [r3, #0]
 800939c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800939e:	e013      	b.n	80093c8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80093a0:	f107 030a 	add.w	r3, r7, #10
 80093a4:	4619      	mov	r1, r3
 80093a6:	6978      	ldr	r0, [r7, #20]
 80093a8:	f000 f81b 	bl	80093e2 <USBD_GetNextDesc>
 80093ac:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	785b      	ldrb	r3, [r3, #1]
 80093b2:	2b05      	cmp	r3, #5
 80093b4:	d108      	bne.n	80093c8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	789b      	ldrb	r3, [r3, #2]
 80093be:	78fa      	ldrb	r2, [r7, #3]
 80093c0:	429a      	cmp	r2, r3
 80093c2:	d008      	beq.n	80093d6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80093c4:	2300      	movs	r3, #0
 80093c6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	885b      	ldrh	r3, [r3, #2]
 80093cc:	b29a      	uxth	r2, r3
 80093ce:	897b      	ldrh	r3, [r7, #10]
 80093d0:	429a      	cmp	r2, r3
 80093d2:	d8e5      	bhi.n	80093a0 <USBD_GetEpDesc+0x2e>
 80093d4:	e000      	b.n	80093d8 <USBD_GetEpDesc+0x66>
          break;
 80093d6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80093d8:	693b      	ldr	r3, [r7, #16]
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3718      	adds	r7, #24
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}

080093e2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80093e2:	b480      	push	{r7}
 80093e4:	b085      	sub	sp, #20
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	6078      	str	r0, [r7, #4]
 80093ea:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	881b      	ldrh	r3, [r3, #0]
 80093f4:	68fa      	ldr	r2, [r7, #12]
 80093f6:	7812      	ldrb	r2, [r2, #0]
 80093f8:	4413      	add	r3, r2
 80093fa:	b29a      	uxth	r2, r3
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	781b      	ldrb	r3, [r3, #0]
 8009404:	461a      	mov	r2, r3
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	4413      	add	r3, r2
 800940a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800940c:	68fb      	ldr	r3, [r7, #12]
}
 800940e:	4618      	mov	r0, r3
 8009410:	3714      	adds	r7, #20
 8009412:	46bd      	mov	sp, r7
 8009414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009418:	4770      	bx	lr

0800941a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800941a:	b480      	push	{r7}
 800941c:	b087      	sub	sp, #28
 800941e:	af00      	add	r7, sp, #0
 8009420:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	781b      	ldrb	r3, [r3, #0]
 800942a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	3301      	adds	r3, #1
 8009430:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	781b      	ldrb	r3, [r3, #0]
 8009436:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009438:	8a3b      	ldrh	r3, [r7, #16]
 800943a:	021b      	lsls	r3, r3, #8
 800943c:	b21a      	sxth	r2, r3
 800943e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009442:	4313      	orrs	r3, r2
 8009444:	b21b      	sxth	r3, r3
 8009446:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009448:	89fb      	ldrh	r3, [r7, #14]
}
 800944a:	4618      	mov	r0, r3
 800944c:	371c      	adds	r7, #28
 800944e:	46bd      	mov	sp, r7
 8009450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009454:	4770      	bx	lr
	...

08009458 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b084      	sub	sp, #16
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009462:	2300      	movs	r3, #0
 8009464:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	781b      	ldrb	r3, [r3, #0]
 800946a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800946e:	2b40      	cmp	r3, #64	@ 0x40
 8009470:	d005      	beq.n	800947e <USBD_StdDevReq+0x26>
 8009472:	2b40      	cmp	r3, #64	@ 0x40
 8009474:	d857      	bhi.n	8009526 <USBD_StdDevReq+0xce>
 8009476:	2b00      	cmp	r3, #0
 8009478:	d00f      	beq.n	800949a <USBD_StdDevReq+0x42>
 800947a:	2b20      	cmp	r3, #32
 800947c:	d153      	bne.n	8009526 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	32ae      	adds	r2, #174	@ 0xae
 8009488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800948c:	689b      	ldr	r3, [r3, #8]
 800948e:	6839      	ldr	r1, [r7, #0]
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	4798      	blx	r3
 8009494:	4603      	mov	r3, r0
 8009496:	73fb      	strb	r3, [r7, #15]
      break;
 8009498:	e04a      	b.n	8009530 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	785b      	ldrb	r3, [r3, #1]
 800949e:	2b09      	cmp	r3, #9
 80094a0:	d83b      	bhi.n	800951a <USBD_StdDevReq+0xc2>
 80094a2:	a201      	add	r2, pc, #4	@ (adr r2, 80094a8 <USBD_StdDevReq+0x50>)
 80094a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094a8:	080094fd 	.word	0x080094fd
 80094ac:	08009511 	.word	0x08009511
 80094b0:	0800951b 	.word	0x0800951b
 80094b4:	08009507 	.word	0x08009507
 80094b8:	0800951b 	.word	0x0800951b
 80094bc:	080094db 	.word	0x080094db
 80094c0:	080094d1 	.word	0x080094d1
 80094c4:	0800951b 	.word	0x0800951b
 80094c8:	080094f3 	.word	0x080094f3
 80094cc:	080094e5 	.word	0x080094e5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80094d0:	6839      	ldr	r1, [r7, #0]
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f000 fa3c 	bl	8009950 <USBD_GetDescriptor>
          break;
 80094d8:	e024      	b.n	8009524 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80094da:	6839      	ldr	r1, [r7, #0]
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f000 fba1 	bl	8009c24 <USBD_SetAddress>
          break;
 80094e2:	e01f      	b.n	8009524 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80094e4:	6839      	ldr	r1, [r7, #0]
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 fbe0 	bl	8009cac <USBD_SetConfig>
 80094ec:	4603      	mov	r3, r0
 80094ee:	73fb      	strb	r3, [r7, #15]
          break;
 80094f0:	e018      	b.n	8009524 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80094f2:	6839      	ldr	r1, [r7, #0]
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f000 fc83 	bl	8009e00 <USBD_GetConfig>
          break;
 80094fa:	e013      	b.n	8009524 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80094fc:	6839      	ldr	r1, [r7, #0]
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f000 fcb4 	bl	8009e6c <USBD_GetStatus>
          break;
 8009504:	e00e      	b.n	8009524 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009506:	6839      	ldr	r1, [r7, #0]
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f000 fce3 	bl	8009ed4 <USBD_SetFeature>
          break;
 800950e:	e009      	b.n	8009524 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009510:	6839      	ldr	r1, [r7, #0]
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 fd07 	bl	8009f26 <USBD_ClrFeature>
          break;
 8009518:	e004      	b.n	8009524 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800951a:	6839      	ldr	r1, [r7, #0]
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f000 fd5e 	bl	8009fde <USBD_CtlError>
          break;
 8009522:	bf00      	nop
      }
      break;
 8009524:	e004      	b.n	8009530 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009526:	6839      	ldr	r1, [r7, #0]
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f000 fd58 	bl	8009fde <USBD_CtlError>
      break;
 800952e:	bf00      	nop
  }

  return ret;
 8009530:	7bfb      	ldrb	r3, [r7, #15]
}
 8009532:	4618      	mov	r0, r3
 8009534:	3710      	adds	r7, #16
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
 800953a:	bf00      	nop

0800953c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b084      	sub	sp, #16
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009546:	2300      	movs	r3, #0
 8009548:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	781b      	ldrb	r3, [r3, #0]
 800954e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009552:	2b40      	cmp	r3, #64	@ 0x40
 8009554:	d005      	beq.n	8009562 <USBD_StdItfReq+0x26>
 8009556:	2b40      	cmp	r3, #64	@ 0x40
 8009558:	d852      	bhi.n	8009600 <USBD_StdItfReq+0xc4>
 800955a:	2b00      	cmp	r3, #0
 800955c:	d001      	beq.n	8009562 <USBD_StdItfReq+0x26>
 800955e:	2b20      	cmp	r3, #32
 8009560:	d14e      	bne.n	8009600 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009568:	b2db      	uxtb	r3, r3
 800956a:	3b01      	subs	r3, #1
 800956c:	2b02      	cmp	r3, #2
 800956e:	d840      	bhi.n	80095f2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	889b      	ldrh	r3, [r3, #4]
 8009574:	b2db      	uxtb	r3, r3
 8009576:	2b01      	cmp	r3, #1
 8009578:	d836      	bhi.n	80095e8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	889b      	ldrh	r3, [r3, #4]
 800957e:	b2db      	uxtb	r3, r3
 8009580:	4619      	mov	r1, r3
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f7ff fedb 	bl	800933e <USBD_CoreFindIF>
 8009588:	4603      	mov	r3, r0
 800958a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800958c:	7bbb      	ldrb	r3, [r7, #14]
 800958e:	2bff      	cmp	r3, #255	@ 0xff
 8009590:	d01d      	beq.n	80095ce <USBD_StdItfReq+0x92>
 8009592:	7bbb      	ldrb	r3, [r7, #14]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d11a      	bne.n	80095ce <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009598:	7bba      	ldrb	r2, [r7, #14]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	32ae      	adds	r2, #174	@ 0xae
 800959e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095a2:	689b      	ldr	r3, [r3, #8]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d00f      	beq.n	80095c8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80095a8:	7bba      	ldrb	r2, [r7, #14]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80095b0:	7bba      	ldrb	r2, [r7, #14]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	32ae      	adds	r2, #174	@ 0xae
 80095b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095ba:	689b      	ldr	r3, [r3, #8]
 80095bc:	6839      	ldr	r1, [r7, #0]
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	4798      	blx	r3
 80095c2:	4603      	mov	r3, r0
 80095c4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80095c6:	e004      	b.n	80095d2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80095c8:	2303      	movs	r3, #3
 80095ca:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80095cc:	e001      	b.n	80095d2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80095ce:	2303      	movs	r3, #3
 80095d0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	88db      	ldrh	r3, [r3, #6]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d110      	bne.n	80095fc <USBD_StdItfReq+0xc0>
 80095da:	7bfb      	ldrb	r3, [r7, #15]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d10d      	bne.n	80095fc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f000 fdd3 	bl	800a18c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80095e6:	e009      	b.n	80095fc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80095e8:	6839      	ldr	r1, [r7, #0]
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f000 fcf7 	bl	8009fde <USBD_CtlError>
          break;
 80095f0:	e004      	b.n	80095fc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80095f2:	6839      	ldr	r1, [r7, #0]
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f000 fcf2 	bl	8009fde <USBD_CtlError>
          break;
 80095fa:	e000      	b.n	80095fe <USBD_StdItfReq+0xc2>
          break;
 80095fc:	bf00      	nop
      }
      break;
 80095fe:	e004      	b.n	800960a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009600:	6839      	ldr	r1, [r7, #0]
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f000 fceb 	bl	8009fde <USBD_CtlError>
      break;
 8009608:	bf00      	nop
  }

  return ret;
 800960a:	7bfb      	ldrb	r3, [r7, #15]
}
 800960c:	4618      	mov	r0, r3
 800960e:	3710      	adds	r7, #16
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}

08009614 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b084      	sub	sp, #16
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800961e:	2300      	movs	r3, #0
 8009620:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	889b      	ldrh	r3, [r3, #4]
 8009626:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009630:	2b40      	cmp	r3, #64	@ 0x40
 8009632:	d007      	beq.n	8009644 <USBD_StdEPReq+0x30>
 8009634:	2b40      	cmp	r3, #64	@ 0x40
 8009636:	f200 817f 	bhi.w	8009938 <USBD_StdEPReq+0x324>
 800963a:	2b00      	cmp	r3, #0
 800963c:	d02a      	beq.n	8009694 <USBD_StdEPReq+0x80>
 800963e:	2b20      	cmp	r3, #32
 8009640:	f040 817a 	bne.w	8009938 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009644:	7bbb      	ldrb	r3, [r7, #14]
 8009646:	4619      	mov	r1, r3
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f7ff fe85 	bl	8009358 <USBD_CoreFindEP>
 800964e:	4603      	mov	r3, r0
 8009650:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009652:	7b7b      	ldrb	r3, [r7, #13]
 8009654:	2bff      	cmp	r3, #255	@ 0xff
 8009656:	f000 8174 	beq.w	8009942 <USBD_StdEPReq+0x32e>
 800965a:	7b7b      	ldrb	r3, [r7, #13]
 800965c:	2b00      	cmp	r3, #0
 800965e:	f040 8170 	bne.w	8009942 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009662:	7b7a      	ldrb	r2, [r7, #13]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800966a:	7b7a      	ldrb	r2, [r7, #13]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	32ae      	adds	r2, #174	@ 0xae
 8009670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009674:	689b      	ldr	r3, [r3, #8]
 8009676:	2b00      	cmp	r3, #0
 8009678:	f000 8163 	beq.w	8009942 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800967c:	7b7a      	ldrb	r2, [r7, #13]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	32ae      	adds	r2, #174	@ 0xae
 8009682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009686:	689b      	ldr	r3, [r3, #8]
 8009688:	6839      	ldr	r1, [r7, #0]
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	4798      	blx	r3
 800968e:	4603      	mov	r3, r0
 8009690:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009692:	e156      	b.n	8009942 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	785b      	ldrb	r3, [r3, #1]
 8009698:	2b03      	cmp	r3, #3
 800969a:	d008      	beq.n	80096ae <USBD_StdEPReq+0x9a>
 800969c:	2b03      	cmp	r3, #3
 800969e:	f300 8145 	bgt.w	800992c <USBD_StdEPReq+0x318>
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	f000 809b 	beq.w	80097de <USBD_StdEPReq+0x1ca>
 80096a8:	2b01      	cmp	r3, #1
 80096aa:	d03c      	beq.n	8009726 <USBD_StdEPReq+0x112>
 80096ac:	e13e      	b.n	800992c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096b4:	b2db      	uxtb	r3, r3
 80096b6:	2b02      	cmp	r3, #2
 80096b8:	d002      	beq.n	80096c0 <USBD_StdEPReq+0xac>
 80096ba:	2b03      	cmp	r3, #3
 80096bc:	d016      	beq.n	80096ec <USBD_StdEPReq+0xd8>
 80096be:	e02c      	b.n	800971a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80096c0:	7bbb      	ldrb	r3, [r7, #14]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d00d      	beq.n	80096e2 <USBD_StdEPReq+0xce>
 80096c6:	7bbb      	ldrb	r3, [r7, #14]
 80096c8:	2b80      	cmp	r3, #128	@ 0x80
 80096ca:	d00a      	beq.n	80096e2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80096cc:	7bbb      	ldrb	r3, [r7, #14]
 80096ce:	4619      	mov	r1, r3
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f001 f975 	bl	800a9c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80096d6:	2180      	movs	r1, #128	@ 0x80
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f001 f971 	bl	800a9c0 <USBD_LL_StallEP>
 80096de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80096e0:	e020      	b.n	8009724 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80096e2:	6839      	ldr	r1, [r7, #0]
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f000 fc7a 	bl	8009fde <USBD_CtlError>
              break;
 80096ea:	e01b      	b.n	8009724 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	885b      	ldrh	r3, [r3, #2]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d10e      	bne.n	8009712 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80096f4:	7bbb      	ldrb	r3, [r7, #14]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d00b      	beq.n	8009712 <USBD_StdEPReq+0xfe>
 80096fa:	7bbb      	ldrb	r3, [r7, #14]
 80096fc:	2b80      	cmp	r3, #128	@ 0x80
 80096fe:	d008      	beq.n	8009712 <USBD_StdEPReq+0xfe>
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	88db      	ldrh	r3, [r3, #6]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d104      	bne.n	8009712 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009708:	7bbb      	ldrb	r3, [r7, #14]
 800970a:	4619      	mov	r1, r3
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f001 f957 	bl	800a9c0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f000 fd3a 	bl	800a18c <USBD_CtlSendStatus>

              break;
 8009718:	e004      	b.n	8009724 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800971a:	6839      	ldr	r1, [r7, #0]
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f000 fc5e 	bl	8009fde <USBD_CtlError>
              break;
 8009722:	bf00      	nop
          }
          break;
 8009724:	e107      	b.n	8009936 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800972c:	b2db      	uxtb	r3, r3
 800972e:	2b02      	cmp	r3, #2
 8009730:	d002      	beq.n	8009738 <USBD_StdEPReq+0x124>
 8009732:	2b03      	cmp	r3, #3
 8009734:	d016      	beq.n	8009764 <USBD_StdEPReq+0x150>
 8009736:	e04b      	b.n	80097d0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009738:	7bbb      	ldrb	r3, [r7, #14]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d00d      	beq.n	800975a <USBD_StdEPReq+0x146>
 800973e:	7bbb      	ldrb	r3, [r7, #14]
 8009740:	2b80      	cmp	r3, #128	@ 0x80
 8009742:	d00a      	beq.n	800975a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009744:	7bbb      	ldrb	r3, [r7, #14]
 8009746:	4619      	mov	r1, r3
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f001 f939 	bl	800a9c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800974e:	2180      	movs	r1, #128	@ 0x80
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f001 f935 	bl	800a9c0 <USBD_LL_StallEP>
 8009756:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009758:	e040      	b.n	80097dc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800975a:	6839      	ldr	r1, [r7, #0]
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f000 fc3e 	bl	8009fde <USBD_CtlError>
              break;
 8009762:	e03b      	b.n	80097dc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	885b      	ldrh	r3, [r3, #2]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d136      	bne.n	80097da <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800976c:	7bbb      	ldrb	r3, [r7, #14]
 800976e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009772:	2b00      	cmp	r3, #0
 8009774:	d004      	beq.n	8009780 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009776:	7bbb      	ldrb	r3, [r7, #14]
 8009778:	4619      	mov	r1, r3
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f001 f93f 	bl	800a9fe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f000 fd03 	bl	800a18c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009786:	7bbb      	ldrb	r3, [r7, #14]
 8009788:	4619      	mov	r1, r3
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f7ff fde4 	bl	8009358 <USBD_CoreFindEP>
 8009790:	4603      	mov	r3, r0
 8009792:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009794:	7b7b      	ldrb	r3, [r7, #13]
 8009796:	2bff      	cmp	r3, #255	@ 0xff
 8009798:	d01f      	beq.n	80097da <USBD_StdEPReq+0x1c6>
 800979a:	7b7b      	ldrb	r3, [r7, #13]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d11c      	bne.n	80097da <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80097a0:	7b7a      	ldrb	r2, [r7, #13]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80097a8:	7b7a      	ldrb	r2, [r7, #13]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	32ae      	adds	r2, #174	@ 0xae
 80097ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097b2:	689b      	ldr	r3, [r3, #8]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d010      	beq.n	80097da <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80097b8:	7b7a      	ldrb	r2, [r7, #13]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	32ae      	adds	r2, #174	@ 0xae
 80097be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097c2:	689b      	ldr	r3, [r3, #8]
 80097c4:	6839      	ldr	r1, [r7, #0]
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	4798      	blx	r3
 80097ca:	4603      	mov	r3, r0
 80097cc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80097ce:	e004      	b.n	80097da <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80097d0:	6839      	ldr	r1, [r7, #0]
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f000 fc03 	bl	8009fde <USBD_CtlError>
              break;
 80097d8:	e000      	b.n	80097dc <USBD_StdEPReq+0x1c8>
              break;
 80097da:	bf00      	nop
          }
          break;
 80097dc:	e0ab      	b.n	8009936 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097e4:	b2db      	uxtb	r3, r3
 80097e6:	2b02      	cmp	r3, #2
 80097e8:	d002      	beq.n	80097f0 <USBD_StdEPReq+0x1dc>
 80097ea:	2b03      	cmp	r3, #3
 80097ec:	d032      	beq.n	8009854 <USBD_StdEPReq+0x240>
 80097ee:	e097      	b.n	8009920 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80097f0:	7bbb      	ldrb	r3, [r7, #14]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d007      	beq.n	8009806 <USBD_StdEPReq+0x1f2>
 80097f6:	7bbb      	ldrb	r3, [r7, #14]
 80097f8:	2b80      	cmp	r3, #128	@ 0x80
 80097fa:	d004      	beq.n	8009806 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80097fc:	6839      	ldr	r1, [r7, #0]
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f000 fbed 	bl	8009fde <USBD_CtlError>
                break;
 8009804:	e091      	b.n	800992a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009806:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800980a:	2b00      	cmp	r3, #0
 800980c:	da0b      	bge.n	8009826 <USBD_StdEPReq+0x212>
 800980e:	7bbb      	ldrb	r3, [r7, #14]
 8009810:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009814:	4613      	mov	r3, r2
 8009816:	009b      	lsls	r3, r3, #2
 8009818:	4413      	add	r3, r2
 800981a:	009b      	lsls	r3, r3, #2
 800981c:	3310      	adds	r3, #16
 800981e:	687a      	ldr	r2, [r7, #4]
 8009820:	4413      	add	r3, r2
 8009822:	3304      	adds	r3, #4
 8009824:	e00b      	b.n	800983e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009826:	7bbb      	ldrb	r3, [r7, #14]
 8009828:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800982c:	4613      	mov	r3, r2
 800982e:	009b      	lsls	r3, r3, #2
 8009830:	4413      	add	r3, r2
 8009832:	009b      	lsls	r3, r3, #2
 8009834:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009838:	687a      	ldr	r2, [r7, #4]
 800983a:	4413      	add	r3, r2
 800983c:	3304      	adds	r3, #4
 800983e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	2200      	movs	r2, #0
 8009844:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	2202      	movs	r2, #2
 800984a:	4619      	mov	r1, r3
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f000 fc43 	bl	800a0d8 <USBD_CtlSendData>
              break;
 8009852:	e06a      	b.n	800992a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009854:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009858:	2b00      	cmp	r3, #0
 800985a:	da11      	bge.n	8009880 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800985c:	7bbb      	ldrb	r3, [r7, #14]
 800985e:	f003 020f 	and.w	r2, r3, #15
 8009862:	6879      	ldr	r1, [r7, #4]
 8009864:	4613      	mov	r3, r2
 8009866:	009b      	lsls	r3, r3, #2
 8009868:	4413      	add	r3, r2
 800986a:	009b      	lsls	r3, r3, #2
 800986c:	440b      	add	r3, r1
 800986e:	3324      	adds	r3, #36	@ 0x24
 8009870:	881b      	ldrh	r3, [r3, #0]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d117      	bne.n	80098a6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009876:	6839      	ldr	r1, [r7, #0]
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f000 fbb0 	bl	8009fde <USBD_CtlError>
                  break;
 800987e:	e054      	b.n	800992a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009880:	7bbb      	ldrb	r3, [r7, #14]
 8009882:	f003 020f 	and.w	r2, r3, #15
 8009886:	6879      	ldr	r1, [r7, #4]
 8009888:	4613      	mov	r3, r2
 800988a:	009b      	lsls	r3, r3, #2
 800988c:	4413      	add	r3, r2
 800988e:	009b      	lsls	r3, r3, #2
 8009890:	440b      	add	r3, r1
 8009892:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009896:	881b      	ldrh	r3, [r3, #0]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d104      	bne.n	80098a6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800989c:	6839      	ldr	r1, [r7, #0]
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f000 fb9d 	bl	8009fde <USBD_CtlError>
                  break;
 80098a4:	e041      	b.n	800992a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	da0b      	bge.n	80098c6 <USBD_StdEPReq+0x2b2>
 80098ae:	7bbb      	ldrb	r3, [r7, #14]
 80098b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80098b4:	4613      	mov	r3, r2
 80098b6:	009b      	lsls	r3, r3, #2
 80098b8:	4413      	add	r3, r2
 80098ba:	009b      	lsls	r3, r3, #2
 80098bc:	3310      	adds	r3, #16
 80098be:	687a      	ldr	r2, [r7, #4]
 80098c0:	4413      	add	r3, r2
 80098c2:	3304      	adds	r3, #4
 80098c4:	e00b      	b.n	80098de <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80098c6:	7bbb      	ldrb	r3, [r7, #14]
 80098c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098cc:	4613      	mov	r3, r2
 80098ce:	009b      	lsls	r3, r3, #2
 80098d0:	4413      	add	r3, r2
 80098d2:	009b      	lsls	r3, r3, #2
 80098d4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80098d8:	687a      	ldr	r2, [r7, #4]
 80098da:	4413      	add	r3, r2
 80098dc:	3304      	adds	r3, #4
 80098de:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80098e0:	7bbb      	ldrb	r3, [r7, #14]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d002      	beq.n	80098ec <USBD_StdEPReq+0x2d8>
 80098e6:	7bbb      	ldrb	r3, [r7, #14]
 80098e8:	2b80      	cmp	r3, #128	@ 0x80
 80098ea:	d103      	bne.n	80098f4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	2200      	movs	r2, #0
 80098f0:	601a      	str	r2, [r3, #0]
 80098f2:	e00e      	b.n	8009912 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80098f4:	7bbb      	ldrb	r3, [r7, #14]
 80098f6:	4619      	mov	r1, r3
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f001 f89f 	bl	800aa3c <USBD_LL_IsStallEP>
 80098fe:	4603      	mov	r3, r0
 8009900:	2b00      	cmp	r3, #0
 8009902:	d003      	beq.n	800990c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	2201      	movs	r2, #1
 8009908:	601a      	str	r2, [r3, #0]
 800990a:	e002      	b.n	8009912 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	2200      	movs	r2, #0
 8009910:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	2202      	movs	r2, #2
 8009916:	4619      	mov	r1, r3
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f000 fbdd 	bl	800a0d8 <USBD_CtlSendData>
              break;
 800991e:	e004      	b.n	800992a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009920:	6839      	ldr	r1, [r7, #0]
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f000 fb5b 	bl	8009fde <USBD_CtlError>
              break;
 8009928:	bf00      	nop
          }
          break;
 800992a:	e004      	b.n	8009936 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800992c:	6839      	ldr	r1, [r7, #0]
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f000 fb55 	bl	8009fde <USBD_CtlError>
          break;
 8009934:	bf00      	nop
      }
      break;
 8009936:	e005      	b.n	8009944 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009938:	6839      	ldr	r1, [r7, #0]
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f000 fb4f 	bl	8009fde <USBD_CtlError>
      break;
 8009940:	e000      	b.n	8009944 <USBD_StdEPReq+0x330>
      break;
 8009942:	bf00      	nop
  }

  return ret;
 8009944:	7bfb      	ldrb	r3, [r7, #15]
}
 8009946:	4618      	mov	r0, r3
 8009948:	3710      	adds	r7, #16
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}
	...

08009950 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b084      	sub	sp, #16
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
 8009958:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800995a:	2300      	movs	r3, #0
 800995c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800995e:	2300      	movs	r3, #0
 8009960:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009962:	2300      	movs	r3, #0
 8009964:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	885b      	ldrh	r3, [r3, #2]
 800996a:	0a1b      	lsrs	r3, r3, #8
 800996c:	b29b      	uxth	r3, r3
 800996e:	3b01      	subs	r3, #1
 8009970:	2b06      	cmp	r3, #6
 8009972:	f200 8128 	bhi.w	8009bc6 <USBD_GetDescriptor+0x276>
 8009976:	a201      	add	r2, pc, #4	@ (adr r2, 800997c <USBD_GetDescriptor+0x2c>)
 8009978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800997c:	08009999 	.word	0x08009999
 8009980:	080099b1 	.word	0x080099b1
 8009984:	080099f1 	.word	0x080099f1
 8009988:	08009bc7 	.word	0x08009bc7
 800998c:	08009bc7 	.word	0x08009bc7
 8009990:	08009b67 	.word	0x08009b67
 8009994:	08009b93 	.word	0x08009b93
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	687a      	ldr	r2, [r7, #4]
 80099a2:	7c12      	ldrb	r2, [r2, #16]
 80099a4:	f107 0108 	add.w	r1, r7, #8
 80099a8:	4610      	mov	r0, r2
 80099aa:	4798      	blx	r3
 80099ac:	60f8      	str	r0, [r7, #12]
      break;
 80099ae:	e112      	b.n	8009bd6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	7c1b      	ldrb	r3, [r3, #16]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d10d      	bne.n	80099d4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099c0:	f107 0208 	add.w	r2, r7, #8
 80099c4:	4610      	mov	r0, r2
 80099c6:	4798      	blx	r3
 80099c8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	3301      	adds	r3, #1
 80099ce:	2202      	movs	r2, #2
 80099d0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80099d2:	e100      	b.n	8009bd6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099dc:	f107 0208 	add.w	r2, r7, #8
 80099e0:	4610      	mov	r0, r2
 80099e2:	4798      	blx	r3
 80099e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	3301      	adds	r3, #1
 80099ea:	2202      	movs	r2, #2
 80099ec:	701a      	strb	r2, [r3, #0]
      break;
 80099ee:	e0f2      	b.n	8009bd6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	885b      	ldrh	r3, [r3, #2]
 80099f4:	b2db      	uxtb	r3, r3
 80099f6:	2b05      	cmp	r3, #5
 80099f8:	f200 80ac 	bhi.w	8009b54 <USBD_GetDescriptor+0x204>
 80099fc:	a201      	add	r2, pc, #4	@ (adr r2, 8009a04 <USBD_GetDescriptor+0xb4>)
 80099fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a02:	bf00      	nop
 8009a04:	08009a1d 	.word	0x08009a1d
 8009a08:	08009a51 	.word	0x08009a51
 8009a0c:	08009a85 	.word	0x08009a85
 8009a10:	08009ab9 	.word	0x08009ab9
 8009a14:	08009aed 	.word	0x08009aed
 8009a18:	08009b21 	.word	0x08009b21
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a22:	685b      	ldr	r3, [r3, #4]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d00b      	beq.n	8009a40 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	7c12      	ldrb	r2, [r2, #16]
 8009a34:	f107 0108 	add.w	r1, r7, #8
 8009a38:	4610      	mov	r0, r2
 8009a3a:	4798      	blx	r3
 8009a3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a3e:	e091      	b.n	8009b64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a40:	6839      	ldr	r1, [r7, #0]
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 facb 	bl	8009fde <USBD_CtlError>
            err++;
 8009a48:	7afb      	ldrb	r3, [r7, #11]
 8009a4a:	3301      	adds	r3, #1
 8009a4c:	72fb      	strb	r3, [r7, #11]
          break;
 8009a4e:	e089      	b.n	8009b64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a56:	689b      	ldr	r3, [r3, #8]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d00b      	beq.n	8009a74 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a62:	689b      	ldr	r3, [r3, #8]
 8009a64:	687a      	ldr	r2, [r7, #4]
 8009a66:	7c12      	ldrb	r2, [r2, #16]
 8009a68:	f107 0108 	add.w	r1, r7, #8
 8009a6c:	4610      	mov	r0, r2
 8009a6e:	4798      	blx	r3
 8009a70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a72:	e077      	b.n	8009b64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a74:	6839      	ldr	r1, [r7, #0]
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f000 fab1 	bl	8009fde <USBD_CtlError>
            err++;
 8009a7c:	7afb      	ldrb	r3, [r7, #11]
 8009a7e:	3301      	adds	r3, #1
 8009a80:	72fb      	strb	r3, [r7, #11]
          break;
 8009a82:	e06f      	b.n	8009b64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a8a:	68db      	ldr	r3, [r3, #12]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d00b      	beq.n	8009aa8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a96:	68db      	ldr	r3, [r3, #12]
 8009a98:	687a      	ldr	r2, [r7, #4]
 8009a9a:	7c12      	ldrb	r2, [r2, #16]
 8009a9c:	f107 0108 	add.w	r1, r7, #8
 8009aa0:	4610      	mov	r0, r2
 8009aa2:	4798      	blx	r3
 8009aa4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009aa6:	e05d      	b.n	8009b64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009aa8:	6839      	ldr	r1, [r7, #0]
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f000 fa97 	bl	8009fde <USBD_CtlError>
            err++;
 8009ab0:	7afb      	ldrb	r3, [r7, #11]
 8009ab2:	3301      	adds	r3, #1
 8009ab4:	72fb      	strb	r3, [r7, #11]
          break;
 8009ab6:	e055      	b.n	8009b64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009abe:	691b      	ldr	r3, [r3, #16]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d00b      	beq.n	8009adc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009aca:	691b      	ldr	r3, [r3, #16]
 8009acc:	687a      	ldr	r2, [r7, #4]
 8009ace:	7c12      	ldrb	r2, [r2, #16]
 8009ad0:	f107 0108 	add.w	r1, r7, #8
 8009ad4:	4610      	mov	r0, r2
 8009ad6:	4798      	blx	r3
 8009ad8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ada:	e043      	b.n	8009b64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009adc:	6839      	ldr	r1, [r7, #0]
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f000 fa7d 	bl	8009fde <USBD_CtlError>
            err++;
 8009ae4:	7afb      	ldrb	r3, [r7, #11]
 8009ae6:	3301      	adds	r3, #1
 8009ae8:	72fb      	strb	r3, [r7, #11]
          break;
 8009aea:	e03b      	b.n	8009b64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009af2:	695b      	ldr	r3, [r3, #20]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d00b      	beq.n	8009b10 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009afe:	695b      	ldr	r3, [r3, #20]
 8009b00:	687a      	ldr	r2, [r7, #4]
 8009b02:	7c12      	ldrb	r2, [r2, #16]
 8009b04:	f107 0108 	add.w	r1, r7, #8
 8009b08:	4610      	mov	r0, r2
 8009b0a:	4798      	blx	r3
 8009b0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b0e:	e029      	b.n	8009b64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b10:	6839      	ldr	r1, [r7, #0]
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 fa63 	bl	8009fde <USBD_CtlError>
            err++;
 8009b18:	7afb      	ldrb	r3, [r7, #11]
 8009b1a:	3301      	adds	r3, #1
 8009b1c:	72fb      	strb	r3, [r7, #11]
          break;
 8009b1e:	e021      	b.n	8009b64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b26:	699b      	ldr	r3, [r3, #24]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d00b      	beq.n	8009b44 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b32:	699b      	ldr	r3, [r3, #24]
 8009b34:	687a      	ldr	r2, [r7, #4]
 8009b36:	7c12      	ldrb	r2, [r2, #16]
 8009b38:	f107 0108 	add.w	r1, r7, #8
 8009b3c:	4610      	mov	r0, r2
 8009b3e:	4798      	blx	r3
 8009b40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b42:	e00f      	b.n	8009b64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b44:	6839      	ldr	r1, [r7, #0]
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f000 fa49 	bl	8009fde <USBD_CtlError>
            err++;
 8009b4c:	7afb      	ldrb	r3, [r7, #11]
 8009b4e:	3301      	adds	r3, #1
 8009b50:	72fb      	strb	r3, [r7, #11]
          break;
 8009b52:	e007      	b.n	8009b64 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009b54:	6839      	ldr	r1, [r7, #0]
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 fa41 	bl	8009fde <USBD_CtlError>
          err++;
 8009b5c:	7afb      	ldrb	r3, [r7, #11]
 8009b5e:	3301      	adds	r3, #1
 8009b60:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009b62:	bf00      	nop
      }
      break;
 8009b64:	e037      	b.n	8009bd6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	7c1b      	ldrb	r3, [r3, #16]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d109      	bne.n	8009b82 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b76:	f107 0208 	add.w	r2, r7, #8
 8009b7a:	4610      	mov	r0, r2
 8009b7c:	4798      	blx	r3
 8009b7e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b80:	e029      	b.n	8009bd6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009b82:	6839      	ldr	r1, [r7, #0]
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 fa2a 	bl	8009fde <USBD_CtlError>
        err++;
 8009b8a:	7afb      	ldrb	r3, [r7, #11]
 8009b8c:	3301      	adds	r3, #1
 8009b8e:	72fb      	strb	r3, [r7, #11]
      break;
 8009b90:	e021      	b.n	8009bd6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	7c1b      	ldrb	r3, [r3, #16]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d10d      	bne.n	8009bb6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ba2:	f107 0208 	add.w	r2, r7, #8
 8009ba6:	4610      	mov	r0, r2
 8009ba8:	4798      	blx	r3
 8009baa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	3301      	adds	r3, #1
 8009bb0:	2207      	movs	r2, #7
 8009bb2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009bb4:	e00f      	b.n	8009bd6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009bb6:	6839      	ldr	r1, [r7, #0]
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f000 fa10 	bl	8009fde <USBD_CtlError>
        err++;
 8009bbe:	7afb      	ldrb	r3, [r7, #11]
 8009bc0:	3301      	adds	r3, #1
 8009bc2:	72fb      	strb	r3, [r7, #11]
      break;
 8009bc4:	e007      	b.n	8009bd6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009bc6:	6839      	ldr	r1, [r7, #0]
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f000 fa08 	bl	8009fde <USBD_CtlError>
      err++;
 8009bce:	7afb      	ldrb	r3, [r7, #11]
 8009bd0:	3301      	adds	r3, #1
 8009bd2:	72fb      	strb	r3, [r7, #11]
      break;
 8009bd4:	bf00      	nop
  }

  if (err != 0U)
 8009bd6:	7afb      	ldrb	r3, [r7, #11]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d11e      	bne.n	8009c1a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	88db      	ldrh	r3, [r3, #6]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d016      	beq.n	8009c12 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009be4:	893b      	ldrh	r3, [r7, #8]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d00e      	beq.n	8009c08 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	88da      	ldrh	r2, [r3, #6]
 8009bee:	893b      	ldrh	r3, [r7, #8]
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	bf28      	it	cs
 8009bf4:	4613      	movcs	r3, r2
 8009bf6:	b29b      	uxth	r3, r3
 8009bf8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009bfa:	893b      	ldrh	r3, [r7, #8]
 8009bfc:	461a      	mov	r2, r3
 8009bfe:	68f9      	ldr	r1, [r7, #12]
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f000 fa69 	bl	800a0d8 <USBD_CtlSendData>
 8009c06:	e009      	b.n	8009c1c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009c08:	6839      	ldr	r1, [r7, #0]
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f000 f9e7 	bl	8009fde <USBD_CtlError>
 8009c10:	e004      	b.n	8009c1c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f000 faba 	bl	800a18c <USBD_CtlSendStatus>
 8009c18:	e000      	b.n	8009c1c <USBD_GetDescriptor+0x2cc>
    return;
 8009c1a:	bf00      	nop
  }
}
 8009c1c:	3710      	adds	r7, #16
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
 8009c22:	bf00      	nop

08009c24 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b084      	sub	sp, #16
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
 8009c2c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	889b      	ldrh	r3, [r3, #4]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d131      	bne.n	8009c9a <USBD_SetAddress+0x76>
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	88db      	ldrh	r3, [r3, #6]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d12d      	bne.n	8009c9a <USBD_SetAddress+0x76>
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	885b      	ldrh	r3, [r3, #2]
 8009c42:	2b7f      	cmp	r3, #127	@ 0x7f
 8009c44:	d829      	bhi.n	8009c9a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	885b      	ldrh	r3, [r3, #2]
 8009c4a:	b2db      	uxtb	r3, r3
 8009c4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c50:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c58:	b2db      	uxtb	r3, r3
 8009c5a:	2b03      	cmp	r3, #3
 8009c5c:	d104      	bne.n	8009c68 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009c5e:	6839      	ldr	r1, [r7, #0]
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f000 f9bc 	bl	8009fde <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c66:	e01d      	b.n	8009ca4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	7bfa      	ldrb	r2, [r7, #15]
 8009c6c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009c70:	7bfb      	ldrb	r3, [r7, #15]
 8009c72:	4619      	mov	r1, r3
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f000 ff0d 	bl	800aa94 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 fa86 	bl	800a18c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009c80:	7bfb      	ldrb	r3, [r7, #15]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d004      	beq.n	8009c90 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2202      	movs	r2, #2
 8009c8a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c8e:	e009      	b.n	8009ca4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2201      	movs	r2, #1
 8009c94:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c98:	e004      	b.n	8009ca4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009c9a:	6839      	ldr	r1, [r7, #0]
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f000 f99e 	bl	8009fde <USBD_CtlError>
  }
}
 8009ca2:	bf00      	nop
 8009ca4:	bf00      	nop
 8009ca6:	3710      	adds	r7, #16
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}

08009cac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b084      	sub	sp, #16
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
 8009cb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	885b      	ldrh	r3, [r3, #2]
 8009cbe:	b2da      	uxtb	r2, r3
 8009cc0:	4b4e      	ldr	r3, [pc, #312]	@ (8009dfc <USBD_SetConfig+0x150>)
 8009cc2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009cc4:	4b4d      	ldr	r3, [pc, #308]	@ (8009dfc <USBD_SetConfig+0x150>)
 8009cc6:	781b      	ldrb	r3, [r3, #0]
 8009cc8:	2b01      	cmp	r3, #1
 8009cca:	d905      	bls.n	8009cd8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009ccc:	6839      	ldr	r1, [r7, #0]
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f000 f985 	bl	8009fde <USBD_CtlError>
    return USBD_FAIL;
 8009cd4:	2303      	movs	r3, #3
 8009cd6:	e08c      	b.n	8009df2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cde:	b2db      	uxtb	r3, r3
 8009ce0:	2b02      	cmp	r3, #2
 8009ce2:	d002      	beq.n	8009cea <USBD_SetConfig+0x3e>
 8009ce4:	2b03      	cmp	r3, #3
 8009ce6:	d029      	beq.n	8009d3c <USBD_SetConfig+0x90>
 8009ce8:	e075      	b.n	8009dd6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009cea:	4b44      	ldr	r3, [pc, #272]	@ (8009dfc <USBD_SetConfig+0x150>)
 8009cec:	781b      	ldrb	r3, [r3, #0]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d020      	beq.n	8009d34 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009cf2:	4b42      	ldr	r3, [pc, #264]	@ (8009dfc <USBD_SetConfig+0x150>)
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009cfc:	4b3f      	ldr	r3, [pc, #252]	@ (8009dfc <USBD_SetConfig+0x150>)
 8009cfe:	781b      	ldrb	r3, [r3, #0]
 8009d00:	4619      	mov	r1, r3
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f7fe ffe3 	bl	8008cce <USBD_SetClassConfig>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009d0c:	7bfb      	ldrb	r3, [r7, #15]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d008      	beq.n	8009d24 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009d12:	6839      	ldr	r1, [r7, #0]
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f000 f962 	bl	8009fde <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2202      	movs	r2, #2
 8009d1e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009d22:	e065      	b.n	8009df0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f000 fa31 	bl	800a18c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2203      	movs	r2, #3
 8009d2e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009d32:	e05d      	b.n	8009df0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f000 fa29 	bl	800a18c <USBD_CtlSendStatus>
      break;
 8009d3a:	e059      	b.n	8009df0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009d3c:	4b2f      	ldr	r3, [pc, #188]	@ (8009dfc <USBD_SetConfig+0x150>)
 8009d3e:	781b      	ldrb	r3, [r3, #0]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d112      	bne.n	8009d6a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2202      	movs	r2, #2
 8009d48:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009d4c:	4b2b      	ldr	r3, [pc, #172]	@ (8009dfc <USBD_SetConfig+0x150>)
 8009d4e:	781b      	ldrb	r3, [r3, #0]
 8009d50:	461a      	mov	r2, r3
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009d56:	4b29      	ldr	r3, [pc, #164]	@ (8009dfc <USBD_SetConfig+0x150>)
 8009d58:	781b      	ldrb	r3, [r3, #0]
 8009d5a:	4619      	mov	r1, r3
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f7fe ffd2 	bl	8008d06 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f000 fa12 	bl	800a18c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009d68:	e042      	b.n	8009df0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009d6a:	4b24      	ldr	r3, [pc, #144]	@ (8009dfc <USBD_SetConfig+0x150>)
 8009d6c:	781b      	ldrb	r3, [r3, #0]
 8009d6e:	461a      	mov	r2, r3
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	685b      	ldr	r3, [r3, #4]
 8009d74:	429a      	cmp	r2, r3
 8009d76:	d02a      	beq.n	8009dce <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	685b      	ldr	r3, [r3, #4]
 8009d7c:	b2db      	uxtb	r3, r3
 8009d7e:	4619      	mov	r1, r3
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f7fe ffc0 	bl	8008d06 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009d86:	4b1d      	ldr	r3, [pc, #116]	@ (8009dfc <USBD_SetConfig+0x150>)
 8009d88:	781b      	ldrb	r3, [r3, #0]
 8009d8a:	461a      	mov	r2, r3
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009d90:	4b1a      	ldr	r3, [pc, #104]	@ (8009dfc <USBD_SetConfig+0x150>)
 8009d92:	781b      	ldrb	r3, [r3, #0]
 8009d94:	4619      	mov	r1, r3
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f7fe ff99 	bl	8008cce <USBD_SetClassConfig>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009da0:	7bfb      	ldrb	r3, [r7, #15]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d00f      	beq.n	8009dc6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009da6:	6839      	ldr	r1, [r7, #0]
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f000 f918 	bl	8009fde <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	685b      	ldr	r3, [r3, #4]
 8009db2:	b2db      	uxtb	r3, r3
 8009db4:	4619      	mov	r1, r3
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f7fe ffa5 	bl	8008d06 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2202      	movs	r2, #2
 8009dc0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009dc4:	e014      	b.n	8009df0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f000 f9e0 	bl	800a18c <USBD_CtlSendStatus>
      break;
 8009dcc:	e010      	b.n	8009df0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f000 f9dc 	bl	800a18c <USBD_CtlSendStatus>
      break;
 8009dd4:	e00c      	b.n	8009df0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009dd6:	6839      	ldr	r1, [r7, #0]
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f000 f900 	bl	8009fde <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009dde:	4b07      	ldr	r3, [pc, #28]	@ (8009dfc <USBD_SetConfig+0x150>)
 8009de0:	781b      	ldrb	r3, [r3, #0]
 8009de2:	4619      	mov	r1, r3
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f7fe ff8e 	bl	8008d06 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009dea:	2303      	movs	r3, #3
 8009dec:	73fb      	strb	r3, [r7, #15]
      break;
 8009dee:	bf00      	nop
  }

  return ret;
 8009df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3710      	adds	r7, #16
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}
 8009dfa:	bf00      	nop
 8009dfc:	200004f8 	.word	0x200004f8

08009e00 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b082      	sub	sp, #8
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
 8009e08:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	88db      	ldrh	r3, [r3, #6]
 8009e0e:	2b01      	cmp	r3, #1
 8009e10:	d004      	beq.n	8009e1c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009e12:	6839      	ldr	r1, [r7, #0]
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f000 f8e2 	bl	8009fde <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009e1a:	e023      	b.n	8009e64 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e22:	b2db      	uxtb	r3, r3
 8009e24:	2b02      	cmp	r3, #2
 8009e26:	dc02      	bgt.n	8009e2e <USBD_GetConfig+0x2e>
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	dc03      	bgt.n	8009e34 <USBD_GetConfig+0x34>
 8009e2c:	e015      	b.n	8009e5a <USBD_GetConfig+0x5a>
 8009e2e:	2b03      	cmp	r3, #3
 8009e30:	d00b      	beq.n	8009e4a <USBD_GetConfig+0x4a>
 8009e32:	e012      	b.n	8009e5a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2200      	movs	r2, #0
 8009e38:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	3308      	adds	r3, #8
 8009e3e:	2201      	movs	r2, #1
 8009e40:	4619      	mov	r1, r3
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f000 f948 	bl	800a0d8 <USBD_CtlSendData>
        break;
 8009e48:	e00c      	b.n	8009e64 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	3304      	adds	r3, #4
 8009e4e:	2201      	movs	r2, #1
 8009e50:	4619      	mov	r1, r3
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f000 f940 	bl	800a0d8 <USBD_CtlSendData>
        break;
 8009e58:	e004      	b.n	8009e64 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009e5a:	6839      	ldr	r1, [r7, #0]
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f000 f8be 	bl	8009fde <USBD_CtlError>
        break;
 8009e62:	bf00      	nop
}
 8009e64:	bf00      	nop
 8009e66:	3708      	adds	r7, #8
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}

08009e6c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b082      	sub	sp, #8
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
 8009e74:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e7c:	b2db      	uxtb	r3, r3
 8009e7e:	3b01      	subs	r3, #1
 8009e80:	2b02      	cmp	r3, #2
 8009e82:	d81e      	bhi.n	8009ec2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	88db      	ldrh	r3, [r3, #6]
 8009e88:	2b02      	cmp	r3, #2
 8009e8a:	d004      	beq.n	8009e96 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009e8c:	6839      	ldr	r1, [r7, #0]
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f000 f8a5 	bl	8009fde <USBD_CtlError>
        break;
 8009e94:	e01a      	b.n	8009ecc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2201      	movs	r2, #1
 8009e9a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d005      	beq.n	8009eb2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	68db      	ldr	r3, [r3, #12]
 8009eaa:	f043 0202 	orr.w	r2, r3, #2
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	330c      	adds	r3, #12
 8009eb6:	2202      	movs	r2, #2
 8009eb8:	4619      	mov	r1, r3
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f000 f90c 	bl	800a0d8 <USBD_CtlSendData>
      break;
 8009ec0:	e004      	b.n	8009ecc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009ec2:	6839      	ldr	r1, [r7, #0]
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f000 f88a 	bl	8009fde <USBD_CtlError>
      break;
 8009eca:	bf00      	nop
  }
}
 8009ecc:	bf00      	nop
 8009ece:	3708      	adds	r7, #8
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}

08009ed4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b082      	sub	sp, #8
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
 8009edc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	885b      	ldrh	r3, [r3, #2]
 8009ee2:	2b01      	cmp	r3, #1
 8009ee4:	d107      	bne.n	8009ef6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2201      	movs	r2, #1
 8009eea:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f000 f94c 	bl	800a18c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009ef4:	e013      	b.n	8009f1e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	885b      	ldrh	r3, [r3, #2]
 8009efa:	2b02      	cmp	r3, #2
 8009efc:	d10b      	bne.n	8009f16 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	889b      	ldrh	r3, [r3, #4]
 8009f02:	0a1b      	lsrs	r3, r3, #8
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	b2da      	uxtb	r2, r3
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f000 f93c 	bl	800a18c <USBD_CtlSendStatus>
}
 8009f14:	e003      	b.n	8009f1e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009f16:	6839      	ldr	r1, [r7, #0]
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f000 f860 	bl	8009fde <USBD_CtlError>
}
 8009f1e:	bf00      	nop
 8009f20:	3708      	adds	r7, #8
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}

08009f26 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f26:	b580      	push	{r7, lr}
 8009f28:	b082      	sub	sp, #8
 8009f2a:	af00      	add	r7, sp, #0
 8009f2c:	6078      	str	r0, [r7, #4]
 8009f2e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f36:	b2db      	uxtb	r3, r3
 8009f38:	3b01      	subs	r3, #1
 8009f3a:	2b02      	cmp	r3, #2
 8009f3c:	d80b      	bhi.n	8009f56 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	885b      	ldrh	r3, [r3, #2]
 8009f42:	2b01      	cmp	r3, #1
 8009f44:	d10c      	bne.n	8009f60 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f000 f91c 	bl	800a18c <USBD_CtlSendStatus>
      }
      break;
 8009f54:	e004      	b.n	8009f60 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009f56:	6839      	ldr	r1, [r7, #0]
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f000 f840 	bl	8009fde <USBD_CtlError>
      break;
 8009f5e:	e000      	b.n	8009f62 <USBD_ClrFeature+0x3c>
      break;
 8009f60:	bf00      	nop
  }
}
 8009f62:	bf00      	nop
 8009f64:	3708      	adds	r7, #8
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}

08009f6a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009f6a:	b580      	push	{r7, lr}
 8009f6c:	b084      	sub	sp, #16
 8009f6e:	af00      	add	r7, sp, #0
 8009f70:	6078      	str	r0, [r7, #4]
 8009f72:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	781a      	ldrb	r2, [r3, #0]
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	3301      	adds	r3, #1
 8009f84:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	781a      	ldrb	r2, [r3, #0]
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	3301      	adds	r3, #1
 8009f92:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009f94:	68f8      	ldr	r0, [r7, #12]
 8009f96:	f7ff fa40 	bl	800941a <SWAPBYTE>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	461a      	mov	r2, r3
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	3301      	adds	r3, #1
 8009fa6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	3301      	adds	r3, #1
 8009fac:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009fae:	68f8      	ldr	r0, [r7, #12]
 8009fb0:	f7ff fa33 	bl	800941a <SWAPBYTE>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	461a      	mov	r2, r3
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	3301      	adds	r3, #1
 8009fc0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	3301      	adds	r3, #1
 8009fc6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009fc8:	68f8      	ldr	r0, [r7, #12]
 8009fca:	f7ff fa26 	bl	800941a <SWAPBYTE>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	461a      	mov	r2, r3
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	80da      	strh	r2, [r3, #6]
}
 8009fd6:	bf00      	nop
 8009fd8:	3710      	adds	r7, #16
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}

08009fde <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fde:	b580      	push	{r7, lr}
 8009fe0:	b082      	sub	sp, #8
 8009fe2:	af00      	add	r7, sp, #0
 8009fe4:	6078      	str	r0, [r7, #4]
 8009fe6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009fe8:	2180      	movs	r1, #128	@ 0x80
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f000 fce8 	bl	800a9c0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009ff0:	2100      	movs	r1, #0
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f000 fce4 	bl	800a9c0 <USBD_LL_StallEP>
}
 8009ff8:	bf00      	nop
 8009ffa:	3708      	adds	r7, #8
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}

0800a000 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b086      	sub	sp, #24
 800a004:	af00      	add	r7, sp, #0
 800a006:	60f8      	str	r0, [r7, #12]
 800a008:	60b9      	str	r1, [r7, #8]
 800a00a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a00c:	2300      	movs	r3, #0
 800a00e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d042      	beq.n	800a09c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a01a:	6938      	ldr	r0, [r7, #16]
 800a01c:	f000 f842 	bl	800a0a4 <USBD_GetLen>
 800a020:	4603      	mov	r3, r0
 800a022:	3301      	adds	r3, #1
 800a024:	005b      	lsls	r3, r3, #1
 800a026:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a02a:	d808      	bhi.n	800a03e <USBD_GetString+0x3e>
 800a02c:	6938      	ldr	r0, [r7, #16]
 800a02e:	f000 f839 	bl	800a0a4 <USBD_GetLen>
 800a032:	4603      	mov	r3, r0
 800a034:	3301      	adds	r3, #1
 800a036:	b29b      	uxth	r3, r3
 800a038:	005b      	lsls	r3, r3, #1
 800a03a:	b29a      	uxth	r2, r3
 800a03c:	e001      	b.n	800a042 <USBD_GetString+0x42>
 800a03e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a046:	7dfb      	ldrb	r3, [r7, #23]
 800a048:	68ba      	ldr	r2, [r7, #8]
 800a04a:	4413      	add	r3, r2
 800a04c:	687a      	ldr	r2, [r7, #4]
 800a04e:	7812      	ldrb	r2, [r2, #0]
 800a050:	701a      	strb	r2, [r3, #0]
  idx++;
 800a052:	7dfb      	ldrb	r3, [r7, #23]
 800a054:	3301      	adds	r3, #1
 800a056:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a058:	7dfb      	ldrb	r3, [r7, #23]
 800a05a:	68ba      	ldr	r2, [r7, #8]
 800a05c:	4413      	add	r3, r2
 800a05e:	2203      	movs	r2, #3
 800a060:	701a      	strb	r2, [r3, #0]
  idx++;
 800a062:	7dfb      	ldrb	r3, [r7, #23]
 800a064:	3301      	adds	r3, #1
 800a066:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a068:	e013      	b.n	800a092 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a06a:	7dfb      	ldrb	r3, [r7, #23]
 800a06c:	68ba      	ldr	r2, [r7, #8]
 800a06e:	4413      	add	r3, r2
 800a070:	693a      	ldr	r2, [r7, #16]
 800a072:	7812      	ldrb	r2, [r2, #0]
 800a074:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	3301      	adds	r3, #1
 800a07a:	613b      	str	r3, [r7, #16]
    idx++;
 800a07c:	7dfb      	ldrb	r3, [r7, #23]
 800a07e:	3301      	adds	r3, #1
 800a080:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a082:	7dfb      	ldrb	r3, [r7, #23]
 800a084:	68ba      	ldr	r2, [r7, #8]
 800a086:	4413      	add	r3, r2
 800a088:	2200      	movs	r2, #0
 800a08a:	701a      	strb	r2, [r3, #0]
    idx++;
 800a08c:	7dfb      	ldrb	r3, [r7, #23]
 800a08e:	3301      	adds	r3, #1
 800a090:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	781b      	ldrb	r3, [r3, #0]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d1e7      	bne.n	800a06a <USBD_GetString+0x6a>
 800a09a:	e000      	b.n	800a09e <USBD_GetString+0x9e>
    return;
 800a09c:	bf00      	nop
  }
}
 800a09e:	3718      	adds	r7, #24
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}

0800a0a4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b085      	sub	sp, #20
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a0b4:	e005      	b.n	800a0c2 <USBD_GetLen+0x1e>
  {
    len++;
 800a0b6:	7bfb      	ldrb	r3, [r7, #15]
 800a0b8:	3301      	adds	r3, #1
 800a0ba:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	3301      	adds	r3, #1
 800a0c0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	781b      	ldrb	r3, [r3, #0]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d1f5      	bne.n	800a0b6 <USBD_GetLen+0x12>
  }

  return len;
 800a0ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3714      	adds	r7, #20
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d6:	4770      	bx	lr

0800a0d8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b084      	sub	sp, #16
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	60f8      	str	r0, [r7, #12]
 800a0e0:	60b9      	str	r1, [r7, #8]
 800a0e2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	2202      	movs	r2, #2
 800a0e8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	687a      	ldr	r2, [r7, #4]
 800a0f0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	687a      	ldr	r2, [r7, #4]
 800a0f6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	68ba      	ldr	r2, [r7, #8]
 800a0fc:	2100      	movs	r1, #0
 800a0fe:	68f8      	ldr	r0, [r7, #12]
 800a100:	f000 fce7 	bl	800aad2 <USBD_LL_Transmit>

  return USBD_OK;
 800a104:	2300      	movs	r3, #0
}
 800a106:	4618      	mov	r0, r3
 800a108:	3710      	adds	r7, #16
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}

0800a10e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a10e:	b580      	push	{r7, lr}
 800a110:	b084      	sub	sp, #16
 800a112:	af00      	add	r7, sp, #0
 800a114:	60f8      	str	r0, [r7, #12]
 800a116:	60b9      	str	r1, [r7, #8]
 800a118:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	68ba      	ldr	r2, [r7, #8]
 800a11e:	2100      	movs	r1, #0
 800a120:	68f8      	ldr	r0, [r7, #12]
 800a122:	f000 fcd6 	bl	800aad2 <USBD_LL_Transmit>

  return USBD_OK;
 800a126:	2300      	movs	r3, #0
}
 800a128:	4618      	mov	r0, r3
 800a12a:	3710      	adds	r7, #16
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}

0800a130 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b084      	sub	sp, #16
 800a134:	af00      	add	r7, sp, #0
 800a136:	60f8      	str	r0, [r7, #12]
 800a138:	60b9      	str	r1, [r7, #8]
 800a13a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	2203      	movs	r2, #3
 800a140:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	687a      	ldr	r2, [r7, #4]
 800a148:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	687a      	ldr	r2, [r7, #4]
 800a150:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	68ba      	ldr	r2, [r7, #8]
 800a158:	2100      	movs	r1, #0
 800a15a:	68f8      	ldr	r0, [r7, #12]
 800a15c:	f000 fcda 	bl	800ab14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a160:	2300      	movs	r3, #0
}
 800a162:	4618      	mov	r0, r3
 800a164:	3710      	adds	r7, #16
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}

0800a16a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a16a:	b580      	push	{r7, lr}
 800a16c:	b084      	sub	sp, #16
 800a16e:	af00      	add	r7, sp, #0
 800a170:	60f8      	str	r0, [r7, #12]
 800a172:	60b9      	str	r1, [r7, #8]
 800a174:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	68ba      	ldr	r2, [r7, #8]
 800a17a:	2100      	movs	r1, #0
 800a17c:	68f8      	ldr	r0, [r7, #12]
 800a17e:	f000 fcc9 	bl	800ab14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a182:	2300      	movs	r3, #0
}
 800a184:	4618      	mov	r0, r3
 800a186:	3710      	adds	r7, #16
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b082      	sub	sp, #8
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2204      	movs	r2, #4
 800a198:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a19c:	2300      	movs	r3, #0
 800a19e:	2200      	movs	r2, #0
 800a1a0:	2100      	movs	r1, #0
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f000 fc95 	bl	800aad2 <USBD_LL_Transmit>

  return USBD_OK;
 800a1a8:	2300      	movs	r3, #0
}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	3708      	adds	r7, #8
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}

0800a1b2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a1b2:	b580      	push	{r7, lr}
 800a1b4:	b082      	sub	sp, #8
 800a1b6:	af00      	add	r7, sp, #0
 800a1b8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2205      	movs	r2, #5
 800a1be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	2100      	movs	r1, #0
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f000 fca3 	bl	800ab14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a1ce:	2300      	movs	r3, #0
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	3708      	adds	r7, #8
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}

0800a1d8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a1dc:	2200      	movs	r2, #0
 800a1de:	4912      	ldr	r1, [pc, #72]	@ (800a228 <MX_USB_DEVICE_Init+0x50>)
 800a1e0:	4812      	ldr	r0, [pc, #72]	@ (800a22c <MX_USB_DEVICE_Init+0x54>)
 800a1e2:	f7fe fcf7 	bl	8008bd4 <USBD_Init>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d001      	beq.n	800a1f0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a1ec:	f7f7 fcf2 	bl	8001bd4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a1f0:	490f      	ldr	r1, [pc, #60]	@ (800a230 <MX_USB_DEVICE_Init+0x58>)
 800a1f2:	480e      	ldr	r0, [pc, #56]	@ (800a22c <MX_USB_DEVICE_Init+0x54>)
 800a1f4:	f7fe fd1e 	bl	8008c34 <USBD_RegisterClass>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d001      	beq.n	800a202 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a1fe:	f7f7 fce9 	bl	8001bd4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a202:	490c      	ldr	r1, [pc, #48]	@ (800a234 <MX_USB_DEVICE_Init+0x5c>)
 800a204:	4809      	ldr	r0, [pc, #36]	@ (800a22c <MX_USB_DEVICE_Init+0x54>)
 800a206:	f7fe fc15 	bl	8008a34 <USBD_CDC_RegisterInterface>
 800a20a:	4603      	mov	r3, r0
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d001      	beq.n	800a214 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a210:	f7f7 fce0 	bl	8001bd4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a214:	4805      	ldr	r0, [pc, #20]	@ (800a22c <MX_USB_DEVICE_Init+0x54>)
 800a216:	f7fe fd43 	bl	8008ca0 <USBD_Start>
 800a21a:	4603      	mov	r3, r0
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d001      	beq.n	800a224 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a220:	f7f7 fcd8 	bl	8001bd4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a224:	bf00      	nop
 800a226:	bd80      	pop	{r7, pc}
 800a228:	200000ac 	.word	0x200000ac
 800a22c:	200004fc 	.word	0x200004fc
 800a230:	20000018 	.word	0x20000018
 800a234:	20000098 	.word	0x20000098

0800a238 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a23c:	2200      	movs	r2, #0
 800a23e:	4905      	ldr	r1, [pc, #20]	@ (800a254 <CDC_Init_FS+0x1c>)
 800a240:	4805      	ldr	r0, [pc, #20]	@ (800a258 <CDC_Init_FS+0x20>)
 800a242:	f7fe fc11 	bl	8008a68 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a246:	4905      	ldr	r1, [pc, #20]	@ (800a25c <CDC_Init_FS+0x24>)
 800a248:	4803      	ldr	r0, [pc, #12]	@ (800a258 <CDC_Init_FS+0x20>)
 800a24a:	f7fe fc2f 	bl	8008aac <USBD_CDC_SetRxBuffer>

  return (USBD_OK);
 800a24e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a250:	4618      	mov	r0, r3
 800a252:	bd80      	pop	{r7, pc}
 800a254:	20000fd8 	.word	0x20000fd8
 800a258:	200004fc 	.word	0x200004fc
 800a25c:	200007d8 	.word	0x200007d8

0800a260 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a260:	b480      	push	{r7}
 800a262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a264:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a266:	4618      	mov	r0, r3
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr

0800a270 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a270:	b480      	push	{r7}
 800a272:	b083      	sub	sp, #12
 800a274:	af00      	add	r7, sp, #0
 800a276:	4603      	mov	r3, r0
 800a278:	6039      	str	r1, [r7, #0]
 800a27a:	71fb      	strb	r3, [r7, #7]
 800a27c:	4613      	mov	r3, r2
 800a27e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a280:	79fb      	ldrb	r3, [r7, #7]
 800a282:	2b23      	cmp	r3, #35	@ 0x23
 800a284:	d84a      	bhi.n	800a31c <CDC_Control_FS+0xac>
 800a286:	a201      	add	r2, pc, #4	@ (adr r2, 800a28c <CDC_Control_FS+0x1c>)
 800a288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a28c:	0800a31d 	.word	0x0800a31d
 800a290:	0800a31d 	.word	0x0800a31d
 800a294:	0800a31d 	.word	0x0800a31d
 800a298:	0800a31d 	.word	0x0800a31d
 800a29c:	0800a31d 	.word	0x0800a31d
 800a2a0:	0800a31d 	.word	0x0800a31d
 800a2a4:	0800a31d 	.word	0x0800a31d
 800a2a8:	0800a31d 	.word	0x0800a31d
 800a2ac:	0800a31d 	.word	0x0800a31d
 800a2b0:	0800a31d 	.word	0x0800a31d
 800a2b4:	0800a31d 	.word	0x0800a31d
 800a2b8:	0800a31d 	.word	0x0800a31d
 800a2bc:	0800a31d 	.word	0x0800a31d
 800a2c0:	0800a31d 	.word	0x0800a31d
 800a2c4:	0800a31d 	.word	0x0800a31d
 800a2c8:	0800a31d 	.word	0x0800a31d
 800a2cc:	0800a31d 	.word	0x0800a31d
 800a2d0:	0800a31d 	.word	0x0800a31d
 800a2d4:	0800a31d 	.word	0x0800a31d
 800a2d8:	0800a31d 	.word	0x0800a31d
 800a2dc:	0800a31d 	.word	0x0800a31d
 800a2e0:	0800a31d 	.word	0x0800a31d
 800a2e4:	0800a31d 	.word	0x0800a31d
 800a2e8:	0800a31d 	.word	0x0800a31d
 800a2ec:	0800a31d 	.word	0x0800a31d
 800a2f0:	0800a31d 	.word	0x0800a31d
 800a2f4:	0800a31d 	.word	0x0800a31d
 800a2f8:	0800a31d 	.word	0x0800a31d
 800a2fc:	0800a31d 	.word	0x0800a31d
 800a300:	0800a31d 	.word	0x0800a31d
 800a304:	0800a31d 	.word	0x0800a31d
 800a308:	0800a31d 	.word	0x0800a31d
 800a30c:	0800a31d 	.word	0x0800a31d
 800a310:	0800a31d 	.word	0x0800a31d
 800a314:	0800a31d 	.word	0x0800a31d
 800a318:	0800a31d 	.word	0x0800a31d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a31c:	bf00      	nop
  }

  return (USBD_OK);
 800a31e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a320:	4618      	mov	r0, r3
 800a322:	370c      	adds	r7, #12
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr

0800a32c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b082      	sub	sp, #8
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a336:	6879      	ldr	r1, [r7, #4]
 800a338:	4808      	ldr	r0, [pc, #32]	@ (800a35c <CDC_Receive_FS+0x30>)
 800a33a:	f7fe fbb7 	bl	8008aac <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a33e:	4807      	ldr	r0, [pc, #28]	@ (800a35c <CDC_Receive_FS+0x30>)
 800a340:	f7fe fc12 	bl	8008b68 <USBD_CDC_ReceivePacket>
  CDC_ReceiveCallBack(Buf, Len[0]); // preguntar
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	4619      	mov	r1, r3
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f7f6 fcda 	bl	8000d04 <CDC_ReceiveCallBack>
  return (USBD_OK);
 800a350:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a352:	4618      	mov	r0, r3
 800a354:	3708      	adds	r7, #8
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}
 800a35a:	bf00      	nop
 800a35c:	200004fc 	.word	0x200004fc

0800a360 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b084      	sub	sp, #16
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	460b      	mov	r3, r1
 800a36a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a36c:	2300      	movs	r3, #0
 800a36e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a370:	4b0d      	ldr	r3, [pc, #52]	@ (800a3a8 <CDC_Transmit_FS+0x48>)
 800a372:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a376:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d001      	beq.n	800a386 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a382:	2301      	movs	r3, #1
 800a384:	e00b      	b.n	800a39e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a386:	887b      	ldrh	r3, [r7, #2]
 800a388:	461a      	mov	r2, r3
 800a38a:	6879      	ldr	r1, [r7, #4]
 800a38c:	4806      	ldr	r0, [pc, #24]	@ (800a3a8 <CDC_Transmit_FS+0x48>)
 800a38e:	f7fe fb6b 	bl	8008a68 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a392:	4805      	ldr	r0, [pc, #20]	@ (800a3a8 <CDC_Transmit_FS+0x48>)
 800a394:	f7fe fba8 	bl	8008ae8 <USBD_CDC_TransmitPacket>
 800a398:	4603      	mov	r3, r0
 800a39a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a39c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3710      	adds	r7, #16
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}
 800a3a6:	bf00      	nop
 800a3a8:	200004fc 	.word	0x200004fc

0800a3ac <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	b087      	sub	sp, #28
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	60f8      	str	r0, [r7, #12]
 800a3b4:	60b9      	str	r1, [r7, #8]
 800a3b6:	4613      	mov	r3, r2
 800a3b8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a3be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	371c      	adds	r7, #28
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3cc:	4770      	bx	lr
	...

0800a3d0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b083      	sub	sp, #12
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	6039      	str	r1, [r7, #0]
 800a3da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	2212      	movs	r2, #18
 800a3e0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a3e2:	4b03      	ldr	r3, [pc, #12]	@ (800a3f0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	370c      	adds	r7, #12
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ee:	4770      	bx	lr
 800a3f0:	200000c8 	.word	0x200000c8

0800a3f4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b083      	sub	sp, #12
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	6039      	str	r1, [r7, #0]
 800a3fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	2204      	movs	r2, #4
 800a404:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a406:	4b03      	ldr	r3, [pc, #12]	@ (800a414 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a408:	4618      	mov	r0, r3
 800a40a:	370c      	adds	r7, #12
 800a40c:	46bd      	mov	sp, r7
 800a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a412:	4770      	bx	lr
 800a414:	200000dc 	.word	0x200000dc

0800a418 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b082      	sub	sp, #8
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	4603      	mov	r3, r0
 800a420:	6039      	str	r1, [r7, #0]
 800a422:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a424:	79fb      	ldrb	r3, [r7, #7]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d105      	bne.n	800a436 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a42a:	683a      	ldr	r2, [r7, #0]
 800a42c:	4907      	ldr	r1, [pc, #28]	@ (800a44c <USBD_FS_ProductStrDescriptor+0x34>)
 800a42e:	4808      	ldr	r0, [pc, #32]	@ (800a450 <USBD_FS_ProductStrDescriptor+0x38>)
 800a430:	f7ff fde6 	bl	800a000 <USBD_GetString>
 800a434:	e004      	b.n	800a440 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a436:	683a      	ldr	r2, [r7, #0]
 800a438:	4904      	ldr	r1, [pc, #16]	@ (800a44c <USBD_FS_ProductStrDescriptor+0x34>)
 800a43a:	4805      	ldr	r0, [pc, #20]	@ (800a450 <USBD_FS_ProductStrDescriptor+0x38>)
 800a43c:	f7ff fde0 	bl	800a000 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a440:	4b02      	ldr	r3, [pc, #8]	@ (800a44c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a442:	4618      	mov	r0, r3
 800a444:	3708      	adds	r7, #8
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}
 800a44a:	bf00      	nop
 800a44c:	200017d8 	.word	0x200017d8
 800a450:	0800acd8 	.word	0x0800acd8

0800a454 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b082      	sub	sp, #8
 800a458:	af00      	add	r7, sp, #0
 800a45a:	4603      	mov	r3, r0
 800a45c:	6039      	str	r1, [r7, #0]
 800a45e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a460:	683a      	ldr	r2, [r7, #0]
 800a462:	4904      	ldr	r1, [pc, #16]	@ (800a474 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a464:	4804      	ldr	r0, [pc, #16]	@ (800a478 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a466:	f7ff fdcb 	bl	800a000 <USBD_GetString>
  return USBD_StrDesc;
 800a46a:	4b02      	ldr	r3, [pc, #8]	@ (800a474 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3708      	adds	r7, #8
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}
 800a474:	200017d8 	.word	0x200017d8
 800a478:	0800acf0 	.word	0x0800acf0

0800a47c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b082      	sub	sp, #8
 800a480:	af00      	add	r7, sp, #0
 800a482:	4603      	mov	r3, r0
 800a484:	6039      	str	r1, [r7, #0]
 800a486:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	221a      	movs	r2, #26
 800a48c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a48e:	f000 f843 	bl	800a518 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a492:	4b02      	ldr	r3, [pc, #8]	@ (800a49c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a494:	4618      	mov	r0, r3
 800a496:	3708      	adds	r7, #8
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}
 800a49c:	200000e0 	.word	0x200000e0

0800a4a0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b082      	sub	sp, #8
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	6039      	str	r1, [r7, #0]
 800a4aa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a4ac:	79fb      	ldrb	r3, [r7, #7]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d105      	bne.n	800a4be <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a4b2:	683a      	ldr	r2, [r7, #0]
 800a4b4:	4907      	ldr	r1, [pc, #28]	@ (800a4d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a4b6:	4808      	ldr	r0, [pc, #32]	@ (800a4d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a4b8:	f7ff fda2 	bl	800a000 <USBD_GetString>
 800a4bc:	e004      	b.n	800a4c8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a4be:	683a      	ldr	r2, [r7, #0]
 800a4c0:	4904      	ldr	r1, [pc, #16]	@ (800a4d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a4c2:	4805      	ldr	r0, [pc, #20]	@ (800a4d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a4c4:	f7ff fd9c 	bl	800a000 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a4c8:	4b02      	ldr	r3, [pc, #8]	@ (800a4d4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3708      	adds	r7, #8
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}
 800a4d2:	bf00      	nop
 800a4d4:	200017d8 	.word	0x200017d8
 800a4d8:	0800ad04 	.word	0x0800ad04

0800a4dc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b082      	sub	sp, #8
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	6039      	str	r1, [r7, #0]
 800a4e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a4e8:	79fb      	ldrb	r3, [r7, #7]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d105      	bne.n	800a4fa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a4ee:	683a      	ldr	r2, [r7, #0]
 800a4f0:	4907      	ldr	r1, [pc, #28]	@ (800a510 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a4f2:	4808      	ldr	r0, [pc, #32]	@ (800a514 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a4f4:	f7ff fd84 	bl	800a000 <USBD_GetString>
 800a4f8:	e004      	b.n	800a504 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a4fa:	683a      	ldr	r2, [r7, #0]
 800a4fc:	4904      	ldr	r1, [pc, #16]	@ (800a510 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a4fe:	4805      	ldr	r0, [pc, #20]	@ (800a514 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a500:	f7ff fd7e 	bl	800a000 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a504:	4b02      	ldr	r3, [pc, #8]	@ (800a510 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a506:	4618      	mov	r0, r3
 800a508:	3708      	adds	r7, #8
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}
 800a50e:	bf00      	nop
 800a510:	200017d8 	.word	0x200017d8
 800a514:	0800ad10 	.word	0x0800ad10

0800a518 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b084      	sub	sp, #16
 800a51c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a51e:	4b0f      	ldr	r3, [pc, #60]	@ (800a55c <Get_SerialNum+0x44>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a524:	4b0e      	ldr	r3, [pc, #56]	@ (800a560 <Get_SerialNum+0x48>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a52a:	4b0e      	ldr	r3, [pc, #56]	@ (800a564 <Get_SerialNum+0x4c>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a530:	68fa      	ldr	r2, [r7, #12]
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	4413      	add	r3, r2
 800a536:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d009      	beq.n	800a552 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a53e:	2208      	movs	r2, #8
 800a540:	4909      	ldr	r1, [pc, #36]	@ (800a568 <Get_SerialNum+0x50>)
 800a542:	68f8      	ldr	r0, [r7, #12]
 800a544:	f000 f814 	bl	800a570 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a548:	2204      	movs	r2, #4
 800a54a:	4908      	ldr	r1, [pc, #32]	@ (800a56c <Get_SerialNum+0x54>)
 800a54c:	68b8      	ldr	r0, [r7, #8]
 800a54e:	f000 f80f 	bl	800a570 <IntToUnicode>
  }
}
 800a552:	bf00      	nop
 800a554:	3710      	adds	r7, #16
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}
 800a55a:	bf00      	nop
 800a55c:	1fff7a10 	.word	0x1fff7a10
 800a560:	1fff7a14 	.word	0x1fff7a14
 800a564:	1fff7a18 	.word	0x1fff7a18
 800a568:	200000e2 	.word	0x200000e2
 800a56c:	200000f2 	.word	0x200000f2

0800a570 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a570:	b480      	push	{r7}
 800a572:	b087      	sub	sp, #28
 800a574:	af00      	add	r7, sp, #0
 800a576:	60f8      	str	r0, [r7, #12]
 800a578:	60b9      	str	r1, [r7, #8]
 800a57a:	4613      	mov	r3, r2
 800a57c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a57e:	2300      	movs	r3, #0
 800a580:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a582:	2300      	movs	r3, #0
 800a584:	75fb      	strb	r3, [r7, #23]
 800a586:	e027      	b.n	800a5d8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	0f1b      	lsrs	r3, r3, #28
 800a58c:	2b09      	cmp	r3, #9
 800a58e:	d80b      	bhi.n	800a5a8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	0f1b      	lsrs	r3, r3, #28
 800a594:	b2da      	uxtb	r2, r3
 800a596:	7dfb      	ldrb	r3, [r7, #23]
 800a598:	005b      	lsls	r3, r3, #1
 800a59a:	4619      	mov	r1, r3
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	440b      	add	r3, r1
 800a5a0:	3230      	adds	r2, #48	@ 0x30
 800a5a2:	b2d2      	uxtb	r2, r2
 800a5a4:	701a      	strb	r2, [r3, #0]
 800a5a6:	e00a      	b.n	800a5be <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	0f1b      	lsrs	r3, r3, #28
 800a5ac:	b2da      	uxtb	r2, r3
 800a5ae:	7dfb      	ldrb	r3, [r7, #23]
 800a5b0:	005b      	lsls	r3, r3, #1
 800a5b2:	4619      	mov	r1, r3
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	440b      	add	r3, r1
 800a5b8:	3237      	adds	r2, #55	@ 0x37
 800a5ba:	b2d2      	uxtb	r2, r2
 800a5bc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	011b      	lsls	r3, r3, #4
 800a5c2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a5c4:	7dfb      	ldrb	r3, [r7, #23]
 800a5c6:	005b      	lsls	r3, r3, #1
 800a5c8:	3301      	adds	r3, #1
 800a5ca:	68ba      	ldr	r2, [r7, #8]
 800a5cc:	4413      	add	r3, r2
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a5d2:	7dfb      	ldrb	r3, [r7, #23]
 800a5d4:	3301      	adds	r3, #1
 800a5d6:	75fb      	strb	r3, [r7, #23]
 800a5d8:	7dfa      	ldrb	r2, [r7, #23]
 800a5da:	79fb      	ldrb	r3, [r7, #7]
 800a5dc:	429a      	cmp	r2, r3
 800a5de:	d3d3      	bcc.n	800a588 <IntToUnicode+0x18>
  }
}
 800a5e0:	bf00      	nop
 800a5e2:	bf00      	nop
 800a5e4:	371c      	adds	r7, #28
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ec:	4770      	bx	lr
	...

0800a5f0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b08a      	sub	sp, #40	@ 0x28
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a5f8:	f107 0314 	add.w	r3, r7, #20
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	601a      	str	r2, [r3, #0]
 800a600:	605a      	str	r2, [r3, #4]
 800a602:	609a      	str	r2, [r3, #8]
 800a604:	60da      	str	r2, [r3, #12]
 800a606:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a610:	d13a      	bne.n	800a688 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a612:	2300      	movs	r3, #0
 800a614:	613b      	str	r3, [r7, #16]
 800a616:	4b1e      	ldr	r3, [pc, #120]	@ (800a690 <HAL_PCD_MspInit+0xa0>)
 800a618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a61a:	4a1d      	ldr	r2, [pc, #116]	@ (800a690 <HAL_PCD_MspInit+0xa0>)
 800a61c:	f043 0301 	orr.w	r3, r3, #1
 800a620:	6313      	str	r3, [r2, #48]	@ 0x30
 800a622:	4b1b      	ldr	r3, [pc, #108]	@ (800a690 <HAL_PCD_MspInit+0xa0>)
 800a624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a626:	f003 0301 	and.w	r3, r3, #1
 800a62a:	613b      	str	r3, [r7, #16]
 800a62c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a62e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800a632:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a634:	2302      	movs	r3, #2
 800a636:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a638:	2300      	movs	r3, #0
 800a63a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a63c:	2303      	movs	r3, #3
 800a63e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a640:	230a      	movs	r3, #10
 800a642:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a644:	f107 0314 	add.w	r3, r7, #20
 800a648:	4619      	mov	r1, r3
 800a64a:	4812      	ldr	r0, [pc, #72]	@ (800a694 <HAL_PCD_MspInit+0xa4>)
 800a64c:	f7f8 ffd2 	bl	80035f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a650:	4b0f      	ldr	r3, [pc, #60]	@ (800a690 <HAL_PCD_MspInit+0xa0>)
 800a652:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a654:	4a0e      	ldr	r2, [pc, #56]	@ (800a690 <HAL_PCD_MspInit+0xa0>)
 800a656:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a65a:	6353      	str	r3, [r2, #52]	@ 0x34
 800a65c:	2300      	movs	r3, #0
 800a65e:	60fb      	str	r3, [r7, #12]
 800a660:	4b0b      	ldr	r3, [pc, #44]	@ (800a690 <HAL_PCD_MspInit+0xa0>)
 800a662:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a664:	4a0a      	ldr	r2, [pc, #40]	@ (800a690 <HAL_PCD_MspInit+0xa0>)
 800a666:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a66a:	6453      	str	r3, [r2, #68]	@ 0x44
 800a66c:	4b08      	ldr	r3, [pc, #32]	@ (800a690 <HAL_PCD_MspInit+0xa0>)
 800a66e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a670:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a674:	60fb      	str	r3, [r7, #12]
 800a676:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a678:	2200      	movs	r2, #0
 800a67a:	2100      	movs	r1, #0
 800a67c:	2043      	movs	r0, #67	@ 0x43
 800a67e:	f7f8 fc12 	bl	8002ea6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a682:	2043      	movs	r0, #67	@ 0x43
 800a684:	f7f8 fc2b 	bl	8002ede <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a688:	bf00      	nop
 800a68a:	3728      	adds	r7, #40	@ 0x28
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}
 800a690:	40023800 	.word	0x40023800
 800a694:	40020000 	.word	0x40020000

0800a698 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b082      	sub	sp, #8
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a6ac:	4619      	mov	r1, r3
 800a6ae:	4610      	mov	r0, r2
 800a6b0:	f7fe fb43 	bl	8008d3a <USBD_LL_SetupStage>
}
 800a6b4:	bf00      	nop
 800a6b6:	3708      	adds	r7, #8
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}

0800a6bc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b082      	sub	sp, #8
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	460b      	mov	r3, r1
 800a6c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a6ce:	78fa      	ldrb	r2, [r7, #3]
 800a6d0:	6879      	ldr	r1, [r7, #4]
 800a6d2:	4613      	mov	r3, r2
 800a6d4:	00db      	lsls	r3, r3, #3
 800a6d6:	4413      	add	r3, r2
 800a6d8:	009b      	lsls	r3, r3, #2
 800a6da:	440b      	add	r3, r1
 800a6dc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a6e0:	681a      	ldr	r2, [r3, #0]
 800a6e2:	78fb      	ldrb	r3, [r7, #3]
 800a6e4:	4619      	mov	r1, r3
 800a6e6:	f7fe fb7d 	bl	8008de4 <USBD_LL_DataOutStage>
}
 800a6ea:	bf00      	nop
 800a6ec:	3708      	adds	r7, #8
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}

0800a6f2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6f2:	b580      	push	{r7, lr}
 800a6f4:	b082      	sub	sp, #8
 800a6f6:	af00      	add	r7, sp, #0
 800a6f8:	6078      	str	r0, [r7, #4]
 800a6fa:	460b      	mov	r3, r1
 800a6fc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a704:	78fa      	ldrb	r2, [r7, #3]
 800a706:	6879      	ldr	r1, [r7, #4]
 800a708:	4613      	mov	r3, r2
 800a70a:	00db      	lsls	r3, r3, #3
 800a70c:	4413      	add	r3, r2
 800a70e:	009b      	lsls	r3, r3, #2
 800a710:	440b      	add	r3, r1
 800a712:	3320      	adds	r3, #32
 800a714:	681a      	ldr	r2, [r3, #0]
 800a716:	78fb      	ldrb	r3, [r7, #3]
 800a718:	4619      	mov	r1, r3
 800a71a:	f7fe fc16 	bl	8008f4a <USBD_LL_DataInStage>
}
 800a71e:	bf00      	nop
 800a720:	3708      	adds	r7, #8
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}

0800a726 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a726:	b580      	push	{r7, lr}
 800a728:	b082      	sub	sp, #8
 800a72a:	af00      	add	r7, sp, #0
 800a72c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a734:	4618      	mov	r0, r3
 800a736:	f7fe fd50 	bl	80091da <USBD_LL_SOF>
}
 800a73a:	bf00      	nop
 800a73c:	3708      	adds	r7, #8
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}

0800a742 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a742:	b580      	push	{r7, lr}
 800a744:	b084      	sub	sp, #16
 800a746:	af00      	add	r7, sp, #0
 800a748:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a74a:	2301      	movs	r3, #1
 800a74c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	79db      	ldrb	r3, [r3, #7]
 800a752:	2b02      	cmp	r3, #2
 800a754:	d001      	beq.n	800a75a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a756:	f7f7 fa3d 	bl	8001bd4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a760:	7bfa      	ldrb	r2, [r7, #15]
 800a762:	4611      	mov	r1, r2
 800a764:	4618      	mov	r0, r3
 800a766:	f7fe fcf4 	bl	8009152 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a770:	4618      	mov	r0, r3
 800a772:	f7fe fc9c 	bl	80090ae <USBD_LL_Reset>
}
 800a776:	bf00      	nop
 800a778:	3710      	adds	r7, #16
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}
	...

0800a780 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b082      	sub	sp, #8
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a78e:	4618      	mov	r0, r3
 800a790:	f7fe fcef 	bl	8009172 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	687a      	ldr	r2, [r7, #4]
 800a7a0:	6812      	ldr	r2, [r2, #0]
 800a7a2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a7a6:	f043 0301 	orr.w	r3, r3, #1
 800a7aa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	7adb      	ldrb	r3, [r3, #11]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d005      	beq.n	800a7c0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a7b4:	4b04      	ldr	r3, [pc, #16]	@ (800a7c8 <HAL_PCD_SuspendCallback+0x48>)
 800a7b6:	691b      	ldr	r3, [r3, #16]
 800a7b8:	4a03      	ldr	r2, [pc, #12]	@ (800a7c8 <HAL_PCD_SuspendCallback+0x48>)
 800a7ba:	f043 0306 	orr.w	r3, r3, #6
 800a7be:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a7c0:	bf00      	nop
 800a7c2:	3708      	adds	r7, #8
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}
 800a7c8:	e000ed00 	.word	0xe000ed00

0800a7cc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b082      	sub	sp, #8
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f7fe fce5 	bl	80091aa <USBD_LL_Resume>
}
 800a7e0:	bf00      	nop
 800a7e2:	3708      	adds	r7, #8
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}

0800a7e8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b082      	sub	sp, #8
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
 800a7f0:	460b      	mov	r3, r1
 800a7f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a7fa:	78fa      	ldrb	r2, [r7, #3]
 800a7fc:	4611      	mov	r1, r2
 800a7fe:	4618      	mov	r0, r3
 800a800:	f7fe fd3d 	bl	800927e <USBD_LL_IsoOUTIncomplete>
}
 800a804:	bf00      	nop
 800a806:	3708      	adds	r7, #8
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b082      	sub	sp, #8
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
 800a814:	460b      	mov	r3, r1
 800a816:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a81e:	78fa      	ldrb	r2, [r7, #3]
 800a820:	4611      	mov	r1, r2
 800a822:	4618      	mov	r0, r3
 800a824:	f7fe fcf9 	bl	800921a <USBD_LL_IsoINIncomplete>
}
 800a828:	bf00      	nop
 800a82a:	3708      	adds	r7, #8
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}

0800a830 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b082      	sub	sp, #8
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a83e:	4618      	mov	r0, r3
 800a840:	f7fe fd4f 	bl	80092e2 <USBD_LL_DevConnected>
}
 800a844:	bf00      	nop
 800a846:	3708      	adds	r7, #8
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}

0800a84c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b082      	sub	sp, #8
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a85a:	4618      	mov	r0, r3
 800a85c:	f7fe fd4c 	bl	80092f8 <USBD_LL_DevDisconnected>
}
 800a860:	bf00      	nop
 800a862:	3708      	adds	r7, #8
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}

0800a868 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b082      	sub	sp, #8
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	781b      	ldrb	r3, [r3, #0]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d13c      	bne.n	800a8f2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a878:	4a20      	ldr	r2, [pc, #128]	@ (800a8fc <USBD_LL_Init+0x94>)
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	4a1e      	ldr	r2, [pc, #120]	@ (800a8fc <USBD_LL_Init+0x94>)
 800a884:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a888:	4b1c      	ldr	r3, [pc, #112]	@ (800a8fc <USBD_LL_Init+0x94>)
 800a88a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a88e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a890:	4b1a      	ldr	r3, [pc, #104]	@ (800a8fc <USBD_LL_Init+0x94>)
 800a892:	2204      	movs	r2, #4
 800a894:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a896:	4b19      	ldr	r3, [pc, #100]	@ (800a8fc <USBD_LL_Init+0x94>)
 800a898:	2202      	movs	r2, #2
 800a89a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a89c:	4b17      	ldr	r3, [pc, #92]	@ (800a8fc <USBD_LL_Init+0x94>)
 800a89e:	2200      	movs	r2, #0
 800a8a0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a8a2:	4b16      	ldr	r3, [pc, #88]	@ (800a8fc <USBD_LL_Init+0x94>)
 800a8a4:	2202      	movs	r2, #2
 800a8a6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a8a8:	4b14      	ldr	r3, [pc, #80]	@ (800a8fc <USBD_LL_Init+0x94>)
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a8ae:	4b13      	ldr	r3, [pc, #76]	@ (800a8fc <USBD_LL_Init+0x94>)
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a8b4:	4b11      	ldr	r3, [pc, #68]	@ (800a8fc <USBD_LL_Init+0x94>)
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a8ba:	4b10      	ldr	r3, [pc, #64]	@ (800a8fc <USBD_LL_Init+0x94>)
 800a8bc:	2200      	movs	r2, #0
 800a8be:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a8c0:	4b0e      	ldr	r3, [pc, #56]	@ (800a8fc <USBD_LL_Init+0x94>)
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a8c6:	480d      	ldr	r0, [pc, #52]	@ (800a8fc <USBD_LL_Init+0x94>)
 800a8c8:	f7f9 f990 	bl	8003bec <HAL_PCD_Init>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d001      	beq.n	800a8d6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a8d2:	f7f7 f97f 	bl	8001bd4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a8d6:	2180      	movs	r1, #128	@ 0x80
 800a8d8:	4808      	ldr	r0, [pc, #32]	@ (800a8fc <USBD_LL_Init+0x94>)
 800a8da:	f7fa fbbc 	bl	8005056 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a8de:	2240      	movs	r2, #64	@ 0x40
 800a8e0:	2100      	movs	r1, #0
 800a8e2:	4806      	ldr	r0, [pc, #24]	@ (800a8fc <USBD_LL_Init+0x94>)
 800a8e4:	f7fa fb70 	bl	8004fc8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a8e8:	2280      	movs	r2, #128	@ 0x80
 800a8ea:	2101      	movs	r1, #1
 800a8ec:	4803      	ldr	r0, [pc, #12]	@ (800a8fc <USBD_LL_Init+0x94>)
 800a8ee:	f7fa fb6b 	bl	8004fc8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a8f2:	2300      	movs	r3, #0
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3708      	adds	r7, #8
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}
 800a8fc:	200019d8 	.word	0x200019d8

0800a900 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b084      	sub	sp, #16
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a908:	2300      	movs	r3, #0
 800a90a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a90c:	2300      	movs	r3, #0
 800a90e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a916:	4618      	mov	r0, r3
 800a918:	f7f9 fa77 	bl	8003e0a <HAL_PCD_Start>
 800a91c:	4603      	mov	r3, r0
 800a91e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a920:	7bfb      	ldrb	r3, [r7, #15]
 800a922:	4618      	mov	r0, r3
 800a924:	f000 f942 	bl	800abac <USBD_Get_USB_Status>
 800a928:	4603      	mov	r3, r0
 800a92a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a92c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3710      	adds	r7, #16
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}

0800a936 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a936:	b580      	push	{r7, lr}
 800a938:	b084      	sub	sp, #16
 800a93a:	af00      	add	r7, sp, #0
 800a93c:	6078      	str	r0, [r7, #4]
 800a93e:	4608      	mov	r0, r1
 800a940:	4611      	mov	r1, r2
 800a942:	461a      	mov	r2, r3
 800a944:	4603      	mov	r3, r0
 800a946:	70fb      	strb	r3, [r7, #3]
 800a948:	460b      	mov	r3, r1
 800a94a:	70bb      	strb	r3, [r7, #2]
 800a94c:	4613      	mov	r3, r2
 800a94e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a950:	2300      	movs	r3, #0
 800a952:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a954:	2300      	movs	r3, #0
 800a956:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a95e:	78bb      	ldrb	r3, [r7, #2]
 800a960:	883a      	ldrh	r2, [r7, #0]
 800a962:	78f9      	ldrb	r1, [r7, #3]
 800a964:	f7f9 ff4b 	bl	80047fe <HAL_PCD_EP_Open>
 800a968:	4603      	mov	r3, r0
 800a96a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a96c:	7bfb      	ldrb	r3, [r7, #15]
 800a96e:	4618      	mov	r0, r3
 800a970:	f000 f91c 	bl	800abac <USBD_Get_USB_Status>
 800a974:	4603      	mov	r3, r0
 800a976:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a978:	7bbb      	ldrb	r3, [r7, #14]
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3710      	adds	r7, #16
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}

0800a982 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a982:	b580      	push	{r7, lr}
 800a984:	b084      	sub	sp, #16
 800a986:	af00      	add	r7, sp, #0
 800a988:	6078      	str	r0, [r7, #4]
 800a98a:	460b      	mov	r3, r1
 800a98c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a98e:	2300      	movs	r3, #0
 800a990:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a992:	2300      	movs	r3, #0
 800a994:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a99c:	78fa      	ldrb	r2, [r7, #3]
 800a99e:	4611      	mov	r1, r2
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f7f9 ff96 	bl	80048d2 <HAL_PCD_EP_Close>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9aa:	7bfb      	ldrb	r3, [r7, #15]
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f000 f8fd 	bl	800abac <USBD_Get_USB_Status>
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	3710      	adds	r7, #16
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd80      	pop	{r7, pc}

0800a9c0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b084      	sub	sp, #16
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
 800a9c8:	460b      	mov	r3, r1
 800a9ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a9da:	78fa      	ldrb	r2, [r7, #3]
 800a9dc:	4611      	mov	r1, r2
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f7fa f84e 	bl	8004a80 <HAL_PCD_EP_SetStall>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9e8:	7bfb      	ldrb	r3, [r7, #15]
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f000 f8de 	bl	800abac <USBD_Get_USB_Status>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3710      	adds	r7, #16
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}

0800a9fe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9fe:	b580      	push	{r7, lr}
 800aa00:	b084      	sub	sp, #16
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	6078      	str	r0, [r7, #4]
 800aa06:	460b      	mov	r3, r1
 800aa08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aa18:	78fa      	ldrb	r2, [r7, #3]
 800aa1a:	4611      	mov	r1, r2
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f7fa f892 	bl	8004b46 <HAL_PCD_EP_ClrStall>
 800aa22:	4603      	mov	r3, r0
 800aa24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa26:	7bfb      	ldrb	r3, [r7, #15]
 800aa28:	4618      	mov	r0, r3
 800aa2a:	f000 f8bf 	bl	800abac <USBD_Get_USB_Status>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa32:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	3710      	adds	r7, #16
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}

0800aa3c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	b085      	sub	sp, #20
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
 800aa44:	460b      	mov	r3, r1
 800aa46:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aa4e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aa50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	da0b      	bge.n	800aa70 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aa58:	78fb      	ldrb	r3, [r7, #3]
 800aa5a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aa5e:	68f9      	ldr	r1, [r7, #12]
 800aa60:	4613      	mov	r3, r2
 800aa62:	00db      	lsls	r3, r3, #3
 800aa64:	4413      	add	r3, r2
 800aa66:	009b      	lsls	r3, r3, #2
 800aa68:	440b      	add	r3, r1
 800aa6a:	3316      	adds	r3, #22
 800aa6c:	781b      	ldrb	r3, [r3, #0]
 800aa6e:	e00b      	b.n	800aa88 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800aa70:	78fb      	ldrb	r3, [r7, #3]
 800aa72:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aa76:	68f9      	ldr	r1, [r7, #12]
 800aa78:	4613      	mov	r3, r2
 800aa7a:	00db      	lsls	r3, r3, #3
 800aa7c:	4413      	add	r3, r2
 800aa7e:	009b      	lsls	r3, r3, #2
 800aa80:	440b      	add	r3, r1
 800aa82:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800aa86:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3714      	adds	r7, #20
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa92:	4770      	bx	lr

0800aa94 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b084      	sub	sp, #16
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
 800aa9c:	460b      	mov	r3, r1
 800aa9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aaae:	78fa      	ldrb	r2, [r7, #3]
 800aab0:	4611      	mov	r1, r2
 800aab2:	4618      	mov	r0, r3
 800aab4:	f7f9 fe7f 	bl	80047b6 <HAL_PCD_SetAddress>
 800aab8:	4603      	mov	r3, r0
 800aaba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aabc:	7bfb      	ldrb	r3, [r7, #15]
 800aabe:	4618      	mov	r0, r3
 800aac0:	f000 f874 	bl	800abac <USBD_Get_USB_Status>
 800aac4:	4603      	mov	r3, r0
 800aac6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aac8:	7bbb      	ldrb	r3, [r7, #14]
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	3710      	adds	r7, #16
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}

0800aad2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aad2:	b580      	push	{r7, lr}
 800aad4:	b086      	sub	sp, #24
 800aad6:	af00      	add	r7, sp, #0
 800aad8:	60f8      	str	r0, [r7, #12]
 800aada:	607a      	str	r2, [r7, #4]
 800aadc:	603b      	str	r3, [r7, #0]
 800aade:	460b      	mov	r3, r1
 800aae0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aae2:	2300      	movs	r3, #0
 800aae4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aae6:	2300      	movs	r3, #0
 800aae8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800aaf0:	7af9      	ldrb	r1, [r7, #11]
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	687a      	ldr	r2, [r7, #4]
 800aaf6:	f7f9 ff89 	bl	8004a0c <HAL_PCD_EP_Transmit>
 800aafa:	4603      	mov	r3, r0
 800aafc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aafe:	7dfb      	ldrb	r3, [r7, #23]
 800ab00:	4618      	mov	r0, r3
 800ab02:	f000 f853 	bl	800abac <USBD_Get_USB_Status>
 800ab06:	4603      	mov	r3, r0
 800ab08:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ab0a:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3718      	adds	r7, #24
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}

0800ab14 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b086      	sub	sp, #24
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	60f8      	str	r0, [r7, #12]
 800ab1c:	607a      	str	r2, [r7, #4]
 800ab1e:	603b      	str	r3, [r7, #0]
 800ab20:	460b      	mov	r3, r1
 800ab22:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab24:	2300      	movs	r3, #0
 800ab26:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ab32:	7af9      	ldrb	r1, [r7, #11]
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	687a      	ldr	r2, [r7, #4]
 800ab38:	f7f9 ff15 	bl	8004966 <HAL_PCD_EP_Receive>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab40:	7dfb      	ldrb	r3, [r7, #23]
 800ab42:	4618      	mov	r0, r3
 800ab44:	f000 f832 	bl	800abac <USBD_Get_USB_Status>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ab4c:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	3718      	adds	r7, #24
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}

0800ab56 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab56:	b580      	push	{r7, lr}
 800ab58:	b082      	sub	sp, #8
 800ab5a:	af00      	add	r7, sp, #0
 800ab5c:	6078      	str	r0, [r7, #4]
 800ab5e:	460b      	mov	r3, r1
 800ab60:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ab68:	78fa      	ldrb	r2, [r7, #3]
 800ab6a:	4611      	mov	r1, r2
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f7f9 ff35 	bl	80049dc <HAL_PCD_EP_GetRxCount>
 800ab72:	4603      	mov	r3, r0
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	3708      	adds	r7, #8
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}

0800ab7c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b083      	sub	sp, #12
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ab84:	4b03      	ldr	r3, [pc, #12]	@ (800ab94 <USBD_static_malloc+0x18>)
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	370c      	adds	r7, #12
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab90:	4770      	bx	lr
 800ab92:	bf00      	nop
 800ab94:	20001ebc 	.word	0x20001ebc

0800ab98 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b083      	sub	sp, #12
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]

}
 800aba0:	bf00      	nop
 800aba2:	370c      	adds	r7, #12
 800aba4:	46bd      	mov	sp, r7
 800aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abaa:	4770      	bx	lr

0800abac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800abac:	b480      	push	{r7}
 800abae:	b085      	sub	sp, #20
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	4603      	mov	r3, r0
 800abb4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abb6:	2300      	movs	r3, #0
 800abb8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800abba:	79fb      	ldrb	r3, [r7, #7]
 800abbc:	2b03      	cmp	r3, #3
 800abbe:	d817      	bhi.n	800abf0 <USBD_Get_USB_Status+0x44>
 800abc0:	a201      	add	r2, pc, #4	@ (adr r2, 800abc8 <USBD_Get_USB_Status+0x1c>)
 800abc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abc6:	bf00      	nop
 800abc8:	0800abd9 	.word	0x0800abd9
 800abcc:	0800abdf 	.word	0x0800abdf
 800abd0:	0800abe5 	.word	0x0800abe5
 800abd4:	0800abeb 	.word	0x0800abeb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800abd8:	2300      	movs	r3, #0
 800abda:	73fb      	strb	r3, [r7, #15]
    break;
 800abdc:	e00b      	b.n	800abf6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800abde:	2303      	movs	r3, #3
 800abe0:	73fb      	strb	r3, [r7, #15]
    break;
 800abe2:	e008      	b.n	800abf6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800abe4:	2301      	movs	r3, #1
 800abe6:	73fb      	strb	r3, [r7, #15]
    break;
 800abe8:	e005      	b.n	800abf6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800abea:	2303      	movs	r3, #3
 800abec:	73fb      	strb	r3, [r7, #15]
    break;
 800abee:	e002      	b.n	800abf6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800abf0:	2303      	movs	r3, #3
 800abf2:	73fb      	strb	r3, [r7, #15]
    break;
 800abf4:	bf00      	nop
  }
  return usb_status;
 800abf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	3714      	adds	r7, #20
 800abfc:	46bd      	mov	sp, r7
 800abfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac02:	4770      	bx	lr

0800ac04 <memset>:
 800ac04:	4402      	add	r2, r0
 800ac06:	4603      	mov	r3, r0
 800ac08:	4293      	cmp	r3, r2
 800ac0a:	d100      	bne.n	800ac0e <memset+0xa>
 800ac0c:	4770      	bx	lr
 800ac0e:	f803 1b01 	strb.w	r1, [r3], #1
 800ac12:	e7f9      	b.n	800ac08 <memset+0x4>

0800ac14 <__libc_init_array>:
 800ac14:	b570      	push	{r4, r5, r6, lr}
 800ac16:	4d0d      	ldr	r5, [pc, #52]	@ (800ac4c <__libc_init_array+0x38>)
 800ac18:	4c0d      	ldr	r4, [pc, #52]	@ (800ac50 <__libc_init_array+0x3c>)
 800ac1a:	1b64      	subs	r4, r4, r5
 800ac1c:	10a4      	asrs	r4, r4, #2
 800ac1e:	2600      	movs	r6, #0
 800ac20:	42a6      	cmp	r6, r4
 800ac22:	d109      	bne.n	800ac38 <__libc_init_array+0x24>
 800ac24:	4d0b      	ldr	r5, [pc, #44]	@ (800ac54 <__libc_init_array+0x40>)
 800ac26:	4c0c      	ldr	r4, [pc, #48]	@ (800ac58 <__libc_init_array+0x44>)
 800ac28:	f000 f84a 	bl	800acc0 <_init>
 800ac2c:	1b64      	subs	r4, r4, r5
 800ac2e:	10a4      	asrs	r4, r4, #2
 800ac30:	2600      	movs	r6, #0
 800ac32:	42a6      	cmp	r6, r4
 800ac34:	d105      	bne.n	800ac42 <__libc_init_array+0x2e>
 800ac36:	bd70      	pop	{r4, r5, r6, pc}
 800ac38:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac3c:	4798      	blx	r3
 800ac3e:	3601      	adds	r6, #1
 800ac40:	e7ee      	b.n	800ac20 <__libc_init_array+0xc>
 800ac42:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac46:	4798      	blx	r3
 800ac48:	3601      	adds	r6, #1
 800ac4a:	e7f2      	b.n	800ac32 <__libc_init_array+0x1e>
 800ac4c:	0800ad48 	.word	0x0800ad48
 800ac50:	0800ad48 	.word	0x0800ad48
 800ac54:	0800ad48 	.word	0x0800ad48
 800ac58:	0800ad4c 	.word	0x0800ad4c

0800ac5c <memcpy>:
 800ac5c:	440a      	add	r2, r1
 800ac5e:	4291      	cmp	r1, r2
 800ac60:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac64:	d100      	bne.n	800ac68 <memcpy+0xc>
 800ac66:	4770      	bx	lr
 800ac68:	b510      	push	{r4, lr}
 800ac6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac72:	4291      	cmp	r1, r2
 800ac74:	d1f9      	bne.n	800ac6a <memcpy+0xe>
 800ac76:	bd10      	pop	{r4, pc}

0800ac78 <roundf>:
 800ac78:	ee10 0a10 	vmov	r0, s0
 800ac7c:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800ac80:	3a7f      	subs	r2, #127	@ 0x7f
 800ac82:	2a16      	cmp	r2, #22
 800ac84:	dc15      	bgt.n	800acb2 <roundf+0x3a>
 800ac86:	2a00      	cmp	r2, #0
 800ac88:	da08      	bge.n	800ac9c <roundf+0x24>
 800ac8a:	3201      	adds	r2, #1
 800ac8c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800ac90:	d101      	bne.n	800ac96 <roundf+0x1e>
 800ac92:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 800ac96:	ee00 3a10 	vmov	s0, r3
 800ac9a:	4770      	bx	lr
 800ac9c:	4907      	ldr	r1, [pc, #28]	@ (800acbc <roundf+0x44>)
 800ac9e:	4111      	asrs	r1, r2
 800aca0:	4201      	tst	r1, r0
 800aca2:	d0fa      	beq.n	800ac9a <roundf+0x22>
 800aca4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800aca8:	4113      	asrs	r3, r2
 800acaa:	4403      	add	r3, r0
 800acac:	ea23 0301 	bic.w	r3, r3, r1
 800acb0:	e7f1      	b.n	800ac96 <roundf+0x1e>
 800acb2:	2a80      	cmp	r2, #128	@ 0x80
 800acb4:	d1f1      	bne.n	800ac9a <roundf+0x22>
 800acb6:	ee30 0a00 	vadd.f32	s0, s0, s0
 800acba:	4770      	bx	lr
 800acbc:	007fffff 	.word	0x007fffff

0800acc0 <_init>:
 800acc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acc2:	bf00      	nop
 800acc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acc6:	bc08      	pop	{r3}
 800acc8:	469e      	mov	lr, r3
 800acca:	4770      	bx	lr

0800accc <_fini>:
 800accc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acce:	bf00      	nop
 800acd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acd2:	bc08      	pop	{r3}
 800acd4:	469e      	mov	lr, r3
 800acd6:	4770      	bx	lr
