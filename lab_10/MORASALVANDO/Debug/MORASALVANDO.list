
MORASALVANDO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cabc  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  0800cc54  0800cc54  0000dc54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d090  0800d090  0000f174  2**0
                  CONTENTS
  4 .ARM          00000008  0800d090  0800d090  0000e090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d098  0800d098  0000f174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d098  0800d098  0000e098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d09c  0800d09c  0000e09c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000174  20000000  0800d0a0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000221c  20000174  0800d214  0000f174  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002390  0800d214  0000f390  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f174  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a326  00000000  00000000  0000f1a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fce  00000000  00000000  000294ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a0  00000000  00000000  0002d498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000117f  00000000  00000000  0002eb38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000054e4  00000000  00000000  0002fcb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dca5  00000000  00000000  0003519b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f42e  00000000  00000000  00052e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f226e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006574  00000000  00000000  000f22b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000f8828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000174 	.word	0x20000174
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800cc3c 	.word	0x0800cc3c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000178 	.word	0x20000178
 80001d4:	0800cc3c 	.word	0x0800cc3c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_uldivmod>:
 8000b50:	b953      	cbnz	r3, 8000b68 <__aeabi_uldivmod+0x18>
 8000b52:	b94a      	cbnz	r2, 8000b68 <__aeabi_uldivmod+0x18>
 8000b54:	2900      	cmp	r1, #0
 8000b56:	bf08      	it	eq
 8000b58:	2800      	cmpeq	r0, #0
 8000b5a:	bf1c      	itt	ne
 8000b5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b60:	f04f 30ff 	movne.w	r0, #4294967295
 8000b64:	f000 b96a 	b.w	8000e3c <__aeabi_idiv0>
 8000b68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b70:	f000 f806 	bl	8000b80 <__udivmoddi4>
 8000b74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b7c:	b004      	add	sp, #16
 8000b7e:	4770      	bx	lr

08000b80 <__udivmoddi4>:
 8000b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b84:	9d08      	ldr	r5, [sp, #32]
 8000b86:	460c      	mov	r4, r1
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d14e      	bne.n	8000c2a <__udivmoddi4+0xaa>
 8000b8c:	4694      	mov	ip, r2
 8000b8e:	458c      	cmp	ip, r1
 8000b90:	4686      	mov	lr, r0
 8000b92:	fab2 f282 	clz	r2, r2
 8000b96:	d962      	bls.n	8000c5e <__udivmoddi4+0xde>
 8000b98:	b14a      	cbz	r2, 8000bae <__udivmoddi4+0x2e>
 8000b9a:	f1c2 0320 	rsb	r3, r2, #32
 8000b9e:	4091      	lsls	r1, r2
 8000ba0:	fa20 f303 	lsr.w	r3, r0, r3
 8000ba4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ba8:	4319      	orrs	r1, r3
 8000baa:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bb2:	fa1f f68c 	uxth.w	r6, ip
 8000bb6:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bbe:	fb07 1114 	mls	r1, r7, r4, r1
 8000bc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bc6:	fb04 f106 	mul.w	r1, r4, r6
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	d90a      	bls.n	8000be4 <__udivmoddi4+0x64>
 8000bce:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd2:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bd6:	f080 8112 	bcs.w	8000dfe <__udivmoddi4+0x27e>
 8000bda:	4299      	cmp	r1, r3
 8000bdc:	f240 810f 	bls.w	8000dfe <__udivmoddi4+0x27e>
 8000be0:	3c02      	subs	r4, #2
 8000be2:	4463      	add	r3, ip
 8000be4:	1a59      	subs	r1, r3, r1
 8000be6:	fa1f f38e 	uxth.w	r3, lr
 8000bea:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bee:	fb07 1110 	mls	r1, r7, r0, r1
 8000bf2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf6:	fb00 f606 	mul.w	r6, r0, r6
 8000bfa:	429e      	cmp	r6, r3
 8000bfc:	d90a      	bls.n	8000c14 <__udivmoddi4+0x94>
 8000bfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000c02:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c06:	f080 80fc 	bcs.w	8000e02 <__udivmoddi4+0x282>
 8000c0a:	429e      	cmp	r6, r3
 8000c0c:	f240 80f9 	bls.w	8000e02 <__udivmoddi4+0x282>
 8000c10:	4463      	add	r3, ip
 8000c12:	3802      	subs	r0, #2
 8000c14:	1b9b      	subs	r3, r3, r6
 8000c16:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	b11d      	cbz	r5, 8000c26 <__udivmoddi4+0xa6>
 8000c1e:	40d3      	lsrs	r3, r2
 8000c20:	2200      	movs	r2, #0
 8000c22:	e9c5 3200 	strd	r3, r2, [r5]
 8000c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2a:	428b      	cmp	r3, r1
 8000c2c:	d905      	bls.n	8000c3a <__udivmoddi4+0xba>
 8000c2e:	b10d      	cbz	r5, 8000c34 <__udivmoddi4+0xb4>
 8000c30:	e9c5 0100 	strd	r0, r1, [r5]
 8000c34:	2100      	movs	r1, #0
 8000c36:	4608      	mov	r0, r1
 8000c38:	e7f5      	b.n	8000c26 <__udivmoddi4+0xa6>
 8000c3a:	fab3 f183 	clz	r1, r3
 8000c3e:	2900      	cmp	r1, #0
 8000c40:	d146      	bne.n	8000cd0 <__udivmoddi4+0x150>
 8000c42:	42a3      	cmp	r3, r4
 8000c44:	d302      	bcc.n	8000c4c <__udivmoddi4+0xcc>
 8000c46:	4290      	cmp	r0, r2
 8000c48:	f0c0 80f0 	bcc.w	8000e2c <__udivmoddi4+0x2ac>
 8000c4c:	1a86      	subs	r6, r0, r2
 8000c4e:	eb64 0303 	sbc.w	r3, r4, r3
 8000c52:	2001      	movs	r0, #1
 8000c54:	2d00      	cmp	r5, #0
 8000c56:	d0e6      	beq.n	8000c26 <__udivmoddi4+0xa6>
 8000c58:	e9c5 6300 	strd	r6, r3, [r5]
 8000c5c:	e7e3      	b.n	8000c26 <__udivmoddi4+0xa6>
 8000c5e:	2a00      	cmp	r2, #0
 8000c60:	f040 8090 	bne.w	8000d84 <__udivmoddi4+0x204>
 8000c64:	eba1 040c 	sub.w	r4, r1, ip
 8000c68:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c6c:	fa1f f78c 	uxth.w	r7, ip
 8000c70:	2101      	movs	r1, #1
 8000c72:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c76:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c7a:	fb08 4416 	mls	r4, r8, r6, r4
 8000c7e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c82:	fb07 f006 	mul.w	r0, r7, r6
 8000c86:	4298      	cmp	r0, r3
 8000c88:	d908      	bls.n	8000c9c <__udivmoddi4+0x11c>
 8000c8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c92:	d202      	bcs.n	8000c9a <__udivmoddi4+0x11a>
 8000c94:	4298      	cmp	r0, r3
 8000c96:	f200 80cd 	bhi.w	8000e34 <__udivmoddi4+0x2b4>
 8000c9a:	4626      	mov	r6, r4
 8000c9c:	1a1c      	subs	r4, r3, r0
 8000c9e:	fa1f f38e 	uxth.w	r3, lr
 8000ca2:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ca6:	fb08 4410 	mls	r4, r8, r0, r4
 8000caa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cae:	fb00 f707 	mul.w	r7, r0, r7
 8000cb2:	429f      	cmp	r7, r3
 8000cb4:	d908      	bls.n	8000cc8 <__udivmoddi4+0x148>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cbe:	d202      	bcs.n	8000cc6 <__udivmoddi4+0x146>
 8000cc0:	429f      	cmp	r7, r3
 8000cc2:	f200 80b0 	bhi.w	8000e26 <__udivmoddi4+0x2a6>
 8000cc6:	4620      	mov	r0, r4
 8000cc8:	1bdb      	subs	r3, r3, r7
 8000cca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cce:	e7a5      	b.n	8000c1c <__udivmoddi4+0x9c>
 8000cd0:	f1c1 0620 	rsb	r6, r1, #32
 8000cd4:	408b      	lsls	r3, r1
 8000cd6:	fa22 f706 	lsr.w	r7, r2, r6
 8000cda:	431f      	orrs	r7, r3
 8000cdc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ce0:	fa04 f301 	lsl.w	r3, r4, r1
 8000ce4:	ea43 030c 	orr.w	r3, r3, ip
 8000ce8:	40f4      	lsrs	r4, r6
 8000cea:	fa00 f801 	lsl.w	r8, r0, r1
 8000cee:	0c38      	lsrs	r0, r7, #16
 8000cf0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cf4:	fbb4 fef0 	udiv	lr, r4, r0
 8000cf8:	fa1f fc87 	uxth.w	ip, r7
 8000cfc:	fb00 441e 	mls	r4, r0, lr, r4
 8000d00:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d04:	fb0e f90c 	mul.w	r9, lr, ip
 8000d08:	45a1      	cmp	r9, r4
 8000d0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d0e:	d90a      	bls.n	8000d26 <__udivmoddi4+0x1a6>
 8000d10:	193c      	adds	r4, r7, r4
 8000d12:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d16:	f080 8084 	bcs.w	8000e22 <__udivmoddi4+0x2a2>
 8000d1a:	45a1      	cmp	r9, r4
 8000d1c:	f240 8081 	bls.w	8000e22 <__udivmoddi4+0x2a2>
 8000d20:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d24:	443c      	add	r4, r7
 8000d26:	eba4 0409 	sub.w	r4, r4, r9
 8000d2a:	fa1f f983 	uxth.w	r9, r3
 8000d2e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d32:	fb00 4413 	mls	r4, r0, r3, r4
 8000d36:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d3a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d3e:	45a4      	cmp	ip, r4
 8000d40:	d907      	bls.n	8000d52 <__udivmoddi4+0x1d2>
 8000d42:	193c      	adds	r4, r7, r4
 8000d44:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d48:	d267      	bcs.n	8000e1a <__udivmoddi4+0x29a>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	d965      	bls.n	8000e1a <__udivmoddi4+0x29a>
 8000d4e:	3b02      	subs	r3, #2
 8000d50:	443c      	add	r4, r7
 8000d52:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d56:	fba0 9302 	umull	r9, r3, r0, r2
 8000d5a:	eba4 040c 	sub.w	r4, r4, ip
 8000d5e:	429c      	cmp	r4, r3
 8000d60:	46ce      	mov	lr, r9
 8000d62:	469c      	mov	ip, r3
 8000d64:	d351      	bcc.n	8000e0a <__udivmoddi4+0x28a>
 8000d66:	d04e      	beq.n	8000e06 <__udivmoddi4+0x286>
 8000d68:	b155      	cbz	r5, 8000d80 <__udivmoddi4+0x200>
 8000d6a:	ebb8 030e 	subs.w	r3, r8, lr
 8000d6e:	eb64 040c 	sbc.w	r4, r4, ip
 8000d72:	fa04 f606 	lsl.w	r6, r4, r6
 8000d76:	40cb      	lsrs	r3, r1
 8000d78:	431e      	orrs	r6, r3
 8000d7a:	40cc      	lsrs	r4, r1
 8000d7c:	e9c5 6400 	strd	r6, r4, [r5]
 8000d80:	2100      	movs	r1, #0
 8000d82:	e750      	b.n	8000c26 <__udivmoddi4+0xa6>
 8000d84:	f1c2 0320 	rsb	r3, r2, #32
 8000d88:	fa20 f103 	lsr.w	r1, r0, r3
 8000d8c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d90:	fa24 f303 	lsr.w	r3, r4, r3
 8000d94:	4094      	lsls	r4, r2
 8000d96:	430c      	orrs	r4, r1
 8000d98:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d9c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da0:	fa1f f78c 	uxth.w	r7, ip
 8000da4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da8:	fb08 3110 	mls	r1, r8, r0, r3
 8000dac:	0c23      	lsrs	r3, r4, #16
 8000dae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db2:	fb00 f107 	mul.w	r1, r0, r7
 8000db6:	4299      	cmp	r1, r3
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x24c>
 8000dba:	eb1c 0303 	adds.w	r3, ip, r3
 8000dbe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dc2:	d22c      	bcs.n	8000e1e <__udivmoddi4+0x29e>
 8000dc4:	4299      	cmp	r1, r3
 8000dc6:	d92a      	bls.n	8000e1e <__udivmoddi4+0x29e>
 8000dc8:	3802      	subs	r0, #2
 8000dca:	4463      	add	r3, ip
 8000dcc:	1a5b      	subs	r3, r3, r1
 8000dce:	b2a4      	uxth	r4, r4
 8000dd0:	fbb3 f1f8 	udiv	r1, r3, r8
 8000dd4:	fb08 3311 	mls	r3, r8, r1, r3
 8000dd8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ddc:	fb01 f307 	mul.w	r3, r1, r7
 8000de0:	42a3      	cmp	r3, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x276>
 8000de4:	eb1c 0404 	adds.w	r4, ip, r4
 8000de8:	f101 36ff 	add.w	r6, r1, #4294967295
 8000dec:	d213      	bcs.n	8000e16 <__udivmoddi4+0x296>
 8000dee:	42a3      	cmp	r3, r4
 8000df0:	d911      	bls.n	8000e16 <__udivmoddi4+0x296>
 8000df2:	3902      	subs	r1, #2
 8000df4:	4464      	add	r4, ip
 8000df6:	1ae4      	subs	r4, r4, r3
 8000df8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000dfc:	e739      	b.n	8000c72 <__udivmoddi4+0xf2>
 8000dfe:	4604      	mov	r4, r0
 8000e00:	e6f0      	b.n	8000be4 <__udivmoddi4+0x64>
 8000e02:	4608      	mov	r0, r1
 8000e04:	e706      	b.n	8000c14 <__udivmoddi4+0x94>
 8000e06:	45c8      	cmp	r8, r9
 8000e08:	d2ae      	bcs.n	8000d68 <__udivmoddi4+0x1e8>
 8000e0a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e0e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e12:	3801      	subs	r0, #1
 8000e14:	e7a8      	b.n	8000d68 <__udivmoddi4+0x1e8>
 8000e16:	4631      	mov	r1, r6
 8000e18:	e7ed      	b.n	8000df6 <__udivmoddi4+0x276>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	e799      	b.n	8000d52 <__udivmoddi4+0x1d2>
 8000e1e:	4630      	mov	r0, r6
 8000e20:	e7d4      	b.n	8000dcc <__udivmoddi4+0x24c>
 8000e22:	46d6      	mov	lr, sl
 8000e24:	e77f      	b.n	8000d26 <__udivmoddi4+0x1a6>
 8000e26:	4463      	add	r3, ip
 8000e28:	3802      	subs	r0, #2
 8000e2a:	e74d      	b.n	8000cc8 <__udivmoddi4+0x148>
 8000e2c:	4606      	mov	r6, r0
 8000e2e:	4623      	mov	r3, r4
 8000e30:	4608      	mov	r0, r1
 8000e32:	e70f      	b.n	8000c54 <__udivmoddi4+0xd4>
 8000e34:	3e02      	subs	r6, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	e730      	b.n	8000c9c <__udivmoddi4+0x11c>
 8000e3a:	bf00      	nop

08000e3c <__aeabi_idiv0>:
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop

08000e40 <CONVERTER_INIT>:

IR_ConversionResult CONVS;


void CONVERTER_INIT(ADC_HandleTypeDef *ADCUSER, TIM_HandleTypeDef *TIM, uint32_t ADC_CHANNELS[4], GPIO_TypeDef* IR_PORTS[4], uint16_t IR_PINS[4])
{
 8000e40:	b480      	push	{r7}
 8000e42:	b087      	sub	sp, #28
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
 8000e4c:	603b      	str	r3, [r7, #0]
	 ADCUSERGLOBAL = ADCUSER;
 8000e4e:	4a18      	ldr	r2, [pc, #96]	@ (8000eb0 <CONVERTER_INIT+0x70>)
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	6013      	str	r3, [r2, #0]
	 TIMGLOBAL = TIM;
 8000e54:	4a17      	ldr	r2, [pc, #92]	@ (8000eb4 <CONVERTER_INIT+0x74>)
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	6013      	str	r3, [r2, #0]
	 for (uint8_t i = 0; i < 4; i++) {
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	75fb      	strb	r3, [r7, #23]
 8000e5e:	e01d      	b.n	8000e9c <CONVERTER_INIT+0x5c>
	     ADC_CHANNELSGLOBAL[i] = ADC_CHANNELS[i];
 8000e60:	7dfb      	ldrb	r3, [r7, #23]
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	687a      	ldr	r2, [r7, #4]
 8000e66:	441a      	add	r2, r3
 8000e68:	7dfb      	ldrb	r3, [r7, #23]
 8000e6a:	6812      	ldr	r2, [r2, #0]
 8000e6c:	4912      	ldr	r1, [pc, #72]	@ (8000eb8 <CONVERTER_INIT+0x78>)
 8000e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	     IR_PORTSGLOBAL[i]     = IR_PORTS[i];
 8000e72:	7dfb      	ldrb	r3, [r7, #23]
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	683a      	ldr	r2, [r7, #0]
 8000e78:	441a      	add	r2, r3
 8000e7a:	7dfb      	ldrb	r3, [r7, #23]
 8000e7c:	6812      	ldr	r2, [r2, #0]
 8000e7e:	490f      	ldr	r1, [pc, #60]	@ (8000ebc <CONVERTER_INIT+0x7c>)
 8000e80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	     IR_PINSGLOBAL[i]      = IR_PINS[i];
 8000e84:	7dfb      	ldrb	r3, [r7, #23]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	6a3a      	ldr	r2, [r7, #32]
 8000e8a:	441a      	add	r2, r3
 8000e8c:	7dfb      	ldrb	r3, [r7, #23]
 8000e8e:	8811      	ldrh	r1, [r2, #0]
 8000e90:	4a0b      	ldr	r2, [pc, #44]	@ (8000ec0 <CONVERTER_INIT+0x80>)
 8000e92:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	 for (uint8_t i = 0; i < 4; i++) {
 8000e96:	7dfb      	ldrb	r3, [r7, #23]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	75fb      	strb	r3, [r7, #23]
 8000e9c:	7dfb      	ldrb	r3, [r7, #23]
 8000e9e:	2b03      	cmp	r3, #3
 8000ea0:	d9de      	bls.n	8000e60 <CONVERTER_INIT+0x20>
	 }
}
 8000ea2:	bf00      	nop
 8000ea4:	bf00      	nop
 8000ea6:	371c      	adds	r7, #28
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	200001a0 	.word	0x200001a0
 8000eb4:	200001a4 	.word	0x200001a4
 8000eb8:	200001a8 	.word	0x200001a8
 8000ebc:	200001b8 	.word	0x200001b8
 8000ec0:	200001c8 	.word	0x200001c8

08000ec4 <ReadAndAverageSensors>:

void ReadAndAverageSensors(uint16_t *outArr, uint8_t samples)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b088      	sub	sp, #32
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	460b      	mov	r3, r1
 8000ece:	70fb      	strb	r3, [r7, #3]
    for (idx = 0; idx < 4; idx++)
 8000ed0:	4b4c      	ldr	r3, [pc, #304]	@ (8001004 <ReadAndAverageSensors+0x140>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	701a      	strb	r2, [r3, #0]
 8000ed6:	e08a      	b.n	8000fee <ReadAndAverageSensors+0x12a>
    {
        sum = 0;
 8000ed8:	4b4b      	ldr	r3, [pc, #300]	@ (8001008 <ReadAndAverageSensors+0x144>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
        ADC_ChannelConfTypeDef sConfig = {0};
 8000ede:	f107 030c 	add.w	r3, r7, #12
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
 8000eea:	60da      	str	r2, [r3, #12]
        sConfig.Channel = ADC_CHANNELSGLOBAL[idx];
 8000eec:	4b45      	ldr	r3, [pc, #276]	@ (8001004 <ReadAndAverageSensors+0x140>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	4b46      	ldr	r3, [pc, #280]	@ (800100c <ReadAndAverageSensors+0x148>)
 8000ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ef8:	60fb      	str	r3, [r7, #12]
        sConfig.Rank = 1;
 8000efa:	2301      	movs	r3, #1
 8000efc:	613b      	str	r3, [r7, #16]
        sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
        HAL_ADC_ConfigChannel(ADCUSERGLOBAL, &sConfig);
 8000f02:	4b43      	ldr	r3, [pc, #268]	@ (8001010 <ReadAndAverageSensors+0x14c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f107 020c 	add.w	r2, r7, #12
 8000f0a:	4611      	mov	r1, r2
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f002 fc41 	bl	8003794 <HAL_ADC_ConfigChannel>

        for (uint8_t i = 0; i < samples; i++)
 8000f12:	2300      	movs	r3, #0
 8000f14:	77fb      	strb	r3, [r7, #31]
 8000f16:	e049      	b.n	8000fac <ReadAndAverageSensors+0xe8>
        {
        	HAL_GPIO_WritePin(IR_PORTSGLOBAL[idx], IR_PINSGLOBAL[idx], GPIO_PIN_SET);
 8000f18:	4b3a      	ldr	r3, [pc, #232]	@ (8001004 <ReadAndAverageSensors+0x140>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	4b3d      	ldr	r3, [pc, #244]	@ (8001014 <ReadAndAverageSensors+0x150>)
 8000f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f24:	4a37      	ldr	r2, [pc, #220]	@ (8001004 <ReadAndAverageSensors+0x140>)
 8000f26:	7812      	ldrb	r2, [r2, #0]
 8000f28:	4611      	mov	r1, r2
 8000f2a:	4a3b      	ldr	r2, [pc, #236]	@ (8001018 <ReadAndAverageSensors+0x154>)
 8000f2c:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8000f30:	2201      	movs	r2, #1
 8000f32:	4618      	mov	r0, r3
 8000f34:	f003 fcfc 	bl	8004930 <HAL_GPIO_WritePin>
            __HAL_TIM_SET_COUNTER(TIMGLOBAL,0);
 8000f38:	4b38      	ldr	r3, [pc, #224]	@ (800101c <ReadAndAverageSensors+0x158>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	625a      	str	r2, [r3, #36]	@ 0x24

            while (__HAL_TIM_GET_COUNTER(TIMGLOBAL) < 5);
 8000f42:	bf00      	nop
 8000f44:	4b35      	ldr	r3, [pc, #212]	@ (800101c <ReadAndAverageSensors+0x158>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f4c:	2b04      	cmp	r3, #4
 8000f4e:	d9f9      	bls.n	8000f44 <ReadAndAverageSensors+0x80>
            HAL_ADC_Start(ADCUSERGLOBAL);
 8000f50:	4b2f      	ldr	r3, [pc, #188]	@ (8001010 <ReadAndAverageSensors+0x14c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f002 f999 	bl	800328c <HAL_ADC_Start>

            HAL_ADC_PollForConversion(ADCUSERGLOBAL, 4);
 8000f5a:	4b2d      	ldr	r3, [pc, #180]	@ (8001010 <ReadAndAverageSensors+0x14c>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2104      	movs	r1, #4
 8000f60:	4618      	mov	r0, r3
 8000f62:	f002 fa7a 	bl	800345a <HAL_ADC_PollForConversion>
            sum += HAL_ADC_GetValue(ADCUSERGLOBAL);
 8000f66:	4b2a      	ldr	r3, [pc, #168]	@ (8001010 <ReadAndAverageSensors+0x14c>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f002 fbf0 	bl	8003750 <HAL_ADC_GetValue>
 8000f70:	4602      	mov	r2, r0
 8000f72:	4b25      	ldr	r3, [pc, #148]	@ (8001008 <ReadAndAverageSensors+0x144>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4413      	add	r3, r2
 8000f78:	4a23      	ldr	r2, [pc, #140]	@ (8001008 <ReadAndAverageSensors+0x144>)
 8000f7a:	6013      	str	r3, [r2, #0]
            HAL_ADC_Stop(ADCUSERGLOBAL);
 8000f7c:	4b24      	ldr	r3, [pc, #144]	@ (8001010 <ReadAndAverageSensors+0x14c>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f002 fa37 	bl	80033f4 <HAL_ADC_Stop>
            HAL_GPIO_WritePin(IR_PORTSGLOBAL[idx], IR_PINSGLOBAL[idx], GPIO_PIN_RESET);
 8000f86:	4b1f      	ldr	r3, [pc, #124]	@ (8001004 <ReadAndAverageSensors+0x140>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	4b21      	ldr	r3, [pc, #132]	@ (8001014 <ReadAndAverageSensors+0x150>)
 8000f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f92:	4a1c      	ldr	r2, [pc, #112]	@ (8001004 <ReadAndAverageSensors+0x140>)
 8000f94:	7812      	ldrb	r2, [r2, #0]
 8000f96:	4611      	mov	r1, r2
 8000f98:	4a1f      	ldr	r2, [pc, #124]	@ (8001018 <ReadAndAverageSensors+0x154>)
 8000f9a:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f003 fcc5 	bl	8004930 <HAL_GPIO_WritePin>
        for (uint8_t i = 0; i < samples; i++)
 8000fa6:	7ffb      	ldrb	r3, [r7, #31]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	77fb      	strb	r3, [r7, #31]
 8000fac:	7ffa      	ldrb	r2, [r7, #31]
 8000fae:	78fb      	ldrb	r3, [r7, #3]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d3b1      	bcc.n	8000f18 <ReadAndAverageSensors+0x54>
        }
        outArr[idx] = sum / samples; avgReadingsGLOBAL[idx] = outArr[idx];
 8000fb4:	4b14      	ldr	r3, [pc, #80]	@ (8001008 <ReadAndAverageSensors+0x144>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	78fb      	ldrb	r3, [r7, #3]
 8000fba:	fbb2 f1f3 	udiv	r1, r2, r3
 8000fbe:	4b11      	ldr	r3, [pc, #68]	@ (8001004 <ReadAndAverageSensors+0x140>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	b28a      	uxth	r2, r1
 8000fca:	801a      	strh	r2, [r3, #0]
 8000fcc:	4b0d      	ldr	r3, [pc, #52]	@ (8001004 <ReadAndAverageSensors+0x140>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	4a0b      	ldr	r2, [pc, #44]	@ (8001004 <ReadAndAverageSensors+0x140>)
 8000fd8:	7812      	ldrb	r2, [r2, #0]
 8000fda:	8819      	ldrh	r1, [r3, #0]
 8000fdc:	4b10      	ldr	r3, [pc, #64]	@ (8001020 <ReadAndAverageSensors+0x15c>)
 8000fde:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (idx = 0; idx < 4; idx++)
 8000fe2:	4b08      	ldr	r3, [pc, #32]	@ (8001004 <ReadAndAverageSensors+0x140>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	4b06      	ldr	r3, [pc, #24]	@ (8001004 <ReadAndAverageSensors+0x140>)
 8000fec:	701a      	strb	r2, [r3, #0]
 8000fee:	4b05      	ldr	r3, [pc, #20]	@ (8001004 <ReadAndAverageSensors+0x140>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b03      	cmp	r3, #3
 8000ff4:	f67f af70 	bls.w	8000ed8 <ReadAndAverageSensors+0x14>
    }
}
 8000ff8:	bf00      	nop
 8000ffa:	bf00      	nop
 8000ffc:	3720      	adds	r7, #32
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	2000019c 	.word	0x2000019c
 8001008:	20000198 	.word	0x20000198
 800100c:	200001a8 	.word	0x200001a8
 8001010:	200001a0 	.word	0x200001a0
 8001014:	200001b8 	.word	0x200001b8
 8001018:	200001c8 	.word	0x200001c8
 800101c:	200001a4 	.word	0x200001a4
 8001020:	20000190 	.word	0x20000190
 8001024:	00000000 	.word	0x00000000

08001028 <CONV_Y_TRANS>:

IR_ConversionResult CONV_Y_TRANS(void)
{
 8001028:	b5b0      	push	{r4, r5, r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
    CONVS.DIST1 = ((-1)*mIR1) * log(avgReadingsGLOBAL[0]) + 373.25;
 8001030:	eddf 7aa3 	vldr	s15, [pc, #652]	@ 80012c0 <CONV_Y_TRANS+0x298>
 8001034:	eef1 7a67 	vneg.f32	s15, s15
 8001038:	ee17 3a90 	vmov	r3, s15
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff fa2f 	bl	80004a0 <__aeabi_f2d>
 8001042:	4604      	mov	r4, r0
 8001044:	460d      	mov	r5, r1
 8001046:	4b9f      	ldr	r3, [pc, #636]	@ (80012c4 <CONV_Y_TRANS+0x29c>)
 8001048:	881b      	ldrh	r3, [r3, #0]
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff fa06 	bl	800045c <__aeabi_ui2d>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	ec43 2b10 	vmov	d0, r2, r3
 8001058:	f00a fe2e 	bl	800bcb8 <log>
 800105c:	ec53 2b10 	vmov	r2, r3, d0
 8001060:	4620      	mov	r0, r4
 8001062:	4629      	mov	r1, r5
 8001064:	f7ff fa74 	bl	8000550 <__aeabi_dmul>
 8001068:	4602      	mov	r2, r0
 800106a:	460b      	mov	r3, r1
 800106c:	4610      	mov	r0, r2
 800106e:	4619      	mov	r1, r3
 8001070:	a38b      	add	r3, pc, #556	@ (adr r3, 80012a0 <CONV_Y_TRANS+0x278>)
 8001072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001076:	f7ff f8b5 	bl	80001e4 <__adddf3>
 800107a:	4602      	mov	r2, r0
 800107c:	460b      	mov	r3, r1
 800107e:	4610      	mov	r0, r2
 8001080:	4619      	mov	r1, r3
 8001082:	f7ff fd15 	bl	8000ab0 <__aeabi_d2f>
 8001086:	4603      	mov	r3, r0
 8001088:	4a8f      	ldr	r2, [pc, #572]	@ (80012c8 <CONV_Y_TRANS+0x2a0>)
 800108a:	6013      	str	r3, [r2, #0]
    if (CONVS.DIST1 > 255)CONVS.DIST1 = 255;
 800108c:	4b8e      	ldr	r3, [pc, #568]	@ (80012c8 <CONV_Y_TRANS+0x2a0>)
 800108e:	edd3 7a00 	vldr	s15, [r3]
 8001092:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 80012cc <CONV_Y_TRANS+0x2a4>
 8001096:	eef4 7ac7 	vcmpe.f32	s15, s14
 800109a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800109e:	dd02      	ble.n	80010a6 <CONV_Y_TRANS+0x7e>
 80010a0:	4b89      	ldr	r3, [pc, #548]	@ (80012c8 <CONV_Y_TRANS+0x2a0>)
 80010a2:	4a8b      	ldr	r2, [pc, #556]	@ (80012d0 <CONV_Y_TRANS+0x2a8>)
 80010a4:	601a      	str	r2, [r3, #0]
    if (CONVS.DIST1 < 0)CONVS.DIST1 = 0;
 80010a6:	4b88      	ldr	r3, [pc, #544]	@ (80012c8 <CONV_Y_TRANS+0x2a0>)
 80010a8:	edd3 7a00 	vldr	s15, [r3]
 80010ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b4:	d503      	bpl.n	80010be <CONV_Y_TRANS+0x96>
 80010b6:	4b84      	ldr	r3, [pc, #528]	@ (80012c8 <CONV_Y_TRANS+0x2a0>)
 80010b8:	f04f 0200 	mov.w	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]

    CONVS.DIST2 = ((-1)*mIR2) * log(avgReadingsGLOBAL[1]) + 439.42;
 80010be:	eddf 7a85 	vldr	s15, [pc, #532]	@ 80012d4 <CONV_Y_TRANS+0x2ac>
 80010c2:	eef1 7a67 	vneg.f32	s15, s15
 80010c6:	ee17 3a90 	vmov	r3, s15
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff f9e8 	bl	80004a0 <__aeabi_f2d>
 80010d0:	4604      	mov	r4, r0
 80010d2:	460d      	mov	r5, r1
 80010d4:	4b7b      	ldr	r3, [pc, #492]	@ (80012c4 <CONV_Y_TRANS+0x29c>)
 80010d6:	885b      	ldrh	r3, [r3, #2]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff f9bf 	bl	800045c <__aeabi_ui2d>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	ec43 2b10 	vmov	d0, r2, r3
 80010e6:	f00a fde7 	bl	800bcb8 <log>
 80010ea:	ec53 2b10 	vmov	r2, r3, d0
 80010ee:	4620      	mov	r0, r4
 80010f0:	4629      	mov	r1, r5
 80010f2:	f7ff fa2d 	bl	8000550 <__aeabi_dmul>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	4610      	mov	r0, r2
 80010fc:	4619      	mov	r1, r3
 80010fe:	a36a      	add	r3, pc, #424	@ (adr r3, 80012a8 <CONV_Y_TRANS+0x280>)
 8001100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001104:	f7ff f86e 	bl	80001e4 <__adddf3>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	4610      	mov	r0, r2
 800110e:	4619      	mov	r1, r3
 8001110:	f7ff fcce 	bl	8000ab0 <__aeabi_d2f>
 8001114:	4603      	mov	r3, r0
 8001116:	4a6c      	ldr	r2, [pc, #432]	@ (80012c8 <CONV_Y_TRANS+0x2a0>)
 8001118:	6053      	str	r3, [r2, #4]
    if (CONVS.DIST2 > 255)CONVS.DIST2 = 255;
 800111a:	4b6b      	ldr	r3, [pc, #428]	@ (80012c8 <CONV_Y_TRANS+0x2a0>)
 800111c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001120:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 80012cc <CONV_Y_TRANS+0x2a4>
 8001124:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800112c:	dd02      	ble.n	8001134 <CONV_Y_TRANS+0x10c>
 800112e:	4b66      	ldr	r3, [pc, #408]	@ (80012c8 <CONV_Y_TRANS+0x2a0>)
 8001130:	4a67      	ldr	r2, [pc, #412]	@ (80012d0 <CONV_Y_TRANS+0x2a8>)
 8001132:	605a      	str	r2, [r3, #4]
    if (CONVS.DIST2 < 0)CONVS.DIST2 = 0;
 8001134:	4b64      	ldr	r3, [pc, #400]	@ (80012c8 <CONV_Y_TRANS+0x2a0>)
 8001136:	edd3 7a01 	vldr	s15, [r3, #4]
 800113a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800113e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001142:	d503      	bpl.n	800114c <CONV_Y_TRANS+0x124>
 8001144:	4b60      	ldr	r3, [pc, #384]	@ (80012c8 <CONV_Y_TRANS+0x2a0>)
 8001146:	f04f 0200 	mov.w	r2, #0
 800114a:	605a      	str	r2, [r3, #4]

    CONVS.DIST3 = (((-1)*mIR3) * log(avgReadingsGLOBAL[2]) + 494.28)/2;
 800114c:	eddf 7a62 	vldr	s15, [pc, #392]	@ 80012d8 <CONV_Y_TRANS+0x2b0>
 8001150:	eef1 7a67 	vneg.f32	s15, s15
 8001154:	ee17 3a90 	vmov	r3, s15
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff f9a1 	bl	80004a0 <__aeabi_f2d>
 800115e:	4604      	mov	r4, r0
 8001160:	460d      	mov	r5, r1
 8001162:	4b58      	ldr	r3, [pc, #352]	@ (80012c4 <CONV_Y_TRANS+0x29c>)
 8001164:	889b      	ldrh	r3, [r3, #4]
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff f978 	bl	800045c <__aeabi_ui2d>
 800116c:	4602      	mov	r2, r0
 800116e:	460b      	mov	r3, r1
 8001170:	ec43 2b10 	vmov	d0, r2, r3
 8001174:	f00a fda0 	bl	800bcb8 <log>
 8001178:	ec53 2b10 	vmov	r2, r3, d0
 800117c:	4620      	mov	r0, r4
 800117e:	4629      	mov	r1, r5
 8001180:	f7ff f9e6 	bl	8000550 <__aeabi_dmul>
 8001184:	4602      	mov	r2, r0
 8001186:	460b      	mov	r3, r1
 8001188:	4610      	mov	r0, r2
 800118a:	4619      	mov	r1, r3
 800118c:	a348      	add	r3, pc, #288	@ (adr r3, 80012b0 <CONV_Y_TRANS+0x288>)
 800118e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001192:	f7ff f827 	bl	80001e4 <__adddf3>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	4610      	mov	r0, r2
 800119c:	4619      	mov	r1, r3
 800119e:	f04f 0200 	mov.w	r2, #0
 80011a2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80011a6:	f7ff fafd 	bl	80007a4 <__aeabi_ddiv>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	4610      	mov	r0, r2
 80011b0:	4619      	mov	r1, r3
 80011b2:	f7ff fc7d 	bl	8000ab0 <__aeabi_d2f>
 80011b6:	4603      	mov	r3, r0
 80011b8:	4a43      	ldr	r2, [pc, #268]	@ (80012c8 <CONV_Y_TRANS+0x2a0>)
 80011ba:	6093      	str	r3, [r2, #8]
    if (CONVS.DIST3 > 255)CONVS.DIST3 = 255;
 80011bc:	4b42      	ldr	r3, [pc, #264]	@ (80012c8 <CONV_Y_TRANS+0x2a0>)
 80011be:	edd3 7a02 	vldr	s15, [r3, #8]
 80011c2:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 80012cc <CONV_Y_TRANS+0x2a4>
 80011c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ce:	dd02      	ble.n	80011d6 <CONV_Y_TRANS+0x1ae>
 80011d0:	4b3d      	ldr	r3, [pc, #244]	@ (80012c8 <CONV_Y_TRANS+0x2a0>)
 80011d2:	4a3f      	ldr	r2, [pc, #252]	@ (80012d0 <CONV_Y_TRANS+0x2a8>)
 80011d4:	609a      	str	r2, [r3, #8]
    if (CONVS.DIST3 < 0)CONVS.DIST3 = 0;
 80011d6:	4b3c      	ldr	r3, [pc, #240]	@ (80012c8 <CONV_Y_TRANS+0x2a0>)
 80011d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80011dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011e4:	d503      	bpl.n	80011ee <CONV_Y_TRANS+0x1c6>
 80011e6:	4b38      	ldr	r3, [pc, #224]	@ (80012c8 <CONV_Y_TRANS+0x2a0>)
 80011e8:	f04f 0200 	mov.w	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]

    CONVS.DIST4 = ((-1)*mIR4) * log((avgReadingsGLOBAL[3]*10)) + 488.57;
 80011ee:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 80012dc <CONV_Y_TRANS+0x2b4>
 80011f2:	eef1 7a67 	vneg.f32	s15, s15
 80011f6:	ee17 3a90 	vmov	r3, s15
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff f950 	bl	80004a0 <__aeabi_f2d>
 8001200:	4604      	mov	r4, r0
 8001202:	460d      	mov	r5, r1
 8001204:	4b2f      	ldr	r3, [pc, #188]	@ (80012c4 <CONV_Y_TRANS+0x29c>)
 8001206:	88db      	ldrh	r3, [r3, #6]
 8001208:	461a      	mov	r2, r3
 800120a:	4613      	mov	r3, r2
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	4413      	add	r3, r2
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff f932 	bl	800047c <__aeabi_i2d>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	ec43 2b10 	vmov	d0, r2, r3
 8001220:	f00a fd4a 	bl	800bcb8 <log>
 8001224:	ec53 2b10 	vmov	r2, r3, d0
 8001228:	4620      	mov	r0, r4
 800122a:	4629      	mov	r1, r5
 800122c:	f7ff f990 	bl	8000550 <__aeabi_dmul>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	4610      	mov	r0, r2
 8001236:	4619      	mov	r1, r3
 8001238:	a31f      	add	r3, pc, #124	@ (adr r3, 80012b8 <CONV_Y_TRANS+0x290>)
 800123a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123e:	f7fe ffd1 	bl	80001e4 <__adddf3>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	4610      	mov	r0, r2
 8001248:	4619      	mov	r1, r3
 800124a:	f7ff fc31 	bl	8000ab0 <__aeabi_d2f>
 800124e:	4603      	mov	r3, r0
 8001250:	4a1d      	ldr	r2, [pc, #116]	@ (80012c8 <CONV_Y_TRANS+0x2a0>)
 8001252:	60d3      	str	r3, [r2, #12]
    if (CONVS.DIST4 > 255)CONVS.DIST4 = 255;
 8001254:	4b1c      	ldr	r3, [pc, #112]	@ (80012c8 <CONV_Y_TRANS+0x2a0>)
 8001256:	edd3 7a03 	vldr	s15, [r3, #12]
 800125a:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 80012cc <CONV_Y_TRANS+0x2a4>
 800125e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001266:	dd02      	ble.n	800126e <CONV_Y_TRANS+0x246>
 8001268:	4b17      	ldr	r3, [pc, #92]	@ (80012c8 <CONV_Y_TRANS+0x2a0>)
 800126a:	4a19      	ldr	r2, [pc, #100]	@ (80012d0 <CONV_Y_TRANS+0x2a8>)
 800126c:	60da      	str	r2, [r3, #12]
    if (CONVS.DIST4 < 0)CONVS.DIST4 = 0;
 800126e:	4b16      	ldr	r3, [pc, #88]	@ (80012c8 <CONV_Y_TRANS+0x2a0>)
 8001270:	edd3 7a03 	vldr	s15, [r3, #12]
 8001274:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800127c:	d503      	bpl.n	8001286 <CONV_Y_TRANS+0x25e>
 800127e:	4b12      	ldr	r3, [pc, #72]	@ (80012c8 <CONV_Y_TRANS+0x2a0>)
 8001280:	f04f 0200 	mov.w	r2, #0
 8001284:	60da      	str	r2, [r3, #12]


    return CONVS;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a0f      	ldr	r2, [pc, #60]	@ (80012c8 <CONV_Y_TRANS+0x2a0>)
 800128a:	461c      	mov	r4, r3
 800128c:	4615      	mov	r5, r2
 800128e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001290:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001292:	682b      	ldr	r3, [r5, #0]
 8001294:	6023      	str	r3, [r4, #0]
}
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bdb0      	pop	{r4, r5, r7, pc}
 800129e:	bf00      	nop
 80012a0:	00000000 	.word	0x00000000
 80012a4:	40775400 	.word	0x40775400
 80012a8:	51eb851f 	.word	0x51eb851f
 80012ac:	407b76b8 	.word	0x407b76b8
 80012b0:	e147ae14 	.word	0xe147ae14
 80012b4:	407ee47a 	.word	0x407ee47a
 80012b8:	b851eb85 	.word	0xb851eb85
 80012bc:	407e891e 	.word	0x407e891e
 80012c0:	422e7ae1 	.word	0x422e7ae1
 80012c4:	20000190 	.word	0x20000190
 80012c8:	200001d0 	.word	0x200001d0
 80012cc:	437f0000 	.word	0x437f0000
 80012d0:	437f0000 	.word	0x437f0000
 80012d4:	424e0a3d 	.word	0x424e0a3d
 80012d8:	42675c29 	.word	0x42675c29
 80012dc:	427070a4 	.word	0x427070a4

080012e0 <calcularCRC>:
uint32_t adc_3;
uint32_t adc_4;


uint8_t calcularCRC(uint8_t *datos, uint8_t tam) //el valor de tam cuando llega
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	460b      	mov	r3, r1
 80012ea:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	73fb      	strb	r3, [r7, #15]

		for(int i=0; i<tam; i++)
 80012f0:	2300      	movs	r3, #0
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	e009      	b.n	800130a <calcularCRC+0x2a>
		{
			crc ^= datos[i];
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	4413      	add	r3, r2
 80012fc:	781a      	ldrb	r2, [r3, #0]
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
 8001300:	4053      	eors	r3, r2
 8001302:	73fb      	strb	r3, [r7, #15]
		for(int i=0; i<tam; i++)
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	3301      	adds	r3, #1
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	78fb      	ldrb	r3, [r7, #3]
 800130c:	68ba      	ldr	r2, [r7, #8]
 800130e:	429a      	cmp	r2, r3
 8001310:	dbf1      	blt.n	80012f6 <calcularCRC+0x16>
		}

	return crc;
 8001312:	7bfb      	ldrb	r3, [r7, #15]
}
 8001314:	4618      	mov	r0, r3
 8001316:	3714      	adds	r7, #20
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <serializarPaquete>:

int8_t serializarPaquete(const PAQUETE* paquete, uint8_t *buffer){   //serialize
 8001320:	b590      	push	{r4, r7, lr}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]

	int idx =0;
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]

	if(!paquete || !buffer)return -1;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d002      	beq.n	800133a <serializarPaquete+0x1a>
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d102      	bne.n	8001340 <serializarPaquete+0x20>
 800133a:	f04f 33ff 	mov.w	r3, #4294967295
 800133e:	e045      	b.n	80013cc <serializarPaquete+0xac>

	buffer[idx++] = paquete->inicio;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	1c5a      	adds	r2, r3, #1
 8001344:	60fa      	str	r2, [r7, #12]
 8001346:	461a      	mov	r2, r3
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	4413      	add	r3, r2
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	7812      	ldrb	r2, [r2, #0]
 8001350:	701a      	strb	r2, [r3, #0]
	buffer[idx++]= paquete->tamano;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	1c5a      	adds	r2, r3, #1
 8001356:	60fa      	str	r2, [r7, #12]
 8001358:	461a      	mov	r2, r3
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	4413      	add	r3, r2
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	7852      	ldrb	r2, [r2, #1]
 8001362:	701a      	strb	r2, [r3, #0]

		if(paquete->datos && (paquete->tamano>3)){   	//packet of data ;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d015      	beq.n	8001398 <serializarPaquete+0x78>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	785b      	ldrb	r3, [r3, #1]
 8001370:	2b03      	cmp	r3, #3
 8001372:	d911      	bls.n	8001398 <serializarPaquete+0x78>
		  memcpy(&buffer[idx], paquete->datos, (size_t)(paquete->tamano-4));
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	683a      	ldr	r2, [r7, #0]
 8001378:	18d0      	adds	r0, r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6859      	ldr	r1, [r3, #4]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	785b      	ldrb	r3, [r3, #1]
 8001382:	3b04      	subs	r3, #4
 8001384:	461a      	mov	r2, r3
 8001386:	f00a fc89 	bl	800bc9c <memcpy>
		  idx = idx + paquete->tamano-4;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	785b      	ldrb	r3, [r3, #1]
 800138e:	461a      	mov	r2, r3
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	4413      	add	r3, r2
 8001394:	3b04      	subs	r3, #4
 8001396:	60fb      	str	r3, [r7, #12]
		}

	uint8_t ss= (uint8_t)idx;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	72fb      	strb	r3, [r7, #11]
	buffer[idx++] =calcularCRC(buffer,ss);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	1c5a      	adds	r2, r3, #1
 80013a0:	60fa      	str	r2, [r7, #12]
 80013a2:	461a      	mov	r2, r3
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	189c      	adds	r4, r3, r2
 80013a8:	7afb      	ldrb	r3, [r7, #11]
 80013aa:	4619      	mov	r1, r3
 80013ac:	6838      	ldr	r0, [r7, #0]
 80013ae:	f7ff ff97 	bl	80012e0 <calcularCRC>
 80013b2:	4603      	mov	r3, r0
 80013b4:	7023      	strb	r3, [r4, #0]
	buffer[idx++] =paquete->fin;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	1c5a      	adds	r2, r3, #1
 80013ba:	60fa      	str	r2, [r7, #12]
 80013bc:	461a      	mov	r2, r3
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	4413      	add	r3, r2
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	7a52      	ldrb	r2, [r2, #9]
 80013c6:	701a      	strb	r2, [r3, #0]
	return idx;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	b25b      	sxtb	r3, r3
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd90      	pop	{r4, r7, pc}

080013d4 <EnviarPaquete>:



void EnviarPaquete(uint8_t *dat, uint8_t tam){
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	460b      	mov	r3, r1
 80013de:	70fb      	strb	r3, [r7, #3]

	pk1.inicio = 0x77; //Start byte
 80013e0:	4b1a      	ldr	r3, [pc, #104]	@ (800144c <EnviarPaquete+0x78>)
 80013e2:	2277      	movs	r2, #119	@ 0x77
 80013e4:	701a      	strb	r2, [r3, #0]
	pk1.tamano = tam + 4;
 80013e6:	78fb      	ldrb	r3, [r7, #3]
 80013e8:	3304      	adds	r3, #4
 80013ea:	b2da      	uxtb	r2, r3
 80013ec:	4b17      	ldr	r3, [pc, #92]	@ (800144c <EnviarPaquete+0x78>)
 80013ee:	705a      	strb	r2, [r3, #1]
	pk1.datos=datosx;
 80013f0:	4b16      	ldr	r3, [pc, #88]	@ (800144c <EnviarPaquete+0x78>)
 80013f2:	4a17      	ldr	r2, [pc, #92]	@ (8001450 <EnviarPaquete+0x7c>)
 80013f4:	605a      	str	r2, [r3, #4]

    memcpy(&pk1.datos[0], dat, tam + 4 );
 80013f6:	4b15      	ldr	r3, [pc, #84]	@ (800144c <EnviarPaquete+0x78>)
 80013f8:	6858      	ldr	r0, [r3, #4]
 80013fa:	78fb      	ldrb	r3, [r7, #3]
 80013fc:	3304      	adds	r3, #4
 80013fe:	461a      	mov	r2, r3
 8001400:	6879      	ldr	r1, [r7, #4]
 8001402:	f00a fc4b 	bl	800bc9c <memcpy>

	numDatos = serializarPaquete(&pk1, &datosTX);
 8001406:	4913      	ldr	r1, [pc, #76]	@ (8001454 <EnviarPaquete+0x80>)
 8001408:	4810      	ldr	r0, [pc, #64]	@ (800144c <EnviarPaquete+0x78>)
 800140a:	f7ff ff89 	bl	8001320 <serializarPaquete>
 800140e:	4603      	mov	r3, r0
 8001410:	461a      	mov	r2, r3
 8001412:	4b11      	ldr	r3, [pc, #68]	@ (8001458 <EnviarPaquete+0x84>)
 8001414:	701a      	strb	r2, [r3, #0]
	pk1.crc=calcularCRC(datosTX, tam+4);
 8001416:	78fb      	ldrb	r3, [r7, #3]
 8001418:	3304      	adds	r3, #4
 800141a:	b2db      	uxtb	r3, r3
 800141c:	4619      	mov	r1, r3
 800141e:	480d      	ldr	r0, [pc, #52]	@ (8001454 <EnviarPaquete+0x80>)
 8001420:	f7ff ff5e 	bl	80012e0 <calcularCRC>
 8001424:	4603      	mov	r3, r0
 8001426:	461a      	mov	r2, r3
 8001428:	4b08      	ldr	r3, [pc, #32]	@ (800144c <EnviarPaquete+0x78>)
 800142a:	721a      	strb	r2, [r3, #8]
	pk1.fin =0x12;
 800142c:	4b07      	ldr	r3, [pc, #28]	@ (800144c <EnviarPaquete+0x78>)
 800142e:	2212      	movs	r2, #18
 8001430:	725a      	strb	r2, [r3, #9]

	CDC_Transmit_FS(datosTX, numDatos);  ///////////////////////////////////////////aQUI
 8001432:	4b09      	ldr	r3, [pc, #36]	@ (8001458 <EnviarPaquete+0x84>)
 8001434:	f993 3000 	ldrsb.w	r3, [r3]
 8001438:	b29b      	uxth	r3, r3
 800143a:	4619      	mov	r1, r3
 800143c:	4805      	ldr	r0, [pc, #20]	@ (8001454 <EnviarPaquete+0x80>)
 800143e:	f009 ffa9 	bl	800b394 <CDC_Transmit_FS>

} //way important to transmit
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000644 	.word	0x20000644
 8001450:	200005e0 	.word	0x200005e0
 8001454:	200005b8 	.word	0x200005b8
 8001458:	2000057e 	.word	0x2000057e

0800145c <trapecio_VD_simple>:
static volatile EstadoSeq estado = ESTADO_ADV1_START;



float trapecio_VD_simple(float avance_odo_real, float mm_desired, float dt, float ACELERATION, float VEL_IN)
{
 800145c:	b480      	push	{r7}
 800145e:	b089      	sub	sp, #36	@ 0x24
 8001460:	af00      	add	r7, sp, #0
 8001462:	ed87 0a05 	vstr	s0, [r7, #20]
 8001466:	edc7 0a04 	vstr	s1, [r7, #16]
 800146a:	ed87 1a03 	vstr	s2, [r7, #12]
 800146e:	edc7 1a02 	vstr	s3, [r7, #8]
 8001472:	ed87 2a01 	vstr	s4, [r7, #4]
    VEL_FINAL_L         = VEL_IN;          // velocidad máxima deseada
 8001476:	4a47      	ldr	r2, [pc, #284]	@ (8001594 <trapecio_VD_simple+0x138>)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6013      	str	r3, [r2, #0]
    AceleracionGlobal_L = ACELERATION;     // aceleración constante
 800147c:	4a46      	ldr	r2, [pc, #280]	@ (8001598 <trapecio_VD_simple+0x13c>)
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	6013      	str	r3, [r2, #0]
    DIST_ACUM_L          = avance_odo_real; // distancia recorrida hasta ahora
 8001482:	4a46      	ldr	r2, [pc, #280]	@ (800159c <trapecio_VD_simple+0x140>)
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	6013      	str	r3, [r2, #0]
    mm_FINAL_L          = mm_desired;      // distancia total a recorrer
 8001488:	4a45      	ldr	r2, [pc, #276]	@ (80015a0 <trapecio_VD_simple+0x144>)
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	6013      	str	r3, [r2, #0]

    float DIS_ACCE_L = (VEL_FINAL_L * VEL_FINAL_L) / (2.0f * AceleracionGlobal_L);
 800148e:	4b41      	ldr	r3, [pc, #260]	@ (8001594 <trapecio_VD_simple+0x138>)
 8001490:	ed93 7a00 	vldr	s14, [r3]
 8001494:	4b3f      	ldr	r3, [pc, #252]	@ (8001594 <trapecio_VD_simple+0x138>)
 8001496:	edd3 7a00 	vldr	s15, [r3]
 800149a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800149e:	4b3e      	ldr	r3, [pc, #248]	@ (8001598 <trapecio_VD_simple+0x13c>)
 80014a0:	edd3 7a00 	vldr	s15, [r3]
 80014a4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80014a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014ac:	edc7 7a06 	vstr	s15, [r7, #24]

    float DIS_DESACCE_L = mm_FINAL_L - DIS_ACCE_L;
 80014b0:	4b3b      	ldr	r3, [pc, #236]	@ (80015a0 <trapecio_VD_simple+0x144>)
 80014b2:	ed93 7a00 	vldr	s14, [r3]
 80014b6:	edd7 7a06 	vldr	s15, [r7, #24]
 80014ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014be:	edc7 7a07 	vstr	s15, [r7, #28]

    if (DIS_DESACCE_L < DIS_ACCE_L) {
 80014c2:	ed97 7a07 	vldr	s14, [r7, #28]
 80014c6:	edd7 7a06 	vldr	s15, [r7, #24]
 80014ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d2:	d501      	bpl.n	80014d8 <trapecio_VD_simple+0x7c>
        DIS_DESACCE_L = DIS_ACCE_L;
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	61fb      	str	r3, [r7, #28]
    }

    if (DIST_ACUM_L < DIS_ACCE_L) {
 80014d8:	4b30      	ldr	r3, [pc, #192]	@ (800159c <trapecio_VD_simple+0x140>)
 80014da:	edd3 7a00 	vldr	s15, [r3]
 80014de:	ed97 7a06 	vldr	s14, [r7, #24]
 80014e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ea:	dd1e      	ble.n	800152a <trapecio_VD_simple+0xce>

        v_desired_L += AceleracionGlobal_L * dt;
 80014ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001598 <trapecio_VD_simple+0x13c>)
 80014ee:	ed93 7a00 	vldr	s14, [r3]
 80014f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80014f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014fa:	4b2a      	ldr	r3, [pc, #168]	@ (80015a4 <trapecio_VD_simple+0x148>)
 80014fc:	edd3 7a00 	vldr	s15, [r3]
 8001500:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001504:	4b27      	ldr	r3, [pc, #156]	@ (80015a4 <trapecio_VD_simple+0x148>)
 8001506:	edc3 7a00 	vstr	s15, [r3]
        if (v_desired_L > VEL_FINAL_L) {
 800150a:	4b26      	ldr	r3, [pc, #152]	@ (80015a4 <trapecio_VD_simple+0x148>)
 800150c:	ed93 7a00 	vldr	s14, [r3]
 8001510:	4b20      	ldr	r3, [pc, #128]	@ (8001594 <trapecio_VD_simple+0x138>)
 8001512:	edd3 7a00 	vldr	s15, [r3]
 8001516:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800151a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800151e:	dd2e      	ble.n	800157e <trapecio_VD_simple+0x122>
            v_desired_L = VEL_FINAL_L;
 8001520:	4b1c      	ldr	r3, [pc, #112]	@ (8001594 <trapecio_VD_simple+0x138>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a1f      	ldr	r2, [pc, #124]	@ (80015a4 <trapecio_VD_simple+0x148>)
 8001526:	6013      	str	r3, [r2, #0]
 8001528:	e029      	b.n	800157e <trapecio_VD_simple+0x122>
        }
    }
    else if (DIST_ACUM_L < DIS_DESACCE_L) {
 800152a:	4b1c      	ldr	r3, [pc, #112]	@ (800159c <trapecio_VD_simple+0x140>)
 800152c:	edd3 7a00 	vldr	s15, [r3]
 8001530:	ed97 7a07 	vldr	s14, [r7, #28]
 8001534:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800153c:	dd04      	ble.n	8001548 <trapecio_VD_simple+0xec>

        v_desired_L = VEL_FINAL_L;
 800153e:	4b15      	ldr	r3, [pc, #84]	@ (8001594 <trapecio_VD_simple+0x138>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a18      	ldr	r2, [pc, #96]	@ (80015a4 <trapecio_VD_simple+0x148>)
 8001544:	6013      	str	r3, [r2, #0]
 8001546:	e01a      	b.n	800157e <trapecio_VD_simple+0x122>
    }
    else {

        v_desired_L -= AceleracionGlobal_L * dt;
 8001548:	4b16      	ldr	r3, [pc, #88]	@ (80015a4 <trapecio_VD_simple+0x148>)
 800154a:	ed93 7a00 	vldr	s14, [r3]
 800154e:	4b12      	ldr	r3, [pc, #72]	@ (8001598 <trapecio_VD_simple+0x13c>)
 8001550:	edd3 6a00 	vldr	s13, [r3]
 8001554:	edd7 7a03 	vldr	s15, [r7, #12]
 8001558:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800155c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001560:	4b10      	ldr	r3, [pc, #64]	@ (80015a4 <trapecio_VD_simple+0x148>)
 8001562:	edc3 7a00 	vstr	s15, [r3]
        if (v_desired_L < 0.0f) {
 8001566:	4b0f      	ldr	r3, [pc, #60]	@ (80015a4 <trapecio_VD_simple+0x148>)
 8001568:	edd3 7a00 	vldr	s15, [r3]
 800156c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001574:	d503      	bpl.n	800157e <trapecio_VD_simple+0x122>
            v_desired_L = 0.0f;
 8001576:	4b0b      	ldr	r3, [pc, #44]	@ (80015a4 <trapecio_VD_simple+0x148>)
 8001578:	f04f 0200 	mov.w	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
        }
    }

    return v_desired_L;
 800157e:	4b09      	ldr	r3, [pc, #36]	@ (80015a4 <trapecio_VD_simple+0x148>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	ee07 3a90 	vmov	s15, r3
}
 8001586:	eeb0 0a67 	vmov.f32	s0, s15
 800158a:	3724      	adds	r7, #36	@ 0x24
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	200004e0 	.word	0x200004e0
 8001598:	200004e8 	.word	0x200004e8
 800159c:	200004dc 	.word	0x200004dc
 80015a0:	200004e4 	.word	0x200004e4
 80015a4:	200004ec 	.word	0x200004ec

080015a8 <trapecio_VD_simple_angulo>:
    return (signo * v_abs)*9;
}  */



float trapecio_VD_simple_angulo(float avance_ang_real,float ang_desired,float dt,float accel,float vel_max,float v_start) {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08c      	sub	sp, #48	@ 0x30
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	ed87 0a05 	vstr	s0, [r7, #20]
 80015b2:	edc7 0a04 	vstr	s1, [r7, #16]
 80015b6:	ed87 1a03 	vstr	s2, [r7, #12]
 80015ba:	edc7 1a02 	vstr	s3, [r7, #8]
 80015be:	ed87 2a01 	vstr	s4, [r7, #4]
 80015c2:	edc7 2a00 	vstr	s5, [r7]



    int signo = (ang_desired >= 0.0f) ? 1 : -1;
 80015c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80015ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d2:	db01      	blt.n	80015d8 <trapecio_VD_simple_angulo+0x30>
 80015d4:	2301      	movs	r3, #1
 80015d6:	e001      	b.n	80015dc <trapecio_VD_simple_angulo+0x34>
 80015d8:	f04f 33ff 	mov.w	r3, #4294967295
 80015dc:	62bb      	str	r3, [r7, #40]	@ 0x28

    float D = fabsf(ang_desired);
 80015de:	edd7 7a04 	vldr	s15, [r7, #16]
 80015e2:	eef0 7ae7 	vabs.f32	s15, s15
 80015e6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float x = fabsf(avance_ang_real);
 80015ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80015ee:	eef0 7ae7 	vabs.f32	s15, s15
 80015f2:	edc7 7a08 	vstr	s15, [r7, #32]

    v_desired = 0.0f;
 80015f6:	4b4c      	ldr	r3, [pc, #304]	@ (8001728 <trapecio_VD_simple_angulo+0x180>)
 80015f8:	f04f 0200 	mov.w	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
    static float last_D     = 0.0f;

    if (D != last_D) {
 80015fe:	4b4b      	ldr	r3, [pc, #300]	@ (800172c <trapecio_VD_simple_angulo+0x184>)
 8001600:	edd3 7a00 	vldr	s15, [r3]
 8001604:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001608:	eeb4 7a67 	vcmp.f32	s14, s15
 800160c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001610:	d006      	beq.n	8001620 <trapecio_VD_simple_angulo+0x78>
        v_desired = 0.0f;
 8001612:	4b45      	ldr	r3, [pc, #276]	@ (8001728 <trapecio_VD_simple_angulo+0x180>)
 8001614:	f04f 0200 	mov.w	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
        last_D    = D;
 800161a:	4a44      	ldr	r2, [pc, #272]	@ (800172c <trapecio_VD_simple_angulo+0x184>)
 800161c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161e:	6013      	str	r3, [r2, #0]
    }

    if (x >= D) {
 8001620:	ed97 7a08 	vldr	s14, [r7, #32]
 8001624:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001628:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800162c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001630:	db06      	blt.n	8001640 <trapecio_VD_simple_angulo+0x98>
        v_desired = 0.0f;
 8001632:	4b3d      	ldr	r3, [pc, #244]	@ (8001728 <trapecio_VD_simple_angulo+0x180>)
 8001634:	f04f 0200 	mov.w	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
        return 0.0f;
 800163a:	eddf 7a3d 	vldr	s15, [pc, #244]	@ 8001730 <trapecio_VD_simple_angulo+0x188>
 800163e:	e06d      	b.n	800171c <trapecio_VD_simple_angulo+0x174>
    }

    float v_theo_acel  = sqrtf(2.0f * accel * x);
 8001640:	edd7 7a02 	vldr	s15, [r7, #8]
 8001644:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001648:	edd7 7a08 	vldr	s15, [r7, #32]
 800164c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001650:	eeb0 0a67 	vmov.f32	s0, s15
 8001654:	f00a fb6e 	bl	800bd34 <sqrtf>
 8001658:	ed87 0a07 	vstr	s0, [r7, #28]
    float v_theo_decel = sqrtf(2.0f * accel * (D - x));
 800165c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001660:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001664:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001668:	edd7 7a08 	vldr	s15, [r7, #32]
 800166c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001670:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001674:	eeb0 0a67 	vmov.f32	s0, s15
 8001678:	f00a fb5c 	bl	800bd34 <sqrtf>
 800167c:	ed87 0a06 	vstr	s0, [r7, #24]
    float v_theo       = v_theo_acel;
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (v_theo > v_theo_decel) v_theo = v_theo_decel;
 8001684:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001688:	edd7 7a06 	vldr	s15, [r7, #24]
 800168c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001694:	dd01      	ble.n	800169a <trapecio_VD_simple_angulo+0xf2>
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (v_theo > vel_max)      v_theo = vel_max;
 800169a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800169e:	edd7 7a01 	vldr	s15, [r7, #4]
 80016a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016aa:	dd01      	ble.n	80016b0 <trapecio_VD_simple_angulo+0x108>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

    v_desired += accel * dt;
 80016b0:	ed97 7a02 	vldr	s14, [r7, #8]
 80016b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80016b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001728 <trapecio_VD_simple_angulo+0x180>)
 80016be:	edd3 7a00 	vldr	s15, [r3]
 80016c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016c6:	4b18      	ldr	r3, [pc, #96]	@ (8001728 <trapecio_VD_simple_angulo+0x180>)
 80016c8:	edc3 7a00 	vstr	s15, [r3]

    if (v_desired > v_theo)    v_desired = v_theo;
 80016cc:	4b16      	ldr	r3, [pc, #88]	@ (8001728 <trapecio_VD_simple_angulo+0x180>)
 80016ce:	edd3 7a00 	vldr	s15, [r3]
 80016d2:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80016d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016de:	d502      	bpl.n	80016e6 <trapecio_VD_simple_angulo+0x13e>
 80016e0:	4a11      	ldr	r2, [pc, #68]	@ (8001728 <trapecio_VD_simple_angulo+0x180>)
 80016e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016e4:	6013      	str	r3, [r2, #0]
    if (v_desired < v_start)   v_desired = v_start;
 80016e6:	4b10      	ldr	r3, [pc, #64]	@ (8001728 <trapecio_VD_simple_angulo+0x180>)
 80016e8:	edd3 7a00 	vldr	s15, [r3]
 80016ec:	ed97 7a00 	vldr	s14, [r7]
 80016f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016f8:	dd02      	ble.n	8001700 <trapecio_VD_simple_angulo+0x158>
 80016fa:	4a0b      	ldr	r2, [pc, #44]	@ (8001728 <trapecio_VD_simple_angulo+0x180>)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	6013      	str	r3, [r2, #0]

    return (signo * v_desired)*3;
 8001700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001702:	ee07 3a90 	vmov	s15, r3
 8001706:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800170a:	4b07      	ldr	r3, [pc, #28]	@ (8001728 <trapecio_VD_simple_angulo+0x180>)
 800170c:	edd3 7a00 	vldr	s15, [r3]
 8001710:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001714:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8001718:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800171c:	eeb0 0a67 	vmov.f32	s0, s15
 8001720:	3730      	adds	r7, #48	@ 0x30
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	200004d8 	.word	0x200004d8
 800172c:	20000668 	.word	0x20000668
 8001730:	00000000 	.word	0x00000000

08001734 <Pwm_By_Speed_normal>:




int32_t Pwm_By_Speed_normal(float vars) {
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	ed87 0a01 	vstr	s0, [r7, #4]

		/*       FUNCION QUE DESCRIBE ACELERACION
		 *               y = 0,1641x + 10
		 */
	    int16_t speed = (int16_t) vars;
 800173e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001742:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001746:	ee17 3a90 	vmov	r3, s15
 800174a:	827b      	strh	r3, [r7, #18]
	    int8_t signo = (speed < 0) ? -1 : 1;
 800174c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001750:	2b00      	cmp	r3, #0
 8001752:	da02      	bge.n	800175a <Pwm_By_Speed_normal+0x26>
 8001754:	f04f 33ff 	mov.w	r3, #4294967295
 8001758:	e000      	b.n	800175c <Pwm_By_Speed_normal+0x28>
 800175a:	2301      	movs	r3, #1
 800175c:	747b      	strb	r3, [r7, #17]
	    int16_t magnitud = (speed < 0) ? -speed : speed;
 800175e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001762:	2b00      	cmp	r3, #0
 8001764:	bfb8      	it	lt
 8001766:	425b      	neglt	r3, r3
 8001768:	b29b      	uxth	r3, r3
 800176a:	81fb      	strh	r3, [r7, #14]

	    	float y = ((0.1641f * magnitud) + 6.0f);
 800176c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001770:	ee07 3a90 	vmov	s15, r3
 8001774:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001778:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80017e4 <Pwm_By_Speed_normal+0xb0>
 800177c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001780:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 8001784:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001788:	edc7 7a02 	vstr	s15, [r7, #8]
	    	int32_t PerPWM = (int32_t)roundf(y);
 800178c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001790:	f00a fb86 	bl	800bea0 <roundf>
 8001794:	eef0 7a40 	vmov.f32	s15, s0
 8001798:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800179c:	ee17 3a90 	vmov	r3, s15
 80017a0:	617b      	str	r3, [r7, #20]
	    	PerPWM *= signo;
 80017a2:	f997 2011 	ldrsb.w	r2, [r7, #17]
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	fb02 f303 	mul.w	r3, r2, r3
 80017ac:	617b      	str	r3, [r7, #20]

	    	if (PerPWM > 100) {
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	2b64      	cmp	r3, #100	@ 0x64
 80017b2:	dd02      	ble.n	80017ba <Pwm_By_Speed_normal+0x86>
	    	    PerPWM = 100;
 80017b4:	2364      	movs	r3, #100	@ 0x64
 80017b6:	617b      	str	r3, [r7, #20]
 80017b8:	e00f      	b.n	80017da <Pwm_By_Speed_normal+0xa6>
	    	}
	    	else if (PerPWM < -100) {
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 80017c0:	da03      	bge.n	80017ca <Pwm_By_Speed_normal+0x96>
	    	    PerPWM = -100;
 80017c2:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 80017c6:	617b      	str	r3, [r7, #20]
 80017c8:	e007      	b.n	80017da <Pwm_By_Speed_normal+0xa6>
	    	}
	    	else if (PerPWM >= 0 && PerPWM <= 4) {
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	db04      	blt.n	80017da <Pwm_By_Speed_normal+0xa6>
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	2b04      	cmp	r3, #4
 80017d4:	dc01      	bgt.n	80017da <Pwm_By_Speed_normal+0xa6>
	    	    PerPWM = 0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	617b      	str	r3, [r7, #20]
	    	}

	    return PerPWM;
 80017da:	697b      	ldr	r3, [r7, #20]
	}
 80017dc:	4618      	mov	r0, r3
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	3e2809d5 	.word	0x3e2809d5

080017e8 <fragmentacion>:




uint8_t fragmentacion(uint32_t dato, uint8_t frag_array[], uint8_t posicion) {
 80017e8:	b480      	push	{r7}
 80017ea:	b087      	sub	sp, #28
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	4613      	mov	r3, r2
 80017f4:	71fb      	strb	r3, [r7, #7]

	/* MI FUNCION LLENA HACIA LA DERECHA DESDE LA POSICION QUE UNO DIGA LLENA 1 BYTE
	 *  POSICION DEPENDE DE MI Y ARREGLO Y DATO SON LOS QUE UNO QUIERE COMUNICAR PARA LA FUNCION ENVIARPAQUETE();
	 *  ADEMAS ORGANIZA AUTOMATICAMENTE.
	 */
	uint8_t i = 0;
 80017f6:	2300      	movs	r3, #0
 80017f8:	75fb      	strb	r3, [r7, #23]
    while (dato > 255) {
 80017fa:	e00d      	b.n	8001818 <fragmentacion+0x30>
        frag_array[posicion + i] = 0xFF;
 80017fc:	79fa      	ldrb	r2, [r7, #7]
 80017fe:	7dfb      	ldrb	r3, [r7, #23]
 8001800:	4413      	add	r3, r2
 8001802:	461a      	mov	r2, r3
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	4413      	add	r3, r2
 8001808:	22ff      	movs	r2, #255	@ 0xff
 800180a:	701a      	strb	r2, [r3, #0]
        dato -= 255;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	3bff      	subs	r3, #255	@ 0xff
 8001810:	60fb      	str	r3, [r7, #12]
        i++;
 8001812:	7dfb      	ldrb	r3, [r7, #23]
 8001814:	3301      	adds	r3, #1
 8001816:	75fb      	strb	r3, [r7, #23]
    while (dato > 255) {
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2bff      	cmp	r3, #255	@ 0xff
 800181c:	d8ee      	bhi.n	80017fc <fragmentacion+0x14>
    }

    frag_array[posicion + i] = dato & 0xFF;
 800181e:	79fa      	ldrb	r2, [r7, #7]
 8001820:	7dfb      	ldrb	r3, [r7, #23]
 8001822:	4413      	add	r3, r2
 8001824:	461a      	mov	r2, r3
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	4413      	add	r3, r2
 800182a:	68fa      	ldr	r2, [r7, #12]
 800182c:	b2d2      	uxtb	r2, r2
 800182e:	701a      	strb	r2, [r3, #0]
    int8_t NFRAG = i+1;
 8001830:	7dfb      	ldrb	r3, [r7, #23]
 8001832:	3301      	adds	r3, #1
 8001834:	b2db      	uxtb	r3, r3
 8001836:	75bb      	strb	r3, [r7, #22]
    return NFRAG; //  REVISAR NUMERO DE FRAGMENTACIONES EN VIVO...
 8001838:	7dbb      	ldrb	r3, [r7, #22]
}
 800183a:	4618      	mov	r0, r3
 800183c:	371c      	adds	r7, #28
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <VSPEED_QT>:


////////////////////     AQUI NO DEPENDO DE  NADIE   //////////////

uint16_t VSPEED_QT(uint8_t* DatosRX) {
 8001846:	b480      	push	{r7}
 8001848:	b085      	sub	sp, #20
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]

    int16_t magnitud = (int16_t)((DatosRX[4] << 8) | DatosRX[5]);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	3304      	adds	r3, #4
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	021b      	lsls	r3, r3, #8
 8001856:	b21a      	sxth	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3305      	adds	r3, #5
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	b21b      	sxth	r3, r3
 8001860:	4313      	orrs	r3, r2
 8001862:	81fb      	strh	r3, [r7, #14]
    int8_t signo = (DatosRX[3] == 0x01) ? -1 : 1;   // 0x01 = negativo  y 0x00 = positivo //AGREGO SIGNO
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3303      	adds	r3, #3
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d102      	bne.n	8001874 <VSPEED_QT+0x2e>
 800186e:	f04f 33ff 	mov.w	r3, #4294967295
 8001872:	e000      	b.n	8001876 <VSPEED_QT+0x30>
 8001874:	2301      	movs	r3, #1
 8001876:	737b      	strb	r3, [r7, #13]
    return magnitud * signo;
 8001878:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800187c:	b29a      	uxth	r2, r3
 800187e:	89fb      	ldrh	r3, [r7, #14]
 8001880:	fb12 f303 	smulbb	r3, r2, r3
 8001884:	b29b      	uxth	r3, r3
}
 8001886:	4618      	mov	r0, r3
 8001888:	3714      	adds	r7, #20
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
	...

08001894 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001894:	b5b0      	push	{r4, r5, r7, lr}
 8001896:	b08e      	sub	sp, #56	@ 0x38
 8001898:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800189a:	f001 fc1d 	bl	80030d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800189e:	f000 facb 	bl	8001e38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018a2:	f000 fdf7 	bl	8002494 <MX_GPIO_Init>
  MX_DMA_Init();
 80018a6:	f000 fdd5 	bl	8002454 <MX_DMA_Init>
  MX_I2C1_Init();
 80018aa:	f000 fba9 	bl	8002000 <MX_I2C1_Init>
  MX_TIM2_Init();
 80018ae:	f000 fc27 	bl	8002100 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80018b2:	f009 fcab 	bl	800b20c <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 80018b6:	f000 fc77 	bl	80021a8 <MX_TIM3_Init>
  MX_TIM9_Init();
 80018ba:	f000 fd49 	bl	8002350 <MX_TIM9_Init>
  MX_TIM4_Init();
 80018be:	f000 fcc7 	bl	8002250 <MX_TIM4_Init>
  MX_ADC1_Init();
 80018c2:	f000 fb21 	bl	8001f08 <MX_ADC1_Init>
  MX_TIM1_Init();
 80018c6:	f000 fbc9 	bl	800205c <MX_TIM1_Init>
  MX_TIM11_Init();
 80018ca:	f000 fd9f 	bl	800240c <MX_TIM11_Init>
  MX_TIM10_Init();
 80018ce:	f000 fd79 	bl	80023c4 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  motoresInit(&htim4, TIM_CHANNEL_1, TIM_CHANNEL_2); //MOTORES
 80018d2:	2204      	movs	r2, #4
 80018d4:	2100      	movs	r1, #0
 80018d6:	48b7      	ldr	r0, [pc, #732]	@ (8001bb4 <main+0x320>)
 80018d8:	f001 f81a 	bl	8002910 <motoresInit>

  HAL_TIM_Base_Start_IT(&htim11);  //ESTOY TRABAJANDO ISR PARA TIM.  :)
 80018dc:	48b6      	ldr	r0, [pc, #728]	@ (8001bb8 <main+0x324>)
 80018de:	f005 f8df 	bl	8006aa0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim9); //ESTO PUDE CAUSAR DESFASE CREO
 80018e2:	48b6      	ldr	r0, [pc, #728]	@ (8001bbc <main+0x328>)
 80018e4:	f005 f882 	bl	80069ec <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim1);  // SI SE COMPLICA COLOCAR TIMER5 JAJA 9600/10 = MS
 80018e8:	48b5      	ldr	r0, [pc, #724]	@ (8001bc0 <main+0x32c>)
 80018ea:	f005 f87f 	bl	80069ec <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim10);
 80018ee:	48b5      	ldr	r0, [pc, #724]	@ (8001bc4 <main+0x330>)
 80018f0:	f005 f87c 	bl	80069ec <HAL_TIM_Base_Start>

  CONVERTER_INIT(&hadc1, &htim10, canales, puertos_led, pines_led);
 80018f4:	4bb4      	ldr	r3, [pc, #720]	@ (8001bc8 <main+0x334>)
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	4bb4      	ldr	r3, [pc, #720]	@ (8001bcc <main+0x338>)
 80018fa:	4ab5      	ldr	r2, [pc, #724]	@ (8001bd0 <main+0x33c>)
 80018fc:	49b1      	ldr	r1, [pc, #708]	@ (8001bc4 <main+0x330>)
 80018fe:	48b5      	ldr	r0, [pc, #724]	@ (8001bd4 <main+0x340>)
 8001900:	f7ff fa9e 	bl	8000e40 <CONVERTER_INIT>

  odo_init_reset(&ps);
 8001904:	48b4      	ldr	r0, [pc, #720]	@ (8001bd8 <main+0x344>)
 8001906:	f000 feb9 	bl	800267c <odo_init_reset>

  delay_us_tim_init();
 800190a:	f001 f8e5 	bl	8002ad8 <delay_us_tim_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);  //importante por encoder mode t1, t2.
 800190e:	213c      	movs	r1, #60	@ 0x3c
 8001910:	48b2      	ldr	r0, [pc, #712]	@ (8001bdc <main+0x348>)
 8001912:	f005 fad7 	bl	8006ec4 <HAL_TIM_Encoder_Start>
HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001916:	213c      	movs	r1, #60	@ 0x3c
 8001918:	48b1      	ldr	r0, [pc, #708]	@ (8001be0 <main+0x34c>)
 800191a:	f005 fad3 	bl	8006ec4 <HAL_TIM_Encoder_Start>
HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcValue ,5);
 800191e:	2205      	movs	r2, #5
 8001920:	49b0      	ldr	r1, [pc, #704]	@ (8001be4 <main+0x350>)
 8001922:	48ac      	ldr	r0, [pc, #688]	@ (8001bd4 <main+0x340>)
 8001924:	f001 fe24 	bl	8003570 <HAL_ADC_Start_DMA>



   __HAL_TIM_SET_COUNTER(&htim1,0);  ////BORRAR EN UN FUTURO PERO RECTIFICAR QUE NO HACE NADA... INMEDIATAMENTE...
 8001928:	4ba5      	ldr	r3, [pc, #660]	@ (8001bc0 <main+0x32c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2200      	movs	r2, #0
 800192e:	625a      	str	r2, [r3, #36]	@ 0x24

////////////////////BLOQQUE PARA INCICIAR///////////////
    while ( HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_SET )
 8001930:	bf00      	nop
 8001932:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001936:	48ac      	ldr	r0, [pc, #688]	@ (8001be8 <main+0x354>)
 8001938:	f002 ffe2 	bl	8004900 <HAL_GPIO_ReadPin>
 800193c:	4603      	mov	r3, r0
 800193e:	2b01      	cmp	r3, #1
 8001940:	d0f7      	beq.n	8001932 <main+0x9e>
   {

   }
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15,1);
 8001942:	2201      	movs	r2, #1
 8001944:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001948:	48a8      	ldr	r0, [pc, #672]	@ (8001bec <main+0x358>)
 800194a:	f002 fff1 	bl	8004930 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 800194e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001952:	f001 fc33 	bl	80031bc <HAL_Delay>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15,0);
 8001956:	2200      	movs	r2, #0
 8001958:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800195c:	48a3      	ldr	r0, [pc, #652]	@ (8001bec <main+0x358>)
 800195e:	f002 ffe7 	bl	8004930 <HAL_GPIO_WritePin>
    HAL_Delay(2000);
 8001962:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001966:	f001 fc29 	bl	80031bc <HAL_Delay>

  while (1)
  {


	  ReadAndAverageSensors(avgReadings, 10);
 800196a:	210a      	movs	r1, #10
 800196c:	48a0      	ldr	r0, [pc, #640]	@ (8001bf0 <main+0x35c>)
 800196e:	f7ff faa9 	bl	8000ec4 <ReadAndAverageSensors>
	  TRANS_CONVS = CONV_Y_TRANS();
 8001972:	4ca0      	ldr	r4, [pc, #640]	@ (8001bf4 <main+0x360>)
 8001974:	463b      	mov	r3, r7
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff fb56 	bl	8001028 <CONV_Y_TRANS>
 800197c:	4625      	mov	r5, r4
 800197e:	463c      	mov	r4, r7
 8001980:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001982:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001984:	6823      	ldr	r3, [r4, #0]
 8001986:	602b      	str	r3, [r5, #0]

	      	  pulsosL = (__HAL_TIM_GET_COUNTER(&htim2)); //DEJAR QUIETO
 8001988:	4b94      	ldr	r3, [pc, #592]	@ (8001bdc <main+0x348>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800198e:	461a      	mov	r2, r3
 8001990:	4b99      	ldr	r3, [pc, #612]	@ (8001bf8 <main+0x364>)
 8001992:	601a      	str	r2, [r3, #0]
	      	  pulsosR_temp = (__HAL_TIM_GET_COUNTER(&htim3));
 8001994:	4b92      	ldr	r3, [pc, #584]	@ (8001be0 <main+0x34c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800199a:	b21a      	sxth	r2, r3
 800199c:	4b97      	ldr	r3, [pc, #604]	@ (8001bfc <main+0x368>)
 800199e:	801a      	strh	r2, [r3, #0]
	  	  	  pulsosR = (int32_t) pulsosR_temp;  //DEJAR QUIETO*/
 80019a0:	4b96      	ldr	r3, [pc, #600]	@ (8001bfc <main+0x368>)
 80019a2:	881b      	ldrh	r3, [r3, #0]
 80019a4:	b21b      	sxth	r3, r3
 80019a6:	461a      	mov	r2, r3
 80019a8:	4b95      	ldr	r3, [pc, #596]	@ (8001c00 <main+0x36c>)
 80019aa:	601a      	str	r2, [r3, #0]

	  if (tim_pro[TWDOG] == 0) {
 80019ac:	4b95      	ldr	r3, [pc, #596]	@ (8001c04 <main+0x370>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d122      	bne.n	80019fa <main+0x166>

		  dL = pulsosL - lastCountLeft;
 80019b4:	4b90      	ldr	r3, [pc, #576]	@ (8001bf8 <main+0x364>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	4b93      	ldr	r3, [pc, #588]	@ (8001c08 <main+0x374>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	4a93      	ldr	r2, [pc, #588]	@ (8001c0c <main+0x378>)
 80019c0:	6013      	str	r3, [r2, #0]
		  dR = pulsosR - lastCountRight;
 80019c2:	4b8f      	ldr	r3, [pc, #572]	@ (8001c00 <main+0x36c>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	4b92      	ldr	r3, [pc, #584]	@ (8001c10 <main+0x37c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	4a91      	ldr	r2, [pc, #580]	@ (8001c14 <main+0x380>)
 80019ce:	6013      	str	r3, [r2, #0]
		  lastCountLeft  = pulsosL;
 80019d0:	4b89      	ldr	r3, [pc, #548]	@ (8001bf8 <main+0x364>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a8c      	ldr	r2, [pc, #560]	@ (8001c08 <main+0x374>)
 80019d6:	6013      	str	r3, [r2, #0]
		  lastCountRight = pulsosR;
 80019d8:	4b89      	ldr	r3, [pc, #548]	@ (8001c00 <main+0x36c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a8c      	ldr	r2, [pc, #560]	@ (8001c10 <main+0x37c>)
 80019de:	6013      	str	r3, [r2, #0]
	      actualizar_odometria(&ps, dL, dR, 0.01f);
 80019e0:	4b8a      	ldr	r3, [pc, #552]	@ (8001c0c <main+0x378>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a8b      	ldr	r2, [pc, #556]	@ (8001c14 <main+0x380>)
 80019e6:	6812      	ldr	r2, [r2, #0]
 80019e8:	ed9f 0a8b 	vldr	s0, [pc, #556]	@ 8001c18 <main+0x384>
 80019ec:	4619      	mov	r1, r3
 80019ee:	487a      	ldr	r0, [pc, #488]	@ (8001bd8 <main+0x344>)
 80019f0:	f000 fe7e 	bl	80026f0 <actualizar_odometria>

	      tim_pro[TWDOG] = 10;
 80019f4:	4b83      	ldr	r3, [pc, #524]	@ (8001c04 <main+0x370>)
 80019f6:	220a      	movs	r2, #10
 80019f8:	605a      	str	r2, [r3, #4]

	    motores((pwmTrapecio),(-pwmTrapecio));      */

//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);

	  if (tim_pro[TSPEED] == 0) {
 80019fa:	4b82      	ldr	r3, [pc, #520]	@ (8001c04 <main+0x370>)
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f040 811f 	bne.w	8001c42 <main+0x3ae>
	      tim_pro[TSPEED] = 11;
 8001a04:	4b7f      	ldr	r3, [pc, #508]	@ (8001c04 <main+0x370>)
 8001a06:	220b      	movs	r2, #11
 8001a08:	611a      	str	r2, [r3, #16]

	      switch (estado_mov) {
 8001a0a:	4b84      	ldr	r3, [pc, #528]	@ (8001c1c <main+0x388>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	f200 8117 	bhi.w	8001c42 <main+0x3ae>
 8001a14:	a201      	add	r2, pc, #4	@ (adr r2, 8001a1c <main+0x188>)
 8001a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a1a:	bf00      	nop
 8001a1c:	08001a31 	.word	0x08001a31
 8001a20:	08001a93 	.word	0x08001a93
 8001a24:	08001aa3 	.word	0x08001aa3
 8001a28:	08001b3b 	.word	0x08001b3b
 8001a2c:	08001ba5 	.word	0x08001ba5

	          case ESTADO_AVANCE_TRAPECIO: {
	              float vel = trapecio_VD_simple(ps.avanceLineal, 20000, 0.011, 10, 150);
 8001a30:	4b69      	ldr	r3, [pc, #420]	@ (8001bd8 <main+0x344>)
 8001a32:	edd3 7a07 	vldr	s15, [r3, #28]
 8001a36:	ed9f 2a7a 	vldr	s4, [pc, #488]	@ 8001c20 <main+0x38c>
 8001a3a:	eef2 1a04 	vmov.f32	s3, #36	@ 0x41200000  10.0
 8001a3e:	ed9f 1a79 	vldr	s2, [pc, #484]	@ 8001c24 <main+0x390>
 8001a42:	eddf 0a79 	vldr	s1, [pc, #484]	@ 8001c28 <main+0x394>
 8001a46:	eeb0 0a67 	vmov.f32	s0, s15
 8001a4a:	f7ff fd07 	bl	800145c <trapecio_VD_simple>
 8001a4e:	ed87 0a07 	vstr	s0, [r7, #28]
	              int pwm = Pwm_By_Speed_normal(vel);
 8001a52:	ed97 0a07 	vldr	s0, [r7, #28]
 8001a56:	f7ff fe6d 	bl	8001734 <Pwm_By_Speed_normal>
 8001a5a:	61b8      	str	r0, [r7, #24]
	              motores(pwm, pwm);
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	b25b      	sxtb	r3, r3
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	b252      	sxtb	r2, r2
 8001a64:	4611      	mov	r1, r2
 8001a66:	4618      	mov	r0, r3
 8001a68:	f000 ff8e 	bl	8002988 <motores>

	              if (TRANS_CONVS.DIST4 < 50 ) {
 8001a6c:	4b61      	ldr	r3, [pc, #388]	@ (8001bf4 <main+0x360>)
 8001a6e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a72:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 8001c2c <main+0x398>
 8001a76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a7e:	d400      	bmi.n	8001a82 <main+0x1ee>
	                  motores(0, 0);  // STOP intermedio
	                  estado_mov = ESTADO_STOP_INTERMEDIO;
	              }
	              break;
 8001a80:	e0df      	b.n	8001c42 <main+0x3ae>
	                  motores(0, 0);  // STOP intermedio
 8001a82:	2100      	movs	r1, #0
 8001a84:	2000      	movs	r0, #0
 8001a86:	f000 ff7f 	bl	8002988 <motores>
	                  estado_mov = ESTADO_STOP_INTERMEDIO;
 8001a8a:	4b64      	ldr	r3, [pc, #400]	@ (8001c1c <main+0x388>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	701a      	strb	r2, [r3, #0]
	              break;
 8001a90:	e0d7      	b.n	8001c42 <main+0x3ae>
	          }

	          case ESTADO_STOP_INTERMEDIO: {
	              estado_mov = ESTADO_GIRO_TRAPECIO;
 8001a92:	4b62      	ldr	r3, [pc, #392]	@ (8001c1c <main+0x388>)
 8001a94:	2202      	movs	r2, #2
 8001a96:	701a      	strb	r2, [r3, #0]
	              ps.theta=0;
 8001a98:	4b4f      	ldr	r3, [pc, #316]	@ (8001bd8 <main+0x344>)
 8001a9a:	f04f 0200 	mov.w	r2, #0
 8001a9e:	609a      	str	r2, [r3, #8]
	              break;
 8001aa0:	e0cf      	b.n	8001c42 <main+0x3ae>
	          }


	          case ESTADO_GIRO_TRAPECIO: {
	              float vel_giro = trapecio_VD_simple_angulo(ps.theta, 3.9, 0.011, 400, 400, 100);
 8001aa2:	4b4d      	ldr	r3, [pc, #308]	@ (8001bd8 <main+0x344>)
 8001aa4:	edd3 7a02 	vldr	s15, [r3, #8]
 8001aa8:	eddf 2a61 	vldr	s5, [pc, #388]	@ 8001c30 <main+0x39c>
 8001aac:	ed9f 2a61 	vldr	s4, [pc, #388]	@ 8001c34 <main+0x3a0>
 8001ab0:	eddf 1a60 	vldr	s3, [pc, #384]	@ 8001c34 <main+0x3a0>
 8001ab4:	ed9f 1a5b 	vldr	s2, [pc, #364]	@ 8001c24 <main+0x390>
 8001ab8:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8001c38 <main+0x3a4>
 8001abc:	eeb0 0a67 	vmov.f32	s0, s15
 8001ac0:	f7ff fd72 	bl	80015a8 <trapecio_VD_simple_angulo>
 8001ac4:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
	              int pwm = Pwm_By_Speed_normal(fabsf(vel_giro));
 8001ac8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001acc:	eef0 7ae7 	vabs.f32	s15, s15
 8001ad0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ad4:	f7ff fe2e 	bl	8001734 <Pwm_By_Speed_normal>
 8001ad8:	6238      	str	r0, [r7, #32]
	              motores(pwm * (vel_giro > 0 ? 1 : -1), -pwm * (vel_giro > 0 ? 1 : -1));  //posible error....
 8001ada:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001ade:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ae6:	dd01      	ble.n	8001aec <main+0x258>
 8001ae8:	2201      	movs	r2, #1
 8001aea:	e000      	b.n	8001aee <main+0x25a>
 8001aec:	22ff      	movs	r2, #255	@ 0xff
 8001aee:	6a3b      	ldr	r3, [r7, #32]
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	fb12 f303 	smulbb	r3, r2, r3
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	b258      	sxtb	r0, r3
 8001afa:	6a3b      	ldr	r3, [r7, #32]
 8001afc:	425b      	negs	r3, r3
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001b04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b0c:	dd01      	ble.n	8001b12 <main+0x27e>
 8001b0e:	2201      	movs	r2, #1
 8001b10:	e000      	b.n	8001b14 <main+0x280>
 8001b12:	22ff      	movs	r2, #255	@ 0xff
 8001b14:	fb12 f303 	smulbb	r3, r2, r3
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	b25b      	sxtb	r3, r3
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	f000 ff33 	bl	8002988 <motores>

	              if (vel_giro == 0.0f) {
 8001b22:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001b26:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b2e:	f040 8087 	bne.w	8001c40 <main+0x3ac>
	                  estado_mov = ESTADO_AVANCE_FINAL;
 8001b32:	4b3a      	ldr	r3, [pc, #232]	@ (8001c1c <main+0x388>)
 8001b34:	2203      	movs	r2, #3
 8001b36:	701a      	strb	r2, [r3, #0]
	              }
	              break;
 8001b38:	e082      	b.n	8001c40 <main+0x3ac>
	          }

	          case ESTADO_AVANCE_FINAL: {
	              float vel = trapecio_VD_simple(ps.avanceLineal, 20000, 0.011, 100, 180);
 8001b3a:	4b27      	ldr	r3, [pc, #156]	@ (8001bd8 <main+0x344>)
 8001b3c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001b40:	ed9f 2a3e 	vldr	s4, [pc, #248]	@ 8001c3c <main+0x3a8>
 8001b44:	eddf 1a3a 	vldr	s3, [pc, #232]	@ 8001c30 <main+0x39c>
 8001b48:	ed9f 1a36 	vldr	s2, [pc, #216]	@ 8001c24 <main+0x390>
 8001b4c:	eddf 0a36 	vldr	s1, [pc, #216]	@ 8001c28 <main+0x394>
 8001b50:	eeb0 0a67 	vmov.f32	s0, s15
 8001b54:	f7ff fc82 	bl	800145c <trapecio_VD_simple>
 8001b58:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
	              int pwm = Pwm_By_Speed_normal(vel);
 8001b5c:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8001b60:	f7ff fde8 	bl	8001734 <Pwm_By_Speed_normal>
 8001b64:	62b8      	str	r0, [r7, #40]	@ 0x28
	              motores(pwm, pwm);
 8001b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b68:	b25b      	sxtb	r3, r3
 8001b6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b6c:	b252      	sxtb	r2, r2
 8001b6e:	4611      	mov	r1, r2
 8001b70:	4618      	mov	r0, r3
 8001b72:	f000 ff09 	bl	8002988 <motores>



	              if (TRANS_CONVS.DIST4 < 100) {
 8001b76:	4b1f      	ldr	r3, [pc, #124]	@ (8001bf4 <main+0x360>)
 8001b78:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b7c:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8001c30 <main+0x39c>
 8001b80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b88:	d400      	bmi.n	8001b8c <main+0x2f8>
                      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
	                  motores(0, 0);
	                  estado_mov = ESTADO_STOP_INTERMEDIO_2;
	              }

	              break;
 8001b8a:	e05a      	b.n	8001c42 <main+0x3ae>
                      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8001b8c:	2102      	movs	r1, #2
 8001b8e:	4816      	ldr	r0, [pc, #88]	@ (8001be8 <main+0x354>)
 8001b90:	f002 fee7 	bl	8004962 <HAL_GPIO_TogglePin>
	                  motores(0, 0);
 8001b94:	2100      	movs	r1, #0
 8001b96:	2000      	movs	r0, #0
 8001b98:	f000 fef6 	bl	8002988 <motores>
	                  estado_mov = ESTADO_STOP_INTERMEDIO_2;
 8001b9c:	4b1f      	ldr	r3, [pc, #124]	@ (8001c1c <main+0x388>)
 8001b9e:	2204      	movs	r2, #4
 8001ba0:	701a      	strb	r2, [r3, #0]
	              break;
 8001ba2:	e04e      	b.n	8001c42 <main+0x3ae>
	          }

	          case ESTADO_STOP_INTERMEDIO_2: {

	              ps.theta=0;
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd8 <main+0x344>)
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	609a      	str	r2, [r3, #8]
	              estado_mov = ESTADO_GIRO_TRAPECIO;
 8001bac:	4b1b      	ldr	r3, [pc, #108]	@ (8001c1c <main+0x388>)
 8001bae:	2202      	movs	r2, #2
 8001bb0:	701a      	strb	r2, [r3, #0]

	              break;
 8001bb2:	e046      	b.n	8001c42 <main+0x3ae>
 8001bb4:	200003b8 	.word	0x200003b8
 8001bb8:	20000490 	.word	0x20000490
 8001bbc:	20000400 	.word	0x20000400
 8001bc0:	200002e0 	.word	0x200002e0
 8001bc4:	20000448 	.word	0x20000448
 8001bc8:	20000020 	.word	0x20000020
 8001bcc:	20000010 	.word	0x20000010
 8001bd0:	20000000 	.word	0x20000000
 8001bd4:	200001e4 	.word	0x200001e4
 8001bd8:	20000544 	.word	0x20000544
 8001bdc:	20000328 	.word	0x20000328
 8001be0:	20000370 	.word	0x20000370
 8001be4:	20000574 	.word	0x20000574
 8001be8:	40020400 	.word	0x40020400
 8001bec:	40020800 	.word	0x40020800
 8001bf0:	200004f8 	.word	0x200004f8
 8001bf4:	20000500 	.word	0x20000500
 8001bf8:	20000630 	.word	0x20000630
 8001bfc:	2000062a 	.word	0x2000062a
 8001c00:	2000062c 	.word	0x2000062c
 8001c04:	20000654 	.word	0x20000654
 8001c08:	20000634 	.word	0x20000634
 8001c0c:	2000063c 	.word	0x2000063c
 8001c10:	20000638 	.word	0x20000638
 8001c14:	20000640 	.word	0x20000640
 8001c18:	3c23d70a 	.word	0x3c23d70a
 8001c1c:	20000650 	.word	0x20000650
 8001c20:	43160000 	.word	0x43160000
 8001c24:	3c343958 	.word	0x3c343958
 8001c28:	469c4000 	.word	0x469c4000
 8001c2c:	42480000 	.word	0x42480000
 8001c30:	42c80000 	.word	0x42c80000
 8001c34:	43c80000 	.word	0x43c80000
 8001c38:	4079999a 	.word	0x4079999a
 8001c3c:	43340000 	.word	0x43340000
	              break;
 8001c40:	bf00      	nop
	  }




	  VELOCIDAD_BOT_REAL= velMotores;
 8001c42:	4b67      	ldr	r3, [pc, #412]	@ (8001de0 <main+0x54c>)
 8001c44:	edd3 7a00 	vldr	s15, [r3]
 8001c48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c4c:	ee17 2a90 	vmov	r2, s15
 8001c50:	4b64      	ldr	r3, [pc, #400]	@ (8001de4 <main+0x550>)
 8001c52:	601a      	str	r2, [r3, #0]




      if(tim_pro[TLED]==0){
 8001c54:	4b64      	ldr	r3, [pc, #400]	@ (8001de8 <main+0x554>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d107      	bne.n	8001c6c <main+0x3d8>
    	  tim_pro[TLED]=100;     //MIRAR CON OSCILOSCOPIO...
 8001c5c:	4b62      	ldr	r3, [pc, #392]	@ (8001de8 <main+0x554>)
 8001c5e:	2264      	movs	r2, #100	@ 0x64
 8001c60:	601a      	str	r2, [r3, #0]
    	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001c62:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c66:	4861      	ldr	r0, [pc, #388]	@ (8001dec <main+0x558>)
 8001c68:	f002 fe7b 	bl	8004962 <HAL_GPIO_TogglePin>
      }


      PUNTOS_X               = ps.x;
 8001c6c:	4b60      	ldr	r3, [pc, #384]	@ (8001df0 <main+0x55c>)
 8001c6e:	edd3 7a00 	vldr	s15, [r3]
 8001c72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c76:	ee17 2a90 	vmov	r2, s15
 8001c7a:	4b5e      	ldr	r3, [pc, #376]	@ (8001df4 <main+0x560>)
 8001c7c:	601a      	str	r2, [r3, #0]
      PUNTOS_Y               = ps.y;
 8001c7e:	4b5c      	ldr	r3, [pc, #368]	@ (8001df0 <main+0x55c>)
 8001c80:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c88:	ee17 2a90 	vmov	r2, s15
 8001c8c:	4b5a      	ldr	r3, [pc, #360]	@ (8001df8 <main+0x564>)
 8001c8e:	601a      	str	r2, [r3, #0]
      DIS_MOTOR_L            = ps.left_distance_mm;
 8001c90:	4b57      	ldr	r3, [pc, #348]	@ (8001df0 <main+0x55c>)
 8001c92:	edd3 7a08 	vldr	s15, [r3, #32]
 8001c96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c9a:	ee17 2a90 	vmov	r2, s15
 8001c9e:	4b57      	ldr	r3, [pc, #348]	@ (8001dfc <main+0x568>)
 8001ca0:	601a      	str	r2, [r3, #0]
      DIS_MOTOR_R            = ps.right_distance_mm;
 8001ca2:	4b53      	ldr	r3, [pc, #332]	@ (8001df0 <main+0x55c>)
 8001ca4:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001ca8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cac:	ee17 2a90 	vmov	r2, s15
 8001cb0:	4b53      	ldr	r3, [pc, #332]	@ (8001e00 <main+0x56c>)
 8001cb2:	601a      	str	r2, [r3, #0]
      THETA                  = ps.theta;
 8001cb4:	4b4e      	ldr	r3, [pc, #312]	@ (8001df0 <main+0x55c>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	4a52      	ldr	r2, [pc, #328]	@ (8001e04 <main+0x570>)
 8001cba:	6013      	str	r3, [r2, #0]
      VEL_MOTOR_L            = ps.velMotorL;
 8001cbc:	4b4c      	ldr	r3, [pc, #304]	@ (8001df0 <main+0x55c>)
 8001cbe:	edd3 7a03 	vldr	s15, [r3, #12]
 8001cc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cc6:	ee17 2a90 	vmov	r2, s15
 8001cca:	4b4f      	ldr	r3, [pc, #316]	@ (8001e08 <main+0x574>)
 8001ccc:	601a      	str	r2, [r3, #0]
      VEL_MOTOR_R            = ps.velMotorR;
 8001cce:	4b48      	ldr	r3, [pc, #288]	@ (8001df0 <main+0x55c>)
 8001cd0:	edd3 7a04 	vldr	s15, [r3, #16]
 8001cd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cd8:	ee17 2a90 	vmov	r2, s15
 8001cdc:	4b4b      	ldr	r3, [pc, #300]	@ (8001e0c <main+0x578>)
 8001cde:	601a      	str	r2, [r3, #0]
      VEL_LINEAL             = ps.velLineal;
 8001ce0:	4b43      	ldr	r3, [pc, #268]	@ (8001df0 <main+0x55c>)
 8001ce2:	edd3 7a05 	vldr	s15, [r3, #20]
 8001ce6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cea:	ee17 2a90 	vmov	r2, s15
 8001cee:	4b48      	ldr	r3, [pc, #288]	@ (8001e10 <main+0x57c>)
 8001cf0:	601a      	str	r2, [r3, #0]
      VEL_ANGULAR            = ps.velAngular;
 8001cf2:	4b3f      	ldr	r3, [pc, #252]	@ (8001df0 <main+0x55c>)
 8001cf4:	edd3 7a06 	vldr	s15, [r3, #24]
 8001cf8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cfc:	ee17 2a90 	vmov	r2, s15
 8001d00:	4b44      	ldr	r3, [pc, #272]	@ (8001e14 <main+0x580>)
 8001d02:	601a      	str	r2, [r3, #0]
      AVANCE_LINEA           = ps.avanceLineal;   //ESTO SE SUPONE ES LO QUE AVANZO
 8001d04:	4b3a      	ldr	r3, [pc, #232]	@ (8001df0 <main+0x55c>)
 8001d06:	edd3 7a07 	vldr	s15, [r3, #28]
 8001d0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d0e:	ee17 2a90 	vmov	r2, s15
 8001d12:	4b41      	ldr	r3, [pc, #260]	@ (8001e18 <main+0x584>)
 8001d14:	601a      	str	r2, [r3, #0]
      LEFT_DISTANCE_MM_ACUM  = ps.left_distance_mm_acum;
 8001d16:	4b36      	ldr	r3, [pc, #216]	@ (8001df0 <main+0x55c>)
 8001d18:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001d1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d20:	ee17 2a90 	vmov	r2, s15
 8001d24:	4b3d      	ldr	r3, [pc, #244]	@ (8001e1c <main+0x588>)
 8001d26:	601a      	str	r2, [r3, #0]
      RIGHT_DISTANCE_MM_ACUM = ps.right_distance_mm_acum;
 8001d28:	4b31      	ldr	r3, [pc, #196]	@ (8001df0 <main+0x55c>)
 8001d2a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001d2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d32:	ee17 2a90 	vmov	r2, s15
 8001d36:	4b3a      	ldr	r3, [pc, #232]	@ (8001e20 <main+0x58c>)
 8001d38:	601a      	str	r2, [r3, #0]


      MMS = VEL_MOTOR_R;
 8001d3a:	4b34      	ldr	r3, [pc, #208]	@ (8001e0c <main+0x578>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	461a      	mov	r2, r3
 8001d40:	4b38      	ldr	r3, [pc, #224]	@ (8001e24 <main+0x590>)
 8001d42:	601a      	str	r2, [r3, #0]

      fragmentacion(MMS, COMUNICACION, 2);
 8001d44:	4b37      	ldr	r3, [pc, #220]	@ (8001e24 <main+0x590>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2202      	movs	r2, #2
 8001d4a:	4937      	ldr	r1, [pc, #220]	@ (8001e28 <main+0x594>)
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff fd4b 	bl	80017e8 <fragmentacion>
      fragmentacion(VELOCIDAD_BOT_REAL, COMUNICACION, 5);
 8001d52:	4b24      	ldr	r3, [pc, #144]	@ (8001de4 <main+0x550>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2205      	movs	r2, #5
 8001d58:	4933      	ldr	r1, [pc, #204]	@ (8001e28 <main+0x594>)
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff fd44 	bl	80017e8 <fragmentacion>
      fragmentacion(TRANS_CONVS.DIST1, COMUNICACION, 8);
 8001d60:	4b32      	ldr	r3, [pc, #200]	@ (8001e2c <main+0x598>)
 8001d62:	edd3 7a00 	vldr	s15, [r3]
 8001d66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d6a:	2208      	movs	r2, #8
 8001d6c:	492e      	ldr	r1, [pc, #184]	@ (8001e28 <main+0x594>)
 8001d6e:	ee17 0a90 	vmov	r0, s15
 8001d72:	f7ff fd39 	bl	80017e8 <fragmentacion>
      fragmentacion(TRANS_CONVS.DIST2, COMUNICACION, 9);
 8001d76:	4b2d      	ldr	r3, [pc, #180]	@ (8001e2c <main+0x598>)
 8001d78:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d80:	2209      	movs	r2, #9
 8001d82:	4929      	ldr	r1, [pc, #164]	@ (8001e28 <main+0x594>)
 8001d84:	ee17 0a90 	vmov	r0, s15
 8001d88:	f7ff fd2e 	bl	80017e8 <fragmentacion>
      fragmentacion(TRANS_CONVS.DIST3, COMUNICACION, 10);
 8001d8c:	4b27      	ldr	r3, [pc, #156]	@ (8001e2c <main+0x598>)
 8001d8e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d96:	220a      	movs	r2, #10
 8001d98:	4923      	ldr	r1, [pc, #140]	@ (8001e28 <main+0x594>)
 8001d9a:	ee17 0a90 	vmov	r0, s15
 8001d9e:	f7ff fd23 	bl	80017e8 <fragmentacion>
      fragmentacion(TRANS_CONVS.DIST4, COMUNICACION, 11);
 8001da2:	4b22      	ldr	r3, [pc, #136]	@ (8001e2c <main+0x598>)
 8001da4:	edd3 7a03 	vldr	s15, [r3, #12]
 8001da8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dac:	220b      	movs	r2, #11
 8001dae:	491e      	ldr	r1, [pc, #120]	@ (8001e28 <main+0x594>)
 8001db0:	ee17 0a90 	vmov	r0, s15
 8001db4:	f7ff fd18 	bl	80017e8 <fragmentacion>



	  if(tim_pro[TTALK]==0){
 8001db8:	4b0b      	ldr	r3, [pc, #44]	@ (8001de8 <main+0x554>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d106      	bne.n	8001dce <main+0x53a>
	   	  	  tim_pro[TTALK]=100;
 8001dc0:	4b09      	ldr	r3, [pc, #36]	@ (8001de8 <main+0x554>)
 8001dc2:	2264      	movs	r2, #100	@ 0x64
 8001dc4:	609a      	str	r2, [r3, #8]

	   		  //sprintf (texto, "%5u %5u %5u %5u %5u \n", adcValue[0],adcValue[1],adcValue[2],adcValue[3],adcValue[4]);
	   		  //CDC_Transmit_FS(texto, strlen(texto));  //

		 EnviarPaquete(COMUNICACION, 20);
 8001dc6:	2114      	movs	r1, #20
 8001dc8:	4817      	ldr	r0, [pc, #92]	@ (8001e28 <main+0x594>)
 8001dca:	f7ff fb03 	bl	80013d4 <EnviarPaquete>

	  }
	    //  __HAL_TIM_SET_COUNTER(&htim1, 0);
      */

	  	  SPEEDE = VSPEED_QT(DatosRX);
 8001dce:	4818      	ldr	r0, [pc, #96]	@ (8001e30 <main+0x59c>)
 8001dd0:	f7ff fd39 	bl	8001846 <VSPEED_QT>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	b21a      	sxth	r2, r3
 8001dd8:	4b16      	ldr	r3, [pc, #88]	@ (8001e34 <main+0x5a0>)
 8001dda:	801a      	strh	r2, [r3, #0]
	  ReadAndAverageSensors(avgReadings, 10);
 8001ddc:	e5c5      	b.n	800196a <main+0xd6>
 8001dde:	bf00      	nop
 8001de0:	200004f0 	.word	0x200004f0
 8001de4:	200004f4 	.word	0x200004f4
 8001de8:	20000654 	.word	0x20000654
 8001dec:	40020800 	.word	0x40020800
 8001df0:	20000544 	.word	0x20000544
 8001df4:	20000514 	.word	0x20000514
 8001df8:	20000518 	.word	0x20000518
 8001dfc:	2000051c 	.word	0x2000051c
 8001e00:	20000520 	.word	0x20000520
 8001e04:	20000524 	.word	0x20000524
 8001e08:	20000528 	.word	0x20000528
 8001e0c:	2000052c 	.word	0x2000052c
 8001e10:	20000530 	.word	0x20000530
 8001e14:	20000534 	.word	0x20000534
 8001e18:	20000538 	.word	0x20000538
 8001e1c:	2000053c 	.word	0x2000053c
 8001e20:	20000540 	.word	0x20000540
 8001e24:	20000608 	.word	0x20000608
 8001e28:	2000060c 	.word	0x2000060c
 8001e2c:	20000500 	.word	0x20000500
 8001e30:	20000584 	.word	0x20000584
 8001e34:	20000580 	.word	0x20000580

08001e38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b094      	sub	sp, #80	@ 0x50
 8001e3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e3e:	f107 0320 	add.w	r3, r7, #32
 8001e42:	2230      	movs	r2, #48	@ 0x30
 8001e44:	2100      	movs	r1, #0
 8001e46:	4618      	mov	r0, r3
 8001e48:	f009 fef6 	bl	800bc38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e4c:	f107 030c 	add.w	r3, r7, #12
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	609a      	str	r2, [r3, #8]
 8001e58:	60da      	str	r2, [r3, #12]
 8001e5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	60bb      	str	r3, [r7, #8]
 8001e60:	4b27      	ldr	r3, [pc, #156]	@ (8001f00 <SystemClock_Config+0xc8>)
 8001e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e64:	4a26      	ldr	r2, [pc, #152]	@ (8001f00 <SystemClock_Config+0xc8>)
 8001e66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e6c:	4b24      	ldr	r3, [pc, #144]	@ (8001f00 <SystemClock_Config+0xc8>)
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e74:	60bb      	str	r3, [r7, #8]
 8001e76:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e78:	2300      	movs	r3, #0
 8001e7a:	607b      	str	r3, [r7, #4]
 8001e7c:	4b21      	ldr	r3, [pc, #132]	@ (8001f04 <SystemClock_Config+0xcc>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a20      	ldr	r2, [pc, #128]	@ (8001f04 <SystemClock_Config+0xcc>)
 8001e82:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e86:	6013      	str	r3, [r2, #0]
 8001e88:	4b1e      	ldr	r3, [pc, #120]	@ (8001f04 <SystemClock_Config+0xcc>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e90:	607b      	str	r3, [r7, #4]
 8001e92:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e94:	2301      	movs	r3, #1
 8001e96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e98:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e9c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ea2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001ea8:	2319      	movs	r3, #25
 8001eaa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001eac:	23c0      	movs	r3, #192	@ 0xc0
 8001eae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001eb4:	2304      	movs	r3, #4
 8001eb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eb8:	f107 0320 	add.w	r3, r7, #32
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f004 f901 	bl	80060c4 <HAL_RCC_OscConfig>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ec8:	f000 fbd2 	bl	8002670 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ecc:	230f      	movs	r3, #15
 8001ece:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ed8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001edc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001ee2:	f107 030c 	add.w	r3, r7, #12
 8001ee6:	2103      	movs	r1, #3
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f004 fb63 	bl	80065b4 <HAL_RCC_ClockConfig>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001ef4:	f000 fbbc 	bl	8002670 <Error_Handler>
  }
}
 8001ef8:	bf00      	nop
 8001efa:	3750      	adds	r7, #80	@ 0x50
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40023800 	.word	0x40023800
 8001f04:	40007000 	.word	0x40007000

08001f08 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f0e:	463b      	mov	r3, r7
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	605a      	str	r2, [r3, #4]
 8001f16:	609a      	str	r2, [r3, #8]
 8001f18:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001f1a:	4b36      	ldr	r3, [pc, #216]	@ (8001ff4 <MX_ADC1_Init+0xec>)
 8001f1c:	4a36      	ldr	r2, [pc, #216]	@ (8001ff8 <MX_ADC1_Init+0xf0>)
 8001f1e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001f20:	4b34      	ldr	r3, [pc, #208]	@ (8001ff4 <MX_ADC1_Init+0xec>)
 8001f22:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001f26:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001f28:	4b32      	ldr	r3, [pc, #200]	@ (8001ff4 <MX_ADC1_Init+0xec>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001f2e:	4b31      	ldr	r3, [pc, #196]	@ (8001ff4 <MX_ADC1_Init+0xec>)
 8001f30:	2201      	movs	r2, #1
 8001f32:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001f34:	4b2f      	ldr	r3, [pc, #188]	@ (8001ff4 <MX_ADC1_Init+0xec>)
 8001f36:	2201      	movs	r2, #1
 8001f38:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f3a:	4b2e      	ldr	r3, [pc, #184]	@ (8001ff4 <MX_ADC1_Init+0xec>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f42:	4b2c      	ldr	r3, [pc, #176]	@ (8001ff4 <MX_ADC1_Init+0xec>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f48:	4b2a      	ldr	r3, [pc, #168]	@ (8001ff4 <MX_ADC1_Init+0xec>)
 8001f4a:	4a2c      	ldr	r2, [pc, #176]	@ (8001ffc <MX_ADC1_Init+0xf4>)
 8001f4c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f4e:	4b29      	ldr	r3, [pc, #164]	@ (8001ff4 <MX_ADC1_Init+0xec>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8001f54:	4b27      	ldr	r3, [pc, #156]	@ (8001ff4 <MX_ADC1_Init+0xec>)
 8001f56:	2204      	movs	r2, #4
 8001f58:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001f5a:	4b26      	ldr	r3, [pc, #152]	@ (8001ff4 <MX_ADC1_Init+0xec>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f62:	4b24      	ldr	r3, [pc, #144]	@ (8001ff4 <MX_ADC1_Init+0xec>)
 8001f64:	2201      	movs	r2, #1
 8001f66:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f68:	4822      	ldr	r0, [pc, #136]	@ (8001ff4 <MX_ADC1_Init+0xec>)
 8001f6a:	f001 f94b 	bl	8003204 <HAL_ADC_Init>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001f74:	f000 fb7c 	bl	8002670 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001f80:	2300      	movs	r3, #0
 8001f82:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f84:	463b      	mov	r3, r7
 8001f86:	4619      	mov	r1, r3
 8001f88:	481a      	ldr	r0, [pc, #104]	@ (8001ff4 <MX_ADC1_Init+0xec>)
 8001f8a:	f001 fc03 	bl	8003794 <HAL_ADC_ConfigChannel>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001f94:	f000 fb6c 	bl	8002670 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fa0:	463b      	mov	r3, r7
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4813      	ldr	r0, [pc, #76]	@ (8001ff4 <MX_ADC1_Init+0xec>)
 8001fa6:	f001 fbf5 	bl	8003794 <HAL_ADC_ConfigChannel>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001fb0:	f000 fb5e 	bl	8002670 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fbc:	463b      	mov	r3, r7
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	480c      	ldr	r0, [pc, #48]	@ (8001ff4 <MX_ADC1_Init+0xec>)
 8001fc2:	f001 fbe7 	bl	8003794 <HAL_ADC_ConfigChannel>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001fcc:	f000 fb50 	bl	8002670 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001fd4:	2304      	movs	r3, #4
 8001fd6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fd8:	463b      	mov	r3, r7
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4805      	ldr	r0, [pc, #20]	@ (8001ff4 <MX_ADC1_Init+0xec>)
 8001fde:	f001 fbd9 	bl	8003794 <HAL_ADC_ConfigChannel>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001fe8:	f000 fb42 	bl	8002670 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001fec:	bf00      	nop
 8001fee:	3710      	adds	r7, #16
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	200001e4 	.word	0x200001e4
 8001ff8:	40012000 	.word	0x40012000
 8001ffc:	0f000001 	.word	0x0f000001

08002000 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002004:	4b12      	ldr	r3, [pc, #72]	@ (8002050 <MX_I2C1_Init+0x50>)
 8002006:	4a13      	ldr	r2, [pc, #76]	@ (8002054 <MX_I2C1_Init+0x54>)
 8002008:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800200a:	4b11      	ldr	r3, [pc, #68]	@ (8002050 <MX_I2C1_Init+0x50>)
 800200c:	4a12      	ldr	r2, [pc, #72]	@ (8002058 <MX_I2C1_Init+0x58>)
 800200e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002010:	4b0f      	ldr	r3, [pc, #60]	@ (8002050 <MX_I2C1_Init+0x50>)
 8002012:	2200      	movs	r2, #0
 8002014:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002016:	4b0e      	ldr	r3, [pc, #56]	@ (8002050 <MX_I2C1_Init+0x50>)
 8002018:	2200      	movs	r2, #0
 800201a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800201c:	4b0c      	ldr	r3, [pc, #48]	@ (8002050 <MX_I2C1_Init+0x50>)
 800201e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002022:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002024:	4b0a      	ldr	r3, [pc, #40]	@ (8002050 <MX_I2C1_Init+0x50>)
 8002026:	2200      	movs	r2, #0
 8002028:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800202a:	4b09      	ldr	r3, [pc, #36]	@ (8002050 <MX_I2C1_Init+0x50>)
 800202c:	2200      	movs	r2, #0
 800202e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002030:	4b07      	ldr	r3, [pc, #28]	@ (8002050 <MX_I2C1_Init+0x50>)
 8002032:	2200      	movs	r2, #0
 8002034:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002036:	4b06      	ldr	r3, [pc, #24]	@ (8002050 <MX_I2C1_Init+0x50>)
 8002038:	2200      	movs	r2, #0
 800203a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800203c:	4804      	ldr	r0, [pc, #16]	@ (8002050 <MX_I2C1_Init+0x50>)
 800203e:	f002 fcab 	bl	8004998 <HAL_I2C_Init>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002048:	f000 fb12 	bl	8002670 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800204c:	bf00      	nop
 800204e:	bd80      	pop	{r7, pc}
 8002050:	2000028c 	.word	0x2000028c
 8002054:	40005400 	.word	0x40005400
 8002058:	00061a80 	.word	0x00061a80

0800205c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002062:	f107 0308 	add.w	r3, r7, #8
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	605a      	str	r2, [r3, #4]
 800206c:	609a      	str	r2, [r3, #8]
 800206e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002070:	463b      	mov	r3, r7
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002078:	4b1f      	ldr	r3, [pc, #124]	@ (80020f8 <MX_TIM1_Init+0x9c>)
 800207a:	4a20      	ldr	r2, [pc, #128]	@ (80020fc <MX_TIM1_Init+0xa0>)
 800207c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9600-1;
 800207e:	4b1e      	ldr	r3, [pc, #120]	@ (80020f8 <MX_TIM1_Init+0x9c>)
 8002080:	f242 527f 	movw	r2, #9599	@ 0x257f
 8002084:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002086:	4b1c      	ldr	r3, [pc, #112]	@ (80020f8 <MX_TIM1_Init+0x9c>)
 8002088:	2200      	movs	r2, #0
 800208a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800208c:	4b1a      	ldr	r3, [pc, #104]	@ (80020f8 <MX_TIM1_Init+0x9c>)
 800208e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002092:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002094:	4b18      	ldr	r3, [pc, #96]	@ (80020f8 <MX_TIM1_Init+0x9c>)
 8002096:	2200      	movs	r2, #0
 8002098:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800209a:	4b17      	ldr	r3, [pc, #92]	@ (80020f8 <MX_TIM1_Init+0x9c>)
 800209c:	2200      	movs	r2, #0
 800209e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020a0:	4b15      	ldr	r3, [pc, #84]	@ (80020f8 <MX_TIM1_Init+0x9c>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80020a6:	4814      	ldr	r0, [pc, #80]	@ (80020f8 <MX_TIM1_Init+0x9c>)
 80020a8:	f004 fc50 	bl	800694c <HAL_TIM_Base_Init>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80020b2:	f000 fadd 	bl	8002670 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80020bc:	f107 0308 	add.w	r3, r7, #8
 80020c0:	4619      	mov	r1, r3
 80020c2:	480d      	ldr	r0, [pc, #52]	@ (80020f8 <MX_TIM1_Init+0x9c>)
 80020c4:	f005 f93e 	bl	8007344 <HAL_TIM_ConfigClockSource>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80020ce:	f000 facf 	bl	8002670 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020d2:	2300      	movs	r3, #0
 80020d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020d6:	2300      	movs	r3, #0
 80020d8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020da:	463b      	mov	r3, r7
 80020dc:	4619      	mov	r1, r3
 80020de:	4806      	ldr	r0, [pc, #24]	@ (80020f8 <MX_TIM1_Init+0x9c>)
 80020e0:	f005 fcf8 	bl	8007ad4 <HAL_TIMEx_MasterConfigSynchronization>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80020ea:	f000 fac1 	bl	8002670 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80020ee:	bf00      	nop
 80020f0:	3718      	adds	r7, #24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	200002e0 	.word	0x200002e0
 80020fc:	40010000 	.word	0x40010000

08002100 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b08c      	sub	sp, #48	@ 0x30
 8002104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002106:	f107 030c 	add.w	r3, r7, #12
 800210a:	2224      	movs	r2, #36	@ 0x24
 800210c:	2100      	movs	r1, #0
 800210e:	4618      	mov	r0, r3
 8002110:	f009 fd92 	bl	800bc38 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002114:	1d3b      	adds	r3, r7, #4
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800211c:	4b21      	ldr	r3, [pc, #132]	@ (80021a4 <MX_TIM2_Init+0xa4>)
 800211e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002122:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002124:	4b1f      	ldr	r3, [pc, #124]	@ (80021a4 <MX_TIM2_Init+0xa4>)
 8002126:	2200      	movs	r2, #0
 8002128:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800212a:	4b1e      	ldr	r3, [pc, #120]	@ (80021a4 <MX_TIM2_Init+0xa4>)
 800212c:	2200      	movs	r2, #0
 800212e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002130:	4b1c      	ldr	r3, [pc, #112]	@ (80021a4 <MX_TIM2_Init+0xa4>)
 8002132:	f04f 32ff 	mov.w	r2, #4294967295
 8002136:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002138:	4b1a      	ldr	r3, [pc, #104]	@ (80021a4 <MX_TIM2_Init+0xa4>)
 800213a:	2200      	movs	r2, #0
 800213c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800213e:	4b19      	ldr	r3, [pc, #100]	@ (80021a4 <MX_TIM2_Init+0xa4>)
 8002140:	2200      	movs	r2, #0
 8002142:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002144:	2303      	movs	r3, #3
 8002146:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002148:	2302      	movs	r3, #2
 800214a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800214c:	2301      	movs	r3, #1
 800214e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002150:	2300      	movs	r3, #0
 8002152:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8002154:	230f      	movs	r3, #15
 8002156:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002158:	2302      	movs	r3, #2
 800215a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800215c:	2301      	movs	r3, #1
 800215e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002160:	2300      	movs	r3, #0
 8002162:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8002164:	230f      	movs	r3, #15
 8002166:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002168:	f107 030c 	add.w	r3, r7, #12
 800216c:	4619      	mov	r1, r3
 800216e:	480d      	ldr	r0, [pc, #52]	@ (80021a4 <MX_TIM2_Init+0xa4>)
 8002170:	f004 fe02 	bl	8006d78 <HAL_TIM_Encoder_Init>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800217a:	f000 fa79 	bl	8002670 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800217e:	2300      	movs	r3, #0
 8002180:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002182:	2300      	movs	r3, #0
 8002184:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002186:	1d3b      	adds	r3, r7, #4
 8002188:	4619      	mov	r1, r3
 800218a:	4806      	ldr	r0, [pc, #24]	@ (80021a4 <MX_TIM2_Init+0xa4>)
 800218c:	f005 fca2 	bl	8007ad4 <HAL_TIMEx_MasterConfigSynchronization>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002196:	f000 fa6b 	bl	8002670 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800219a:	bf00      	nop
 800219c:	3730      	adds	r7, #48	@ 0x30
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20000328 	.word	0x20000328

080021a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b08c      	sub	sp, #48	@ 0x30
 80021ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80021ae:	f107 030c 	add.w	r3, r7, #12
 80021b2:	2224      	movs	r2, #36	@ 0x24
 80021b4:	2100      	movs	r1, #0
 80021b6:	4618      	mov	r0, r3
 80021b8:	f009 fd3e 	bl	800bc38 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021bc:	1d3b      	adds	r3, r7, #4
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021c4:	4b20      	ldr	r3, [pc, #128]	@ (8002248 <MX_TIM3_Init+0xa0>)
 80021c6:	4a21      	ldr	r2, [pc, #132]	@ (800224c <MX_TIM3_Init+0xa4>)
 80021c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80021ca:	4b1f      	ldr	r3, [pc, #124]	@ (8002248 <MX_TIM3_Init+0xa0>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021d0:	4b1d      	ldr	r3, [pc, #116]	@ (8002248 <MX_TIM3_Init+0xa0>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80021d6:	4b1c      	ldr	r3, [pc, #112]	@ (8002248 <MX_TIM3_Init+0xa0>)
 80021d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80021dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021de:	4b1a      	ldr	r3, [pc, #104]	@ (8002248 <MX_TIM3_Init+0xa0>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021e4:	4b18      	ldr	r3, [pc, #96]	@ (8002248 <MX_TIM3_Init+0xa0>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80021ea:	2303      	movs	r3, #3
 80021ec:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80021ee:	2302      	movs	r3, #2
 80021f0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80021f2:	2301      	movs	r3, #1
 80021f4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80021f6:	2300      	movs	r3, #0
 80021f8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80021fa:	230f      	movs	r3, #15
 80021fc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80021fe:	2302      	movs	r3, #2
 8002200:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002202:	2301      	movs	r3, #1
 8002204:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002206:	2300      	movs	r3, #0
 8002208:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 800220a:	230f      	movs	r3, #15
 800220c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800220e:	f107 030c 	add.w	r3, r7, #12
 8002212:	4619      	mov	r1, r3
 8002214:	480c      	ldr	r0, [pc, #48]	@ (8002248 <MX_TIM3_Init+0xa0>)
 8002216:	f004 fdaf 	bl	8006d78 <HAL_TIM_Encoder_Init>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002220:	f000 fa26 	bl	8002670 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002224:	2300      	movs	r3, #0
 8002226:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002228:	2300      	movs	r3, #0
 800222a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800222c:	1d3b      	adds	r3, r7, #4
 800222e:	4619      	mov	r1, r3
 8002230:	4805      	ldr	r0, [pc, #20]	@ (8002248 <MX_TIM3_Init+0xa0>)
 8002232:	f005 fc4f 	bl	8007ad4 <HAL_TIMEx_MasterConfigSynchronization>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800223c:	f000 fa18 	bl	8002670 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002240:	bf00      	nop
 8002242:	3730      	adds	r7, #48	@ 0x30
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	20000370 	.word	0x20000370
 800224c:	40000400 	.word	0x40000400

08002250 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b08e      	sub	sp, #56	@ 0x38
 8002254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002256:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800225a:	2200      	movs	r2, #0
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	605a      	str	r2, [r3, #4]
 8002260:	609a      	str	r2, [r3, #8]
 8002262:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002264:	f107 0320 	add.w	r3, r7, #32
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800226e:	1d3b      	adds	r3, r7, #4
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	605a      	str	r2, [r3, #4]
 8002276:	609a      	str	r2, [r3, #8]
 8002278:	60da      	str	r2, [r3, #12]
 800227a:	611a      	str	r2, [r3, #16]
 800227c:	615a      	str	r2, [r3, #20]
 800227e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002280:	4b31      	ldr	r3, [pc, #196]	@ (8002348 <MX_TIM4_Init+0xf8>)
 8002282:	4a32      	ldr	r2, [pc, #200]	@ (800234c <MX_TIM4_Init+0xfc>)
 8002284:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 26-1;
 8002286:	4b30      	ldr	r3, [pc, #192]	@ (8002348 <MX_TIM4_Init+0xf8>)
 8002288:	2219      	movs	r2, #25
 800228a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800228c:	4b2e      	ldr	r3, [pc, #184]	@ (8002348 <MX_TIM4_Init+0xf8>)
 800228e:	2200      	movs	r2, #0
 8002290:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8002292:	4b2d      	ldr	r3, [pc, #180]	@ (8002348 <MX_TIM4_Init+0xf8>)
 8002294:	2263      	movs	r2, #99	@ 0x63
 8002296:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002298:	4b2b      	ldr	r3, [pc, #172]	@ (8002348 <MX_TIM4_Init+0xf8>)
 800229a:	2200      	movs	r2, #0
 800229c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800229e:	4b2a      	ldr	r3, [pc, #168]	@ (8002348 <MX_TIM4_Init+0xf8>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80022a4:	4828      	ldr	r0, [pc, #160]	@ (8002348 <MX_TIM4_Init+0xf8>)
 80022a6:	f004 fb51 	bl	800694c <HAL_TIM_Base_Init>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80022b0:	f000 f9de 	bl	8002670 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80022ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80022be:	4619      	mov	r1, r3
 80022c0:	4821      	ldr	r0, [pc, #132]	@ (8002348 <MX_TIM4_Init+0xf8>)
 80022c2:	f005 f83f 	bl	8007344 <HAL_TIM_ConfigClockSource>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80022cc:	f000 f9d0 	bl	8002670 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80022d0:	481d      	ldr	r0, [pc, #116]	@ (8002348 <MX_TIM4_Init+0xf8>)
 80022d2:	f004 fc47 	bl	8006b64 <HAL_TIM_PWM_Init>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80022dc:	f000 f9c8 	bl	8002670 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022e0:	2300      	movs	r3, #0
 80022e2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022e4:	2300      	movs	r3, #0
 80022e6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80022e8:	f107 0320 	add.w	r3, r7, #32
 80022ec:	4619      	mov	r1, r3
 80022ee:	4816      	ldr	r0, [pc, #88]	@ (8002348 <MX_TIM4_Init+0xf8>)
 80022f0:	f005 fbf0 	bl	8007ad4 <HAL_TIMEx_MasterConfigSynchronization>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80022fa:	f000 f9b9 	bl	8002670 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022fe:	2360      	movs	r3, #96	@ 0x60
 8002300:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002302:	2300      	movs	r3, #0
 8002304:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002306:	2300      	movs	r3, #0
 8002308:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800230a:	2300      	movs	r3, #0
 800230c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800230e:	1d3b      	adds	r3, r7, #4
 8002310:	2200      	movs	r2, #0
 8002312:	4619      	mov	r1, r3
 8002314:	480c      	ldr	r0, [pc, #48]	@ (8002348 <MX_TIM4_Init+0xf8>)
 8002316:	f004 ff53 	bl	80071c0 <HAL_TIM_PWM_ConfigChannel>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8002320:	f000 f9a6 	bl	8002670 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002324:	1d3b      	adds	r3, r7, #4
 8002326:	2204      	movs	r2, #4
 8002328:	4619      	mov	r1, r3
 800232a:	4807      	ldr	r0, [pc, #28]	@ (8002348 <MX_TIM4_Init+0xf8>)
 800232c:	f004 ff48 	bl	80071c0 <HAL_TIM_PWM_ConfigChannel>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 8002336:	f000 f99b 	bl	8002670 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800233a:	4803      	ldr	r0, [pc, #12]	@ (8002348 <MX_TIM4_Init+0xf8>)
 800233c:	f000 fdf6 	bl	8002f2c <HAL_TIM_MspPostInit>

}
 8002340:	bf00      	nop
 8002342:	3738      	adds	r7, #56	@ 0x38
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	200003b8 	.word	0x200003b8
 800234c:	40000800 	.word	0x40000800

08002350 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002356:	463b      	mov	r3, r7
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	605a      	str	r2, [r3, #4]
 800235e:	609a      	str	r2, [r3, #8]
 8002360:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002362:	4b16      	ldr	r3, [pc, #88]	@ (80023bc <MX_TIM9_Init+0x6c>)
 8002364:	4a16      	ldr	r2, [pc, #88]	@ (80023c0 <MX_TIM9_Init+0x70>)
 8002366:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 96-1;
 8002368:	4b14      	ldr	r3, [pc, #80]	@ (80023bc <MX_TIM9_Init+0x6c>)
 800236a:	225f      	movs	r2, #95	@ 0x5f
 800236c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800236e:	4b13      	ldr	r3, [pc, #76]	@ (80023bc <MX_TIM9_Init+0x6c>)
 8002370:	2200      	movs	r2, #0
 8002372:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8002374:	4b11      	ldr	r3, [pc, #68]	@ (80023bc <MX_TIM9_Init+0x6c>)
 8002376:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800237a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800237c:	4b0f      	ldr	r3, [pc, #60]	@ (80023bc <MX_TIM9_Init+0x6c>)
 800237e:	2200      	movs	r2, #0
 8002380:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002382:	4b0e      	ldr	r3, [pc, #56]	@ (80023bc <MX_TIM9_Init+0x6c>)
 8002384:	2200      	movs	r2, #0
 8002386:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002388:	480c      	ldr	r0, [pc, #48]	@ (80023bc <MX_TIM9_Init+0x6c>)
 800238a:	f004 fadf 	bl	800694c <HAL_TIM_Base_Init>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8002394:	f000 f96c 	bl	8002670 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002398:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800239c:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800239e:	463b      	mov	r3, r7
 80023a0:	4619      	mov	r1, r3
 80023a2:	4806      	ldr	r0, [pc, #24]	@ (80023bc <MX_TIM9_Init+0x6c>)
 80023a4:	f004 ffce 	bl	8007344 <HAL_TIM_ConfigClockSource>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 80023ae:	f000 f95f 	bl	8002670 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80023b2:	bf00      	nop
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	20000400 	.word	0x20000400
 80023c0:	40014000 	.word	0x40014000

080023c4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80023c8:	4b0e      	ldr	r3, [pc, #56]	@ (8002404 <MX_TIM10_Init+0x40>)
 80023ca:	4a0f      	ldr	r2, [pc, #60]	@ (8002408 <MX_TIM10_Init+0x44>)
 80023cc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 96-1;
 80023ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002404 <MX_TIM10_Init+0x40>)
 80023d0:	225f      	movs	r2, #95	@ 0x5f
 80023d2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002404 <MX_TIM10_Init+0x40>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80023da:	4b0a      	ldr	r3, [pc, #40]	@ (8002404 <MX_TIM10_Init+0x40>)
 80023dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80023e0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023e2:	4b08      	ldr	r3, [pc, #32]	@ (8002404 <MX_TIM10_Init+0x40>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023e8:	4b06      	ldr	r3, [pc, #24]	@ (8002404 <MX_TIM10_Init+0x40>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80023ee:	4805      	ldr	r0, [pc, #20]	@ (8002404 <MX_TIM10_Init+0x40>)
 80023f0:	f004 faac 	bl	800694c <HAL_TIM_Base_Init>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80023fa:	f000 f939 	bl	8002670 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	20000448 	.word	0x20000448
 8002408:	40014400 	.word	0x40014400

0800240c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002410:	4b0e      	ldr	r3, [pc, #56]	@ (800244c <MX_TIM11_Init+0x40>)
 8002412:	4a0f      	ldr	r2, [pc, #60]	@ (8002450 <MX_TIM11_Init+0x44>)
 8002414:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 96-1;
 8002416:	4b0d      	ldr	r3, [pc, #52]	@ (800244c <MX_TIM11_Init+0x40>)
 8002418:	225f      	movs	r2, #95	@ 0x5f
 800241a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800241c:	4b0b      	ldr	r3, [pc, #44]	@ (800244c <MX_TIM11_Init+0x40>)
 800241e:	2200      	movs	r2, #0
 8002420:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 8002422:	4b0a      	ldr	r3, [pc, #40]	@ (800244c <MX_TIM11_Init+0x40>)
 8002424:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002428:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800242a:	4b08      	ldr	r3, [pc, #32]	@ (800244c <MX_TIM11_Init+0x40>)
 800242c:	2200      	movs	r2, #0
 800242e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002430:	4b06      	ldr	r3, [pc, #24]	@ (800244c <MX_TIM11_Init+0x40>)
 8002432:	2200      	movs	r2, #0
 8002434:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002436:	4805      	ldr	r0, [pc, #20]	@ (800244c <MX_TIM11_Init+0x40>)
 8002438:	f004 fa88 	bl	800694c <HAL_TIM_Base_Init>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8002442:	f000 f915 	bl	8002670 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002446:	bf00      	nop
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	20000490 	.word	0x20000490
 8002450:	40014800 	.word	0x40014800

08002454 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800245a:	2300      	movs	r3, #0
 800245c:	607b      	str	r3, [r7, #4]
 800245e:	4b0c      	ldr	r3, [pc, #48]	@ (8002490 <MX_DMA_Init+0x3c>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002462:	4a0b      	ldr	r2, [pc, #44]	@ (8002490 <MX_DMA_Init+0x3c>)
 8002464:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002468:	6313      	str	r3, [r2, #48]	@ 0x30
 800246a:	4b09      	ldr	r3, [pc, #36]	@ (8002490 <MX_DMA_Init+0x3c>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800246e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002472:	607b      	str	r3, [r7, #4]
 8002474:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002476:	2200      	movs	r2, #0
 8002478:	2100      	movs	r1, #0
 800247a:	2038      	movs	r0, #56	@ 0x38
 800247c:	f001 fd15 	bl	8003eaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002480:	2038      	movs	r0, #56	@ 0x38
 8002482:	f001 fd2e 	bl	8003ee2 <HAL_NVIC_EnableIRQ>

}
 8002486:	bf00      	nop
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40023800 	.word	0x40023800

08002494 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b08a      	sub	sp, #40	@ 0x28
 8002498:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800249a:	f107 0314 	add.w	r3, r7, #20
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	605a      	str	r2, [r3, #4]
 80024a4:	609a      	str	r2, [r3, #8]
 80024a6:	60da      	str	r2, [r3, #12]
 80024a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	613b      	str	r3, [r7, #16]
 80024ae:	4b43      	ldr	r3, [pc, #268]	@ (80025bc <MX_GPIO_Init+0x128>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b2:	4a42      	ldr	r2, [pc, #264]	@ (80025bc <MX_GPIO_Init+0x128>)
 80024b4:	f043 0304 	orr.w	r3, r3, #4
 80024b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80024ba:	4b40      	ldr	r3, [pc, #256]	@ (80025bc <MX_GPIO_Init+0x128>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024be:	f003 0304 	and.w	r3, r3, #4
 80024c2:	613b      	str	r3, [r7, #16]
 80024c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024c6:	2300      	movs	r3, #0
 80024c8:	60fb      	str	r3, [r7, #12]
 80024ca:	4b3c      	ldr	r3, [pc, #240]	@ (80025bc <MX_GPIO_Init+0x128>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ce:	4a3b      	ldr	r2, [pc, #236]	@ (80025bc <MX_GPIO_Init+0x128>)
 80024d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80024d6:	4b39      	ldr	r3, [pc, #228]	@ (80025bc <MX_GPIO_Init+0x128>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024de:	60fb      	str	r3, [r7, #12]
 80024e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e2:	2300      	movs	r3, #0
 80024e4:	60bb      	str	r3, [r7, #8]
 80024e6:	4b35      	ldr	r3, [pc, #212]	@ (80025bc <MX_GPIO_Init+0x128>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ea:	4a34      	ldr	r2, [pc, #208]	@ (80025bc <MX_GPIO_Init+0x128>)
 80024ec:	f043 0301 	orr.w	r3, r3, #1
 80024f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80024f2:	4b32      	ldr	r3, [pc, #200]	@ (80025bc <MX_GPIO_Init+0x128>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	60bb      	str	r3, [r7, #8]
 80024fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024fe:	2300      	movs	r3, #0
 8002500:	607b      	str	r3, [r7, #4]
 8002502:	4b2e      	ldr	r3, [pc, #184]	@ (80025bc <MX_GPIO_Init+0x128>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002506:	4a2d      	ldr	r2, [pc, #180]	@ (80025bc <MX_GPIO_Init+0x128>)
 8002508:	f043 0302 	orr.w	r3, r3, #2
 800250c:	6313      	str	r3, [r2, #48]	@ 0x30
 800250e:	4b2b      	ldr	r3, [pc, #172]	@ (80025bc <MX_GPIO_Init+0x128>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	607b      	str	r3, [r7, #4]
 8002518:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800251a:	2200      	movs	r2, #0
 800251c:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8002520:	4827      	ldr	r0, [pc, #156]	@ (80025c0 <MX_GPIO_Init+0x12c>)
 8002522:	f002 fa05 	bl	8004930 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8002526:	2200      	movs	r2, #0
 8002528:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 800252c:	4825      	ldr	r0, [pc, #148]	@ (80025c4 <MX_GPIO_Init+0x130>)
 800252e:	f002 f9ff 	bl	8004930 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_13
 8002532:	2200      	movs	r2, #0
 8002534:	f24e 4106 	movw	r1, #58374	@ 0xe406
 8002538:	4823      	ldr	r0, [pc, #140]	@ (80025c8 <MX_GPIO_Init+0x134>)
 800253a:	f002 f9f9 	bl	8004930 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800253e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002544:	2301      	movs	r3, #1
 8002546:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002548:	2300      	movs	r3, #0
 800254a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800254c:	2300      	movs	r3, #0
 800254e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002550:	f107 0314 	add.w	r3, r7, #20
 8002554:	4619      	mov	r1, r3
 8002556:	481a      	ldr	r0, [pc, #104]	@ (80025c0 <MX_GPIO_Init+0x12c>)
 8002558:	f002 f84e 	bl	80045f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800255c:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8002560:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002562:	2301      	movs	r3, #1
 8002564:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002566:	2300      	movs	r3, #0
 8002568:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800256a:	2300      	movs	r3, #0
 800256c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800256e:	f107 0314 	add.w	r3, r7, #20
 8002572:	4619      	mov	r1, r3
 8002574:	4813      	ldr	r0, [pc, #76]	@ (80025c4 <MX_GPIO_Init+0x130>)
 8002576:	f002 f83f 	bl	80045f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_13
 800257a:	f24e 4306 	movw	r3, #58374	@ 0xe406
 800257e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002580:	2301      	movs	r3, #1
 8002582:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002584:	2300      	movs	r3, #0
 8002586:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002588:	2300      	movs	r3, #0
 800258a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800258c:	f107 0314 	add.w	r3, r7, #20
 8002590:	4619      	mov	r1, r3
 8002592:	480d      	ldr	r0, [pc, #52]	@ (80025c8 <MX_GPIO_Init+0x134>)
 8002594:	f002 f830 	bl	80045f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002598:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800259c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800259e:	2300      	movs	r3, #0
 80025a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a2:	2300      	movs	r3, #0
 80025a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025a6:	f107 0314 	add.w	r3, r7, #20
 80025aa:	4619      	mov	r1, r3
 80025ac:	4806      	ldr	r0, [pc, #24]	@ (80025c8 <MX_GPIO_Init+0x134>)
 80025ae:	f002 f823 	bl	80045f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80025b2:	bf00      	nop
 80025b4:	3728      	adds	r7, #40	@ 0x28
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	40023800 	.word	0x40023800
 80025c0:	40020800 	.word	0x40020800
 80025c4:	40020000 	.word	0x40020000
 80025c8:	40020400 	.word	0x40020400

080025cc <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc1, adcValue,5);
 80025d4:	2205      	movs	r2, #5
 80025d6:	4904      	ldr	r1, [pc, #16]	@ (80025e8 <HAL_ADC_ConvCpltCallback+0x1c>)
 80025d8:	4804      	ldr	r0, [pc, #16]	@ (80025ec <HAL_ADC_ConvCpltCallback+0x20>)
 80025da:	f000 ffc9 	bl	8003570 <HAL_ADC_Start_DMA>
}
 80025de:	bf00      	nop
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20000574 	.word	0x20000574
 80025ec:	200001e4 	.word	0x200001e4

080025f0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  //  static uint16_t ms_counter = 0; declarado arriba

    if (htim->Instance == TIM11) {
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a0f      	ldr	r2, [pc, #60]	@ (800263c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d116      	bne.n	8002630 <HAL_TIM_PeriodElapsedCallback+0x40>

        for (uint16_t i = 0; i < TTOTAL; i++) {
 8002602:	2300      	movs	r3, #0
 8002604:	81fb      	strh	r3, [r7, #14]
 8002606:	e010      	b.n	800262a <HAL_TIM_PeriodElapsedCallback+0x3a>
            if (tim_pro[i] != 0) {
 8002608:	89fb      	ldrh	r3, [r7, #14]
 800260a:	4a0d      	ldr	r2, [pc, #52]	@ (8002640 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800260c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d007      	beq.n	8002624 <HAL_TIM_PeriodElapsedCallback+0x34>
                tim_pro[i]--;
 8002614:	89fb      	ldrh	r3, [r7, #14]
 8002616:	4a0a      	ldr	r2, [pc, #40]	@ (8002640 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002618:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800261c:	3a01      	subs	r2, #1
 800261e:	4908      	ldr	r1, [pc, #32]	@ (8002640 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002620:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (uint16_t i = 0; i < TTOTAL; i++) {
 8002624:	89fb      	ldrh	r3, [r7, #14]
 8002626:	3301      	adds	r3, #1
 8002628:	81fb      	strh	r3, [r7, #14]
 800262a:	89fb      	ldrh	r3, [r7, #14]
 800262c:	2b04      	cmp	r3, #4
 800262e:	d9eb      	bls.n	8002608 <HAL_TIM_PeriodElapsedCallback+0x18>
            }
        }

    }

}
 8002630:	bf00      	nop
 8002632:	3714      	adds	r7, #20
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr
 800263c:	40014800 	.word	0x40014800
 8002640:	20000654 	.word	0x20000654

08002644 <CDC_ReceiveCallBack>:





void CDC_ReceiveCallBack(uint8_t* Buf, uint32_t Len){
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
	memcpy(DatosRX,Buf,Len);
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	6879      	ldr	r1, [r7, #4]
 8002652:	4805      	ldr	r0, [pc, #20]	@ (8002668 <CDC_ReceiveCallBack+0x24>)
 8002654:	f009 fb22 	bl	800bc9c <memcpy>
	indexRX = Len;
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	b2da      	uxtb	r2, r3
 800265c:	4b03      	ldr	r3, [pc, #12]	@ (800266c <CDC_ReceiveCallBack+0x28>)
 800265e:	701a      	strb	r2, [r3, #0]
}
 8002660:	bf00      	nop
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	20000584 	.word	0x20000584
 800266c:	200005b7 	.word	0x200005b7

08002670 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002674:	b672      	cpsid	i
}
 8002676:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002678:	bf00      	nop
 800267a:	e7fd      	b.n	8002678 <Error_Handler+0x8>

0800267c <odo_init_reset>:
int32_t difL;
int32_t difR;

// Inicializa pose y contadores
void odo_init_reset(Pose *pose)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
    // Reset de pose
    pose->x = 0.0f;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f04f 0200 	mov.w	r2, #0
 800268a:	601a      	str	r2, [r3, #0]
    pose->y = 0.0f;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f04f 0200 	mov.w	r2, #0
 8002692:	605a      	str	r2, [r3, #4]
    pose->theta = 0.0f;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f04f 0200 	mov.w	r2, #0
 800269a:	609a      	str	r2, [r3, #8]
    pose->velMotorL = 0.0f;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f04f 0200 	mov.w	r2, #0
 80026a2:	60da      	str	r2, [r3, #12]
    pose->velMotorR = 0.0f;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f04f 0200 	mov.w	r2, #0
 80026aa:	611a      	str	r2, [r3, #16]

    pose->velLineal = 0.0f;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f04f 0200 	mov.w	r2, #0
 80026b2:	615a      	str	r2, [r3, #20]

    pose->velAngular = 0.0f;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f04f 0200 	mov.w	r2, #0
 80026ba:	619a      	str	r2, [r3, #24]
    pose->avanceLineal = 0.0f;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f04f 0200 	mov.w	r2, #0
 80026c2:	61da      	str	r2, [r3, #28]

    pose->left_distance_mm = 0.0f;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f04f 0200 	mov.w	r2, #0
 80026ca:	621a      	str	r2, [r3, #32]
    pose->right_distance_mm = 0.0f;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f04f 0200 	mov.w	r2, #0
 80026d2:	625a      	str	r2, [r3, #36]	@ 0x24

    pose->left_distance_mm_acum = 0.0f;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f04f 0200 	mov.w	r2, #0
 80026da:	629a      	str	r2, [r3, #40]	@ 0x28
    pose->right_distance_mm_acum = 0.0f;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f04f 0200 	mov.w	r2, #0
 80026e2:	62da      	str	r2, [r3, #44]	@ 0x2c

}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <actualizar_odometria>:

// Calcula odometría: diferencias, integración midpoint, velocidades
void actualizar_odometria(Pose *pose, int32_t countL, int32_t countR, float dt)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	ed2d 8b02 	vpush	{d8}
 80026f6:	b08e      	sub	sp, #56	@ 0x38
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
 8002700:	ed87 0a00 	vstr	s0, [r7]

	float difL = (float)countL;
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	ee07 3a90 	vmov	s15, r3
 800270a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800270e:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	    float difR = (float)countR;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	ee07 3a90 	vmov	s15, r3
 8002718:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800271c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	    float dmmLeft  = (difL * 2.0f * PI * WHEEL_RADIUS_MM) / PULSES_PER_REV;
 8002720:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002724:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002728:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 8002900 <actualizar_odometria+0x210>
 800272c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002730:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8002734:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002738:	eddf 6a72 	vldr	s13, [pc, #456]	@ 8002904 <actualizar_odometria+0x214>
 800273c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002740:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	    float dmmRight = (difR * 2.0f * PI * WHEEL_RADIUS_MM) / PULSES_PER_REV;
 8002744:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002748:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800274c:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8002900 <actualizar_odometria+0x210>
 8002750:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002754:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8002758:	ee27 7a87 	vmul.f32	s14, s15, s14
 800275c:	eddf 6a69 	vldr	s13, [pc, #420]	@ 8002904 <actualizar_odometria+0x214>
 8002760:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002764:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	    // Acumular distancias
	    pose->left_distance_mm_acum  += dmmLeft;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800276e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002772:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	    pose->right_distance_mm_acum += dmmRight;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8002782:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002786:	ee77 7a27 	vadd.f32	s15, s14, s15
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	    pose->left_distance_mm  = dmmLeft;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002794:	621a      	str	r2, [r3, #32]
	    pose->right_distance_mm = dmmRight;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800279a:	625a      	str	r2, [r3, #36]	@ 0x24

	    // Incrementos lineal y angular
	    float delta_lineal  = 0.5f * (dmmLeft + dmmRight);
 800279c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80027a0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80027a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027a8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80027ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027b0:	edc7 7a08 	vstr	s15, [r7, #32]
	    float delta_angular = (dmmRight - dmmLeft) / WHEEL_BASE_MM;
 80027b4:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80027b8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80027bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027c0:	eddf 6a51 	vldr	s13, [pc, #324]	@ 8002908 <actualizar_odometria+0x218>
 80027c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027c8:	edc7 7a07 	vstr	s15, [r7, #28]

	    // Integración usando ángulo medio
	    float theta_prev = pose->theta;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	61bb      	str	r3, [r7, #24]
	    float theta_mid  = theta_prev + 0.5f * delta_angular;
 80027d2:	edd7 7a07 	vldr	s15, [r7, #28]
 80027d6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80027da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027de:	ed97 7a06 	vldr	s14, [r7, #24]
 80027e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027e6:	edc7 7a05 	vstr	s15, [r7, #20]
	    float theta_new  = theta_prev + delta_angular;
 80027ea:	ed97 7a06 	vldr	s14, [r7, #24]
 80027ee:	edd7 7a07 	vldr	s15, [r7, #28]
 80027f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027f6:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

	    // Wrap manual rápido a [-2π, +2π] usando solo comparaciones y restas
	    const float limit = 2.0f * PI;
 80027fa:	4b44      	ldr	r3, [pc, #272]	@ (800290c <actualizar_odometria+0x21c>)
 80027fc:	613b      	str	r3, [r7, #16]
	    if (theta_new >  limit) theta_new -= limit;
 80027fe:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8002802:	edd7 7a04 	vldr	s15, [r7, #16]
 8002806:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800280a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800280e:	dd08      	ble.n	8002822 <actualizar_odometria+0x132>
 8002810:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8002814:	edd7 7a04 	vldr	s15, [r7, #16]
 8002818:	ee77 7a67 	vsub.f32	s15, s14, s15
 800281c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
 8002820:	e012      	b.n	8002848 <actualizar_odometria+0x158>
	    else if (theta_new < -limit) theta_new += limit;
 8002822:	edd7 7a04 	vldr	s15, [r7, #16]
 8002826:	eef1 7a67 	vneg.f32	s15, s15
 800282a:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800282e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002836:	d507      	bpl.n	8002848 <actualizar_odometria+0x158>
 8002838:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800283c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002840:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002844:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

	    pose->theta = theta_new;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800284c:	609a      	str	r2, [r3, #8]
	    pose->x    += delta_lineal * cosf(theta_mid);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	ed93 8a00 	vldr	s16, [r3]
 8002854:	ed97 0a05 	vldr	s0, [r7, #20]
 8002858:	f009 fa8a 	bl	800bd70 <cosf>
 800285c:	eeb0 7a40 	vmov.f32	s14, s0
 8002860:	edd7 7a08 	vldr	s15, [r7, #32]
 8002864:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002868:	ee78 7a27 	vadd.f32	s15, s16, s15
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	edc3 7a00 	vstr	s15, [r3]
	    pose->y    += delta_lineal * sinf(theta_mid);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	ed93 8a01 	vldr	s16, [r3, #4]
 8002878:	ed97 0a05 	vldr	s0, [r7, #20]
 800287c:	f009 fabc 	bl	800bdf8 <sinf>
 8002880:	eeb0 7a40 	vmov.f32	s14, s0
 8002884:	edd7 7a08 	vldr	s15, [r7, #32]
 8002888:	ee67 7a27 	vmul.f32	s15, s14, s15
 800288c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	edc3 7a01 	vstr	s15, [r3, #4]

	    // Velocidades y avance acumulado
	    pose->velLineal    = delta_lineal  / dt;
 8002896:	edd7 6a08 	vldr	s13, [r7, #32]
 800289a:	ed97 7a00 	vldr	s14, [r7]
 800289e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	edc3 7a05 	vstr	s15, [r3, #20]
	    pose->velAngular   = delta_angular / dt;
 80028a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80028ac:	ed97 7a00 	vldr	s14, [r7]
 80028b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	edc3 7a06 	vstr	s15, [r3, #24]
	    pose->velMotorL    = dmmLeft  / dt;
 80028ba:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 80028be:	ed97 7a00 	vldr	s14, [r7]
 80028c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	edc3 7a03 	vstr	s15, [r3, #12]
	    pose->velMotorR    = dmmRight / dt;
 80028cc:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80028d0:	ed97 7a00 	vldr	s14, [r7]
 80028d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	edc3 7a04 	vstr	s15, [r3, #16]
	    pose->avanceLineal += delta_lineal;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	ed93 7a07 	vldr	s14, [r3, #28]
 80028e4:	edd7 7a08 	vldr	s15, [r7, #32]
 80028e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80028f2:	bf00      	nop
 80028f4:	3738      	adds	r7, #56	@ 0x38
 80028f6:	46bd      	mov	sp, r7
 80028f8:	ecbd 8b02 	vpop	{d8}
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40490fdb 	.word	0x40490fdb
 8002904:	448de000 	.word	0x448de000
 8002908:	42a00000 	.word	0x42a00000
 800290c:	40c90fdb 	.word	0x40c90fdb

08002910 <motoresInit>:


TIM_HandleTypeDef *timmotorGlobal;


void motoresInit(TIM_HandleTypeDef *timmotor, uint32_t canal1, uint32_t canal2){
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
	timmotorGlobal = timmotor;
 800291c:	4a18      	ldr	r2, [pc, #96]	@ (8002980 <motoresInit+0x70>)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(timmotorGlobal, canal1);   // OUT PWMA
 8002922:	4b17      	ldr	r3, [pc, #92]	@ (8002980 <motoresInit+0x70>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68b9      	ldr	r1, [r7, #8]
 8002928:	4618      	mov	r0, r3
 800292a:	f004 f975 	bl	8006c18 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timmotorGlobal, canal2);  // OUT PWMB
 800292e:	4b14      	ldr	r3, [pc, #80]	@ (8002980 <motoresInit+0x70>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6879      	ldr	r1, [r7, #4]
 8002934:	4618      	mov	r0, r3
 8002936:	f004 f96f 	bl	8006c18 <HAL_TIM_PWM_Start>
	timmotorGlobal->Instance->CCR1 = 0;
 800293a:	4b11      	ldr	r3, [pc, #68]	@ (8002980 <motoresInit+0x70>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2200      	movs	r2, #0
 8002942:	635a      	str	r2, [r3, #52]	@ 0x34
	timmotorGlobal->Instance->CCR2 = 0;
 8002944:	4b0e      	ldr	r3, [pc, #56]	@ (8002980 <motoresInit+0x70>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2200      	movs	r2, #0
 800294c:	639a      	str	r2, [r3, #56]	@ 0x38

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6,0);
 800294e:	2200      	movs	r2, #0
 8002950:	2140      	movs	r1, #64	@ 0x40
 8002952:	480c      	ldr	r0, [pc, #48]	@ (8002984 <motoresInit+0x74>)
 8002954:	f001 ffec 	bl	8004930 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7,0);
 8002958:	2200      	movs	r2, #0
 800295a:	2180      	movs	r1, #128	@ 0x80
 800295c:	4809      	ldr	r0, [pc, #36]	@ (8002984 <motoresInit+0x74>)
 800295e:	f001 ffe7 	bl	8004930 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,0);
 8002962:	2200      	movs	r2, #0
 8002964:	2110      	movs	r1, #16
 8002966:	4807      	ldr	r0, [pc, #28]	@ (8002984 <motoresInit+0x74>)
 8002968:	f001 ffe2 	bl	8004930 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,0);
 800296c:	2200      	movs	r2, #0
 800296e:	2120      	movs	r1, #32
 8002970:	4804      	ldr	r0, [pc, #16]	@ (8002984 <motoresInit+0x74>)
 8002972:	f001 ffdd 	bl	8004930 <HAL_GPIO_WritePin>
}
 8002976:	bf00      	nop
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	2000066c 	.word	0x2000066c
 8002984:	40020000 	.word	0x40020000

08002988 <motores>:
void motores(int8_t m1, int8_t m2){
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	4603      	mov	r3, r0
 8002990:	460a      	mov	r2, r1
 8002992:	71fb      	strb	r3, [r7, #7]
 8002994:	4613      	mov	r3, r2
 8002996:	71bb      	strb	r3, [r7, #6]

	//control motor 1
	if(m1 > 0){
 8002998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299c:	2b00      	cmp	r3, #0
 800299e:	dd16      	ble.n	80029ce <motores+0x46>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6,1);
 80029a0:	2201      	movs	r2, #1
 80029a2:	2140      	movs	r1, #64	@ 0x40
 80029a4:	4849      	ldr	r0, [pc, #292]	@ (8002acc <motores+0x144>)
 80029a6:	f001 ffc3 	bl	8004930 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7,0);
 80029aa:	2200      	movs	r2, #0
 80029ac:	2180      	movs	r1, #128	@ 0x80
 80029ae:	4847      	ldr	r0, [pc, #284]	@ (8002acc <motores+0x144>)
 80029b0:	f001 ffbe 	bl	8004930 <HAL_GPIO_WritePin>
		if(m1 > 100)m1 = 100;
 80029b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b8:	2b64      	cmp	r3, #100	@ 0x64
 80029ba:	dd01      	ble.n	80029c0 <motores+0x38>
 80029bc:	2364      	movs	r3, #100	@ 0x64
 80029be:	71fb      	strb	r3, [r7, #7]
		timmotorGlobal->Instance->CCR1 = m1;
 80029c0:	4b43      	ldr	r3, [pc, #268]	@ (8002ad0 <motores+0x148>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80029ca:	635a      	str	r2, [r3, #52]	@ 0x34
 80029cc:	e02d      	b.n	8002a2a <motores+0xa2>
	}else if(m1 < 0){
 80029ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	da1a      	bge.n	8002a0c <motores+0x84>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6,0);
 80029d6:	2200      	movs	r2, #0
 80029d8:	2140      	movs	r1, #64	@ 0x40
 80029da:	483c      	ldr	r0, [pc, #240]	@ (8002acc <motores+0x144>)
 80029dc:	f001 ffa8 	bl	8004930 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7,1);
 80029e0:	2201      	movs	r2, #1
 80029e2:	2180      	movs	r1, #128	@ 0x80
 80029e4:	4839      	ldr	r0, [pc, #228]	@ (8002acc <motores+0x144>)
 80029e6:	f001 ffa3 	bl	8004930 <HAL_GPIO_WritePin>
		m1 *= -1;
 80029ea:	79fb      	ldrb	r3, [r7, #7]
 80029ec:	425b      	negs	r3, r3
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	71fb      	strb	r3, [r7, #7]
		if(m1 > 100)m1 = 100;
 80029f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f6:	2b64      	cmp	r3, #100	@ 0x64
 80029f8:	dd01      	ble.n	80029fe <motores+0x76>
 80029fa:	2364      	movs	r3, #100	@ 0x64
 80029fc:	71fb      	strb	r3, [r7, #7]
		timmotorGlobal->Instance->CCR1 = m1;
 80029fe:	4b34      	ldr	r3, [pc, #208]	@ (8002ad0 <motores+0x148>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002a08:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a0a:	e00e      	b.n	8002a2a <motores+0xa2>
	}else{                                       /// NORMALMENTE SOLO EJECUTA EN 0,0 FREE
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6,0);
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	2140      	movs	r1, #64	@ 0x40
 8002a10:	482e      	ldr	r0, [pc, #184]	@ (8002acc <motores+0x144>)
 8002a12:	f001 ff8d 	bl	8004930 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7,0);
 8002a16:	2200      	movs	r2, #0
 8002a18:	2180      	movs	r1, #128	@ 0x80
 8002a1a:	482c      	ldr	r0, [pc, #176]	@ (8002acc <motores+0x144>)
 8002a1c:	f001 ff88 	bl	8004930 <HAL_GPIO_WritePin>
		timmotorGlobal->Instance->CCR1 = 0;
 8002a20:	4b2b      	ldr	r3, [pc, #172]	@ (8002ad0 <motores+0x148>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2200      	movs	r2, #0
 8002a28:	635a      	str	r2, [r3, #52]	@ 0x34
	}

	//control motor 2
	if(m2 > 0){
 8002a2a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	dd17      	ble.n	8002a62 <motores+0xda>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,1);  //COMANDO ADELANTE
 8002a32:	2201      	movs	r2, #1
 8002a34:	2104      	movs	r1, #4
 8002a36:	4827      	ldr	r0, [pc, #156]	@ (8002ad4 <motores+0x14c>)
 8002a38:	f001 ff7a 	bl	8004930 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB	, GPIO_PIN_10,0);
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002a42:	4824      	ldr	r0, [pc, #144]	@ (8002ad4 <motores+0x14c>)
 8002a44:	f001 ff74 	bl	8004930 <HAL_GPIO_WritePin>
		if(m2 > 100)m2 = 100;
 8002a48:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002a4c:	2b64      	cmp	r3, #100	@ 0x64
 8002a4e:	dd01      	ble.n	8002a54 <motores+0xcc>
 8002a50:	2364      	movs	r3, #100	@ 0x64
 8002a52:	71bb      	strb	r3, [r7, #6]
		timmotorGlobal->Instance->CCR2 = m2;
 8002a54:	4b1e      	ldr	r3, [pc, #120]	@ (8002ad0 <motores+0x148>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8002a5e:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,0);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,0);
		timmotorGlobal->Instance->CCR2 = 0;
	}

}
 8002a60:	e02f      	b.n	8002ac2 <motores+0x13a>
	}else if(m2 < 0){
 8002a62:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	da1b      	bge.n	8002aa2 <motores+0x11a>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,0);   //COMANDO ATRAS
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	2104      	movs	r1, #4
 8002a6e:	4819      	ldr	r0, [pc, #100]	@ (8002ad4 <motores+0x14c>)
 8002a70:	f001 ff5e 	bl	8004930 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,1);
 8002a74:	2201      	movs	r2, #1
 8002a76:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002a7a:	4816      	ldr	r0, [pc, #88]	@ (8002ad4 <motores+0x14c>)
 8002a7c:	f001 ff58 	bl	8004930 <HAL_GPIO_WritePin>
		m2 *= -1;
 8002a80:	79bb      	ldrb	r3, [r7, #6]
 8002a82:	425b      	negs	r3, r3
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	71bb      	strb	r3, [r7, #6]
		if(m2 > 100)m2 = 100;
 8002a88:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002a8c:	2b64      	cmp	r3, #100	@ 0x64
 8002a8e:	dd01      	ble.n	8002a94 <motores+0x10c>
 8002a90:	2364      	movs	r3, #100	@ 0x64
 8002a92:	71bb      	strb	r3, [r7, #6]
		timmotorGlobal->Instance->CCR2 = m2;
 8002a94:	4b0e      	ldr	r3, [pc, #56]	@ (8002ad0 <motores+0x148>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8002a9e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002aa0:	e00f      	b.n	8002ac2 <motores+0x13a>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,0);
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	2104      	movs	r1, #4
 8002aa6:	480b      	ldr	r0, [pc, #44]	@ (8002ad4 <motores+0x14c>)
 8002aa8:	f001 ff42 	bl	8004930 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,0);
 8002aac:	2200      	movs	r2, #0
 8002aae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002ab2:	4808      	ldr	r0, [pc, #32]	@ (8002ad4 <motores+0x14c>)
 8002ab4:	f001 ff3c 	bl	8004930 <HAL_GPIO_WritePin>
		timmotorGlobal->Instance->CCR2 = 0;
 8002ab8:	4b05      	ldr	r3, [pc, #20]	@ (8002ad0 <motores+0x148>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002ac2:	bf00      	nop
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	40020000 	.word	0x40020000
 8002ad0:	2000066c 	.word	0x2000066c
 8002ad4:	40020400 	.word	0x40020400

08002ad8 <delay_us_tim_init>:


#ifdef TIMX

void delay_us_tim_init()
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  // HAL_TIM_Base_Start(&TIMERX); // CON HAL inicia el timer 1


	//SIN HAL
	TIMX->CR1|=1>>0;// HABILITA EL TIMER BIT 0 EN 1 EN
 8002adc:	4b05      	ldr	r3, [pc, #20]	@ (8002af4 <delay_us_tim_init+0x1c>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a04      	ldr	r2, [pc, #16]	@ (8002af4 <delay_us_tim_init+0x1c>)
 8002ae2:	f043 0301 	orr.w	r3, r3, #1
 8002ae6:	6013      	str	r3, [r2, #0]

}
 8002ae8:	bf00      	nop
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	40014000 	.word	0x40014000

08002af8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002afe:	2300      	movs	r3, #0
 8002b00:	607b      	str	r3, [r7, #4]
 8002b02:	4b10      	ldr	r3, [pc, #64]	@ (8002b44 <HAL_MspInit+0x4c>)
 8002b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b06:	4a0f      	ldr	r2, [pc, #60]	@ (8002b44 <HAL_MspInit+0x4c>)
 8002b08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8002b44 <HAL_MspInit+0x4c>)
 8002b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b16:	607b      	str	r3, [r7, #4]
 8002b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	603b      	str	r3, [r7, #0]
 8002b1e:	4b09      	ldr	r3, [pc, #36]	@ (8002b44 <HAL_MspInit+0x4c>)
 8002b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b22:	4a08      	ldr	r2, [pc, #32]	@ (8002b44 <HAL_MspInit+0x4c>)
 8002b24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b28:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b2a:	4b06      	ldr	r3, [pc, #24]	@ (8002b44 <HAL_MspInit+0x4c>)
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b32:	603b      	str	r3, [r7, #0]
 8002b34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b36:	bf00      	nop
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	40023800 	.word	0x40023800

08002b48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b08a      	sub	sp, #40	@ 0x28
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b50:	f107 0314 	add.w	r3, r7, #20
 8002b54:	2200      	movs	r2, #0
 8002b56:	601a      	str	r2, [r3, #0]
 8002b58:	605a      	str	r2, [r3, #4]
 8002b5a:	609a      	str	r2, [r3, #8]
 8002b5c:	60da      	str	r2, [r3, #12]
 8002b5e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a2f      	ldr	r2, [pc, #188]	@ (8002c24 <HAL_ADC_MspInit+0xdc>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d158      	bne.n	8002c1c <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	613b      	str	r3, [r7, #16]
 8002b6e:	4b2e      	ldr	r3, [pc, #184]	@ (8002c28 <HAL_ADC_MspInit+0xe0>)
 8002b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b72:	4a2d      	ldr	r2, [pc, #180]	@ (8002c28 <HAL_ADC_MspInit+0xe0>)
 8002b74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b78:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b7a:	4b2b      	ldr	r3, [pc, #172]	@ (8002c28 <HAL_ADC_MspInit+0xe0>)
 8002b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b82:	613b      	str	r3, [r7, #16]
 8002b84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b86:	2300      	movs	r3, #0
 8002b88:	60fb      	str	r3, [r7, #12]
 8002b8a:	4b27      	ldr	r3, [pc, #156]	@ (8002c28 <HAL_ADC_MspInit+0xe0>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8e:	4a26      	ldr	r2, [pc, #152]	@ (8002c28 <HAL_ADC_MspInit+0xe0>)
 8002b90:	f043 0301 	orr.w	r3, r3, #1
 8002b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b96:	4b24      	ldr	r3, [pc, #144]	@ (8002c28 <HAL_ADC_MspInit+0xe0>)
 8002b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002ba2:	230f      	movs	r3, #15
 8002ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002baa:	2300      	movs	r3, #0
 8002bac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bae:	f107 0314 	add.w	r3, r7, #20
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	481d      	ldr	r0, [pc, #116]	@ (8002c2c <HAL_ADC_MspInit+0xe4>)
 8002bb6:	f001 fd1f 	bl	80045f8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002bba:	4b1d      	ldr	r3, [pc, #116]	@ (8002c30 <HAL_ADC_MspInit+0xe8>)
 8002bbc:	4a1d      	ldr	r2, [pc, #116]	@ (8002c34 <HAL_ADC_MspInit+0xec>)
 8002bbe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002bc0:	4b1b      	ldr	r3, [pc, #108]	@ (8002c30 <HAL_ADC_MspInit+0xe8>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002bc6:	4b1a      	ldr	r3, [pc, #104]	@ (8002c30 <HAL_ADC_MspInit+0xe8>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bcc:	4b18      	ldr	r3, [pc, #96]	@ (8002c30 <HAL_ADC_MspInit+0xe8>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002bd2:	4b17      	ldr	r3, [pc, #92]	@ (8002c30 <HAL_ADC_MspInit+0xe8>)
 8002bd4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002bd8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002bda:	4b15      	ldr	r3, [pc, #84]	@ (8002c30 <HAL_ADC_MspInit+0xe8>)
 8002bdc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002be0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002be2:	4b13      	ldr	r3, [pc, #76]	@ (8002c30 <HAL_ADC_MspInit+0xe8>)
 8002be4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002be8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002bea:	4b11      	ldr	r3, [pc, #68]	@ (8002c30 <HAL_ADC_MspInit+0xe8>)
 8002bec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002bf0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8002bf2:	4b0f      	ldr	r3, [pc, #60]	@ (8002c30 <HAL_ADC_MspInit+0xe8>)
 8002bf4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002bf8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8002c30 <HAL_ADC_MspInit+0xe8>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002c00:	480b      	ldr	r0, [pc, #44]	@ (8002c30 <HAL_ADC_MspInit+0xe8>)
 8002c02:	f001 f989 	bl	8003f18 <HAL_DMA_Init>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8002c0c:	f7ff fd30 	bl	8002670 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a07      	ldr	r2, [pc, #28]	@ (8002c30 <HAL_ADC_MspInit+0xe8>)
 8002c14:	639a      	str	r2, [r3, #56]	@ 0x38
 8002c16:	4a06      	ldr	r2, [pc, #24]	@ (8002c30 <HAL_ADC_MspInit+0xe8>)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002c1c:	bf00      	nop
 8002c1e:	3728      	adds	r7, #40	@ 0x28
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	40012000 	.word	0x40012000
 8002c28:	40023800 	.word	0x40023800
 8002c2c:	40020000 	.word	0x40020000
 8002c30:	2000022c 	.word	0x2000022c
 8002c34:	40026410 	.word	0x40026410

08002c38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b08a      	sub	sp, #40	@ 0x28
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c40:	f107 0314 	add.w	r3, r7, #20
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	605a      	str	r2, [r3, #4]
 8002c4a:	609a      	str	r2, [r3, #8]
 8002c4c:	60da      	str	r2, [r3, #12]
 8002c4e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a19      	ldr	r2, [pc, #100]	@ (8002cbc <HAL_I2C_MspInit+0x84>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d12c      	bne.n	8002cb4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	613b      	str	r3, [r7, #16]
 8002c5e:	4b18      	ldr	r3, [pc, #96]	@ (8002cc0 <HAL_I2C_MspInit+0x88>)
 8002c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c62:	4a17      	ldr	r2, [pc, #92]	@ (8002cc0 <HAL_I2C_MspInit+0x88>)
 8002c64:	f043 0302 	orr.w	r3, r3, #2
 8002c68:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c6a:	4b15      	ldr	r3, [pc, #84]	@ (8002cc0 <HAL_I2C_MspInit+0x88>)
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	613b      	str	r3, [r7, #16]
 8002c74:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002c76:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002c7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c7c:	2312      	movs	r3, #18
 8002c7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c80:	2300      	movs	r3, #0
 8002c82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c84:	2303      	movs	r3, #3
 8002c86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c88:	2304      	movs	r3, #4
 8002c8a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c8c:	f107 0314 	add.w	r3, r7, #20
 8002c90:	4619      	mov	r1, r3
 8002c92:	480c      	ldr	r0, [pc, #48]	@ (8002cc4 <HAL_I2C_MspInit+0x8c>)
 8002c94:	f001 fcb0 	bl	80045f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c98:	2300      	movs	r3, #0
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	4b08      	ldr	r3, [pc, #32]	@ (8002cc0 <HAL_I2C_MspInit+0x88>)
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca0:	4a07      	ldr	r2, [pc, #28]	@ (8002cc0 <HAL_I2C_MspInit+0x88>)
 8002ca2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002ca6:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ca8:	4b05      	ldr	r3, [pc, #20]	@ (8002cc0 <HAL_I2C_MspInit+0x88>)
 8002caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cb0:	60fb      	str	r3, [r7, #12]
 8002cb2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002cb4:	bf00      	nop
 8002cb6:	3728      	adds	r7, #40	@ 0x28
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40005400 	.word	0x40005400
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	40020400 	.word	0x40020400

08002cc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b088      	sub	sp, #32
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a42      	ldr	r2, [pc, #264]	@ (8002de0 <HAL_TIM_Base_MspInit+0x118>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d11e      	bne.n	8002d18 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002cda:	2300      	movs	r3, #0
 8002cdc:	61fb      	str	r3, [r7, #28]
 8002cde:	4b41      	ldr	r3, [pc, #260]	@ (8002de4 <HAL_TIM_Base_MspInit+0x11c>)
 8002ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ce2:	4a40      	ldr	r2, [pc, #256]	@ (8002de4 <HAL_TIM_Base_MspInit+0x11c>)
 8002ce4:	f043 0301 	orr.w	r3, r3, #1
 8002ce8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cea:	4b3e      	ldr	r3, [pc, #248]	@ (8002de4 <HAL_TIM_Base_MspInit+0x11c>)
 8002cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	61fb      	str	r3, [r7, #28]
 8002cf4:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	2100      	movs	r1, #0
 8002cfa:	2019      	movs	r0, #25
 8002cfc:	f001 f8d5 	bl	8003eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002d00:	2019      	movs	r0, #25
 8002d02:	f001 f8ee 	bl	8003ee2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002d06:	2200      	movs	r2, #0
 8002d08:	2100      	movs	r1, #0
 8002d0a:	201a      	movs	r0, #26
 8002d0c:	f001 f8cd 	bl	8003eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002d10:	201a      	movs	r0, #26
 8002d12:	f001 f8e6 	bl	8003ee2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002d16:	e05e      	b.n	8002dd6 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM4)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a32      	ldr	r2, [pc, #200]	@ (8002de8 <HAL_TIM_Base_MspInit+0x120>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d10e      	bne.n	8002d40 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002d22:	2300      	movs	r3, #0
 8002d24:	61bb      	str	r3, [r7, #24]
 8002d26:	4b2f      	ldr	r3, [pc, #188]	@ (8002de4 <HAL_TIM_Base_MspInit+0x11c>)
 8002d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2a:	4a2e      	ldr	r2, [pc, #184]	@ (8002de4 <HAL_TIM_Base_MspInit+0x11c>)
 8002d2c:	f043 0304 	orr.w	r3, r3, #4
 8002d30:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d32:	4b2c      	ldr	r3, [pc, #176]	@ (8002de4 <HAL_TIM_Base_MspInit+0x11c>)
 8002d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d36:	f003 0304 	and.w	r3, r3, #4
 8002d3a:	61bb      	str	r3, [r7, #24]
 8002d3c:	69bb      	ldr	r3, [r7, #24]
}
 8002d3e:	e04a      	b.n	8002dd6 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM9)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a29      	ldr	r2, [pc, #164]	@ (8002dec <HAL_TIM_Base_MspInit+0x124>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d10e      	bne.n	8002d68 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	617b      	str	r3, [r7, #20]
 8002d4e:	4b25      	ldr	r3, [pc, #148]	@ (8002de4 <HAL_TIM_Base_MspInit+0x11c>)
 8002d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d52:	4a24      	ldr	r2, [pc, #144]	@ (8002de4 <HAL_TIM_Base_MspInit+0x11c>)
 8002d54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d58:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d5a:	4b22      	ldr	r3, [pc, #136]	@ (8002de4 <HAL_TIM_Base_MspInit+0x11c>)
 8002d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d62:	617b      	str	r3, [r7, #20]
 8002d64:	697b      	ldr	r3, [r7, #20]
}
 8002d66:	e036      	b.n	8002dd6 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM10)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a20      	ldr	r2, [pc, #128]	@ (8002df0 <HAL_TIM_Base_MspInit+0x128>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d116      	bne.n	8002da0 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002d72:	2300      	movs	r3, #0
 8002d74:	613b      	str	r3, [r7, #16]
 8002d76:	4b1b      	ldr	r3, [pc, #108]	@ (8002de4 <HAL_TIM_Base_MspInit+0x11c>)
 8002d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d7a:	4a1a      	ldr	r2, [pc, #104]	@ (8002de4 <HAL_TIM_Base_MspInit+0x11c>)
 8002d7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d80:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d82:	4b18      	ldr	r3, [pc, #96]	@ (8002de4 <HAL_TIM_Base_MspInit+0x11c>)
 8002d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d8a:	613b      	str	r3, [r7, #16]
 8002d8c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002d8e:	2200      	movs	r2, #0
 8002d90:	2100      	movs	r1, #0
 8002d92:	2019      	movs	r0, #25
 8002d94:	f001 f889 	bl	8003eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002d98:	2019      	movs	r0, #25
 8002d9a:	f001 f8a2 	bl	8003ee2 <HAL_NVIC_EnableIRQ>
}
 8002d9e:	e01a      	b.n	8002dd6 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM11)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a13      	ldr	r2, [pc, #76]	@ (8002df4 <HAL_TIM_Base_MspInit+0x12c>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d115      	bne.n	8002dd6 <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002daa:	2300      	movs	r3, #0
 8002dac:	60fb      	str	r3, [r7, #12]
 8002dae:	4b0d      	ldr	r3, [pc, #52]	@ (8002de4 <HAL_TIM_Base_MspInit+0x11c>)
 8002db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002db2:	4a0c      	ldr	r2, [pc, #48]	@ (8002de4 <HAL_TIM_Base_MspInit+0x11c>)
 8002db4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002db8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dba:	4b0a      	ldr	r3, [pc, #40]	@ (8002de4 <HAL_TIM_Base_MspInit+0x11c>)
 8002dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	2100      	movs	r1, #0
 8002dca:	201a      	movs	r0, #26
 8002dcc:	f001 f86d 	bl	8003eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002dd0:	201a      	movs	r0, #26
 8002dd2:	f001 f886 	bl	8003ee2 <HAL_NVIC_EnableIRQ>
}
 8002dd6:	bf00      	nop
 8002dd8:	3720      	adds	r7, #32
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	40010000 	.word	0x40010000
 8002de4:	40023800 	.word	0x40023800
 8002de8:	40000800 	.word	0x40000800
 8002dec:	40014000 	.word	0x40014000
 8002df0:	40014400 	.word	0x40014400
 8002df4:	40014800 	.word	0x40014800

08002df8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b08c      	sub	sp, #48	@ 0x30
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e00:	f107 031c 	add.w	r3, r7, #28
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	605a      	str	r2, [r3, #4]
 8002e0a:	609a      	str	r2, [r3, #8]
 8002e0c:	60da      	str	r2, [r3, #12]
 8002e0e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e18:	d14b      	bne.n	8002eb2 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	61bb      	str	r3, [r7, #24]
 8002e1e:	4b3f      	ldr	r3, [pc, #252]	@ (8002f1c <HAL_TIM_Encoder_MspInit+0x124>)
 8002e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e22:	4a3e      	ldr	r2, [pc, #248]	@ (8002f1c <HAL_TIM_Encoder_MspInit+0x124>)
 8002e24:	f043 0301 	orr.w	r3, r3, #1
 8002e28:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e2a:	4b3c      	ldr	r3, [pc, #240]	@ (8002f1c <HAL_TIM_Encoder_MspInit+0x124>)
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	61bb      	str	r3, [r7, #24]
 8002e34:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e36:	2300      	movs	r3, #0
 8002e38:	617b      	str	r3, [r7, #20]
 8002e3a:	4b38      	ldr	r3, [pc, #224]	@ (8002f1c <HAL_TIM_Encoder_MspInit+0x124>)
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e3e:	4a37      	ldr	r2, [pc, #220]	@ (8002f1c <HAL_TIM_Encoder_MspInit+0x124>)
 8002e40:	f043 0301 	orr.w	r3, r3, #1
 8002e44:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e46:	4b35      	ldr	r3, [pc, #212]	@ (8002f1c <HAL_TIM_Encoder_MspInit+0x124>)
 8002e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	617b      	str	r3, [r7, #20]
 8002e50:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e52:	2300      	movs	r3, #0
 8002e54:	613b      	str	r3, [r7, #16]
 8002e56:	4b31      	ldr	r3, [pc, #196]	@ (8002f1c <HAL_TIM_Encoder_MspInit+0x124>)
 8002e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e5a:	4a30      	ldr	r2, [pc, #192]	@ (8002f1c <HAL_TIM_Encoder_MspInit+0x124>)
 8002e5c:	f043 0302 	orr.w	r3, r3, #2
 8002e60:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e62:	4b2e      	ldr	r3, [pc, #184]	@ (8002f1c <HAL_TIM_Encoder_MspInit+0x124>)
 8002e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	613b      	str	r3, [r7, #16]
 8002e6c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002e6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e74:	2302      	movs	r3, #2
 8002e76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e80:	2301      	movs	r3, #1
 8002e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e84:	f107 031c 	add.w	r3, r7, #28
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4825      	ldr	r0, [pc, #148]	@ (8002f20 <HAL_TIM_Encoder_MspInit+0x128>)
 8002e8c:	f001 fbb4 	bl	80045f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002e90:	2308      	movs	r3, #8
 8002e92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e94:	2302      	movs	r3, #2
 8002e96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ea4:	f107 031c 	add.w	r3, r7, #28
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	481e      	ldr	r0, [pc, #120]	@ (8002f24 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002eac:	f001 fba4 	bl	80045f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002eb0:	e030      	b.n	8002f14 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a1c      	ldr	r2, [pc, #112]	@ (8002f28 <HAL_TIM_Encoder_MspInit+0x130>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d12b      	bne.n	8002f14 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	60fb      	str	r3, [r7, #12]
 8002ec0:	4b16      	ldr	r3, [pc, #88]	@ (8002f1c <HAL_TIM_Encoder_MspInit+0x124>)
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec4:	4a15      	ldr	r2, [pc, #84]	@ (8002f1c <HAL_TIM_Encoder_MspInit+0x124>)
 8002ec6:	f043 0302 	orr.w	r3, r3, #2
 8002eca:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ecc:	4b13      	ldr	r3, [pc, #76]	@ (8002f1c <HAL_TIM_Encoder_MspInit+0x124>)
 8002ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	60fb      	str	r3, [r7, #12]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ed8:	2300      	movs	r3, #0
 8002eda:	60bb      	str	r3, [r7, #8]
 8002edc:	4b0f      	ldr	r3, [pc, #60]	@ (8002f1c <HAL_TIM_Encoder_MspInit+0x124>)
 8002ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee0:	4a0e      	ldr	r2, [pc, #56]	@ (8002f1c <HAL_TIM_Encoder_MspInit+0x124>)
 8002ee2:	f043 0302 	orr.w	r3, r3, #2
 8002ee6:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8002f1c <HAL_TIM_Encoder_MspInit+0x124>)
 8002eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	60bb      	str	r3, [r7, #8]
 8002ef2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002ef4:	2330      	movs	r3, #48	@ 0x30
 8002ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef8:	2302      	movs	r3, #2
 8002efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efc:	2300      	movs	r3, #0
 8002efe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f00:	2300      	movs	r3, #0
 8002f02:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002f04:	2302      	movs	r3, #2
 8002f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f08:	f107 031c 	add.w	r3, r7, #28
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	4805      	ldr	r0, [pc, #20]	@ (8002f24 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002f10:	f001 fb72 	bl	80045f8 <HAL_GPIO_Init>
}
 8002f14:	bf00      	nop
 8002f16:	3730      	adds	r7, #48	@ 0x30
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	40020000 	.word	0x40020000
 8002f24:	40020400 	.word	0x40020400
 8002f28:	40000400 	.word	0x40000400

08002f2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b088      	sub	sp, #32
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f34:	f107 030c 	add.w	r3, r7, #12
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	605a      	str	r2, [r3, #4]
 8002f3e:	609a      	str	r2, [r3, #8]
 8002f40:	60da      	str	r2, [r3, #12]
 8002f42:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a12      	ldr	r2, [pc, #72]	@ (8002f94 <HAL_TIM_MspPostInit+0x68>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d11d      	bne.n	8002f8a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f4e:	2300      	movs	r3, #0
 8002f50:	60bb      	str	r3, [r7, #8]
 8002f52:	4b11      	ldr	r3, [pc, #68]	@ (8002f98 <HAL_TIM_MspPostInit+0x6c>)
 8002f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f56:	4a10      	ldr	r2, [pc, #64]	@ (8002f98 <HAL_TIM_MspPostInit+0x6c>)
 8002f58:	f043 0302 	orr.w	r3, r3, #2
 8002f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f5e:	4b0e      	ldr	r3, [pc, #56]	@ (8002f98 <HAL_TIM_MspPostInit+0x6c>)
 8002f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	60bb      	str	r3, [r7, #8]
 8002f68:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f6a:	23c0      	movs	r3, #192	@ 0xc0
 8002f6c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f6e:	2302      	movs	r3, #2
 8002f70:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f72:	2300      	movs	r3, #0
 8002f74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f76:	2300      	movs	r3, #0
 8002f78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f7e:	f107 030c 	add.w	r3, r7, #12
 8002f82:	4619      	mov	r1, r3
 8002f84:	4805      	ldr	r0, [pc, #20]	@ (8002f9c <HAL_TIM_MspPostInit+0x70>)
 8002f86:	f001 fb37 	bl	80045f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002f8a:	bf00      	nop
 8002f8c:	3720      	adds	r7, #32
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	40000800 	.word	0x40000800
 8002f98:	40023800 	.word	0x40023800
 8002f9c:	40020400 	.word	0x40020400

08002fa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002fa4:	bf00      	nop
 8002fa6:	e7fd      	b.n	8002fa4 <NMI_Handler+0x4>

08002fa8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fac:	bf00      	nop
 8002fae:	e7fd      	b.n	8002fac <HardFault_Handler+0x4>

08002fb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fb4:	bf00      	nop
 8002fb6:	e7fd      	b.n	8002fb4 <MemManage_Handler+0x4>

08002fb8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fbc:	bf00      	nop
 8002fbe:	e7fd      	b.n	8002fbc <BusFault_Handler+0x4>

08002fc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fc4:	bf00      	nop
 8002fc6:	e7fd      	b.n	8002fc4 <UsageFault_Handler+0x4>

08002fc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fcc:	bf00      	nop
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr

08002fd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fda:	bf00      	nop
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fe8:	bf00      	nop
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr

08002ff2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ff6:	f000 f8c1 	bl	800317c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ffa:	bf00      	nop
 8002ffc:	bd80      	pop	{r7, pc}
	...

08003000 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003004:	4803      	ldr	r0, [pc, #12]	@ (8003014 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8003006:	f003 ffeb 	bl	8006fe0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800300a:	4803      	ldr	r0, [pc, #12]	@ (8003018 <TIM1_UP_TIM10_IRQHandler+0x18>)
 800300c:	f003 ffe8 	bl	8006fe0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003010:	bf00      	nop
 8003012:	bd80      	pop	{r7, pc}
 8003014:	200002e0 	.word	0x200002e0
 8003018:	20000448 	.word	0x20000448

0800301c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003020:	4803      	ldr	r0, [pc, #12]	@ (8003030 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8003022:	f003 ffdd 	bl	8006fe0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8003026:	4803      	ldr	r0, [pc, #12]	@ (8003034 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8003028:	f003 ffda 	bl	8006fe0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800302c:	bf00      	nop
 800302e:	bd80      	pop	{r7, pc}
 8003030:	200002e0 	.word	0x200002e0
 8003034:	20000490 	.word	0x20000490

08003038 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800303c:	4802      	ldr	r0, [pc, #8]	@ (8003048 <DMA2_Stream0_IRQHandler+0x10>)
 800303e:	f001 f871 	bl	8004124 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003042:	bf00      	nop
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	2000022c 	.word	0x2000022c

0800304c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003050:	4802      	ldr	r0, [pc, #8]	@ (800305c <OTG_FS_IRQHandler+0x10>)
 8003052:	f001 ff29 	bl	8004ea8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003056:	bf00      	nop
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	20001b54 	.word	0x20001b54

08003060 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003064:	4b06      	ldr	r3, [pc, #24]	@ (8003080 <SystemInit+0x20>)
 8003066:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800306a:	4a05      	ldr	r2, [pc, #20]	@ (8003080 <SystemInit+0x20>)
 800306c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003070:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003074:	bf00      	nop
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	e000ed00 	.word	0xe000ed00

08003084 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003084:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80030bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003088:	f7ff ffea 	bl	8003060 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800308c:	480c      	ldr	r0, [pc, #48]	@ (80030c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800308e:	490d      	ldr	r1, [pc, #52]	@ (80030c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003090:	4a0d      	ldr	r2, [pc, #52]	@ (80030c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003092:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003094:	e002      	b.n	800309c <LoopCopyDataInit>

08003096 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003096:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003098:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800309a:	3304      	adds	r3, #4

0800309c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800309c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800309e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030a0:	d3f9      	bcc.n	8003096 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030a2:	4a0a      	ldr	r2, [pc, #40]	@ (80030cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80030a4:	4c0a      	ldr	r4, [pc, #40]	@ (80030d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80030a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030a8:	e001      	b.n	80030ae <LoopFillZerobss>

080030aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030ac:	3204      	adds	r2, #4

080030ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030b0:	d3fb      	bcc.n	80030aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80030b2:	f008 fdcf 	bl	800bc54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030b6:	f7fe fbed 	bl	8001894 <main>
  bx  lr    
 80030ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80030bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80030c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030c4:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 80030c8:	0800d0a0 	.word	0x0800d0a0
  ldr r2, =_sbss
 80030cc:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 80030d0:	20002390 	.word	0x20002390

080030d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030d4:	e7fe      	b.n	80030d4 <ADC_IRQHandler>
	...

080030d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030dc:	4b0e      	ldr	r3, [pc, #56]	@ (8003118 <HAL_Init+0x40>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a0d      	ldr	r2, [pc, #52]	@ (8003118 <HAL_Init+0x40>)
 80030e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80030e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003118 <HAL_Init+0x40>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a0a      	ldr	r2, [pc, #40]	@ (8003118 <HAL_Init+0x40>)
 80030ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80030f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030f4:	4b08      	ldr	r3, [pc, #32]	@ (8003118 <HAL_Init+0x40>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a07      	ldr	r2, [pc, #28]	@ (8003118 <HAL_Init+0x40>)
 80030fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003100:	2003      	movs	r0, #3
 8003102:	f000 fec7 	bl	8003e94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003106:	200f      	movs	r0, #15
 8003108:	f000 f808 	bl	800311c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800310c:	f7ff fcf4 	bl	8002af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	40023c00 	.word	0x40023c00

0800311c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003124:	4b12      	ldr	r3, [pc, #72]	@ (8003170 <HAL_InitTick+0x54>)
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	4b12      	ldr	r3, [pc, #72]	@ (8003174 <HAL_InitTick+0x58>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	4619      	mov	r1, r3
 800312e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003132:	fbb3 f3f1 	udiv	r3, r3, r1
 8003136:	fbb2 f3f3 	udiv	r3, r2, r3
 800313a:	4618      	mov	r0, r3
 800313c:	f000 fedf 	bl	8003efe <HAL_SYSTICK_Config>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e00e      	b.n	8003168 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b0f      	cmp	r3, #15
 800314e:	d80a      	bhi.n	8003166 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003150:	2200      	movs	r2, #0
 8003152:	6879      	ldr	r1, [r7, #4]
 8003154:	f04f 30ff 	mov.w	r0, #4294967295
 8003158:	f000 fea7 	bl	8003eaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800315c:	4a06      	ldr	r2, [pc, #24]	@ (8003178 <HAL_InitTick+0x5c>)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003162:	2300      	movs	r3, #0
 8003164:	e000      	b.n	8003168 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
}
 8003168:	4618      	mov	r0, r3
 800316a:	3708      	adds	r7, #8
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	20000028 	.word	0x20000028
 8003174:	20000030 	.word	0x20000030
 8003178:	2000002c 	.word	0x2000002c

0800317c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003180:	4b06      	ldr	r3, [pc, #24]	@ (800319c <HAL_IncTick+0x20>)
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	461a      	mov	r2, r3
 8003186:	4b06      	ldr	r3, [pc, #24]	@ (80031a0 <HAL_IncTick+0x24>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4413      	add	r3, r2
 800318c:	4a04      	ldr	r2, [pc, #16]	@ (80031a0 <HAL_IncTick+0x24>)
 800318e:	6013      	str	r3, [r2, #0]
}
 8003190:	bf00      	nop
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	20000030 	.word	0x20000030
 80031a0:	20000670 	.word	0x20000670

080031a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031a4:	b480      	push	{r7}
 80031a6:	af00      	add	r7, sp, #0
  return uwTick;
 80031a8:	4b03      	ldr	r3, [pc, #12]	@ (80031b8 <HAL_GetTick+0x14>)
 80031aa:	681b      	ldr	r3, [r3, #0]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	20000670 	.word	0x20000670

080031bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031c4:	f7ff ffee 	bl	80031a4 <HAL_GetTick>
 80031c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d4:	d005      	beq.n	80031e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003200 <HAL_Delay+0x44>)
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	461a      	mov	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	4413      	add	r3, r2
 80031e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80031e2:	bf00      	nop
 80031e4:	f7ff ffde 	bl	80031a4 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d8f7      	bhi.n	80031e4 <HAL_Delay+0x28>
  {
  }
}
 80031f4:	bf00      	nop
 80031f6:	bf00      	nop
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	20000030 	.word	0x20000030

08003204 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800320c:	2300      	movs	r3, #0
 800320e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e033      	b.n	8003282 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800321e:	2b00      	cmp	r3, #0
 8003220:	d109      	bne.n	8003236 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7ff fc90 	bl	8002b48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323a:	f003 0310 	and.w	r3, r3, #16
 800323e:	2b00      	cmp	r3, #0
 8003240:	d118      	bne.n	8003274 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003246:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800324a:	f023 0302 	bic.w	r3, r3, #2
 800324e:	f043 0202 	orr.w	r2, r3, #2
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 fbce 	bl	80039f8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003266:	f023 0303 	bic.w	r3, r3, #3
 800326a:	f043 0201 	orr.w	r2, r3, #1
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	641a      	str	r2, [r3, #64]	@ 0x40
 8003272:	e001      	b.n	8003278 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003280:	7bfb      	ldrb	r3, [r7, #15]
}
 8003282:	4618      	mov	r0, r3
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
	...

0800328c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003294:	2300      	movs	r3, #0
 8003296:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d101      	bne.n	80032a6 <HAL_ADC_Start+0x1a>
 80032a2:	2302      	movs	r3, #2
 80032a4:	e097      	b.n	80033d6 <HAL_ADC_Start+0x14a>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f003 0301 	and.w	r3, r3, #1
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d018      	beq.n	80032ee <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	689a      	ldr	r2, [r3, #8]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f042 0201 	orr.w	r2, r2, #1
 80032ca:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80032cc:	4b45      	ldr	r3, [pc, #276]	@ (80033e4 <HAL_ADC_Start+0x158>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a45      	ldr	r2, [pc, #276]	@ (80033e8 <HAL_ADC_Start+0x15c>)
 80032d2:	fba2 2303 	umull	r2, r3, r2, r3
 80032d6:	0c9a      	lsrs	r2, r3, #18
 80032d8:	4613      	mov	r3, r2
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	4413      	add	r3, r2
 80032de:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80032e0:	e002      	b.n	80032e8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	3b01      	subs	r3, #1
 80032e6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1f9      	bne.n	80032e2 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d15f      	bne.n	80033bc <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003300:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003304:	f023 0301 	bic.w	r3, r3, #1
 8003308:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800331a:	2b00      	cmp	r3, #0
 800331c:	d007      	beq.n	800332e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003322:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003326:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003332:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003336:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800333a:	d106      	bne.n	800334a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003340:	f023 0206 	bic.w	r2, r3, #6
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	645a      	str	r2, [r3, #68]	@ 0x44
 8003348:	e002      	b.n	8003350 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003358:	4b24      	ldr	r3, [pc, #144]	@ (80033ec <HAL_ADC_Start+0x160>)
 800335a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003364:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f003 031f 	and.w	r3, r3, #31
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10f      	bne.n	8003392 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d129      	bne.n	80033d4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	689a      	ldr	r2, [r3, #8]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800338e:	609a      	str	r2, [r3, #8]
 8003390:	e020      	b.n	80033d4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a16      	ldr	r2, [pc, #88]	@ (80033f0 <HAL_ADC_Start+0x164>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d11b      	bne.n	80033d4 <HAL_ADC_Start+0x148>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d114      	bne.n	80033d4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	689a      	ldr	r2, [r3, #8]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80033b8:	609a      	str	r2, [r3, #8]
 80033ba:	e00b      	b.n	80033d4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c0:	f043 0210 	orr.w	r2, r3, #16
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033cc:	f043 0201 	orr.w	r2, r3, #1
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3714      	adds	r7, #20
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	20000028 	.word	0x20000028
 80033e8:	431bde83 	.word	0x431bde83
 80033ec:	40012300 	.word	0x40012300
 80033f0:	40012000 	.word	0x40012000

080033f4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003402:	2b01      	cmp	r3, #1
 8003404:	d101      	bne.n	800340a <HAL_ADC_Stop+0x16>
 8003406:	2302      	movs	r3, #2
 8003408:	e021      	b.n	800344e <HAL_ADC_Stop+0x5a>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689a      	ldr	r2, [r3, #8]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f022 0201 	bic.w	r2, r2, #1
 8003420:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	2b00      	cmp	r3, #0
 800342e:	d109      	bne.n	8003444 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003434:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003438:	f023 0301 	bic.w	r3, r3, #1
 800343c:	f043 0201 	orr.w	r2, r3, #1
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800345a:	b580      	push	{r7, lr}
 800345c:	b084      	sub	sp, #16
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
 8003462:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003464:	2300      	movs	r3, #0
 8003466:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003472:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003476:	d113      	bne.n	80034a0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003482:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003486:	d10b      	bne.n	80034a0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348c:	f043 0220 	orr.w	r2, r3, #32
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e063      	b.n	8003568 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80034a0:	f7ff fe80 	bl	80031a4 <HAL_GetTick>
 80034a4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80034a6:	e021      	b.n	80034ec <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ae:	d01d      	beq.n	80034ec <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d007      	beq.n	80034c6 <HAL_ADC_PollForConversion+0x6c>
 80034b6:	f7ff fe75 	bl	80031a4 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d212      	bcs.n	80034ec <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d00b      	beq.n	80034ec <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d8:	f043 0204 	orr.w	r2, r3, #4
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e03d      	b.n	8003568 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d1d6      	bne.n	80034a8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f06f 0212 	mvn.w	r2, #18
 8003502:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003508:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d123      	bne.n	8003566 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003522:	2b00      	cmp	r3, #0
 8003524:	d11f      	bne.n	8003566 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800352c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003530:	2b00      	cmp	r3, #0
 8003532:	d006      	beq.n	8003542 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800353e:	2b00      	cmp	r3, #0
 8003540:	d111      	bne.n	8003566 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003546:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003552:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d105      	bne.n	8003566 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355e:	f043 0201 	orr.w	r2, r3, #1
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800357c:	2300      	movs	r3, #0
 800357e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003586:	2b01      	cmp	r3, #1
 8003588:	d101      	bne.n	800358e <HAL_ADC_Start_DMA+0x1e>
 800358a:	2302      	movs	r3, #2
 800358c:	e0ce      	b.n	800372c <HAL_ADC_Start_DMA+0x1bc>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d018      	beq.n	80035d6 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	689a      	ldr	r2, [r3, #8]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f042 0201 	orr.w	r2, r2, #1
 80035b2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80035b4:	4b5f      	ldr	r3, [pc, #380]	@ (8003734 <HAL_ADC_Start_DMA+0x1c4>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a5f      	ldr	r2, [pc, #380]	@ (8003738 <HAL_ADC_Start_DMA+0x1c8>)
 80035ba:	fba2 2303 	umull	r2, r3, r2, r3
 80035be:	0c9a      	lsrs	r2, r3, #18
 80035c0:	4613      	mov	r3, r2
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	4413      	add	r3, r2
 80035c6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80035c8:	e002      	b.n	80035d0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	3b01      	subs	r3, #1
 80035ce:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1f9      	bne.n	80035ca <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035e4:	d107      	bne.n	80035f6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80035f4:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	2b01      	cmp	r3, #1
 8003602:	f040 8086 	bne.w	8003712 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800360e:	f023 0301 	bic.w	r3, r3, #1
 8003612:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003624:	2b00      	cmp	r3, #0
 8003626:	d007      	beq.n	8003638 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800362c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003630:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003640:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003644:	d106      	bne.n	8003654 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800364a:	f023 0206 	bic.w	r2, r3, #6
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	645a      	str	r2, [r3, #68]	@ 0x44
 8003652:	e002      	b.n	800365a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003662:	4b36      	ldr	r3, [pc, #216]	@ (800373c <HAL_ADC_Start_DMA+0x1cc>)
 8003664:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800366a:	4a35      	ldr	r2, [pc, #212]	@ (8003740 <HAL_ADC_Start_DMA+0x1d0>)
 800366c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003672:	4a34      	ldr	r2, [pc, #208]	@ (8003744 <HAL_ADC_Start_DMA+0x1d4>)
 8003674:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800367a:	4a33      	ldr	r2, [pc, #204]	@ (8003748 <HAL_ADC_Start_DMA+0x1d8>)
 800367c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003686:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	685a      	ldr	r2, [r3, #4]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003696:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	689a      	ldr	r2, [r3, #8]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036a6:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	334c      	adds	r3, #76	@ 0x4c
 80036b2:	4619      	mov	r1, r3
 80036b4:	68ba      	ldr	r2, [r7, #8]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f000 fcdc 	bl	8004074 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f003 031f 	and.w	r3, r3, #31
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d10f      	bne.n	80036e8 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d129      	bne.n	800372a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80036e4:	609a      	str	r2, [r3, #8]
 80036e6:	e020      	b.n	800372a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a17      	ldr	r2, [pc, #92]	@ (800374c <HAL_ADC_Start_DMA+0x1dc>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d11b      	bne.n	800372a <HAL_ADC_Start_DMA+0x1ba>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d114      	bne.n	800372a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	689a      	ldr	r2, [r3, #8]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800370e:	609a      	str	r2, [r3, #8]
 8003710:	e00b      	b.n	800372a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003716:	f043 0210 	orr.w	r2, r3, #16
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003722:	f043 0201 	orr.w	r2, r3, #1
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3718      	adds	r7, #24
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	20000028 	.word	0x20000028
 8003738:	431bde83 	.word	0x431bde83
 800373c:	40012300 	.word	0x40012300
 8003740:	08003bf1 	.word	0x08003bf1
 8003744:	08003cab 	.word	0x08003cab
 8003748:	08003cc7 	.word	0x08003cc7
 800374c:	40012000 	.word	0x40012000

08003750 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800375e:	4618      	mov	r0, r3
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr

0800376a <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800376a:	b480      	push	{r7}
 800376c:	b083      	sub	sp, #12
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003772:	bf00      	nop
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr

0800377e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800377e:	b480      	push	{r7}
 8003780:	b083      	sub	sp, #12
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
	...

08003794 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003794:	b480      	push	{r7}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800379e:	2300      	movs	r3, #0
 80037a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d101      	bne.n	80037b0 <HAL_ADC_ConfigChannel+0x1c>
 80037ac:	2302      	movs	r3, #2
 80037ae:	e113      	b.n	80039d8 <HAL_ADC_ConfigChannel+0x244>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2b09      	cmp	r3, #9
 80037be:	d925      	bls.n	800380c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68d9      	ldr	r1, [r3, #12]
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	461a      	mov	r2, r3
 80037ce:	4613      	mov	r3, r2
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	4413      	add	r3, r2
 80037d4:	3b1e      	subs	r3, #30
 80037d6:	2207      	movs	r2, #7
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	43da      	mvns	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	400a      	ands	r2, r1
 80037e4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68d9      	ldr	r1, [r3, #12]
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	689a      	ldr	r2, [r3, #8]
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	4618      	mov	r0, r3
 80037f8:	4603      	mov	r3, r0
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	4403      	add	r3, r0
 80037fe:	3b1e      	subs	r3, #30
 8003800:	409a      	lsls	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	430a      	orrs	r2, r1
 8003808:	60da      	str	r2, [r3, #12]
 800380a:	e022      	b.n	8003852 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6919      	ldr	r1, [r3, #16]
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	b29b      	uxth	r3, r3
 8003818:	461a      	mov	r2, r3
 800381a:	4613      	mov	r3, r2
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	4413      	add	r3, r2
 8003820:	2207      	movs	r2, #7
 8003822:	fa02 f303 	lsl.w	r3, r2, r3
 8003826:	43da      	mvns	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	400a      	ands	r2, r1
 800382e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6919      	ldr	r1, [r3, #16]
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	689a      	ldr	r2, [r3, #8]
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	b29b      	uxth	r3, r3
 8003840:	4618      	mov	r0, r3
 8003842:	4603      	mov	r3, r0
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	4403      	add	r3, r0
 8003848:	409a      	lsls	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	430a      	orrs	r2, r1
 8003850:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	2b06      	cmp	r3, #6
 8003858:	d824      	bhi.n	80038a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685a      	ldr	r2, [r3, #4]
 8003864:	4613      	mov	r3, r2
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	4413      	add	r3, r2
 800386a:	3b05      	subs	r3, #5
 800386c:	221f      	movs	r2, #31
 800386e:	fa02 f303 	lsl.w	r3, r2, r3
 8003872:	43da      	mvns	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	400a      	ands	r2, r1
 800387a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	b29b      	uxth	r3, r3
 8003888:	4618      	mov	r0, r3
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	4613      	mov	r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	4413      	add	r3, r2
 8003894:	3b05      	subs	r3, #5
 8003896:	fa00 f203 	lsl.w	r2, r0, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80038a2:	e04c      	b.n	800393e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	2b0c      	cmp	r3, #12
 80038aa:	d824      	bhi.n	80038f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685a      	ldr	r2, [r3, #4]
 80038b6:	4613      	mov	r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	4413      	add	r3, r2
 80038bc:	3b23      	subs	r3, #35	@ 0x23
 80038be:	221f      	movs	r2, #31
 80038c0:	fa02 f303 	lsl.w	r3, r2, r3
 80038c4:	43da      	mvns	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	400a      	ands	r2, r1
 80038cc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	b29b      	uxth	r3, r3
 80038da:	4618      	mov	r0, r3
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685a      	ldr	r2, [r3, #4]
 80038e0:	4613      	mov	r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	4413      	add	r3, r2
 80038e6:	3b23      	subs	r3, #35	@ 0x23
 80038e8:	fa00 f203 	lsl.w	r2, r0, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	430a      	orrs	r2, r1
 80038f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80038f4:	e023      	b.n	800393e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	4613      	mov	r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	4413      	add	r3, r2
 8003906:	3b41      	subs	r3, #65	@ 0x41
 8003908:	221f      	movs	r2, #31
 800390a:	fa02 f303 	lsl.w	r3, r2, r3
 800390e:	43da      	mvns	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	400a      	ands	r2, r1
 8003916:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	b29b      	uxth	r3, r3
 8003924:	4618      	mov	r0, r3
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685a      	ldr	r2, [r3, #4]
 800392a:	4613      	mov	r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4413      	add	r3, r2
 8003930:	3b41      	subs	r3, #65	@ 0x41
 8003932:	fa00 f203 	lsl.w	r2, r0, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	430a      	orrs	r2, r1
 800393c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800393e:	4b29      	ldr	r3, [pc, #164]	@ (80039e4 <HAL_ADC_ConfigChannel+0x250>)
 8003940:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a28      	ldr	r2, [pc, #160]	@ (80039e8 <HAL_ADC_ConfigChannel+0x254>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d10f      	bne.n	800396c <HAL_ADC_ConfigChannel+0x1d8>
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2b12      	cmp	r3, #18
 8003952:	d10b      	bne.n	800396c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a1d      	ldr	r2, [pc, #116]	@ (80039e8 <HAL_ADC_ConfigChannel+0x254>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d12b      	bne.n	80039ce <HAL_ADC_ConfigChannel+0x23a>
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a1c      	ldr	r2, [pc, #112]	@ (80039ec <HAL_ADC_ConfigChannel+0x258>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d003      	beq.n	8003988 <HAL_ADC_ConfigChannel+0x1f4>
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2b11      	cmp	r3, #17
 8003986:	d122      	bne.n	80039ce <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a11      	ldr	r2, [pc, #68]	@ (80039ec <HAL_ADC_ConfigChannel+0x258>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d111      	bne.n	80039ce <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80039aa:	4b11      	ldr	r3, [pc, #68]	@ (80039f0 <HAL_ADC_ConfigChannel+0x25c>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a11      	ldr	r2, [pc, #68]	@ (80039f4 <HAL_ADC_ConfigChannel+0x260>)
 80039b0:	fba2 2303 	umull	r2, r3, r2, r3
 80039b4:	0c9a      	lsrs	r2, r3, #18
 80039b6:	4613      	mov	r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	4413      	add	r3, r2
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80039c0:	e002      	b.n	80039c8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	3b01      	subs	r3, #1
 80039c6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1f9      	bne.n	80039c2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3714      	adds	r7, #20
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr
 80039e4:	40012300 	.word	0x40012300
 80039e8:	40012000 	.word	0x40012000
 80039ec:	10000012 	.word	0x10000012
 80039f0:	20000028 	.word	0x20000028
 80039f4:	431bde83 	.word	0x431bde83

080039f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a00:	4b79      	ldr	r3, [pc, #484]	@ (8003be8 <ADC_Init+0x1f0>)
 8003a02:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	431a      	orrs	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	685a      	ldr	r2, [r3, #4]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	6859      	ldr	r1, [r3, #4]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	021a      	lsls	r2, r3, #8
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003a50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	6859      	ldr	r1, [r3, #4]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689a      	ldr	r2, [r3, #8]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	430a      	orrs	r2, r1
 8003a62:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	689a      	ldr	r2, [r3, #8]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	6899      	ldr	r1, [r3, #8]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	68da      	ldr	r2, [r3, #12]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	430a      	orrs	r2, r1
 8003a84:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a8a:	4a58      	ldr	r2, [pc, #352]	@ (8003bec <ADC_Init+0x1f4>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d022      	beq.n	8003ad6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689a      	ldr	r2, [r3, #8]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003a9e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	6899      	ldr	r1, [r3, #8]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003ac0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	6899      	ldr	r1, [r3, #8]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	609a      	str	r2, [r3, #8]
 8003ad4:	e00f      	b.n	8003af6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	689a      	ldr	r2, [r3, #8]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003ae4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	689a      	ldr	r2, [r3, #8]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003af4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	689a      	ldr	r2, [r3, #8]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f022 0202 	bic.w	r2, r2, #2
 8003b04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6899      	ldr	r1, [r3, #8]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	7e1b      	ldrb	r3, [r3, #24]
 8003b10:	005a      	lsls	r2, r3, #1
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	430a      	orrs	r2, r1
 8003b18:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d01b      	beq.n	8003b5c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	685a      	ldr	r2, [r3, #4]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b32:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	685a      	ldr	r2, [r3, #4]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003b42:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	6859      	ldr	r1, [r3, #4]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	035a      	lsls	r2, r3, #13
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	605a      	str	r2, [r3, #4]
 8003b5a:	e007      	b.n	8003b6c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	685a      	ldr	r2, [r3, #4]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b6a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003b7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	69db      	ldr	r3, [r3, #28]
 8003b86:	3b01      	subs	r3, #1
 8003b88:	051a      	lsls	r2, r3, #20
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	689a      	ldr	r2, [r3, #8]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003ba0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	6899      	ldr	r1, [r3, #8]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003bae:	025a      	lsls	r2, r3, #9
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	689a      	ldr	r2, [r3, #8]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bc6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	6899      	ldr	r1, [r3, #8]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	029a      	lsls	r2, r3, #10
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	609a      	str	r2, [r3, #8]
}
 8003bdc:	bf00      	nop
 8003bde:	3714      	adds	r7, #20
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr
 8003be8:	40012300 	.word	0x40012300
 8003bec:	0f000001 	.word	0x0f000001

08003bf0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bfc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c02:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d13c      	bne.n	8003c84 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c0e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d12b      	bne.n	8003c7c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d127      	bne.n	8003c7c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c32:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d006      	beq.n	8003c48 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d119      	bne.n	8003c7c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	685a      	ldr	r2, [r3, #4]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 0220 	bic.w	r2, r2, #32
 8003c56:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d105      	bne.n	8003c7c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c74:	f043 0201 	orr.w	r2, r3, #1
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f7fe fca5 	bl	80025cc <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003c82:	e00e      	b.n	8003ca2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c88:	f003 0310 	and.w	r3, r3, #16
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d003      	beq.n	8003c98 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f7ff fd74 	bl	800377e <HAL_ADC_ErrorCallback>
}
 8003c96:	e004      	b.n	8003ca2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	4798      	blx	r3
}
 8003ca2:	bf00      	nop
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b084      	sub	sp, #16
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cb6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f7ff fd56 	bl	800376a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003cbe:	bf00      	nop
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b084      	sub	sp, #16
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cd2:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2240      	movs	r2, #64	@ 0x40
 8003cd8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cde:	f043 0204 	orr.w	r2, r3, #4
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f7ff fd49 	bl	800377e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003cec:	bf00      	nop
 8003cee:	3710      	adds	r7, #16
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f003 0307 	and.w	r3, r3, #7
 8003d02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d04:	4b0c      	ldr	r3, [pc, #48]	@ (8003d38 <__NVIC_SetPriorityGrouping+0x44>)
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d0a:	68ba      	ldr	r2, [r7, #8]
 8003d0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003d10:	4013      	ands	r3, r2
 8003d12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003d20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d26:	4a04      	ldr	r2, [pc, #16]	@ (8003d38 <__NVIC_SetPriorityGrouping+0x44>)
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	60d3      	str	r3, [r2, #12]
}
 8003d2c:	bf00      	nop
 8003d2e:	3714      	adds	r7, #20
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr
 8003d38:	e000ed00 	.word	0xe000ed00

08003d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d40:	4b04      	ldr	r3, [pc, #16]	@ (8003d54 <__NVIC_GetPriorityGrouping+0x18>)
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	0a1b      	lsrs	r3, r3, #8
 8003d46:	f003 0307 	and.w	r3, r3, #7
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr
 8003d54:	e000ed00 	.word	0xe000ed00

08003d58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	4603      	mov	r3, r0
 8003d60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	db0b      	blt.n	8003d82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d6a:	79fb      	ldrb	r3, [r7, #7]
 8003d6c:	f003 021f 	and.w	r2, r3, #31
 8003d70:	4907      	ldr	r1, [pc, #28]	@ (8003d90 <__NVIC_EnableIRQ+0x38>)
 8003d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d76:	095b      	lsrs	r3, r3, #5
 8003d78:	2001      	movs	r0, #1
 8003d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d82:	bf00      	nop
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	e000e100 	.word	0xe000e100

08003d94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	6039      	str	r1, [r7, #0]
 8003d9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	db0a      	blt.n	8003dbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	b2da      	uxtb	r2, r3
 8003dac:	490c      	ldr	r1, [pc, #48]	@ (8003de0 <__NVIC_SetPriority+0x4c>)
 8003dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003db2:	0112      	lsls	r2, r2, #4
 8003db4:	b2d2      	uxtb	r2, r2
 8003db6:	440b      	add	r3, r1
 8003db8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003dbc:	e00a      	b.n	8003dd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	b2da      	uxtb	r2, r3
 8003dc2:	4908      	ldr	r1, [pc, #32]	@ (8003de4 <__NVIC_SetPriority+0x50>)
 8003dc4:	79fb      	ldrb	r3, [r7, #7]
 8003dc6:	f003 030f 	and.w	r3, r3, #15
 8003dca:	3b04      	subs	r3, #4
 8003dcc:	0112      	lsls	r2, r2, #4
 8003dce:	b2d2      	uxtb	r2, r2
 8003dd0:	440b      	add	r3, r1
 8003dd2:	761a      	strb	r2, [r3, #24]
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr
 8003de0:	e000e100 	.word	0xe000e100
 8003de4:	e000ed00 	.word	0xe000ed00

08003de8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b089      	sub	sp, #36	@ 0x24
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f003 0307 	and.w	r3, r3, #7
 8003dfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	f1c3 0307 	rsb	r3, r3, #7
 8003e02:	2b04      	cmp	r3, #4
 8003e04:	bf28      	it	cs
 8003e06:	2304      	movcs	r3, #4
 8003e08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	3304      	adds	r3, #4
 8003e0e:	2b06      	cmp	r3, #6
 8003e10:	d902      	bls.n	8003e18 <NVIC_EncodePriority+0x30>
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	3b03      	subs	r3, #3
 8003e16:	e000      	b.n	8003e1a <NVIC_EncodePriority+0x32>
 8003e18:	2300      	movs	r3, #0
 8003e1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	fa02 f303 	lsl.w	r3, r2, r3
 8003e26:	43da      	mvns	r2, r3
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	401a      	ands	r2, r3
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e30:	f04f 31ff 	mov.w	r1, #4294967295
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	fa01 f303 	lsl.w	r3, r1, r3
 8003e3a:	43d9      	mvns	r1, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e40:	4313      	orrs	r3, r2
         );
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3724      	adds	r7, #36	@ 0x24
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
	...

08003e50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e60:	d301      	bcc.n	8003e66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e62:	2301      	movs	r3, #1
 8003e64:	e00f      	b.n	8003e86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e66:	4a0a      	ldr	r2, [pc, #40]	@ (8003e90 <SysTick_Config+0x40>)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e6e:	210f      	movs	r1, #15
 8003e70:	f04f 30ff 	mov.w	r0, #4294967295
 8003e74:	f7ff ff8e 	bl	8003d94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e78:	4b05      	ldr	r3, [pc, #20]	@ (8003e90 <SysTick_Config+0x40>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e7e:	4b04      	ldr	r3, [pc, #16]	@ (8003e90 <SysTick_Config+0x40>)
 8003e80:	2207      	movs	r2, #7
 8003e82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	e000e010 	.word	0xe000e010

08003e94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f7ff ff29 	bl	8003cf4 <__NVIC_SetPriorityGrouping>
}
 8003ea2:	bf00      	nop
 8003ea4:	3708      	adds	r7, #8
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b086      	sub	sp, #24
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	60b9      	str	r1, [r7, #8]
 8003eb4:	607a      	str	r2, [r7, #4]
 8003eb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ebc:	f7ff ff3e 	bl	8003d3c <__NVIC_GetPriorityGrouping>
 8003ec0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	68b9      	ldr	r1, [r7, #8]
 8003ec6:	6978      	ldr	r0, [r7, #20]
 8003ec8:	f7ff ff8e 	bl	8003de8 <NVIC_EncodePriority>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ed2:	4611      	mov	r1, r2
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7ff ff5d 	bl	8003d94 <__NVIC_SetPriority>
}
 8003eda:	bf00      	nop
 8003edc:	3718      	adds	r7, #24
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b082      	sub	sp, #8
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	4603      	mov	r3, r0
 8003eea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7ff ff31 	bl	8003d58 <__NVIC_EnableIRQ>
}
 8003ef6:	bf00      	nop
 8003ef8:	3708      	adds	r7, #8
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b082      	sub	sp, #8
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f7ff ffa2 	bl	8003e50 <SysTick_Config>
 8003f0c:	4603      	mov	r3, r0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
	...

08003f18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f20:	2300      	movs	r3, #0
 8003f22:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003f24:	f7ff f93e 	bl	80031a4 <HAL_GetTick>
 8003f28:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d101      	bne.n	8003f34 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e099      	b.n	8004068 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2202      	movs	r2, #2
 8003f38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f022 0201 	bic.w	r2, r2, #1
 8003f52:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f54:	e00f      	b.n	8003f76 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f56:	f7ff f925 	bl	80031a4 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b05      	cmp	r3, #5
 8003f62:	d908      	bls.n	8003f76 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2220      	movs	r2, #32
 8003f68:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2203      	movs	r2, #3
 8003f6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e078      	b.n	8004068 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0301 	and.w	r3, r3, #1
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1e8      	bne.n	8003f56 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f8c:	697a      	ldr	r2, [r7, #20]
 8003f8e:	4b38      	ldr	r3, [pc, #224]	@ (8004070 <HAL_DMA_Init+0x158>)
 8003f90:	4013      	ands	r3, r2
 8003f92:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685a      	ldr	r2, [r3, #4]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fa2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fcc:	2b04      	cmp	r3, #4
 8003fce:	d107      	bne.n	8003fe0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	f023 0307 	bic.w	r3, r3, #7
 8003ff6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004006:	2b04      	cmp	r3, #4
 8004008:	d117      	bne.n	800403a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	4313      	orrs	r3, r2
 8004012:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00e      	beq.n	800403a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 fa6f 	bl	8004500 <DMA_CheckFifoParam>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d008      	beq.n	800403a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2240      	movs	r2, #64	@ 0x40
 800402c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004036:	2301      	movs	r3, #1
 8004038:	e016      	b.n	8004068 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 fa26 	bl	8004494 <DMA_CalcBaseAndBitshift>
 8004048:	4603      	mov	r3, r0
 800404a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004050:	223f      	movs	r2, #63	@ 0x3f
 8004052:	409a      	lsls	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3718      	adds	r7, #24
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	f010803f 	.word	0xf010803f

08004074 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b086      	sub	sp, #24
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
 8004080:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004082:	2300      	movs	r3, #0
 8004084:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800408a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004092:	2b01      	cmp	r3, #1
 8004094:	d101      	bne.n	800409a <HAL_DMA_Start_IT+0x26>
 8004096:	2302      	movs	r3, #2
 8004098:	e040      	b.n	800411c <HAL_DMA_Start_IT+0xa8>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d12f      	bne.n	800410e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2202      	movs	r2, #2
 80040b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	68b9      	ldr	r1, [r7, #8]
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f000 f9b8 	bl	8004438 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040cc:	223f      	movs	r2, #63	@ 0x3f
 80040ce:	409a      	lsls	r2, r3
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f042 0216 	orr.w	r2, r2, #22
 80040e2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d007      	beq.n	80040fc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f042 0208 	orr.w	r2, r2, #8
 80040fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f042 0201 	orr.w	r2, r2, #1
 800410a:	601a      	str	r2, [r3, #0]
 800410c:	e005      	b.n	800411a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004116:	2302      	movs	r3, #2
 8004118:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800411a:	7dfb      	ldrb	r3, [r7, #23]
}
 800411c:	4618      	mov	r0, r3
 800411e:	3718      	adds	r7, #24
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b086      	sub	sp, #24
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800412c:	2300      	movs	r3, #0
 800412e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004130:	4b8e      	ldr	r3, [pc, #568]	@ (800436c <HAL_DMA_IRQHandler+0x248>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a8e      	ldr	r2, [pc, #568]	@ (8004370 <HAL_DMA_IRQHandler+0x24c>)
 8004136:	fba2 2303 	umull	r2, r3, r2, r3
 800413a:	0a9b      	lsrs	r3, r3, #10
 800413c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004142:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800414e:	2208      	movs	r2, #8
 8004150:	409a      	lsls	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	4013      	ands	r3, r2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d01a      	beq.n	8004190 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0304 	and.w	r3, r3, #4
 8004164:	2b00      	cmp	r3, #0
 8004166:	d013      	beq.n	8004190 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f022 0204 	bic.w	r2, r2, #4
 8004176:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800417c:	2208      	movs	r2, #8
 800417e:	409a      	lsls	r2, r3
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004188:	f043 0201 	orr.w	r2, r3, #1
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004194:	2201      	movs	r2, #1
 8004196:	409a      	lsls	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	4013      	ands	r3, r2
 800419c:	2b00      	cmp	r3, #0
 800419e:	d012      	beq.n	80041c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00b      	beq.n	80041c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041b2:	2201      	movs	r2, #1
 80041b4:	409a      	lsls	r2, r3
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041be:	f043 0202 	orr.w	r2, r3, #2
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041ca:	2204      	movs	r2, #4
 80041cc:	409a      	lsls	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	4013      	ands	r3, r2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d012      	beq.n	80041fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00b      	beq.n	80041fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041e8:	2204      	movs	r2, #4
 80041ea:	409a      	lsls	r2, r3
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041f4:	f043 0204 	orr.w	r2, r3, #4
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004200:	2210      	movs	r2, #16
 8004202:	409a      	lsls	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	4013      	ands	r3, r2
 8004208:	2b00      	cmp	r3, #0
 800420a:	d043      	beq.n	8004294 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0308 	and.w	r3, r3, #8
 8004216:	2b00      	cmp	r3, #0
 8004218:	d03c      	beq.n	8004294 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800421e:	2210      	movs	r2, #16
 8004220:	409a      	lsls	r2, r3
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d018      	beq.n	8004266 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d108      	bne.n	8004254 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004246:	2b00      	cmp	r3, #0
 8004248:	d024      	beq.n	8004294 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	4798      	blx	r3
 8004252:	e01f      	b.n	8004294 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004258:	2b00      	cmp	r3, #0
 800425a:	d01b      	beq.n	8004294 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	4798      	blx	r3
 8004264:	e016      	b.n	8004294 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004270:	2b00      	cmp	r3, #0
 8004272:	d107      	bne.n	8004284 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f022 0208 	bic.w	r2, r2, #8
 8004282:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004288:	2b00      	cmp	r3, #0
 800428a:	d003      	beq.n	8004294 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004298:	2220      	movs	r2, #32
 800429a:	409a      	lsls	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	4013      	ands	r3, r2
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f000 808f 	beq.w	80043c4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0310 	and.w	r3, r3, #16
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	f000 8087 	beq.w	80043c4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042ba:	2220      	movs	r2, #32
 80042bc:	409a      	lsls	r2, r3
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b05      	cmp	r3, #5
 80042cc:	d136      	bne.n	800433c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 0216 	bic.w	r2, r2, #22
 80042dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	695a      	ldr	r2, [r3, #20]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80042ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d103      	bne.n	80042fe <HAL_DMA_IRQHandler+0x1da>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d007      	beq.n	800430e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f022 0208 	bic.w	r2, r2, #8
 800430c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004312:	223f      	movs	r2, #63	@ 0x3f
 8004314:	409a      	lsls	r2, r3
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2201      	movs	r2, #1
 800431e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800432e:	2b00      	cmp	r3, #0
 8004330:	d07e      	beq.n	8004430 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	4798      	blx	r3
        }
        return;
 800433a:	e079      	b.n	8004430 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d01d      	beq.n	8004386 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d10d      	bne.n	8004374 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800435c:	2b00      	cmp	r3, #0
 800435e:	d031      	beq.n	80043c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	4798      	blx	r3
 8004368:	e02c      	b.n	80043c4 <HAL_DMA_IRQHandler+0x2a0>
 800436a:	bf00      	nop
 800436c:	20000028 	.word	0x20000028
 8004370:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004378:	2b00      	cmp	r3, #0
 800437a:	d023      	beq.n	80043c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	4798      	blx	r3
 8004384:	e01e      	b.n	80043c4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004390:	2b00      	cmp	r3, #0
 8004392:	d10f      	bne.n	80043b4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f022 0210 	bic.w	r2, r2, #16
 80043a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d003      	beq.n	80043c4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d032      	beq.n	8004432 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043d0:	f003 0301 	and.w	r3, r3, #1
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d022      	beq.n	800441e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2205      	movs	r2, #5
 80043dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f022 0201 	bic.w	r2, r2, #1
 80043ee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	3301      	adds	r3, #1
 80043f4:	60bb      	str	r3, [r7, #8]
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d307      	bcc.n	800440c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1f2      	bne.n	80043f0 <HAL_DMA_IRQHandler+0x2cc>
 800440a:	e000      	b.n	800440e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800440c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004422:	2b00      	cmp	r3, #0
 8004424:	d005      	beq.n	8004432 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	4798      	blx	r3
 800442e:	e000      	b.n	8004432 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004430:	bf00      	nop
    }
  }
}
 8004432:	3718      	adds	r7, #24
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]
 8004444:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004454:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	683a      	ldr	r2, [r7, #0]
 800445c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	2b40      	cmp	r3, #64	@ 0x40
 8004464:	d108      	bne.n	8004478 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68ba      	ldr	r2, [r7, #8]
 8004474:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004476:	e007      	b.n	8004488 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68ba      	ldr	r2, [r7, #8]
 800447e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	60da      	str	r2, [r3, #12]
}
 8004488:	bf00      	nop
 800448a:	3714      	adds	r7, #20
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	3b10      	subs	r3, #16
 80044a4:	4a14      	ldr	r2, [pc, #80]	@ (80044f8 <DMA_CalcBaseAndBitshift+0x64>)
 80044a6:	fba2 2303 	umull	r2, r3, r2, r3
 80044aa:	091b      	lsrs	r3, r3, #4
 80044ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80044ae:	4a13      	ldr	r2, [pc, #76]	@ (80044fc <DMA_CalcBaseAndBitshift+0x68>)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	4413      	add	r3, r2
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	461a      	mov	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2b03      	cmp	r3, #3
 80044c0:	d909      	bls.n	80044d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80044ca:	f023 0303 	bic.w	r3, r3, #3
 80044ce:	1d1a      	adds	r2, r3, #4
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	659a      	str	r2, [r3, #88]	@ 0x58
 80044d4:	e007      	b.n	80044e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80044de:	f023 0303 	bic.w	r3, r3, #3
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3714      	adds	r7, #20
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	aaaaaaab 	.word	0xaaaaaaab
 80044fc:	0800ccb4 	.word	0x0800ccb4

08004500 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004508:	2300      	movs	r3, #0
 800450a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004510:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d11f      	bne.n	800455a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	2b03      	cmp	r3, #3
 800451e:	d856      	bhi.n	80045ce <DMA_CheckFifoParam+0xce>
 8004520:	a201      	add	r2, pc, #4	@ (adr r2, 8004528 <DMA_CheckFifoParam+0x28>)
 8004522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004526:	bf00      	nop
 8004528:	08004539 	.word	0x08004539
 800452c:	0800454b 	.word	0x0800454b
 8004530:	08004539 	.word	0x08004539
 8004534:	080045cf 	.word	0x080045cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800453c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d046      	beq.n	80045d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004548:	e043      	b.n	80045d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800454e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004552:	d140      	bne.n	80045d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004558:	e03d      	b.n	80045d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004562:	d121      	bne.n	80045a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	2b03      	cmp	r3, #3
 8004568:	d837      	bhi.n	80045da <DMA_CheckFifoParam+0xda>
 800456a:	a201      	add	r2, pc, #4	@ (adr r2, 8004570 <DMA_CheckFifoParam+0x70>)
 800456c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004570:	08004581 	.word	0x08004581
 8004574:	08004587 	.word	0x08004587
 8004578:	08004581 	.word	0x08004581
 800457c:	08004599 	.word	0x08004599
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	73fb      	strb	r3, [r7, #15]
      break;
 8004584:	e030      	b.n	80045e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800458a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d025      	beq.n	80045de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004596:	e022      	b.n	80045de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800459c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80045a0:	d11f      	bne.n	80045e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80045a6:	e01c      	b.n	80045e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d903      	bls.n	80045b6 <DMA_CheckFifoParam+0xb6>
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	2b03      	cmp	r3, #3
 80045b2:	d003      	beq.n	80045bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80045b4:	e018      	b.n	80045e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	73fb      	strb	r3, [r7, #15]
      break;
 80045ba:	e015      	b.n	80045e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00e      	beq.n	80045e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	73fb      	strb	r3, [r7, #15]
      break;
 80045cc:	e00b      	b.n	80045e6 <DMA_CheckFifoParam+0xe6>
      break;
 80045ce:	bf00      	nop
 80045d0:	e00a      	b.n	80045e8 <DMA_CheckFifoParam+0xe8>
      break;
 80045d2:	bf00      	nop
 80045d4:	e008      	b.n	80045e8 <DMA_CheckFifoParam+0xe8>
      break;
 80045d6:	bf00      	nop
 80045d8:	e006      	b.n	80045e8 <DMA_CheckFifoParam+0xe8>
      break;
 80045da:	bf00      	nop
 80045dc:	e004      	b.n	80045e8 <DMA_CheckFifoParam+0xe8>
      break;
 80045de:	bf00      	nop
 80045e0:	e002      	b.n	80045e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80045e2:	bf00      	nop
 80045e4:	e000      	b.n	80045e8 <DMA_CheckFifoParam+0xe8>
      break;
 80045e6:	bf00      	nop
    }
  } 
  
  return status; 
 80045e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3714      	adds	r7, #20
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop

080045f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b089      	sub	sp, #36	@ 0x24
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004602:	2300      	movs	r3, #0
 8004604:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004606:	2300      	movs	r3, #0
 8004608:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800460a:	2300      	movs	r3, #0
 800460c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800460e:	2300      	movs	r3, #0
 8004610:	61fb      	str	r3, [r7, #28]
 8004612:	e159      	b.n	80048c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004614:	2201      	movs	r2, #1
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	fa02 f303 	lsl.w	r3, r2, r3
 800461c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	4013      	ands	r3, r2
 8004626:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	429a      	cmp	r2, r3
 800462e:	f040 8148 	bne.w	80048c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f003 0303 	and.w	r3, r3, #3
 800463a:	2b01      	cmp	r3, #1
 800463c:	d005      	beq.n	800464a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004646:	2b02      	cmp	r3, #2
 8004648:	d130      	bne.n	80046ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	005b      	lsls	r3, r3, #1
 8004654:	2203      	movs	r2, #3
 8004656:	fa02 f303 	lsl.w	r3, r2, r3
 800465a:	43db      	mvns	r3, r3
 800465c:	69ba      	ldr	r2, [r7, #24]
 800465e:	4013      	ands	r3, r2
 8004660:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	68da      	ldr	r2, [r3, #12]
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	005b      	lsls	r3, r3, #1
 800466a:	fa02 f303 	lsl.w	r3, r2, r3
 800466e:	69ba      	ldr	r2, [r7, #24]
 8004670:	4313      	orrs	r3, r2
 8004672:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	69ba      	ldr	r2, [r7, #24]
 8004678:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004680:	2201      	movs	r2, #1
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	fa02 f303 	lsl.w	r3, r2, r3
 8004688:	43db      	mvns	r3, r3
 800468a:	69ba      	ldr	r2, [r7, #24]
 800468c:	4013      	ands	r3, r2
 800468e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	091b      	lsrs	r3, r3, #4
 8004696:	f003 0201 	and.w	r2, r3, #1
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	fa02 f303 	lsl.w	r3, r2, r3
 80046a0:	69ba      	ldr	r2, [r7, #24]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f003 0303 	and.w	r3, r3, #3
 80046b4:	2b03      	cmp	r3, #3
 80046b6:	d017      	beq.n	80046e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	005b      	lsls	r3, r3, #1
 80046c2:	2203      	movs	r2, #3
 80046c4:	fa02 f303 	lsl.w	r3, r2, r3
 80046c8:	43db      	mvns	r3, r3
 80046ca:	69ba      	ldr	r2, [r7, #24]
 80046cc:	4013      	ands	r3, r2
 80046ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	689a      	ldr	r2, [r3, #8]
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	005b      	lsls	r3, r3, #1
 80046d8:	fa02 f303 	lsl.w	r3, r2, r3
 80046dc:	69ba      	ldr	r2, [r7, #24]
 80046de:	4313      	orrs	r3, r2
 80046e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f003 0303 	and.w	r3, r3, #3
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d123      	bne.n	800473c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	08da      	lsrs	r2, r3, #3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	3208      	adds	r2, #8
 80046fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004700:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	f003 0307 	and.w	r3, r3, #7
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	220f      	movs	r2, #15
 800470c:	fa02 f303 	lsl.w	r3, r2, r3
 8004710:	43db      	mvns	r3, r3
 8004712:	69ba      	ldr	r2, [r7, #24]
 8004714:	4013      	ands	r3, r2
 8004716:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	691a      	ldr	r2, [r3, #16]
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	f003 0307 	and.w	r3, r3, #7
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	fa02 f303 	lsl.w	r3, r2, r3
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	4313      	orrs	r3, r2
 800472c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	08da      	lsrs	r2, r3, #3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	3208      	adds	r2, #8
 8004736:	69b9      	ldr	r1, [r7, #24]
 8004738:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	005b      	lsls	r3, r3, #1
 8004746:	2203      	movs	r2, #3
 8004748:	fa02 f303 	lsl.w	r3, r2, r3
 800474c:	43db      	mvns	r3, r3
 800474e:	69ba      	ldr	r2, [r7, #24]
 8004750:	4013      	ands	r3, r2
 8004752:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f003 0203 	and.w	r2, r3, #3
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	005b      	lsls	r3, r3, #1
 8004760:	fa02 f303 	lsl.w	r3, r2, r3
 8004764:	69ba      	ldr	r2, [r7, #24]
 8004766:	4313      	orrs	r3, r2
 8004768:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004778:	2b00      	cmp	r3, #0
 800477a:	f000 80a2 	beq.w	80048c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800477e:	2300      	movs	r3, #0
 8004780:	60fb      	str	r3, [r7, #12]
 8004782:	4b57      	ldr	r3, [pc, #348]	@ (80048e0 <HAL_GPIO_Init+0x2e8>)
 8004784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004786:	4a56      	ldr	r2, [pc, #344]	@ (80048e0 <HAL_GPIO_Init+0x2e8>)
 8004788:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800478c:	6453      	str	r3, [r2, #68]	@ 0x44
 800478e:	4b54      	ldr	r3, [pc, #336]	@ (80048e0 <HAL_GPIO_Init+0x2e8>)
 8004790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004792:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004796:	60fb      	str	r3, [r7, #12]
 8004798:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800479a:	4a52      	ldr	r2, [pc, #328]	@ (80048e4 <HAL_GPIO_Init+0x2ec>)
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	089b      	lsrs	r3, r3, #2
 80047a0:	3302      	adds	r3, #2
 80047a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	f003 0303 	and.w	r3, r3, #3
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	220f      	movs	r2, #15
 80047b2:	fa02 f303 	lsl.w	r3, r2, r3
 80047b6:	43db      	mvns	r3, r3
 80047b8:	69ba      	ldr	r2, [r7, #24]
 80047ba:	4013      	ands	r3, r2
 80047bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a49      	ldr	r2, [pc, #292]	@ (80048e8 <HAL_GPIO_Init+0x2f0>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d019      	beq.n	80047fa <HAL_GPIO_Init+0x202>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a48      	ldr	r2, [pc, #288]	@ (80048ec <HAL_GPIO_Init+0x2f4>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d013      	beq.n	80047f6 <HAL_GPIO_Init+0x1fe>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a47      	ldr	r2, [pc, #284]	@ (80048f0 <HAL_GPIO_Init+0x2f8>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d00d      	beq.n	80047f2 <HAL_GPIO_Init+0x1fa>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a46      	ldr	r2, [pc, #280]	@ (80048f4 <HAL_GPIO_Init+0x2fc>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d007      	beq.n	80047ee <HAL_GPIO_Init+0x1f6>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a45      	ldr	r2, [pc, #276]	@ (80048f8 <HAL_GPIO_Init+0x300>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d101      	bne.n	80047ea <HAL_GPIO_Init+0x1f2>
 80047e6:	2304      	movs	r3, #4
 80047e8:	e008      	b.n	80047fc <HAL_GPIO_Init+0x204>
 80047ea:	2307      	movs	r3, #7
 80047ec:	e006      	b.n	80047fc <HAL_GPIO_Init+0x204>
 80047ee:	2303      	movs	r3, #3
 80047f0:	e004      	b.n	80047fc <HAL_GPIO_Init+0x204>
 80047f2:	2302      	movs	r3, #2
 80047f4:	e002      	b.n	80047fc <HAL_GPIO_Init+0x204>
 80047f6:	2301      	movs	r3, #1
 80047f8:	e000      	b.n	80047fc <HAL_GPIO_Init+0x204>
 80047fa:	2300      	movs	r3, #0
 80047fc:	69fa      	ldr	r2, [r7, #28]
 80047fe:	f002 0203 	and.w	r2, r2, #3
 8004802:	0092      	lsls	r2, r2, #2
 8004804:	4093      	lsls	r3, r2
 8004806:	69ba      	ldr	r2, [r7, #24]
 8004808:	4313      	orrs	r3, r2
 800480a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800480c:	4935      	ldr	r1, [pc, #212]	@ (80048e4 <HAL_GPIO_Init+0x2ec>)
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	089b      	lsrs	r3, r3, #2
 8004812:	3302      	adds	r3, #2
 8004814:	69ba      	ldr	r2, [r7, #24]
 8004816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800481a:	4b38      	ldr	r3, [pc, #224]	@ (80048fc <HAL_GPIO_Init+0x304>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	43db      	mvns	r3, r3
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	4013      	ands	r3, r2
 8004828:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d003      	beq.n	800483e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004836:	69ba      	ldr	r2, [r7, #24]
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	4313      	orrs	r3, r2
 800483c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800483e:	4a2f      	ldr	r2, [pc, #188]	@ (80048fc <HAL_GPIO_Init+0x304>)
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004844:	4b2d      	ldr	r3, [pc, #180]	@ (80048fc <HAL_GPIO_Init+0x304>)
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	43db      	mvns	r3, r3
 800484e:	69ba      	ldr	r2, [r7, #24]
 8004850:	4013      	ands	r3, r2
 8004852:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d003      	beq.n	8004868 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004860:	69ba      	ldr	r2, [r7, #24]
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	4313      	orrs	r3, r2
 8004866:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004868:	4a24      	ldr	r2, [pc, #144]	@ (80048fc <HAL_GPIO_Init+0x304>)
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800486e:	4b23      	ldr	r3, [pc, #140]	@ (80048fc <HAL_GPIO_Init+0x304>)
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	43db      	mvns	r3, r3
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	4013      	ands	r3, r2
 800487c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d003      	beq.n	8004892 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800488a:	69ba      	ldr	r2, [r7, #24]
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	4313      	orrs	r3, r2
 8004890:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004892:	4a1a      	ldr	r2, [pc, #104]	@ (80048fc <HAL_GPIO_Init+0x304>)
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004898:	4b18      	ldr	r3, [pc, #96]	@ (80048fc <HAL_GPIO_Init+0x304>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	43db      	mvns	r3, r3
 80048a2:	69ba      	ldr	r2, [r7, #24]
 80048a4:	4013      	ands	r3, r2
 80048a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d003      	beq.n	80048bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80048b4:	69ba      	ldr	r2, [r7, #24]
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80048bc:	4a0f      	ldr	r2, [pc, #60]	@ (80048fc <HAL_GPIO_Init+0x304>)
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	3301      	adds	r3, #1
 80048c6:	61fb      	str	r3, [r7, #28]
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	2b0f      	cmp	r3, #15
 80048cc:	f67f aea2 	bls.w	8004614 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80048d0:	bf00      	nop
 80048d2:	bf00      	nop
 80048d4:	3724      	adds	r7, #36	@ 0x24
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	40023800 	.word	0x40023800
 80048e4:	40013800 	.word	0x40013800
 80048e8:	40020000 	.word	0x40020000
 80048ec:	40020400 	.word	0x40020400
 80048f0:	40020800 	.word	0x40020800
 80048f4:	40020c00 	.word	0x40020c00
 80048f8:	40021000 	.word	0x40021000
 80048fc:	40013c00 	.word	0x40013c00

08004900 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	460b      	mov	r3, r1
 800490a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	691a      	ldr	r2, [r3, #16]
 8004910:	887b      	ldrh	r3, [r7, #2]
 8004912:	4013      	ands	r3, r2
 8004914:	2b00      	cmp	r3, #0
 8004916:	d002      	beq.n	800491e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004918:	2301      	movs	r3, #1
 800491a:	73fb      	strb	r3, [r7, #15]
 800491c:	e001      	b.n	8004922 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800491e:	2300      	movs	r3, #0
 8004920:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004922:	7bfb      	ldrb	r3, [r7, #15]
}
 8004924:	4618      	mov	r0, r3
 8004926:	3714      	adds	r7, #20
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	460b      	mov	r3, r1
 800493a:	807b      	strh	r3, [r7, #2]
 800493c:	4613      	mov	r3, r2
 800493e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004940:	787b      	ldrb	r3, [r7, #1]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d003      	beq.n	800494e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004946:	887a      	ldrh	r2, [r7, #2]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800494c:	e003      	b.n	8004956 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800494e:	887b      	ldrh	r3, [r7, #2]
 8004950:	041a      	lsls	r2, r3, #16
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	619a      	str	r2, [r3, #24]
}
 8004956:	bf00      	nop
 8004958:	370c      	adds	r7, #12
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr

08004962 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004962:	b480      	push	{r7}
 8004964:	b085      	sub	sp, #20
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
 800496a:	460b      	mov	r3, r1
 800496c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004974:	887a      	ldrh	r2, [r7, #2]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	4013      	ands	r3, r2
 800497a:	041a      	lsls	r2, r3, #16
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	43d9      	mvns	r1, r3
 8004980:	887b      	ldrh	r3, [r7, #2]
 8004982:	400b      	ands	r3, r1
 8004984:	431a      	orrs	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	619a      	str	r2, [r3, #24]
}
 800498a:	bf00      	nop
 800498c:	3714      	adds	r7, #20
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
	...

08004998 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d101      	bne.n	80049aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e12b      	b.n	8004c02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d106      	bne.n	80049c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f7fe f93a 	bl	8002c38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2224      	movs	r2, #36	@ 0x24
 80049c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f022 0201 	bic.w	r2, r2, #1
 80049da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80049ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80049fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80049fc:	f001 ff92 	bl	8006924 <HAL_RCC_GetPCLK1Freq>
 8004a00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	4a81      	ldr	r2, [pc, #516]	@ (8004c0c <HAL_I2C_Init+0x274>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d807      	bhi.n	8004a1c <HAL_I2C_Init+0x84>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	4a80      	ldr	r2, [pc, #512]	@ (8004c10 <HAL_I2C_Init+0x278>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	bf94      	ite	ls
 8004a14:	2301      	movls	r3, #1
 8004a16:	2300      	movhi	r3, #0
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	e006      	b.n	8004a2a <HAL_I2C_Init+0x92>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	4a7d      	ldr	r2, [pc, #500]	@ (8004c14 <HAL_I2C_Init+0x27c>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	bf94      	ite	ls
 8004a24:	2301      	movls	r3, #1
 8004a26:	2300      	movhi	r3, #0
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d001      	beq.n	8004a32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e0e7      	b.n	8004c02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	4a78      	ldr	r2, [pc, #480]	@ (8004c18 <HAL_I2C_Init+0x280>)
 8004a36:	fba2 2303 	umull	r2, r3, r2, r3
 8004a3a:	0c9b      	lsrs	r3, r3, #18
 8004a3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68ba      	ldr	r2, [r7, #8]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	6a1b      	ldr	r3, [r3, #32]
 8004a58:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	4a6a      	ldr	r2, [pc, #424]	@ (8004c0c <HAL_I2C_Init+0x274>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d802      	bhi.n	8004a6c <HAL_I2C_Init+0xd4>
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	3301      	adds	r3, #1
 8004a6a:	e009      	b.n	8004a80 <HAL_I2C_Init+0xe8>
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004a72:	fb02 f303 	mul.w	r3, r2, r3
 8004a76:	4a69      	ldr	r2, [pc, #420]	@ (8004c1c <HAL_I2C_Init+0x284>)
 8004a78:	fba2 2303 	umull	r2, r3, r2, r3
 8004a7c:	099b      	lsrs	r3, r3, #6
 8004a7e:	3301      	adds	r3, #1
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	6812      	ldr	r2, [r2, #0]
 8004a84:	430b      	orrs	r3, r1
 8004a86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	69db      	ldr	r3, [r3, #28]
 8004a8e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004a92:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	495c      	ldr	r1, [pc, #368]	@ (8004c0c <HAL_I2C_Init+0x274>)
 8004a9c:	428b      	cmp	r3, r1
 8004a9e:	d819      	bhi.n	8004ad4 <HAL_I2C_Init+0x13c>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	1e59      	subs	r1, r3, #1
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	005b      	lsls	r3, r3, #1
 8004aaa:	fbb1 f3f3 	udiv	r3, r1, r3
 8004aae:	1c59      	adds	r1, r3, #1
 8004ab0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004ab4:	400b      	ands	r3, r1
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00a      	beq.n	8004ad0 <HAL_I2C_Init+0x138>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	1e59      	subs	r1, r3, #1
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	005b      	lsls	r3, r3, #1
 8004ac4:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ac8:	3301      	adds	r3, #1
 8004aca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ace:	e051      	b.n	8004b74 <HAL_I2C_Init+0x1dc>
 8004ad0:	2304      	movs	r3, #4
 8004ad2:	e04f      	b.n	8004b74 <HAL_I2C_Init+0x1dc>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d111      	bne.n	8004b00 <HAL_I2C_Init+0x168>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	1e58      	subs	r0, r3, #1
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6859      	ldr	r1, [r3, #4]
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	005b      	lsls	r3, r3, #1
 8004ae8:	440b      	add	r3, r1
 8004aea:	fbb0 f3f3 	udiv	r3, r0, r3
 8004aee:	3301      	adds	r3, #1
 8004af0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	bf0c      	ite	eq
 8004af8:	2301      	moveq	r3, #1
 8004afa:	2300      	movne	r3, #0
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	e012      	b.n	8004b26 <HAL_I2C_Init+0x18e>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	1e58      	subs	r0, r3, #1
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6859      	ldr	r1, [r3, #4]
 8004b08:	460b      	mov	r3, r1
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	440b      	add	r3, r1
 8004b0e:	0099      	lsls	r1, r3, #2
 8004b10:	440b      	add	r3, r1
 8004b12:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b16:	3301      	adds	r3, #1
 8004b18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	bf0c      	ite	eq
 8004b20:	2301      	moveq	r3, #1
 8004b22:	2300      	movne	r3, #0
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d001      	beq.n	8004b2e <HAL_I2C_Init+0x196>
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e022      	b.n	8004b74 <HAL_I2C_Init+0x1dc>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d10e      	bne.n	8004b54 <HAL_I2C_Init+0x1bc>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	1e58      	subs	r0, r3, #1
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6859      	ldr	r1, [r3, #4]
 8004b3e:	460b      	mov	r3, r1
 8004b40:	005b      	lsls	r3, r3, #1
 8004b42:	440b      	add	r3, r1
 8004b44:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b48:	3301      	adds	r3, #1
 8004b4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b52:	e00f      	b.n	8004b74 <HAL_I2C_Init+0x1dc>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	1e58      	subs	r0, r3, #1
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6859      	ldr	r1, [r3, #4]
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	440b      	add	r3, r1
 8004b62:	0099      	lsls	r1, r3, #2
 8004b64:	440b      	add	r3, r1
 8004b66:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b70:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004b74:	6879      	ldr	r1, [r7, #4]
 8004b76:	6809      	ldr	r1, [r1, #0]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	69da      	ldr	r2, [r3, #28]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	430a      	orrs	r2, r1
 8004b96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004ba2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	6911      	ldr	r1, [r2, #16]
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	68d2      	ldr	r2, [r2, #12]
 8004bae:	4311      	orrs	r1, r2
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	6812      	ldr	r2, [r2, #0]
 8004bb4:	430b      	orrs	r3, r1
 8004bb6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	695a      	ldr	r2, [r3, #20]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	699b      	ldr	r3, [r3, #24]
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f042 0201 	orr.w	r2, r2, #1
 8004be2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2220      	movs	r2, #32
 8004bee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3710      	adds	r7, #16
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	000186a0 	.word	0x000186a0
 8004c10:	001e847f 	.word	0x001e847f
 8004c14:	003d08ff 	.word	0x003d08ff
 8004c18:	431bde83 	.word	0x431bde83
 8004c1c:	10624dd3 	.word	0x10624dd3

08004c20 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b086      	sub	sp, #24
 8004c24:	af02      	add	r7, sp, #8
 8004c26:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e101      	b.n	8004e36 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d106      	bne.n	8004c52 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f006 fce9 	bl	800b624 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2203      	movs	r2, #3
 8004c56:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c60:	d102      	bne.n	8004c68 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f003 f8ca 	bl	8007e06 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6818      	ldr	r0, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	7c1a      	ldrb	r2, [r3, #16]
 8004c7a:	f88d 2000 	strb.w	r2, [sp]
 8004c7e:	3304      	adds	r3, #4
 8004c80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c82:	f002 ffa9 	bl	8007bd8 <USB_CoreInit>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d005      	beq.n	8004c98 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2202      	movs	r2, #2
 8004c90:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e0ce      	b.n	8004e36 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2100      	movs	r1, #0
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f003 f8c2 	bl	8007e28 <USB_SetCurrentMode>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d005      	beq.n	8004cb6 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2202      	movs	r2, #2
 8004cae:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e0bf      	b.n	8004e36 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	73fb      	strb	r3, [r7, #15]
 8004cba:	e04a      	b.n	8004d52 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004cbc:	7bfa      	ldrb	r2, [r7, #15]
 8004cbe:	6879      	ldr	r1, [r7, #4]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	00db      	lsls	r3, r3, #3
 8004cc4:	4413      	add	r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	440b      	add	r3, r1
 8004cca:	3315      	adds	r3, #21
 8004ccc:	2201      	movs	r2, #1
 8004cce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004cd0:	7bfa      	ldrb	r2, [r7, #15]
 8004cd2:	6879      	ldr	r1, [r7, #4]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	00db      	lsls	r3, r3, #3
 8004cd8:	4413      	add	r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	440b      	add	r3, r1
 8004cde:	3314      	adds	r3, #20
 8004ce0:	7bfa      	ldrb	r2, [r7, #15]
 8004ce2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004ce4:	7bfa      	ldrb	r2, [r7, #15]
 8004ce6:	7bfb      	ldrb	r3, [r7, #15]
 8004ce8:	b298      	uxth	r0, r3
 8004cea:	6879      	ldr	r1, [r7, #4]
 8004cec:	4613      	mov	r3, r2
 8004cee:	00db      	lsls	r3, r3, #3
 8004cf0:	4413      	add	r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	440b      	add	r3, r1
 8004cf6:	332e      	adds	r3, #46	@ 0x2e
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004cfc:	7bfa      	ldrb	r2, [r7, #15]
 8004cfe:	6879      	ldr	r1, [r7, #4]
 8004d00:	4613      	mov	r3, r2
 8004d02:	00db      	lsls	r3, r3, #3
 8004d04:	4413      	add	r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	440b      	add	r3, r1
 8004d0a:	3318      	adds	r3, #24
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004d10:	7bfa      	ldrb	r2, [r7, #15]
 8004d12:	6879      	ldr	r1, [r7, #4]
 8004d14:	4613      	mov	r3, r2
 8004d16:	00db      	lsls	r3, r3, #3
 8004d18:	4413      	add	r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	440b      	add	r3, r1
 8004d1e:	331c      	adds	r3, #28
 8004d20:	2200      	movs	r2, #0
 8004d22:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004d24:	7bfa      	ldrb	r2, [r7, #15]
 8004d26:	6879      	ldr	r1, [r7, #4]
 8004d28:	4613      	mov	r3, r2
 8004d2a:	00db      	lsls	r3, r3, #3
 8004d2c:	4413      	add	r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	440b      	add	r3, r1
 8004d32:	3320      	adds	r3, #32
 8004d34:	2200      	movs	r2, #0
 8004d36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004d38:	7bfa      	ldrb	r2, [r7, #15]
 8004d3a:	6879      	ldr	r1, [r7, #4]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	00db      	lsls	r3, r3, #3
 8004d40:	4413      	add	r3, r2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	440b      	add	r3, r1
 8004d46:	3324      	adds	r3, #36	@ 0x24
 8004d48:	2200      	movs	r2, #0
 8004d4a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d4c:	7bfb      	ldrb	r3, [r7, #15]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	73fb      	strb	r3, [r7, #15]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	791b      	ldrb	r3, [r3, #4]
 8004d56:	7bfa      	ldrb	r2, [r7, #15]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d3af      	bcc.n	8004cbc <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	73fb      	strb	r3, [r7, #15]
 8004d60:	e044      	b.n	8004dec <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004d62:	7bfa      	ldrb	r2, [r7, #15]
 8004d64:	6879      	ldr	r1, [r7, #4]
 8004d66:	4613      	mov	r3, r2
 8004d68:	00db      	lsls	r3, r3, #3
 8004d6a:	4413      	add	r3, r2
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	440b      	add	r3, r1
 8004d70:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004d74:	2200      	movs	r2, #0
 8004d76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004d78:	7bfa      	ldrb	r2, [r7, #15]
 8004d7a:	6879      	ldr	r1, [r7, #4]
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	00db      	lsls	r3, r3, #3
 8004d80:	4413      	add	r3, r2
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	440b      	add	r3, r1
 8004d86:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004d8a:	7bfa      	ldrb	r2, [r7, #15]
 8004d8c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004d8e:	7bfa      	ldrb	r2, [r7, #15]
 8004d90:	6879      	ldr	r1, [r7, #4]
 8004d92:	4613      	mov	r3, r2
 8004d94:	00db      	lsls	r3, r3, #3
 8004d96:	4413      	add	r3, r2
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	440b      	add	r3, r1
 8004d9c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004da0:	2200      	movs	r2, #0
 8004da2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004da4:	7bfa      	ldrb	r2, [r7, #15]
 8004da6:	6879      	ldr	r1, [r7, #4]
 8004da8:	4613      	mov	r3, r2
 8004daa:	00db      	lsls	r3, r3, #3
 8004dac:	4413      	add	r3, r2
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	440b      	add	r3, r1
 8004db2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004db6:	2200      	movs	r2, #0
 8004db8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004dba:	7bfa      	ldrb	r2, [r7, #15]
 8004dbc:	6879      	ldr	r1, [r7, #4]
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	00db      	lsls	r3, r3, #3
 8004dc2:	4413      	add	r3, r2
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	440b      	add	r3, r1
 8004dc8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004dcc:	2200      	movs	r2, #0
 8004dce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004dd0:	7bfa      	ldrb	r2, [r7, #15]
 8004dd2:	6879      	ldr	r1, [r7, #4]
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	00db      	lsls	r3, r3, #3
 8004dd8:	4413      	add	r3, r2
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	440b      	add	r3, r1
 8004dde:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004de2:	2200      	movs	r2, #0
 8004de4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004de6:	7bfb      	ldrb	r3, [r7, #15]
 8004de8:	3301      	adds	r3, #1
 8004dea:	73fb      	strb	r3, [r7, #15]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	791b      	ldrb	r3, [r3, #4]
 8004df0:	7bfa      	ldrb	r2, [r7, #15]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d3b5      	bcc.n	8004d62 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6818      	ldr	r0, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	7c1a      	ldrb	r2, [r3, #16]
 8004dfe:	f88d 2000 	strb.w	r2, [sp]
 8004e02:	3304      	adds	r3, #4
 8004e04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e06:	f003 f85b 	bl	8007ec0 <USB_DevInit>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d005      	beq.n	8004e1c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2202      	movs	r2, #2
 8004e14:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e00c      	b.n	8004e36 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2201      	movs	r2, #1
 8004e26:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f004 f8a5 	bl	8008f7e <USB_DevDisconnect>

  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3710      	adds	r7, #16
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b084      	sub	sp, #16
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d101      	bne.n	8004e5a <HAL_PCD_Start+0x1c>
 8004e56:	2302      	movs	r3, #2
 8004e58:	e022      	b.n	8004ea0 <HAL_PCD_Start+0x62>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d009      	beq.n	8004e82 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d105      	bne.n	8004e82 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e7a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4618      	mov	r0, r3
 8004e88:	f002 ffac 	bl	8007de4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4618      	mov	r0, r3
 8004e92:	f004 f853 	bl	8008f3c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3710      	adds	r7, #16
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004ea8:	b590      	push	{r4, r7, lr}
 8004eaa:	b08d      	sub	sp, #52	@ 0x34
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eb6:	6a3b      	ldr	r3, [r7, #32]
 8004eb8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f004 f911 	bl	80090e6 <USB_GetMode>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	f040 848c 	bne.w	80057e4 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f004 f875 	bl	8008fc0 <USB_ReadInterrupts>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f000 8482 	beq.w	80057e2 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	0a1b      	lsrs	r3, r3, #8
 8004ee8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f004 f862 	bl	8008fc0 <USB_ReadInterrupts>
 8004efc:	4603      	mov	r3, r0
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d107      	bne.n	8004f16 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	695a      	ldr	r2, [r3, #20]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f002 0202 	and.w	r2, r2, #2
 8004f14:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f004 f850 	bl	8008fc0 <USB_ReadInterrupts>
 8004f20:	4603      	mov	r3, r0
 8004f22:	f003 0310 	and.w	r3, r3, #16
 8004f26:	2b10      	cmp	r3, #16
 8004f28:	d161      	bne.n	8004fee <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	699a      	ldr	r2, [r3, #24]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f022 0210 	bic.w	r2, r2, #16
 8004f38:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004f3a:	6a3b      	ldr	r3, [r7, #32]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	f003 020f 	and.w	r2, r3, #15
 8004f46:	4613      	mov	r3, r2
 8004f48:	00db      	lsls	r3, r3, #3
 8004f4a:	4413      	add	r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	4413      	add	r3, r2
 8004f56:	3304      	adds	r3, #4
 8004f58:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	0c5b      	lsrs	r3, r3, #17
 8004f5e:	f003 030f 	and.w	r3, r3, #15
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d124      	bne.n	8004fb0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004f66:	69ba      	ldr	r2, [r7, #24]
 8004f68:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d035      	beq.n	8004fde <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	091b      	lsrs	r3, r3, #4
 8004f7a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004f7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	461a      	mov	r2, r3
 8004f84:	6a38      	ldr	r0, [r7, #32]
 8004f86:	f003 fe87 	bl	8008c98 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	68da      	ldr	r2, [r3, #12]
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	091b      	lsrs	r3, r3, #4
 8004f92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f96:	441a      	add	r2, r3
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	695a      	ldr	r2, [r3, #20]
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	091b      	lsrs	r3, r3, #4
 8004fa4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004fa8:	441a      	add	r2, r3
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	615a      	str	r2, [r3, #20]
 8004fae:	e016      	b.n	8004fde <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	0c5b      	lsrs	r3, r3, #17
 8004fb4:	f003 030f 	and.w	r3, r3, #15
 8004fb8:	2b06      	cmp	r3, #6
 8004fba:	d110      	bne.n	8004fde <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004fc2:	2208      	movs	r2, #8
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	6a38      	ldr	r0, [r7, #32]
 8004fc8:	f003 fe66 	bl	8008c98 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	695a      	ldr	r2, [r3, #20]
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	091b      	lsrs	r3, r3, #4
 8004fd4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004fd8:	441a      	add	r2, r3
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	699a      	ldr	r2, [r3, #24]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f042 0210 	orr.w	r2, r2, #16
 8004fec:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f003 ffe4 	bl	8008fc0 <USB_ReadInterrupts>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ffe:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005002:	f040 80a7 	bne.w	8005154 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005006:	2300      	movs	r3, #0
 8005008:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4618      	mov	r0, r3
 8005010:	f003 ffe9 	bl	8008fe6 <USB_ReadDevAllOutEpInterrupt>
 8005014:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8005016:	e099      	b.n	800514c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	2b00      	cmp	r3, #0
 8005020:	f000 808e 	beq.w	8005140 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800502a:	b2d2      	uxtb	r2, r2
 800502c:	4611      	mov	r1, r2
 800502e:	4618      	mov	r0, r3
 8005030:	f004 f80d 	bl	800904e <USB_ReadDevOutEPInterrupt>
 8005034:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	f003 0301 	and.w	r3, r3, #1
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00c      	beq.n	800505a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005042:	015a      	lsls	r2, r3, #5
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	4413      	add	r3, r2
 8005048:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800504c:	461a      	mov	r2, r3
 800504e:	2301      	movs	r3, #1
 8005050:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005052:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 fea3 	bl	8005da0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	f003 0308 	and.w	r3, r3, #8
 8005060:	2b00      	cmp	r3, #0
 8005062:	d00c      	beq.n	800507e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005066:	015a      	lsls	r2, r3, #5
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	4413      	add	r3, r2
 800506c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005070:	461a      	mov	r2, r3
 8005072:	2308      	movs	r3, #8
 8005074:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005076:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 ff79 	bl	8005f70 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	f003 0310 	and.w	r3, r3, #16
 8005084:	2b00      	cmp	r3, #0
 8005086:	d008      	beq.n	800509a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800508a:	015a      	lsls	r2, r3, #5
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	4413      	add	r3, r2
 8005090:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005094:	461a      	mov	r2, r3
 8005096:	2310      	movs	r3, #16
 8005098:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	f003 0302 	and.w	r3, r3, #2
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d030      	beq.n	8005106 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80050a4:	6a3b      	ldr	r3, [r7, #32]
 80050a6:	695b      	ldr	r3, [r3, #20]
 80050a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050ac:	2b80      	cmp	r3, #128	@ 0x80
 80050ae:	d109      	bne.n	80050c4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	69fa      	ldr	r2, [r7, #28]
 80050ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80050be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80050c2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80050c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050c6:	4613      	mov	r3, r2
 80050c8:	00db      	lsls	r3, r3, #3
 80050ca:	4413      	add	r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	4413      	add	r3, r2
 80050d6:	3304      	adds	r3, #4
 80050d8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	78db      	ldrb	r3, [r3, #3]
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d108      	bne.n	80050f4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	2200      	movs	r2, #0
 80050e6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80050e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	4619      	mov	r1, r3
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f006 fb94 	bl	800b81c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80050f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f6:	015a      	lsls	r2, r3, #5
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	4413      	add	r3, r2
 80050fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005100:	461a      	mov	r2, r3
 8005102:	2302      	movs	r3, #2
 8005104:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	f003 0320 	and.w	r3, r3, #32
 800510c:	2b00      	cmp	r3, #0
 800510e:	d008      	beq.n	8005122 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005112:	015a      	lsls	r2, r3, #5
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	4413      	add	r3, r2
 8005118:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800511c:	461a      	mov	r2, r3
 800511e:	2320      	movs	r3, #32
 8005120:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005128:	2b00      	cmp	r3, #0
 800512a:	d009      	beq.n	8005140 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800512c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800512e:	015a      	lsls	r2, r3, #5
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	4413      	add	r3, r2
 8005134:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005138:	461a      	mov	r2, r3
 800513a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800513e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005142:	3301      	adds	r3, #1
 8005144:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005148:	085b      	lsrs	r3, r3, #1
 800514a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800514c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800514e:	2b00      	cmp	r3, #0
 8005150:	f47f af62 	bne.w	8005018 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4618      	mov	r0, r3
 800515a:	f003 ff31 	bl	8008fc0 <USB_ReadInterrupts>
 800515e:	4603      	mov	r3, r0
 8005160:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005164:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005168:	f040 80db 	bne.w	8005322 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4618      	mov	r0, r3
 8005172:	f003 ff52 	bl	800901a <USB_ReadDevAllInEpInterrupt>
 8005176:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8005178:	2300      	movs	r3, #0
 800517a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800517c:	e0cd      	b.n	800531a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800517e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005180:	f003 0301 	and.w	r3, r3, #1
 8005184:	2b00      	cmp	r3, #0
 8005186:	f000 80c2 	beq.w	800530e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005190:	b2d2      	uxtb	r2, r2
 8005192:	4611      	mov	r1, r2
 8005194:	4618      	mov	r0, r3
 8005196:	f003 ff78 	bl	800908a <USB_ReadDevInEPInterrupt>
 800519a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d057      	beq.n	8005256 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80051a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a8:	f003 030f 	and.w	r3, r3, #15
 80051ac:	2201      	movs	r2, #1
 80051ae:	fa02 f303 	lsl.w	r3, r2, r3
 80051b2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	43db      	mvns	r3, r3
 80051c0:	69f9      	ldr	r1, [r7, #28]
 80051c2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80051c6:	4013      	ands	r3, r2
 80051c8:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80051ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051cc:	015a      	lsls	r2, r3, #5
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	4413      	add	r3, r2
 80051d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051d6:	461a      	mov	r2, r3
 80051d8:	2301      	movs	r3, #1
 80051da:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	799b      	ldrb	r3, [r3, #6]
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d132      	bne.n	800524a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80051e4:	6879      	ldr	r1, [r7, #4]
 80051e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051e8:	4613      	mov	r3, r2
 80051ea:	00db      	lsls	r3, r3, #3
 80051ec:	4413      	add	r3, r2
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	440b      	add	r3, r1
 80051f2:	3320      	adds	r3, #32
 80051f4:	6819      	ldr	r1, [r3, #0]
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051fa:	4613      	mov	r3, r2
 80051fc:	00db      	lsls	r3, r3, #3
 80051fe:	4413      	add	r3, r2
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	4403      	add	r3, r0
 8005204:	331c      	adds	r3, #28
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4419      	add	r1, r3
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800520e:	4613      	mov	r3, r2
 8005210:	00db      	lsls	r3, r3, #3
 8005212:	4413      	add	r3, r2
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	4403      	add	r3, r0
 8005218:	3320      	adds	r3, #32
 800521a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800521c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800521e:	2b00      	cmp	r3, #0
 8005220:	d113      	bne.n	800524a <HAL_PCD_IRQHandler+0x3a2>
 8005222:	6879      	ldr	r1, [r7, #4]
 8005224:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005226:	4613      	mov	r3, r2
 8005228:	00db      	lsls	r3, r3, #3
 800522a:	4413      	add	r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	440b      	add	r3, r1
 8005230:	3324      	adds	r3, #36	@ 0x24
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d108      	bne.n	800524a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6818      	ldr	r0, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005242:	461a      	mov	r2, r3
 8005244:	2101      	movs	r1, #1
 8005246:	f003 ff7f 	bl	8009148 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800524a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800524c:	b2db      	uxtb	r3, r3
 800524e:	4619      	mov	r1, r3
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f006 fa68 	bl	800b726 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	f003 0308 	and.w	r3, r3, #8
 800525c:	2b00      	cmp	r3, #0
 800525e:	d008      	beq.n	8005272 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005262:	015a      	lsls	r2, r3, #5
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	4413      	add	r3, r2
 8005268:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800526c:	461a      	mov	r2, r3
 800526e:	2308      	movs	r3, #8
 8005270:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	f003 0310 	and.w	r3, r3, #16
 8005278:	2b00      	cmp	r3, #0
 800527a:	d008      	beq.n	800528e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800527c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800527e:	015a      	lsls	r2, r3, #5
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	4413      	add	r3, r2
 8005284:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005288:	461a      	mov	r2, r3
 800528a:	2310      	movs	r3, #16
 800528c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005294:	2b00      	cmp	r3, #0
 8005296:	d008      	beq.n	80052aa <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800529a:	015a      	lsls	r2, r3, #5
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	4413      	add	r3, r2
 80052a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052a4:	461a      	mov	r2, r3
 80052a6:	2340      	movs	r3, #64	@ 0x40
 80052a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	f003 0302 	and.w	r3, r3, #2
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d023      	beq.n	80052fc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80052b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80052b6:	6a38      	ldr	r0, [r7, #32]
 80052b8:	f002 ff66 	bl	8008188 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80052bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052be:	4613      	mov	r3, r2
 80052c0:	00db      	lsls	r3, r3, #3
 80052c2:	4413      	add	r3, r2
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	3310      	adds	r3, #16
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	4413      	add	r3, r2
 80052cc:	3304      	adds	r3, #4
 80052ce:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	78db      	ldrb	r3, [r3, #3]
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d108      	bne.n	80052ea <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	2200      	movs	r2, #0
 80052dc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80052de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	4619      	mov	r1, r3
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f006 faab 	bl	800b840 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80052ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ec:	015a      	lsls	r2, r3, #5
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	4413      	add	r3, r2
 80052f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052f6:	461a      	mov	r2, r3
 80052f8:	2302      	movs	r3, #2
 80052fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005302:	2b00      	cmp	r3, #0
 8005304:	d003      	beq.n	800530e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005306:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f000 fcbd 	bl	8005c88 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800530e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005310:	3301      	adds	r3, #1
 8005312:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005316:	085b      	lsrs	r3, r3, #1
 8005318:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800531a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800531c:	2b00      	cmp	r3, #0
 800531e:	f47f af2e 	bne.w	800517e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4618      	mov	r0, r3
 8005328:	f003 fe4a 	bl	8008fc0 <USB_ReadInterrupts>
 800532c:	4603      	mov	r3, r0
 800532e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005332:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005336:	d122      	bne.n	800537e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	69fa      	ldr	r2, [r7, #28]
 8005342:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005346:	f023 0301 	bic.w	r3, r3, #1
 800534a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005352:	2b01      	cmp	r3, #1
 8005354:	d108      	bne.n	8005368 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800535e:	2100      	movs	r1, #0
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 fea3 	bl	80060ac <HAL_PCDEx_LPM_Callback>
 8005366:	e002      	b.n	800536e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f006 fa49 	bl	800b800 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	695a      	ldr	r2, [r3, #20]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800537c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4618      	mov	r0, r3
 8005384:	f003 fe1c 	bl	8008fc0 <USB_ReadInterrupts>
 8005388:	4603      	mov	r3, r0
 800538a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800538e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005392:	d112      	bne.n	80053ba <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f003 0301 	and.w	r3, r3, #1
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d102      	bne.n	80053aa <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f006 fa05 	bl	800b7b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	695a      	ldr	r2, [r3, #20]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80053b8:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4618      	mov	r0, r3
 80053c0:	f003 fdfe 	bl	8008fc0 <USB_ReadInterrupts>
 80053c4:	4603      	mov	r3, r0
 80053c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80053ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053ce:	f040 80b7 	bne.w	8005540 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	69fa      	ldr	r2, [r7, #28]
 80053dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80053e0:	f023 0301 	bic.w	r3, r3, #1
 80053e4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2110      	movs	r1, #16
 80053ec:	4618      	mov	r0, r3
 80053ee:	f002 fecb 	bl	8008188 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053f2:	2300      	movs	r3, #0
 80053f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053f6:	e046      	b.n	8005486 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80053f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053fa:	015a      	lsls	r2, r3, #5
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	4413      	add	r3, r2
 8005400:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005404:	461a      	mov	r2, r3
 8005406:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800540a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800540c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800540e:	015a      	lsls	r2, r3, #5
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	4413      	add	r3, r2
 8005414:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800541c:	0151      	lsls	r1, r2, #5
 800541e:	69fa      	ldr	r2, [r7, #28]
 8005420:	440a      	add	r2, r1
 8005422:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005426:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800542a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800542c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800542e:	015a      	lsls	r2, r3, #5
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	4413      	add	r3, r2
 8005434:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005438:	461a      	mov	r2, r3
 800543a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800543e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005442:	015a      	lsls	r2, r3, #5
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	4413      	add	r3, r2
 8005448:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005450:	0151      	lsls	r1, r2, #5
 8005452:	69fa      	ldr	r2, [r7, #28]
 8005454:	440a      	add	r2, r1
 8005456:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800545a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800545e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005462:	015a      	lsls	r2, r3, #5
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	4413      	add	r3, r2
 8005468:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005470:	0151      	lsls	r1, r2, #5
 8005472:	69fa      	ldr	r2, [r7, #28]
 8005474:	440a      	add	r2, r1
 8005476:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800547a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800547e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005482:	3301      	adds	r3, #1
 8005484:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	791b      	ldrb	r3, [r3, #4]
 800548a:	461a      	mov	r2, r3
 800548c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800548e:	4293      	cmp	r3, r2
 8005490:	d3b2      	bcc.n	80053f8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005498:	69db      	ldr	r3, [r3, #28]
 800549a:	69fa      	ldr	r2, [r7, #28]
 800549c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80054a0:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80054a4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	7bdb      	ldrb	r3, [r3, #15]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d016      	beq.n	80054dc <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054b8:	69fa      	ldr	r2, [r7, #28]
 80054ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80054be:	f043 030b 	orr.w	r3, r3, #11
 80054c2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ce:	69fa      	ldr	r2, [r7, #28]
 80054d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80054d4:	f043 030b 	orr.w	r3, r3, #11
 80054d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80054da:	e015      	b.n	8005508 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054e2:	695b      	ldr	r3, [r3, #20]
 80054e4:	69fa      	ldr	r2, [r7, #28]
 80054e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80054ea:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80054ee:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80054f2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	69fa      	ldr	r2, [r7, #28]
 80054fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005502:	f043 030b 	orr.w	r3, r3, #11
 8005506:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	69fa      	ldr	r2, [r7, #28]
 8005512:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005516:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800551a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6818      	ldr	r0, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800552a:	461a      	mov	r2, r3
 800552c:	f003 fe0c 	bl	8009148 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	695a      	ldr	r2, [r3, #20]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800553e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4618      	mov	r0, r3
 8005546:	f003 fd3b 	bl	8008fc0 <USB_ReadInterrupts>
 800554a:	4603      	mov	r3, r0
 800554c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005550:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005554:	d123      	bne.n	800559e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4618      	mov	r0, r3
 800555c:	f003 fdd1 	bl	8009102 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4618      	mov	r0, r3
 8005566:	f002 fe88 	bl	800827a <USB_GetDevSpeed>
 800556a:	4603      	mov	r3, r0
 800556c:	461a      	mov	r2, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681c      	ldr	r4, [r3, #0]
 8005576:	f001 f9c9 	bl	800690c <HAL_RCC_GetHCLKFreq>
 800557a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005580:	461a      	mov	r2, r3
 8005582:	4620      	mov	r0, r4
 8005584:	f002 fb8c 	bl	8007ca0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f006 f8f4 	bl	800b776 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	695a      	ldr	r2, [r3, #20]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800559c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4618      	mov	r0, r3
 80055a4:	f003 fd0c 	bl	8008fc0 <USB_ReadInterrupts>
 80055a8:	4603      	mov	r3, r0
 80055aa:	f003 0308 	and.w	r3, r3, #8
 80055ae:	2b08      	cmp	r3, #8
 80055b0:	d10a      	bne.n	80055c8 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f006 f8d1 	bl	800b75a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	695a      	ldr	r2, [r3, #20]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f002 0208 	and.w	r2, r2, #8
 80055c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4618      	mov	r0, r3
 80055ce:	f003 fcf7 	bl	8008fc0 <USB_ReadInterrupts>
 80055d2:	4603      	mov	r3, r0
 80055d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055d8:	2b80      	cmp	r3, #128	@ 0x80
 80055da:	d123      	bne.n	8005624 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80055dc:	6a3b      	ldr	r3, [r7, #32]
 80055de:	699b      	ldr	r3, [r3, #24]
 80055e0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80055e4:	6a3b      	ldr	r3, [r7, #32]
 80055e6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80055e8:	2301      	movs	r3, #1
 80055ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80055ec:	e014      	b.n	8005618 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80055ee:	6879      	ldr	r1, [r7, #4]
 80055f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055f2:	4613      	mov	r3, r2
 80055f4:	00db      	lsls	r3, r3, #3
 80055f6:	4413      	add	r3, r2
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	440b      	add	r3, r1
 80055fc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	2b01      	cmp	r3, #1
 8005604:	d105      	bne.n	8005612 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005608:	b2db      	uxtb	r3, r3
 800560a:	4619      	mov	r1, r3
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f000 fb0a 	bl	8005c26 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005614:	3301      	adds	r3, #1
 8005616:	627b      	str	r3, [r7, #36]	@ 0x24
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	791b      	ldrb	r3, [r3, #4]
 800561c:	461a      	mov	r2, r3
 800561e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005620:	4293      	cmp	r3, r2
 8005622:	d3e4      	bcc.n	80055ee <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4618      	mov	r0, r3
 800562a:	f003 fcc9 	bl	8008fc0 <USB_ReadInterrupts>
 800562e:	4603      	mov	r3, r0
 8005630:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005634:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005638:	d13c      	bne.n	80056b4 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800563a:	2301      	movs	r3, #1
 800563c:	627b      	str	r3, [r7, #36]	@ 0x24
 800563e:	e02b      	b.n	8005698 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005642:	015a      	lsls	r2, r3, #5
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	4413      	add	r3, r2
 8005648:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005650:	6879      	ldr	r1, [r7, #4]
 8005652:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005654:	4613      	mov	r3, r2
 8005656:	00db      	lsls	r3, r3, #3
 8005658:	4413      	add	r3, r2
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	440b      	add	r3, r1
 800565e:	3318      	adds	r3, #24
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	2b01      	cmp	r3, #1
 8005664:	d115      	bne.n	8005692 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005666:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005668:	2b00      	cmp	r3, #0
 800566a:	da12      	bge.n	8005692 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800566c:	6879      	ldr	r1, [r7, #4]
 800566e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005670:	4613      	mov	r3, r2
 8005672:	00db      	lsls	r3, r3, #3
 8005674:	4413      	add	r3, r2
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	440b      	add	r3, r1
 800567a:	3317      	adds	r3, #23
 800567c:	2201      	movs	r2, #1
 800567e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005682:	b2db      	uxtb	r3, r3
 8005684:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005688:	b2db      	uxtb	r3, r3
 800568a:	4619      	mov	r1, r3
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 faca 	bl	8005c26 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005694:	3301      	adds	r3, #1
 8005696:	627b      	str	r3, [r7, #36]	@ 0x24
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	791b      	ldrb	r3, [r3, #4]
 800569c:	461a      	mov	r2, r3
 800569e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d3cd      	bcc.n	8005640 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	695a      	ldr	r2, [r3, #20]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80056b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4618      	mov	r0, r3
 80056ba:	f003 fc81 	bl	8008fc0 <USB_ReadInterrupts>
 80056be:	4603      	mov	r3, r0
 80056c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80056c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80056c8:	d156      	bne.n	8005778 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80056ca:	2301      	movs	r3, #1
 80056cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80056ce:	e045      	b.n	800575c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80056d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d2:	015a      	lsls	r2, r3, #5
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	4413      	add	r3, r2
 80056d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80056e0:	6879      	ldr	r1, [r7, #4]
 80056e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056e4:	4613      	mov	r3, r2
 80056e6:	00db      	lsls	r3, r3, #3
 80056e8:	4413      	add	r3, r2
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	440b      	add	r3, r1
 80056ee:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d12e      	bne.n	8005756 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80056f8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	da2b      	bge.n	8005756 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800570a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800570e:	429a      	cmp	r2, r3
 8005710:	d121      	bne.n	8005756 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005712:	6879      	ldr	r1, [r7, #4]
 8005714:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005716:	4613      	mov	r3, r2
 8005718:	00db      	lsls	r3, r3, #3
 800571a:	4413      	add	r3, r2
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	440b      	add	r3, r1
 8005720:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005724:	2201      	movs	r2, #1
 8005726:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005728:	6a3b      	ldr	r3, [r7, #32]
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005730:	6a3b      	ldr	r3, [r7, #32]
 8005732:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005734:	6a3b      	ldr	r3, [r7, #32]
 8005736:	695b      	ldr	r3, [r3, #20]
 8005738:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800573c:	2b00      	cmp	r3, #0
 800573e:	d10a      	bne.n	8005756 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	69fa      	ldr	r2, [r7, #28]
 800574a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800574e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005752:	6053      	str	r3, [r2, #4]
            break;
 8005754:	e008      	b.n	8005768 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005758:	3301      	adds	r3, #1
 800575a:	627b      	str	r3, [r7, #36]	@ 0x24
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	791b      	ldrb	r3, [r3, #4]
 8005760:	461a      	mov	r2, r3
 8005762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005764:	4293      	cmp	r3, r2
 8005766:	d3b3      	bcc.n	80056d0 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	695a      	ldr	r2, [r3, #20]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005776:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4618      	mov	r0, r3
 800577e:	f003 fc1f 	bl	8008fc0 <USB_ReadInterrupts>
 8005782:	4603      	mov	r3, r0
 8005784:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005788:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800578c:	d10a      	bne.n	80057a4 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f006 f868 	bl	800b864 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	695a      	ldr	r2, [r3, #20]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80057a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4618      	mov	r0, r3
 80057aa:	f003 fc09 	bl	8008fc0 <USB_ReadInterrupts>
 80057ae:	4603      	mov	r3, r0
 80057b0:	f003 0304 	and.w	r3, r3, #4
 80057b4:	2b04      	cmp	r3, #4
 80057b6:	d115      	bne.n	80057e4 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	f003 0304 	and.w	r3, r3, #4
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d002      	beq.n	80057d0 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f006 f858 	bl	800b880 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6859      	ldr	r1, [r3, #4]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	69ba      	ldr	r2, [r7, #24]
 80057dc:	430a      	orrs	r2, r1
 80057de:	605a      	str	r2, [r3, #4]
 80057e0:	e000      	b.n	80057e4 <HAL_PCD_IRQHandler+0x93c>
      return;
 80057e2:	bf00      	nop
    }
  }
}
 80057e4:	3734      	adds	r7, #52	@ 0x34
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd90      	pop	{r4, r7, pc}

080057ea <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80057ea:	b580      	push	{r7, lr}
 80057ec:	b082      	sub	sp, #8
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
 80057f2:	460b      	mov	r3, r1
 80057f4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d101      	bne.n	8005804 <HAL_PCD_SetAddress+0x1a>
 8005800:	2302      	movs	r3, #2
 8005802:	e012      	b.n	800582a <HAL_PCD_SetAddress+0x40>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	78fa      	ldrb	r2, [r7, #3]
 8005810:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	78fa      	ldrb	r2, [r7, #3]
 8005818:	4611      	mov	r1, r2
 800581a:	4618      	mov	r0, r3
 800581c:	f003 fb68 	bl	8008ef0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3708      	adds	r7, #8
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b084      	sub	sp, #16
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
 800583a:	4608      	mov	r0, r1
 800583c:	4611      	mov	r1, r2
 800583e:	461a      	mov	r2, r3
 8005840:	4603      	mov	r3, r0
 8005842:	70fb      	strb	r3, [r7, #3]
 8005844:	460b      	mov	r3, r1
 8005846:	803b      	strh	r3, [r7, #0]
 8005848:	4613      	mov	r3, r2
 800584a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800584c:	2300      	movs	r3, #0
 800584e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005850:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005854:	2b00      	cmp	r3, #0
 8005856:	da0f      	bge.n	8005878 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005858:	78fb      	ldrb	r3, [r7, #3]
 800585a:	f003 020f 	and.w	r2, r3, #15
 800585e:	4613      	mov	r3, r2
 8005860:	00db      	lsls	r3, r3, #3
 8005862:	4413      	add	r3, r2
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	3310      	adds	r3, #16
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	4413      	add	r3, r2
 800586c:	3304      	adds	r3, #4
 800586e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2201      	movs	r2, #1
 8005874:	705a      	strb	r2, [r3, #1]
 8005876:	e00f      	b.n	8005898 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005878:	78fb      	ldrb	r3, [r7, #3]
 800587a:	f003 020f 	and.w	r2, r3, #15
 800587e:	4613      	mov	r3, r2
 8005880:	00db      	lsls	r3, r3, #3
 8005882:	4413      	add	r3, r2
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	4413      	add	r3, r2
 800588e:	3304      	adds	r3, #4
 8005890:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005898:	78fb      	ldrb	r3, [r7, #3]
 800589a:	f003 030f 	and.w	r3, r3, #15
 800589e:	b2da      	uxtb	r2, r3
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80058a4:	883b      	ldrh	r3, [r7, #0]
 80058a6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	78ba      	ldrb	r2, [r7, #2]
 80058b2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	785b      	ldrb	r3, [r3, #1]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d004      	beq.n	80058c6 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	461a      	mov	r2, r3
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80058c6:	78bb      	ldrb	r3, [r7, #2]
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d102      	bne.n	80058d2 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d101      	bne.n	80058e0 <HAL_PCD_EP_Open+0xae>
 80058dc:	2302      	movs	r3, #2
 80058de:	e00e      	b.n	80058fe <HAL_PCD_EP_Open+0xcc>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68f9      	ldr	r1, [r7, #12]
 80058ee:	4618      	mov	r0, r3
 80058f0:	f002 fce8 	bl	80082c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80058fc:	7afb      	ldrb	r3, [r7, #11]
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3710      	adds	r7, #16
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}

08005906 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005906:	b580      	push	{r7, lr}
 8005908:	b084      	sub	sp, #16
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
 800590e:	460b      	mov	r3, r1
 8005910:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005912:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005916:	2b00      	cmp	r3, #0
 8005918:	da0f      	bge.n	800593a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800591a:	78fb      	ldrb	r3, [r7, #3]
 800591c:	f003 020f 	and.w	r2, r3, #15
 8005920:	4613      	mov	r3, r2
 8005922:	00db      	lsls	r3, r3, #3
 8005924:	4413      	add	r3, r2
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	3310      	adds	r3, #16
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	4413      	add	r3, r2
 800592e:	3304      	adds	r3, #4
 8005930:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2201      	movs	r2, #1
 8005936:	705a      	strb	r2, [r3, #1]
 8005938:	e00f      	b.n	800595a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800593a:	78fb      	ldrb	r3, [r7, #3]
 800593c:	f003 020f 	and.w	r2, r3, #15
 8005940:	4613      	mov	r3, r2
 8005942:	00db      	lsls	r3, r3, #3
 8005944:	4413      	add	r3, r2
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	4413      	add	r3, r2
 8005950:	3304      	adds	r3, #4
 8005952:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2200      	movs	r2, #0
 8005958:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800595a:	78fb      	ldrb	r3, [r7, #3]
 800595c:	f003 030f 	and.w	r3, r3, #15
 8005960:	b2da      	uxtb	r2, r3
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800596c:	2b01      	cmp	r3, #1
 800596e:	d101      	bne.n	8005974 <HAL_PCD_EP_Close+0x6e>
 8005970:	2302      	movs	r3, #2
 8005972:	e00e      	b.n	8005992 <HAL_PCD_EP_Close+0x8c>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68f9      	ldr	r1, [r7, #12]
 8005982:	4618      	mov	r0, r3
 8005984:	f002 fd26 	bl	80083d4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3710      	adds	r7, #16
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800599a:	b580      	push	{r7, lr}
 800599c:	b086      	sub	sp, #24
 800599e:	af00      	add	r7, sp, #0
 80059a0:	60f8      	str	r0, [r7, #12]
 80059a2:	607a      	str	r2, [r7, #4]
 80059a4:	603b      	str	r3, [r7, #0]
 80059a6:	460b      	mov	r3, r1
 80059a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059aa:	7afb      	ldrb	r3, [r7, #11]
 80059ac:	f003 020f 	and.w	r2, r3, #15
 80059b0:	4613      	mov	r3, r2
 80059b2:	00db      	lsls	r3, r3, #3
 80059b4:	4413      	add	r3, r2
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	4413      	add	r3, r2
 80059c0:	3304      	adds	r3, #4
 80059c2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	683a      	ldr	r2, [r7, #0]
 80059ce:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	2200      	movs	r2, #0
 80059d4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	2200      	movs	r2, #0
 80059da:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80059dc:	7afb      	ldrb	r3, [r7, #11]
 80059de:	f003 030f 	and.w	r3, r3, #15
 80059e2:	b2da      	uxtb	r2, r3
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	799b      	ldrb	r3, [r3, #6]
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d102      	bne.n	80059f6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6818      	ldr	r0, [r3, #0]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	799b      	ldrb	r3, [r3, #6]
 80059fe:	461a      	mov	r2, r3
 8005a00:	6979      	ldr	r1, [r7, #20]
 8005a02:	f002 fdc3 	bl	800858c <USB_EPStartXfer>

  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3718      	adds	r7, #24
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	460b      	mov	r3, r1
 8005a1a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005a1c:	78fb      	ldrb	r3, [r7, #3]
 8005a1e:	f003 020f 	and.w	r2, r3, #15
 8005a22:	6879      	ldr	r1, [r7, #4]
 8005a24:	4613      	mov	r3, r2
 8005a26:	00db      	lsls	r3, r3, #3
 8005a28:	4413      	add	r3, r2
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	440b      	add	r3, r1
 8005a2e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005a32:	681b      	ldr	r3, [r3, #0]
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b086      	sub	sp, #24
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	607a      	str	r2, [r7, #4]
 8005a4a:	603b      	str	r3, [r7, #0]
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a50:	7afb      	ldrb	r3, [r7, #11]
 8005a52:	f003 020f 	and.w	r2, r3, #15
 8005a56:	4613      	mov	r3, r2
 8005a58:	00db      	lsls	r3, r3, #3
 8005a5a:	4413      	add	r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	3310      	adds	r3, #16
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	4413      	add	r3, r2
 8005a64:	3304      	adds	r3, #4
 8005a66:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	683a      	ldr	r2, [r7, #0]
 8005a72:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	2200      	movs	r2, #0
 8005a78:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a80:	7afb      	ldrb	r3, [r7, #11]
 8005a82:	f003 030f 	and.w	r3, r3, #15
 8005a86:	b2da      	uxtb	r2, r3
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	799b      	ldrb	r3, [r3, #6]
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d102      	bne.n	8005a9a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6818      	ldr	r0, [r3, #0]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	799b      	ldrb	r3, [r3, #6]
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	6979      	ldr	r1, [r7, #20]
 8005aa6:	f002 fd71 	bl	800858c <USB_EPStartXfer>

  return HAL_OK;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3718      	adds	r7, #24
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	460b      	mov	r3, r1
 8005abe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005ac0:	78fb      	ldrb	r3, [r7, #3]
 8005ac2:	f003 030f 	and.w	r3, r3, #15
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	7912      	ldrb	r2, [r2, #4]
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d901      	bls.n	8005ad2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e04f      	b.n	8005b72 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005ad2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	da0f      	bge.n	8005afa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ada:	78fb      	ldrb	r3, [r7, #3]
 8005adc:	f003 020f 	and.w	r2, r3, #15
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	00db      	lsls	r3, r3, #3
 8005ae4:	4413      	add	r3, r2
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	3310      	adds	r3, #16
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	4413      	add	r3, r2
 8005aee:	3304      	adds	r3, #4
 8005af0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2201      	movs	r2, #1
 8005af6:	705a      	strb	r2, [r3, #1]
 8005af8:	e00d      	b.n	8005b16 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005afa:	78fa      	ldrb	r2, [r7, #3]
 8005afc:	4613      	mov	r3, r2
 8005afe:	00db      	lsls	r3, r3, #3
 8005b00:	4413      	add	r3, r2
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	3304      	adds	r3, #4
 8005b0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2200      	movs	r2, #0
 8005b14:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b1c:	78fb      	ldrb	r3, [r7, #3]
 8005b1e:	f003 030f 	and.w	r3, r3, #15
 8005b22:	b2da      	uxtb	r2, r3
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d101      	bne.n	8005b36 <HAL_PCD_EP_SetStall+0x82>
 8005b32:	2302      	movs	r3, #2
 8005b34:	e01d      	b.n	8005b72 <HAL_PCD_EP_SetStall+0xbe>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68f9      	ldr	r1, [r7, #12]
 8005b44:	4618      	mov	r0, r3
 8005b46:	f003 f8ff 	bl	8008d48 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005b4a:	78fb      	ldrb	r3, [r7, #3]
 8005b4c:	f003 030f 	and.w	r3, r3, #15
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d109      	bne.n	8005b68 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6818      	ldr	r0, [r3, #0]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	7999      	ldrb	r1, [r3, #6]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005b62:	461a      	mov	r2, r3
 8005b64:	f003 faf0 	bl	8009148 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3710      	adds	r7, #16
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}

08005b7a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b7a:	b580      	push	{r7, lr}
 8005b7c:	b084      	sub	sp, #16
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
 8005b82:	460b      	mov	r3, r1
 8005b84:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005b86:	78fb      	ldrb	r3, [r7, #3]
 8005b88:	f003 030f 	and.w	r3, r3, #15
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	7912      	ldrb	r2, [r2, #4]
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d901      	bls.n	8005b98 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e042      	b.n	8005c1e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005b98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	da0f      	bge.n	8005bc0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ba0:	78fb      	ldrb	r3, [r7, #3]
 8005ba2:	f003 020f 	and.w	r2, r3, #15
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	00db      	lsls	r3, r3, #3
 8005baa:	4413      	add	r3, r2
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	3310      	adds	r3, #16
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	4413      	add	r3, r2
 8005bb4:	3304      	adds	r3, #4
 8005bb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	705a      	strb	r2, [r3, #1]
 8005bbe:	e00f      	b.n	8005be0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005bc0:	78fb      	ldrb	r3, [r7, #3]
 8005bc2:	f003 020f 	and.w	r2, r3, #15
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	00db      	lsls	r3, r3, #3
 8005bca:	4413      	add	r3, r2
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	3304      	adds	r3, #4
 8005bd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2200      	movs	r2, #0
 8005be4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005be6:	78fb      	ldrb	r3, [r7, #3]
 8005be8:	f003 030f 	and.w	r3, r3, #15
 8005bec:	b2da      	uxtb	r2, r3
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d101      	bne.n	8005c00 <HAL_PCD_EP_ClrStall+0x86>
 8005bfc:	2302      	movs	r3, #2
 8005bfe:	e00e      	b.n	8005c1e <HAL_PCD_EP_ClrStall+0xa4>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68f9      	ldr	r1, [r7, #12]
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f003 f908 	bl	8008e24 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3710      	adds	r7, #16
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b084      	sub	sp, #16
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
 8005c2e:	460b      	mov	r3, r1
 8005c30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005c32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	da0c      	bge.n	8005c54 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c3a:	78fb      	ldrb	r3, [r7, #3]
 8005c3c:	f003 020f 	and.w	r2, r3, #15
 8005c40:	4613      	mov	r3, r2
 8005c42:	00db      	lsls	r3, r3, #3
 8005c44:	4413      	add	r3, r2
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	3310      	adds	r3, #16
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	3304      	adds	r3, #4
 8005c50:	60fb      	str	r3, [r7, #12]
 8005c52:	e00c      	b.n	8005c6e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c54:	78fb      	ldrb	r3, [r7, #3]
 8005c56:	f003 020f 	and.w	r2, r3, #15
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	00db      	lsls	r3, r3, #3
 8005c5e:	4413      	add	r3, r2
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	4413      	add	r3, r2
 8005c6a:	3304      	adds	r3, #4
 8005c6c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68f9      	ldr	r1, [r7, #12]
 8005c74:	4618      	mov	r0, r3
 8005c76:	f002 ff27 	bl	8008ac8 <USB_EPStopXfer>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005c7e:	7afb      	ldrb	r3, [r7, #11]
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3710      	adds	r7, #16
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b08a      	sub	sp, #40	@ 0x28
 8005c8c:	af02      	add	r7, sp, #8
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005c9c:	683a      	ldr	r2, [r7, #0]
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	00db      	lsls	r3, r3, #3
 8005ca2:	4413      	add	r3, r2
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	3310      	adds	r3, #16
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	4413      	add	r3, r2
 8005cac:	3304      	adds	r3, #4
 8005cae:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	695a      	ldr	r2, [r3, #20]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d901      	bls.n	8005cc0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e06b      	b.n	8005d98 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	691a      	ldr	r2, [r3, #16]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	695b      	ldr	r3, [r3, #20]
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	69fa      	ldr	r2, [r7, #28]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d902      	bls.n	8005cdc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	3303      	adds	r3, #3
 8005ce0:	089b      	lsrs	r3, r3, #2
 8005ce2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005ce4:	e02a      	b.n	8005d3c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	691a      	ldr	r2, [r3, #16]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	69fa      	ldr	r2, [r7, #28]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d902      	bls.n	8005d02 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	3303      	adds	r3, #3
 8005d06:	089b      	lsrs	r3, r3, #2
 8005d08:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	68d9      	ldr	r1, [r3, #12]
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	b2da      	uxtb	r2, r3
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005d1a:	9300      	str	r3, [sp, #0]
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	6978      	ldr	r0, [r7, #20]
 8005d20:	f002 ff7c 	bl	8008c1c <USB_WritePacket>

    ep->xfer_buff  += len;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	68da      	ldr	r2, [r3, #12]
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	441a      	add	r2, r3
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	695a      	ldr	r2, [r3, #20]
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	441a      	add	r2, r3
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	015a      	lsls	r2, r3, #5
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	4413      	add	r3, r2
 8005d44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d48:	699b      	ldr	r3, [r3, #24]
 8005d4a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005d4c:	69ba      	ldr	r2, [r7, #24]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d809      	bhi.n	8005d66 <PCD_WriteEmptyTxFifo+0xde>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	695a      	ldr	r2, [r3, #20]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d203      	bcs.n	8005d66 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d1bf      	bne.n	8005ce6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	691a      	ldr	r2, [r3, #16]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	695b      	ldr	r3, [r3, #20]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d811      	bhi.n	8005d96 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	f003 030f 	and.w	r3, r3, #15
 8005d78:	2201      	movs	r2, #1
 8005d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	43db      	mvns	r3, r3
 8005d8c:	6939      	ldr	r1, [r7, #16]
 8005d8e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d92:	4013      	ands	r3, r2
 8005d94:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3720      	adds	r7, #32
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b088      	sub	sp, #32
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	333c      	adds	r3, #60	@ 0x3c
 8005db8:	3304      	adds	r3, #4
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	015a      	lsls	r2, r3, #5
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	799b      	ldrb	r3, [r3, #6]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d17b      	bne.n	8005ece <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	f003 0308 	and.w	r3, r3, #8
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d015      	beq.n	8005e0c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	4a61      	ldr	r2, [pc, #388]	@ (8005f68 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	f240 80b9 	bls.w	8005f5c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	f000 80b3 	beq.w	8005f5c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	015a      	lsls	r2, r3, #5
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e02:	461a      	mov	r2, r3
 8005e04:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e08:	6093      	str	r3, [r2, #8]
 8005e0a:	e0a7      	b.n	8005f5c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	f003 0320 	and.w	r3, r3, #32
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d009      	beq.n	8005e2a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	015a      	lsls	r2, r3, #5
 8005e1a:	69bb      	ldr	r3, [r7, #24]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e22:	461a      	mov	r2, r3
 8005e24:	2320      	movs	r3, #32
 8005e26:	6093      	str	r3, [r2, #8]
 8005e28:	e098      	b.n	8005f5c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	f040 8093 	bne.w	8005f5c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	4a4b      	ldr	r2, [pc, #300]	@ (8005f68 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d90f      	bls.n	8005e5e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d00a      	beq.n	8005e5e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	015a      	lsls	r2, r3, #5
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	4413      	add	r3, r2
 8005e50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e54:	461a      	mov	r2, r3
 8005e56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e5a:	6093      	str	r3, [r2, #8]
 8005e5c:	e07e      	b.n	8005f5c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005e5e:	683a      	ldr	r2, [r7, #0]
 8005e60:	4613      	mov	r3, r2
 8005e62:	00db      	lsls	r3, r3, #3
 8005e64:	4413      	add	r3, r2
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	4413      	add	r3, r2
 8005e70:	3304      	adds	r3, #4
 8005e72:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6a1a      	ldr	r2, [r3, #32]
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	0159      	lsls	r1, r3, #5
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	440b      	add	r3, r1
 8005e80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e8a:	1ad2      	subs	r2, r2, r3
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d114      	bne.n	8005ec0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d109      	bne.n	8005eb2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6818      	ldr	r0, [r3, #0]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	2101      	movs	r1, #1
 8005eac:	f003 f94c 	bl	8009148 <USB_EP0_OutStart>
 8005eb0:	e006      	b.n	8005ec0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	68da      	ldr	r2, [r3, #12]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	441a      	add	r2, r3
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f005 fc12 	bl	800b6f0 <HAL_PCD_DataOutStageCallback>
 8005ecc:	e046      	b.n	8005f5c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	4a26      	ldr	r2, [pc, #152]	@ (8005f6c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d124      	bne.n	8005f20 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d00a      	beq.n	8005ef6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	015a      	lsls	r2, r3, #5
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eec:	461a      	mov	r2, r3
 8005eee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ef2:	6093      	str	r3, [r2, #8]
 8005ef4:	e032      	b.n	8005f5c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	f003 0320 	and.w	r3, r3, #32
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d008      	beq.n	8005f12 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	015a      	lsls	r2, r3, #5
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	4413      	add	r3, r2
 8005f08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	2320      	movs	r3, #32
 8005f10:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	4619      	mov	r1, r3
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f005 fbe9 	bl	800b6f0 <HAL_PCD_DataOutStageCallback>
 8005f1e:	e01d      	b.n	8005f5c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d114      	bne.n	8005f50 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005f26:	6879      	ldr	r1, [r7, #4]
 8005f28:	683a      	ldr	r2, [r7, #0]
 8005f2a:	4613      	mov	r3, r2
 8005f2c:	00db      	lsls	r3, r3, #3
 8005f2e:	4413      	add	r3, r2
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	440b      	add	r3, r1
 8005f34:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d108      	bne.n	8005f50 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6818      	ldr	r0, [r3, #0]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005f48:	461a      	mov	r2, r3
 8005f4a:	2100      	movs	r1, #0
 8005f4c:	f003 f8fc 	bl	8009148 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	4619      	mov	r1, r3
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f005 fbca 	bl	800b6f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3720      	adds	r7, #32
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	4f54300a 	.word	0x4f54300a
 8005f6c:	4f54310a 	.word	0x4f54310a

08005f70 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b086      	sub	sp, #24
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	333c      	adds	r3, #60	@ 0x3c
 8005f88:	3304      	adds	r3, #4
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	015a      	lsls	r2, r3, #5
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	4413      	add	r3, r2
 8005f96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	4a15      	ldr	r2, [pc, #84]	@ (8005ff8 <PCD_EP_OutSetupPacket_int+0x88>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d90e      	bls.n	8005fc4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d009      	beq.n	8005fc4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	015a      	lsls	r2, r3, #5
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fc2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f005 fb81 	bl	800b6cc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	4a0a      	ldr	r2, [pc, #40]	@ (8005ff8 <PCD_EP_OutSetupPacket_int+0x88>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d90c      	bls.n	8005fec <PCD_EP_OutSetupPacket_int+0x7c>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	799b      	ldrb	r3, [r3, #6]
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d108      	bne.n	8005fec <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6818      	ldr	r0, [r3, #0]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	2101      	movs	r1, #1
 8005fe8:	f003 f8ae 	bl	8009148 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3718      	adds	r7, #24
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	4f54300a 	.word	0x4f54300a

08005ffc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b085      	sub	sp, #20
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	460b      	mov	r3, r1
 8006006:	70fb      	strb	r3, [r7, #3]
 8006008:	4613      	mov	r3, r2
 800600a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006012:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006014:	78fb      	ldrb	r3, [r7, #3]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d107      	bne.n	800602a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800601a:	883b      	ldrh	r3, [r7, #0]
 800601c:	0419      	lsls	r1, r3, #16
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68ba      	ldr	r2, [r7, #8]
 8006024:	430a      	orrs	r2, r1
 8006026:	629a      	str	r2, [r3, #40]	@ 0x28
 8006028:	e028      	b.n	800607c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006030:	0c1b      	lsrs	r3, r3, #16
 8006032:	68ba      	ldr	r2, [r7, #8]
 8006034:	4413      	add	r3, r2
 8006036:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006038:	2300      	movs	r3, #0
 800603a:	73fb      	strb	r3, [r7, #15]
 800603c:	e00d      	b.n	800605a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	7bfb      	ldrb	r3, [r7, #15]
 8006044:	3340      	adds	r3, #64	@ 0x40
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	4413      	add	r3, r2
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	0c1b      	lsrs	r3, r3, #16
 800604e:	68ba      	ldr	r2, [r7, #8]
 8006050:	4413      	add	r3, r2
 8006052:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006054:	7bfb      	ldrb	r3, [r7, #15]
 8006056:	3301      	adds	r3, #1
 8006058:	73fb      	strb	r3, [r7, #15]
 800605a:	7bfa      	ldrb	r2, [r7, #15]
 800605c:	78fb      	ldrb	r3, [r7, #3]
 800605e:	3b01      	subs	r3, #1
 8006060:	429a      	cmp	r2, r3
 8006062:	d3ec      	bcc.n	800603e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006064:	883b      	ldrh	r3, [r7, #0]
 8006066:	0418      	lsls	r0, r3, #16
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6819      	ldr	r1, [r3, #0]
 800606c:	78fb      	ldrb	r3, [r7, #3]
 800606e:	3b01      	subs	r3, #1
 8006070:	68ba      	ldr	r2, [r7, #8]
 8006072:	4302      	orrs	r2, r0
 8006074:	3340      	adds	r3, #64	@ 0x40
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	440b      	add	r3, r1
 800607a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3714      	adds	r7, #20
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr

0800608a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800608a:	b480      	push	{r7}
 800608c:	b083      	sub	sp, #12
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
 8006092:	460b      	mov	r3, r1
 8006094:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	887a      	ldrh	r2, [r7, #2]
 800609c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	460b      	mov	r3, r1
 80060b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80060b8:	bf00      	nop
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b086      	sub	sp, #24
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d101      	bne.n	80060d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e267      	b.n	80065a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0301 	and.w	r3, r3, #1
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d075      	beq.n	80061ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80060e2:	4b88      	ldr	r3, [pc, #544]	@ (8006304 <HAL_RCC_OscConfig+0x240>)
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	f003 030c 	and.w	r3, r3, #12
 80060ea:	2b04      	cmp	r3, #4
 80060ec:	d00c      	beq.n	8006108 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80060ee:	4b85      	ldr	r3, [pc, #532]	@ (8006304 <HAL_RCC_OscConfig+0x240>)
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80060f6:	2b08      	cmp	r3, #8
 80060f8:	d112      	bne.n	8006120 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80060fa:	4b82      	ldr	r3, [pc, #520]	@ (8006304 <HAL_RCC_OscConfig+0x240>)
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006102:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006106:	d10b      	bne.n	8006120 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006108:	4b7e      	ldr	r3, [pc, #504]	@ (8006304 <HAL_RCC_OscConfig+0x240>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006110:	2b00      	cmp	r3, #0
 8006112:	d05b      	beq.n	80061cc <HAL_RCC_OscConfig+0x108>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d157      	bne.n	80061cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	e242      	b.n	80065a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006128:	d106      	bne.n	8006138 <HAL_RCC_OscConfig+0x74>
 800612a:	4b76      	ldr	r3, [pc, #472]	@ (8006304 <HAL_RCC_OscConfig+0x240>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a75      	ldr	r2, [pc, #468]	@ (8006304 <HAL_RCC_OscConfig+0x240>)
 8006130:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006134:	6013      	str	r3, [r2, #0]
 8006136:	e01d      	b.n	8006174 <HAL_RCC_OscConfig+0xb0>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006140:	d10c      	bne.n	800615c <HAL_RCC_OscConfig+0x98>
 8006142:	4b70      	ldr	r3, [pc, #448]	@ (8006304 <HAL_RCC_OscConfig+0x240>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a6f      	ldr	r2, [pc, #444]	@ (8006304 <HAL_RCC_OscConfig+0x240>)
 8006148:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800614c:	6013      	str	r3, [r2, #0]
 800614e:	4b6d      	ldr	r3, [pc, #436]	@ (8006304 <HAL_RCC_OscConfig+0x240>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a6c      	ldr	r2, [pc, #432]	@ (8006304 <HAL_RCC_OscConfig+0x240>)
 8006154:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006158:	6013      	str	r3, [r2, #0]
 800615a:	e00b      	b.n	8006174 <HAL_RCC_OscConfig+0xb0>
 800615c:	4b69      	ldr	r3, [pc, #420]	@ (8006304 <HAL_RCC_OscConfig+0x240>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a68      	ldr	r2, [pc, #416]	@ (8006304 <HAL_RCC_OscConfig+0x240>)
 8006162:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006166:	6013      	str	r3, [r2, #0]
 8006168:	4b66      	ldr	r3, [pc, #408]	@ (8006304 <HAL_RCC_OscConfig+0x240>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a65      	ldr	r2, [pc, #404]	@ (8006304 <HAL_RCC_OscConfig+0x240>)
 800616e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006172:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d013      	beq.n	80061a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800617c:	f7fd f812 	bl	80031a4 <HAL_GetTick>
 8006180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006182:	e008      	b.n	8006196 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006184:	f7fd f80e 	bl	80031a4 <HAL_GetTick>
 8006188:	4602      	mov	r2, r0
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	1ad3      	subs	r3, r2, r3
 800618e:	2b64      	cmp	r3, #100	@ 0x64
 8006190:	d901      	bls.n	8006196 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006192:	2303      	movs	r3, #3
 8006194:	e207      	b.n	80065a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006196:	4b5b      	ldr	r3, [pc, #364]	@ (8006304 <HAL_RCC_OscConfig+0x240>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d0f0      	beq.n	8006184 <HAL_RCC_OscConfig+0xc0>
 80061a2:	e014      	b.n	80061ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061a4:	f7fc fffe 	bl	80031a4 <HAL_GetTick>
 80061a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061aa:	e008      	b.n	80061be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061ac:	f7fc fffa 	bl	80031a4 <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	2b64      	cmp	r3, #100	@ 0x64
 80061b8:	d901      	bls.n	80061be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	e1f3      	b.n	80065a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061be:	4b51      	ldr	r3, [pc, #324]	@ (8006304 <HAL_RCC_OscConfig+0x240>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1f0      	bne.n	80061ac <HAL_RCC_OscConfig+0xe8>
 80061ca:	e000      	b.n	80061ce <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 0302 	and.w	r3, r3, #2
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d063      	beq.n	80062a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80061da:	4b4a      	ldr	r3, [pc, #296]	@ (8006304 <HAL_RCC_OscConfig+0x240>)
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	f003 030c 	and.w	r3, r3, #12
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00b      	beq.n	80061fe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80061e6:	4b47      	ldr	r3, [pc, #284]	@ (8006304 <HAL_RCC_OscConfig+0x240>)
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80061ee:	2b08      	cmp	r3, #8
 80061f0:	d11c      	bne.n	800622c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80061f2:	4b44      	ldr	r3, [pc, #272]	@ (8006304 <HAL_RCC_OscConfig+0x240>)
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d116      	bne.n	800622c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061fe:	4b41      	ldr	r3, [pc, #260]	@ (8006304 <HAL_RCC_OscConfig+0x240>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 0302 	and.w	r3, r3, #2
 8006206:	2b00      	cmp	r3, #0
 8006208:	d005      	beq.n	8006216 <HAL_RCC_OscConfig+0x152>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	2b01      	cmp	r3, #1
 8006210:	d001      	beq.n	8006216 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e1c7      	b.n	80065a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006216:	4b3b      	ldr	r3, [pc, #236]	@ (8006304 <HAL_RCC_OscConfig+0x240>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	00db      	lsls	r3, r3, #3
 8006224:	4937      	ldr	r1, [pc, #220]	@ (8006304 <HAL_RCC_OscConfig+0x240>)
 8006226:	4313      	orrs	r3, r2
 8006228:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800622a:	e03a      	b.n	80062a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d020      	beq.n	8006276 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006234:	4b34      	ldr	r3, [pc, #208]	@ (8006308 <HAL_RCC_OscConfig+0x244>)
 8006236:	2201      	movs	r2, #1
 8006238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800623a:	f7fc ffb3 	bl	80031a4 <HAL_GetTick>
 800623e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006240:	e008      	b.n	8006254 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006242:	f7fc ffaf 	bl	80031a4 <HAL_GetTick>
 8006246:	4602      	mov	r2, r0
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	1ad3      	subs	r3, r2, r3
 800624c:	2b02      	cmp	r3, #2
 800624e:	d901      	bls.n	8006254 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006250:	2303      	movs	r3, #3
 8006252:	e1a8      	b.n	80065a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006254:	4b2b      	ldr	r3, [pc, #172]	@ (8006304 <HAL_RCC_OscConfig+0x240>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 0302 	and.w	r3, r3, #2
 800625c:	2b00      	cmp	r3, #0
 800625e:	d0f0      	beq.n	8006242 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006260:	4b28      	ldr	r3, [pc, #160]	@ (8006304 <HAL_RCC_OscConfig+0x240>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	00db      	lsls	r3, r3, #3
 800626e:	4925      	ldr	r1, [pc, #148]	@ (8006304 <HAL_RCC_OscConfig+0x240>)
 8006270:	4313      	orrs	r3, r2
 8006272:	600b      	str	r3, [r1, #0]
 8006274:	e015      	b.n	80062a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006276:	4b24      	ldr	r3, [pc, #144]	@ (8006308 <HAL_RCC_OscConfig+0x244>)
 8006278:	2200      	movs	r2, #0
 800627a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800627c:	f7fc ff92 	bl	80031a4 <HAL_GetTick>
 8006280:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006282:	e008      	b.n	8006296 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006284:	f7fc ff8e 	bl	80031a4 <HAL_GetTick>
 8006288:	4602      	mov	r2, r0
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	1ad3      	subs	r3, r2, r3
 800628e:	2b02      	cmp	r3, #2
 8006290:	d901      	bls.n	8006296 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006292:	2303      	movs	r3, #3
 8006294:	e187      	b.n	80065a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006296:	4b1b      	ldr	r3, [pc, #108]	@ (8006304 <HAL_RCC_OscConfig+0x240>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 0302 	and.w	r3, r3, #2
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d1f0      	bne.n	8006284 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f003 0308 	and.w	r3, r3, #8
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d036      	beq.n	800631c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d016      	beq.n	80062e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062b6:	4b15      	ldr	r3, [pc, #84]	@ (800630c <HAL_RCC_OscConfig+0x248>)
 80062b8:	2201      	movs	r2, #1
 80062ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062bc:	f7fc ff72 	bl	80031a4 <HAL_GetTick>
 80062c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062c2:	e008      	b.n	80062d6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062c4:	f7fc ff6e 	bl	80031a4 <HAL_GetTick>
 80062c8:	4602      	mov	r2, r0
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	1ad3      	subs	r3, r2, r3
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	d901      	bls.n	80062d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e167      	b.n	80065a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006304 <HAL_RCC_OscConfig+0x240>)
 80062d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062da:	f003 0302 	and.w	r3, r3, #2
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d0f0      	beq.n	80062c4 <HAL_RCC_OscConfig+0x200>
 80062e2:	e01b      	b.n	800631c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062e4:	4b09      	ldr	r3, [pc, #36]	@ (800630c <HAL_RCC_OscConfig+0x248>)
 80062e6:	2200      	movs	r2, #0
 80062e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062ea:	f7fc ff5b 	bl	80031a4 <HAL_GetTick>
 80062ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062f0:	e00e      	b.n	8006310 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062f2:	f7fc ff57 	bl	80031a4 <HAL_GetTick>
 80062f6:	4602      	mov	r2, r0
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d907      	bls.n	8006310 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	e150      	b.n	80065a6 <HAL_RCC_OscConfig+0x4e2>
 8006304:	40023800 	.word	0x40023800
 8006308:	42470000 	.word	0x42470000
 800630c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006310:	4b88      	ldr	r3, [pc, #544]	@ (8006534 <HAL_RCC_OscConfig+0x470>)
 8006312:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006314:	f003 0302 	and.w	r3, r3, #2
 8006318:	2b00      	cmp	r3, #0
 800631a:	d1ea      	bne.n	80062f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f003 0304 	and.w	r3, r3, #4
 8006324:	2b00      	cmp	r3, #0
 8006326:	f000 8097 	beq.w	8006458 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800632a:	2300      	movs	r3, #0
 800632c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800632e:	4b81      	ldr	r3, [pc, #516]	@ (8006534 <HAL_RCC_OscConfig+0x470>)
 8006330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006336:	2b00      	cmp	r3, #0
 8006338:	d10f      	bne.n	800635a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800633a:	2300      	movs	r3, #0
 800633c:	60bb      	str	r3, [r7, #8]
 800633e:	4b7d      	ldr	r3, [pc, #500]	@ (8006534 <HAL_RCC_OscConfig+0x470>)
 8006340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006342:	4a7c      	ldr	r2, [pc, #496]	@ (8006534 <HAL_RCC_OscConfig+0x470>)
 8006344:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006348:	6413      	str	r3, [r2, #64]	@ 0x40
 800634a:	4b7a      	ldr	r3, [pc, #488]	@ (8006534 <HAL_RCC_OscConfig+0x470>)
 800634c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800634e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006352:	60bb      	str	r3, [r7, #8]
 8006354:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006356:	2301      	movs	r3, #1
 8006358:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800635a:	4b77      	ldr	r3, [pc, #476]	@ (8006538 <HAL_RCC_OscConfig+0x474>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006362:	2b00      	cmp	r3, #0
 8006364:	d118      	bne.n	8006398 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006366:	4b74      	ldr	r3, [pc, #464]	@ (8006538 <HAL_RCC_OscConfig+0x474>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a73      	ldr	r2, [pc, #460]	@ (8006538 <HAL_RCC_OscConfig+0x474>)
 800636c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006370:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006372:	f7fc ff17 	bl	80031a4 <HAL_GetTick>
 8006376:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006378:	e008      	b.n	800638c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800637a:	f7fc ff13 	bl	80031a4 <HAL_GetTick>
 800637e:	4602      	mov	r2, r0
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	1ad3      	subs	r3, r2, r3
 8006384:	2b02      	cmp	r3, #2
 8006386:	d901      	bls.n	800638c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006388:	2303      	movs	r3, #3
 800638a:	e10c      	b.n	80065a6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800638c:	4b6a      	ldr	r3, [pc, #424]	@ (8006538 <HAL_RCC_OscConfig+0x474>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006394:	2b00      	cmp	r3, #0
 8006396:	d0f0      	beq.n	800637a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	2b01      	cmp	r3, #1
 800639e:	d106      	bne.n	80063ae <HAL_RCC_OscConfig+0x2ea>
 80063a0:	4b64      	ldr	r3, [pc, #400]	@ (8006534 <HAL_RCC_OscConfig+0x470>)
 80063a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063a4:	4a63      	ldr	r2, [pc, #396]	@ (8006534 <HAL_RCC_OscConfig+0x470>)
 80063a6:	f043 0301 	orr.w	r3, r3, #1
 80063aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80063ac:	e01c      	b.n	80063e8 <HAL_RCC_OscConfig+0x324>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	2b05      	cmp	r3, #5
 80063b4:	d10c      	bne.n	80063d0 <HAL_RCC_OscConfig+0x30c>
 80063b6:	4b5f      	ldr	r3, [pc, #380]	@ (8006534 <HAL_RCC_OscConfig+0x470>)
 80063b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063ba:	4a5e      	ldr	r2, [pc, #376]	@ (8006534 <HAL_RCC_OscConfig+0x470>)
 80063bc:	f043 0304 	orr.w	r3, r3, #4
 80063c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80063c2:	4b5c      	ldr	r3, [pc, #368]	@ (8006534 <HAL_RCC_OscConfig+0x470>)
 80063c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063c6:	4a5b      	ldr	r2, [pc, #364]	@ (8006534 <HAL_RCC_OscConfig+0x470>)
 80063c8:	f043 0301 	orr.w	r3, r3, #1
 80063cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80063ce:	e00b      	b.n	80063e8 <HAL_RCC_OscConfig+0x324>
 80063d0:	4b58      	ldr	r3, [pc, #352]	@ (8006534 <HAL_RCC_OscConfig+0x470>)
 80063d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063d4:	4a57      	ldr	r2, [pc, #348]	@ (8006534 <HAL_RCC_OscConfig+0x470>)
 80063d6:	f023 0301 	bic.w	r3, r3, #1
 80063da:	6713      	str	r3, [r2, #112]	@ 0x70
 80063dc:	4b55      	ldr	r3, [pc, #340]	@ (8006534 <HAL_RCC_OscConfig+0x470>)
 80063de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063e0:	4a54      	ldr	r2, [pc, #336]	@ (8006534 <HAL_RCC_OscConfig+0x470>)
 80063e2:	f023 0304 	bic.w	r3, r3, #4
 80063e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d015      	beq.n	800641c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063f0:	f7fc fed8 	bl	80031a4 <HAL_GetTick>
 80063f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063f6:	e00a      	b.n	800640e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063f8:	f7fc fed4 	bl	80031a4 <HAL_GetTick>
 80063fc:	4602      	mov	r2, r0
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006406:	4293      	cmp	r3, r2
 8006408:	d901      	bls.n	800640e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800640a:	2303      	movs	r3, #3
 800640c:	e0cb      	b.n	80065a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800640e:	4b49      	ldr	r3, [pc, #292]	@ (8006534 <HAL_RCC_OscConfig+0x470>)
 8006410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006412:	f003 0302 	and.w	r3, r3, #2
 8006416:	2b00      	cmp	r3, #0
 8006418:	d0ee      	beq.n	80063f8 <HAL_RCC_OscConfig+0x334>
 800641a:	e014      	b.n	8006446 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800641c:	f7fc fec2 	bl	80031a4 <HAL_GetTick>
 8006420:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006422:	e00a      	b.n	800643a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006424:	f7fc febe 	bl	80031a4 <HAL_GetTick>
 8006428:	4602      	mov	r2, r0
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	1ad3      	subs	r3, r2, r3
 800642e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006432:	4293      	cmp	r3, r2
 8006434:	d901      	bls.n	800643a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006436:	2303      	movs	r3, #3
 8006438:	e0b5      	b.n	80065a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800643a:	4b3e      	ldr	r3, [pc, #248]	@ (8006534 <HAL_RCC_OscConfig+0x470>)
 800643c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800643e:	f003 0302 	and.w	r3, r3, #2
 8006442:	2b00      	cmp	r3, #0
 8006444:	d1ee      	bne.n	8006424 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006446:	7dfb      	ldrb	r3, [r7, #23]
 8006448:	2b01      	cmp	r3, #1
 800644a:	d105      	bne.n	8006458 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800644c:	4b39      	ldr	r3, [pc, #228]	@ (8006534 <HAL_RCC_OscConfig+0x470>)
 800644e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006450:	4a38      	ldr	r2, [pc, #224]	@ (8006534 <HAL_RCC_OscConfig+0x470>)
 8006452:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006456:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	699b      	ldr	r3, [r3, #24]
 800645c:	2b00      	cmp	r3, #0
 800645e:	f000 80a1 	beq.w	80065a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006462:	4b34      	ldr	r3, [pc, #208]	@ (8006534 <HAL_RCC_OscConfig+0x470>)
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	f003 030c 	and.w	r3, r3, #12
 800646a:	2b08      	cmp	r3, #8
 800646c:	d05c      	beq.n	8006528 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	699b      	ldr	r3, [r3, #24]
 8006472:	2b02      	cmp	r3, #2
 8006474:	d141      	bne.n	80064fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006476:	4b31      	ldr	r3, [pc, #196]	@ (800653c <HAL_RCC_OscConfig+0x478>)
 8006478:	2200      	movs	r2, #0
 800647a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800647c:	f7fc fe92 	bl	80031a4 <HAL_GetTick>
 8006480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006482:	e008      	b.n	8006496 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006484:	f7fc fe8e 	bl	80031a4 <HAL_GetTick>
 8006488:	4602      	mov	r2, r0
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	2b02      	cmp	r3, #2
 8006490:	d901      	bls.n	8006496 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006492:	2303      	movs	r3, #3
 8006494:	e087      	b.n	80065a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006496:	4b27      	ldr	r3, [pc, #156]	@ (8006534 <HAL_RCC_OscConfig+0x470>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d1f0      	bne.n	8006484 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	69da      	ldr	r2, [r3, #28]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a1b      	ldr	r3, [r3, #32]
 80064aa:	431a      	orrs	r2, r3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064b0:	019b      	lsls	r3, r3, #6
 80064b2:	431a      	orrs	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064b8:	085b      	lsrs	r3, r3, #1
 80064ba:	3b01      	subs	r3, #1
 80064bc:	041b      	lsls	r3, r3, #16
 80064be:	431a      	orrs	r2, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064c4:	061b      	lsls	r3, r3, #24
 80064c6:	491b      	ldr	r1, [pc, #108]	@ (8006534 <HAL_RCC_OscConfig+0x470>)
 80064c8:	4313      	orrs	r3, r2
 80064ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064cc:	4b1b      	ldr	r3, [pc, #108]	@ (800653c <HAL_RCC_OscConfig+0x478>)
 80064ce:	2201      	movs	r2, #1
 80064d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064d2:	f7fc fe67 	bl	80031a4 <HAL_GetTick>
 80064d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064d8:	e008      	b.n	80064ec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064da:	f7fc fe63 	bl	80031a4 <HAL_GetTick>
 80064de:	4602      	mov	r2, r0
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	2b02      	cmp	r3, #2
 80064e6:	d901      	bls.n	80064ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80064e8:	2303      	movs	r3, #3
 80064ea:	e05c      	b.n	80065a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064ec:	4b11      	ldr	r3, [pc, #68]	@ (8006534 <HAL_RCC_OscConfig+0x470>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d0f0      	beq.n	80064da <HAL_RCC_OscConfig+0x416>
 80064f8:	e054      	b.n	80065a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064fa:	4b10      	ldr	r3, [pc, #64]	@ (800653c <HAL_RCC_OscConfig+0x478>)
 80064fc:	2200      	movs	r2, #0
 80064fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006500:	f7fc fe50 	bl	80031a4 <HAL_GetTick>
 8006504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006506:	e008      	b.n	800651a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006508:	f7fc fe4c 	bl	80031a4 <HAL_GetTick>
 800650c:	4602      	mov	r2, r0
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	2b02      	cmp	r3, #2
 8006514:	d901      	bls.n	800651a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	e045      	b.n	80065a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800651a:	4b06      	ldr	r3, [pc, #24]	@ (8006534 <HAL_RCC_OscConfig+0x470>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1f0      	bne.n	8006508 <HAL_RCC_OscConfig+0x444>
 8006526:	e03d      	b.n	80065a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	699b      	ldr	r3, [r3, #24]
 800652c:	2b01      	cmp	r3, #1
 800652e:	d107      	bne.n	8006540 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	e038      	b.n	80065a6 <HAL_RCC_OscConfig+0x4e2>
 8006534:	40023800 	.word	0x40023800
 8006538:	40007000 	.word	0x40007000
 800653c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006540:	4b1b      	ldr	r3, [pc, #108]	@ (80065b0 <HAL_RCC_OscConfig+0x4ec>)
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	699b      	ldr	r3, [r3, #24]
 800654a:	2b01      	cmp	r3, #1
 800654c:	d028      	beq.n	80065a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006558:	429a      	cmp	r2, r3
 800655a:	d121      	bne.n	80065a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006566:	429a      	cmp	r2, r3
 8006568:	d11a      	bne.n	80065a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006570:	4013      	ands	r3, r2
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006576:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006578:	4293      	cmp	r3, r2
 800657a:	d111      	bne.n	80065a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006586:	085b      	lsrs	r3, r3, #1
 8006588:	3b01      	subs	r3, #1
 800658a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800658c:	429a      	cmp	r2, r3
 800658e:	d107      	bne.n	80065a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800659a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800659c:	429a      	cmp	r2, r3
 800659e:	d001      	beq.n	80065a4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	e000      	b.n	80065a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3718      	adds	r7, #24
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	40023800 	.word	0x40023800

080065b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d101      	bne.n	80065c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	e0cc      	b.n	8006762 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80065c8:	4b68      	ldr	r3, [pc, #416]	@ (800676c <HAL_RCC_ClockConfig+0x1b8>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 0307 	and.w	r3, r3, #7
 80065d0:	683a      	ldr	r2, [r7, #0]
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d90c      	bls.n	80065f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065d6:	4b65      	ldr	r3, [pc, #404]	@ (800676c <HAL_RCC_ClockConfig+0x1b8>)
 80065d8:	683a      	ldr	r2, [r7, #0]
 80065da:	b2d2      	uxtb	r2, r2
 80065dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065de:	4b63      	ldr	r3, [pc, #396]	@ (800676c <HAL_RCC_ClockConfig+0x1b8>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 0307 	and.w	r3, r3, #7
 80065e6:	683a      	ldr	r2, [r7, #0]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d001      	beq.n	80065f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	e0b8      	b.n	8006762 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 0302 	and.w	r3, r3, #2
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d020      	beq.n	800663e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0304 	and.w	r3, r3, #4
 8006604:	2b00      	cmp	r3, #0
 8006606:	d005      	beq.n	8006614 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006608:	4b59      	ldr	r3, [pc, #356]	@ (8006770 <HAL_RCC_ClockConfig+0x1bc>)
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	4a58      	ldr	r2, [pc, #352]	@ (8006770 <HAL_RCC_ClockConfig+0x1bc>)
 800660e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006612:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 0308 	and.w	r3, r3, #8
 800661c:	2b00      	cmp	r3, #0
 800661e:	d005      	beq.n	800662c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006620:	4b53      	ldr	r3, [pc, #332]	@ (8006770 <HAL_RCC_ClockConfig+0x1bc>)
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	4a52      	ldr	r2, [pc, #328]	@ (8006770 <HAL_RCC_ClockConfig+0x1bc>)
 8006626:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800662a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800662c:	4b50      	ldr	r3, [pc, #320]	@ (8006770 <HAL_RCC_ClockConfig+0x1bc>)
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	494d      	ldr	r1, [pc, #308]	@ (8006770 <HAL_RCC_ClockConfig+0x1bc>)
 800663a:	4313      	orrs	r3, r2
 800663c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0301 	and.w	r3, r3, #1
 8006646:	2b00      	cmp	r3, #0
 8006648:	d044      	beq.n	80066d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	2b01      	cmp	r3, #1
 8006650:	d107      	bne.n	8006662 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006652:	4b47      	ldr	r3, [pc, #284]	@ (8006770 <HAL_RCC_ClockConfig+0x1bc>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800665a:	2b00      	cmp	r3, #0
 800665c:	d119      	bne.n	8006692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	e07f      	b.n	8006762 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	2b02      	cmp	r3, #2
 8006668:	d003      	beq.n	8006672 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800666e:	2b03      	cmp	r3, #3
 8006670:	d107      	bne.n	8006682 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006672:	4b3f      	ldr	r3, [pc, #252]	@ (8006770 <HAL_RCC_ClockConfig+0x1bc>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800667a:	2b00      	cmp	r3, #0
 800667c:	d109      	bne.n	8006692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e06f      	b.n	8006762 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006682:	4b3b      	ldr	r3, [pc, #236]	@ (8006770 <HAL_RCC_ClockConfig+0x1bc>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f003 0302 	and.w	r3, r3, #2
 800668a:	2b00      	cmp	r3, #0
 800668c:	d101      	bne.n	8006692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e067      	b.n	8006762 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006692:	4b37      	ldr	r3, [pc, #220]	@ (8006770 <HAL_RCC_ClockConfig+0x1bc>)
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	f023 0203 	bic.w	r2, r3, #3
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	4934      	ldr	r1, [pc, #208]	@ (8006770 <HAL_RCC_ClockConfig+0x1bc>)
 80066a0:	4313      	orrs	r3, r2
 80066a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80066a4:	f7fc fd7e 	bl	80031a4 <HAL_GetTick>
 80066a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066aa:	e00a      	b.n	80066c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066ac:	f7fc fd7a 	bl	80031a4 <HAL_GetTick>
 80066b0:	4602      	mov	r2, r0
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d901      	bls.n	80066c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80066be:	2303      	movs	r3, #3
 80066c0:	e04f      	b.n	8006762 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066c2:	4b2b      	ldr	r3, [pc, #172]	@ (8006770 <HAL_RCC_ClockConfig+0x1bc>)
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	f003 020c 	and.w	r2, r3, #12
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d1eb      	bne.n	80066ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80066d4:	4b25      	ldr	r3, [pc, #148]	@ (800676c <HAL_RCC_ClockConfig+0x1b8>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 0307 	and.w	r3, r3, #7
 80066dc:	683a      	ldr	r2, [r7, #0]
 80066de:	429a      	cmp	r2, r3
 80066e0:	d20c      	bcs.n	80066fc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066e2:	4b22      	ldr	r3, [pc, #136]	@ (800676c <HAL_RCC_ClockConfig+0x1b8>)
 80066e4:	683a      	ldr	r2, [r7, #0]
 80066e6:	b2d2      	uxtb	r2, r2
 80066e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066ea:	4b20      	ldr	r3, [pc, #128]	@ (800676c <HAL_RCC_ClockConfig+0x1b8>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 0307 	and.w	r3, r3, #7
 80066f2:	683a      	ldr	r2, [r7, #0]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d001      	beq.n	80066fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	e032      	b.n	8006762 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 0304 	and.w	r3, r3, #4
 8006704:	2b00      	cmp	r3, #0
 8006706:	d008      	beq.n	800671a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006708:	4b19      	ldr	r3, [pc, #100]	@ (8006770 <HAL_RCC_ClockConfig+0x1bc>)
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	4916      	ldr	r1, [pc, #88]	@ (8006770 <HAL_RCC_ClockConfig+0x1bc>)
 8006716:	4313      	orrs	r3, r2
 8006718:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 0308 	and.w	r3, r3, #8
 8006722:	2b00      	cmp	r3, #0
 8006724:	d009      	beq.n	800673a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006726:	4b12      	ldr	r3, [pc, #72]	@ (8006770 <HAL_RCC_ClockConfig+0x1bc>)
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	00db      	lsls	r3, r3, #3
 8006734:	490e      	ldr	r1, [pc, #56]	@ (8006770 <HAL_RCC_ClockConfig+0x1bc>)
 8006736:	4313      	orrs	r3, r2
 8006738:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800673a:	f000 f821 	bl	8006780 <HAL_RCC_GetSysClockFreq>
 800673e:	4602      	mov	r2, r0
 8006740:	4b0b      	ldr	r3, [pc, #44]	@ (8006770 <HAL_RCC_ClockConfig+0x1bc>)
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	091b      	lsrs	r3, r3, #4
 8006746:	f003 030f 	and.w	r3, r3, #15
 800674a:	490a      	ldr	r1, [pc, #40]	@ (8006774 <HAL_RCC_ClockConfig+0x1c0>)
 800674c:	5ccb      	ldrb	r3, [r1, r3]
 800674e:	fa22 f303 	lsr.w	r3, r2, r3
 8006752:	4a09      	ldr	r2, [pc, #36]	@ (8006778 <HAL_RCC_ClockConfig+0x1c4>)
 8006754:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006756:	4b09      	ldr	r3, [pc, #36]	@ (800677c <HAL_RCC_ClockConfig+0x1c8>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4618      	mov	r0, r3
 800675c:	f7fc fcde 	bl	800311c <HAL_InitTick>

  return HAL_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	3710      	adds	r7, #16
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
 800676a:	bf00      	nop
 800676c:	40023c00 	.word	0x40023c00
 8006770:	40023800 	.word	0x40023800
 8006774:	0800cc9c 	.word	0x0800cc9c
 8006778:	20000028 	.word	0x20000028
 800677c:	2000002c 	.word	0x2000002c

08006780 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006780:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006784:	b090      	sub	sp, #64	@ 0x40
 8006786:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006788:	2300      	movs	r3, #0
 800678a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800678c:	2300      	movs	r3, #0
 800678e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8006790:	2300      	movs	r3, #0
 8006792:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006794:	2300      	movs	r3, #0
 8006796:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006798:	4b59      	ldr	r3, [pc, #356]	@ (8006900 <HAL_RCC_GetSysClockFreq+0x180>)
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	f003 030c 	and.w	r3, r3, #12
 80067a0:	2b08      	cmp	r3, #8
 80067a2:	d00d      	beq.n	80067c0 <HAL_RCC_GetSysClockFreq+0x40>
 80067a4:	2b08      	cmp	r3, #8
 80067a6:	f200 80a1 	bhi.w	80068ec <HAL_RCC_GetSysClockFreq+0x16c>
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d002      	beq.n	80067b4 <HAL_RCC_GetSysClockFreq+0x34>
 80067ae:	2b04      	cmp	r3, #4
 80067b0:	d003      	beq.n	80067ba <HAL_RCC_GetSysClockFreq+0x3a>
 80067b2:	e09b      	b.n	80068ec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80067b4:	4b53      	ldr	r3, [pc, #332]	@ (8006904 <HAL_RCC_GetSysClockFreq+0x184>)
 80067b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80067b8:	e09b      	b.n	80068f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80067ba:	4b53      	ldr	r3, [pc, #332]	@ (8006908 <HAL_RCC_GetSysClockFreq+0x188>)
 80067bc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80067be:	e098      	b.n	80068f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80067c0:	4b4f      	ldr	r3, [pc, #316]	@ (8006900 <HAL_RCC_GetSysClockFreq+0x180>)
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80067c8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80067ca:	4b4d      	ldr	r3, [pc, #308]	@ (8006900 <HAL_RCC_GetSysClockFreq+0x180>)
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d028      	beq.n	8006828 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067d6:	4b4a      	ldr	r3, [pc, #296]	@ (8006900 <HAL_RCC_GetSysClockFreq+0x180>)
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	099b      	lsrs	r3, r3, #6
 80067dc:	2200      	movs	r2, #0
 80067de:	623b      	str	r3, [r7, #32]
 80067e0:	627a      	str	r2, [r7, #36]	@ 0x24
 80067e2:	6a3b      	ldr	r3, [r7, #32]
 80067e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80067e8:	2100      	movs	r1, #0
 80067ea:	4b47      	ldr	r3, [pc, #284]	@ (8006908 <HAL_RCC_GetSysClockFreq+0x188>)
 80067ec:	fb03 f201 	mul.w	r2, r3, r1
 80067f0:	2300      	movs	r3, #0
 80067f2:	fb00 f303 	mul.w	r3, r0, r3
 80067f6:	4413      	add	r3, r2
 80067f8:	4a43      	ldr	r2, [pc, #268]	@ (8006908 <HAL_RCC_GetSysClockFreq+0x188>)
 80067fa:	fba0 1202 	umull	r1, r2, r0, r2
 80067fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006800:	460a      	mov	r2, r1
 8006802:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006804:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006806:	4413      	add	r3, r2
 8006808:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800680a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800680c:	2200      	movs	r2, #0
 800680e:	61bb      	str	r3, [r7, #24]
 8006810:	61fa      	str	r2, [r7, #28]
 8006812:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006816:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800681a:	f7fa f999 	bl	8000b50 <__aeabi_uldivmod>
 800681e:	4602      	mov	r2, r0
 8006820:	460b      	mov	r3, r1
 8006822:	4613      	mov	r3, r2
 8006824:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006826:	e053      	b.n	80068d0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006828:	4b35      	ldr	r3, [pc, #212]	@ (8006900 <HAL_RCC_GetSysClockFreq+0x180>)
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	099b      	lsrs	r3, r3, #6
 800682e:	2200      	movs	r2, #0
 8006830:	613b      	str	r3, [r7, #16]
 8006832:	617a      	str	r2, [r7, #20]
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800683a:	f04f 0b00 	mov.w	fp, #0
 800683e:	4652      	mov	r2, sl
 8006840:	465b      	mov	r3, fp
 8006842:	f04f 0000 	mov.w	r0, #0
 8006846:	f04f 0100 	mov.w	r1, #0
 800684a:	0159      	lsls	r1, r3, #5
 800684c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006850:	0150      	lsls	r0, r2, #5
 8006852:	4602      	mov	r2, r0
 8006854:	460b      	mov	r3, r1
 8006856:	ebb2 080a 	subs.w	r8, r2, sl
 800685a:	eb63 090b 	sbc.w	r9, r3, fp
 800685e:	f04f 0200 	mov.w	r2, #0
 8006862:	f04f 0300 	mov.w	r3, #0
 8006866:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800686a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800686e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006872:	ebb2 0408 	subs.w	r4, r2, r8
 8006876:	eb63 0509 	sbc.w	r5, r3, r9
 800687a:	f04f 0200 	mov.w	r2, #0
 800687e:	f04f 0300 	mov.w	r3, #0
 8006882:	00eb      	lsls	r3, r5, #3
 8006884:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006888:	00e2      	lsls	r2, r4, #3
 800688a:	4614      	mov	r4, r2
 800688c:	461d      	mov	r5, r3
 800688e:	eb14 030a 	adds.w	r3, r4, sl
 8006892:	603b      	str	r3, [r7, #0]
 8006894:	eb45 030b 	adc.w	r3, r5, fp
 8006898:	607b      	str	r3, [r7, #4]
 800689a:	f04f 0200 	mov.w	r2, #0
 800689e:	f04f 0300 	mov.w	r3, #0
 80068a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80068a6:	4629      	mov	r1, r5
 80068a8:	028b      	lsls	r3, r1, #10
 80068aa:	4621      	mov	r1, r4
 80068ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80068b0:	4621      	mov	r1, r4
 80068b2:	028a      	lsls	r2, r1, #10
 80068b4:	4610      	mov	r0, r2
 80068b6:	4619      	mov	r1, r3
 80068b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068ba:	2200      	movs	r2, #0
 80068bc:	60bb      	str	r3, [r7, #8]
 80068be:	60fa      	str	r2, [r7, #12]
 80068c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80068c4:	f7fa f944 	bl	8000b50 <__aeabi_uldivmod>
 80068c8:	4602      	mov	r2, r0
 80068ca:	460b      	mov	r3, r1
 80068cc:	4613      	mov	r3, r2
 80068ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80068d0:	4b0b      	ldr	r3, [pc, #44]	@ (8006900 <HAL_RCC_GetSysClockFreq+0x180>)
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	0c1b      	lsrs	r3, r3, #16
 80068d6:	f003 0303 	and.w	r3, r3, #3
 80068da:	3301      	adds	r3, #1
 80068dc:	005b      	lsls	r3, r3, #1
 80068de:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80068e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80068e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80068e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80068ea:	e002      	b.n	80068f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80068ec:	4b05      	ldr	r3, [pc, #20]	@ (8006904 <HAL_RCC_GetSysClockFreq+0x184>)
 80068ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80068f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80068f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3740      	adds	r7, #64	@ 0x40
 80068f8:	46bd      	mov	sp, r7
 80068fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068fe:	bf00      	nop
 8006900:	40023800 	.word	0x40023800
 8006904:	00f42400 	.word	0x00f42400
 8006908:	017d7840 	.word	0x017d7840

0800690c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800690c:	b480      	push	{r7}
 800690e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006910:	4b03      	ldr	r3, [pc, #12]	@ (8006920 <HAL_RCC_GetHCLKFreq+0x14>)
 8006912:	681b      	ldr	r3, [r3, #0]
}
 8006914:	4618      	mov	r0, r3
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop
 8006920:	20000028 	.word	0x20000028

08006924 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006928:	f7ff fff0 	bl	800690c <HAL_RCC_GetHCLKFreq>
 800692c:	4602      	mov	r2, r0
 800692e:	4b05      	ldr	r3, [pc, #20]	@ (8006944 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	0a9b      	lsrs	r3, r3, #10
 8006934:	f003 0307 	and.w	r3, r3, #7
 8006938:	4903      	ldr	r1, [pc, #12]	@ (8006948 <HAL_RCC_GetPCLK1Freq+0x24>)
 800693a:	5ccb      	ldrb	r3, [r1, r3]
 800693c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006940:	4618      	mov	r0, r3
 8006942:	bd80      	pop	{r7, pc}
 8006944:	40023800 	.word	0x40023800
 8006948:	0800ccac 	.word	0x0800ccac

0800694c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d101      	bne.n	800695e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e041      	b.n	80069e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006964:	b2db      	uxtb	r3, r3
 8006966:	2b00      	cmp	r3, #0
 8006968:	d106      	bne.n	8006978 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f7fc f9a8 	bl	8002cc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2202      	movs	r2, #2
 800697c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	3304      	adds	r3, #4
 8006988:	4619      	mov	r1, r3
 800698a:	4610      	mov	r0, r2
 800698c:	f000 fdca 	bl	8007524 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2201      	movs	r2, #1
 8006994:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2201      	movs	r2, #1
 800699c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3708      	adds	r7, #8
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
	...

080069ec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b085      	sub	sp, #20
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d001      	beq.n	8006a04 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	e03c      	b.n	8006a7e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2202      	movs	r2, #2
 8006a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a1e      	ldr	r2, [pc, #120]	@ (8006a8c <HAL_TIM_Base_Start+0xa0>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d018      	beq.n	8006a48 <HAL_TIM_Base_Start+0x5c>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a1e:	d013      	beq.n	8006a48 <HAL_TIM_Base_Start+0x5c>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a1a      	ldr	r2, [pc, #104]	@ (8006a90 <HAL_TIM_Base_Start+0xa4>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d00e      	beq.n	8006a48 <HAL_TIM_Base_Start+0x5c>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a19      	ldr	r2, [pc, #100]	@ (8006a94 <HAL_TIM_Base_Start+0xa8>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d009      	beq.n	8006a48 <HAL_TIM_Base_Start+0x5c>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a17      	ldr	r2, [pc, #92]	@ (8006a98 <HAL_TIM_Base_Start+0xac>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d004      	beq.n	8006a48 <HAL_TIM_Base_Start+0x5c>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a16      	ldr	r2, [pc, #88]	@ (8006a9c <HAL_TIM_Base_Start+0xb0>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d111      	bne.n	8006a6c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	f003 0307 	and.w	r3, r3, #7
 8006a52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2b06      	cmp	r3, #6
 8006a58:	d010      	beq.n	8006a7c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f042 0201 	orr.w	r2, r2, #1
 8006a68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a6a:	e007      	b.n	8006a7c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f042 0201 	orr.w	r2, r2, #1
 8006a7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3714      	adds	r7, #20
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr
 8006a8a:	bf00      	nop
 8006a8c:	40010000 	.word	0x40010000
 8006a90:	40000400 	.word	0x40000400
 8006a94:	40000800 	.word	0x40000800
 8006a98:	40000c00 	.word	0x40000c00
 8006a9c:	40014000 	.word	0x40014000

08006aa0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b085      	sub	sp, #20
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d001      	beq.n	8006ab8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e044      	b.n	8006b42 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2202      	movs	r2, #2
 8006abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68da      	ldr	r2, [r3, #12]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f042 0201 	orr.w	r2, r2, #1
 8006ace:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a1e      	ldr	r2, [pc, #120]	@ (8006b50 <HAL_TIM_Base_Start_IT+0xb0>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d018      	beq.n	8006b0c <HAL_TIM_Base_Start_IT+0x6c>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ae2:	d013      	beq.n	8006b0c <HAL_TIM_Base_Start_IT+0x6c>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a1a      	ldr	r2, [pc, #104]	@ (8006b54 <HAL_TIM_Base_Start_IT+0xb4>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d00e      	beq.n	8006b0c <HAL_TIM_Base_Start_IT+0x6c>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a19      	ldr	r2, [pc, #100]	@ (8006b58 <HAL_TIM_Base_Start_IT+0xb8>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d009      	beq.n	8006b0c <HAL_TIM_Base_Start_IT+0x6c>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a17      	ldr	r2, [pc, #92]	@ (8006b5c <HAL_TIM_Base_Start_IT+0xbc>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d004      	beq.n	8006b0c <HAL_TIM_Base_Start_IT+0x6c>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a16      	ldr	r2, [pc, #88]	@ (8006b60 <HAL_TIM_Base_Start_IT+0xc0>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d111      	bne.n	8006b30 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	f003 0307 	and.w	r3, r3, #7
 8006b16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2b06      	cmp	r3, #6
 8006b1c:	d010      	beq.n	8006b40 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f042 0201 	orr.w	r2, r2, #1
 8006b2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b2e:	e007      	b.n	8006b40 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f042 0201 	orr.w	r2, r2, #1
 8006b3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b40:	2300      	movs	r3, #0
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3714      	adds	r7, #20
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr
 8006b4e:	bf00      	nop
 8006b50:	40010000 	.word	0x40010000
 8006b54:	40000400 	.word	0x40000400
 8006b58:	40000800 	.word	0x40000800
 8006b5c:	40000c00 	.word	0x40000c00
 8006b60:	40014000 	.word	0x40014000

08006b64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b082      	sub	sp, #8
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d101      	bne.n	8006b76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	e041      	b.n	8006bfa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d106      	bne.n	8006b90 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 f839 	bl	8006c02 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2202      	movs	r2, #2
 8006b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	3304      	adds	r3, #4
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	4610      	mov	r0, r2
 8006ba4:	f000 fcbe 	bl	8007524 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2201      	movs	r2, #1
 8006bac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2201      	movs	r2, #1
 8006be4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3708      	adds	r7, #8
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}

08006c02 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006c02:	b480      	push	{r7}
 8006c04:	b083      	sub	sp, #12
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006c0a:	bf00      	nop
 8006c0c:	370c      	adds	r7, #12
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr
	...

08006c18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d109      	bne.n	8006c3c <HAL_TIM_PWM_Start+0x24>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	bf14      	ite	ne
 8006c34:	2301      	movne	r3, #1
 8006c36:	2300      	moveq	r3, #0
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	e022      	b.n	8006c82 <HAL_TIM_PWM_Start+0x6a>
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	2b04      	cmp	r3, #4
 8006c40:	d109      	bne.n	8006c56 <HAL_TIM_PWM_Start+0x3e>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	bf14      	ite	ne
 8006c4e:	2301      	movne	r3, #1
 8006c50:	2300      	moveq	r3, #0
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	e015      	b.n	8006c82 <HAL_TIM_PWM_Start+0x6a>
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	2b08      	cmp	r3, #8
 8006c5a:	d109      	bne.n	8006c70 <HAL_TIM_PWM_Start+0x58>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	bf14      	ite	ne
 8006c68:	2301      	movne	r3, #1
 8006c6a:	2300      	moveq	r3, #0
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	e008      	b.n	8006c82 <HAL_TIM_PWM_Start+0x6a>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	bf14      	ite	ne
 8006c7c:	2301      	movne	r3, #1
 8006c7e:	2300      	moveq	r3, #0
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d001      	beq.n	8006c8a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	e068      	b.n	8006d5c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d104      	bne.n	8006c9a <HAL_TIM_PWM_Start+0x82>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2202      	movs	r2, #2
 8006c94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c98:	e013      	b.n	8006cc2 <HAL_TIM_PWM_Start+0xaa>
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	2b04      	cmp	r3, #4
 8006c9e:	d104      	bne.n	8006caa <HAL_TIM_PWM_Start+0x92>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2202      	movs	r2, #2
 8006ca4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ca8:	e00b      	b.n	8006cc2 <HAL_TIM_PWM_Start+0xaa>
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	2b08      	cmp	r3, #8
 8006cae:	d104      	bne.n	8006cba <HAL_TIM_PWM_Start+0xa2>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2202      	movs	r2, #2
 8006cb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006cb8:	e003      	b.n	8006cc2 <HAL_TIM_PWM_Start+0xaa>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2202      	movs	r2, #2
 8006cbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	6839      	ldr	r1, [r7, #0]
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f000 fedc 	bl	8007a88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a23      	ldr	r2, [pc, #140]	@ (8006d64 <HAL_TIM_PWM_Start+0x14c>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d107      	bne.n	8006cea <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006ce8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a1d      	ldr	r2, [pc, #116]	@ (8006d64 <HAL_TIM_PWM_Start+0x14c>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d018      	beq.n	8006d26 <HAL_TIM_PWM_Start+0x10e>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cfc:	d013      	beq.n	8006d26 <HAL_TIM_PWM_Start+0x10e>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a19      	ldr	r2, [pc, #100]	@ (8006d68 <HAL_TIM_PWM_Start+0x150>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d00e      	beq.n	8006d26 <HAL_TIM_PWM_Start+0x10e>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a17      	ldr	r2, [pc, #92]	@ (8006d6c <HAL_TIM_PWM_Start+0x154>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d009      	beq.n	8006d26 <HAL_TIM_PWM_Start+0x10e>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a16      	ldr	r2, [pc, #88]	@ (8006d70 <HAL_TIM_PWM_Start+0x158>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d004      	beq.n	8006d26 <HAL_TIM_PWM_Start+0x10e>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a14      	ldr	r2, [pc, #80]	@ (8006d74 <HAL_TIM_PWM_Start+0x15c>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d111      	bne.n	8006d4a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	f003 0307 	and.w	r3, r3, #7
 8006d30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2b06      	cmp	r3, #6
 8006d36:	d010      	beq.n	8006d5a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f042 0201 	orr.w	r2, r2, #1
 8006d46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d48:	e007      	b.n	8006d5a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f042 0201 	orr.w	r2, r2, #1
 8006d58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d5a:	2300      	movs	r3, #0
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3710      	adds	r7, #16
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}
 8006d64:	40010000 	.word	0x40010000
 8006d68:	40000400 	.word	0x40000400
 8006d6c:	40000800 	.word	0x40000800
 8006d70:	40000c00 	.word	0x40000c00
 8006d74:	40014000 	.word	0x40014000

08006d78 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b086      	sub	sp, #24
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d101      	bne.n	8006d8c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e097      	b.n	8006ebc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d106      	bne.n	8006da6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f7fc f829 	bl	8002df8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2202      	movs	r2, #2
 8006daa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	6812      	ldr	r2, [r2, #0]
 8006db8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006dbc:	f023 0307 	bic.w	r3, r3, #7
 8006dc0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	3304      	adds	r3, #4
 8006dca:	4619      	mov	r1, r3
 8006dcc:	4610      	mov	r0, r2
 8006dce:	f000 fba9 	bl	8007524 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	699b      	ldr	r3, [r3, #24]
 8006de0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	6a1b      	ldr	r3, [r3, #32]
 8006de8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	697a      	ldr	r2, [r7, #20]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006dfa:	f023 0303 	bic.w	r3, r3, #3
 8006dfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	689a      	ldr	r2, [r3, #8]
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	699b      	ldr	r3, [r3, #24]
 8006e08:	021b      	lsls	r3, r3, #8
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	693a      	ldr	r2, [r7, #16]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006e18:	f023 030c 	bic.w	r3, r3, #12
 8006e1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006e24:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006e28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	68da      	ldr	r2, [r3, #12]
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	69db      	ldr	r3, [r3, #28]
 8006e32:	021b      	lsls	r3, r3, #8
 8006e34:	4313      	orrs	r3, r2
 8006e36:	693a      	ldr	r2, [r7, #16]
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	691b      	ldr	r3, [r3, #16]
 8006e40:	011a      	lsls	r2, r3, #4
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	6a1b      	ldr	r3, [r3, #32]
 8006e46:	031b      	lsls	r3, r3, #12
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	693a      	ldr	r2, [r7, #16]
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006e56:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006e5e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	685a      	ldr	r2, [r3, #4]
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	695b      	ldr	r3, [r3, #20]
 8006e68:	011b      	lsls	r3, r3, #4
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	68fa      	ldr	r2, [r7, #12]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	697a      	ldr	r2, [r7, #20]
 8006e78:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	693a      	ldr	r2, [r7, #16]
 8006e80:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	68fa      	ldr	r2, [r7, #12]
 8006e88:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2201      	movs	r2, #1
 8006e96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2201      	movs	r2, #1
 8006eae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006eba:	2300      	movs	r3, #0
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3718      	adds	r7, #24
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006ed4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006edc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006ee4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006eec:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d110      	bne.n	8006f16 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ef4:	7bfb      	ldrb	r3, [r7, #15]
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d102      	bne.n	8006f00 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006efa:	7b7b      	ldrb	r3, [r7, #13]
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d001      	beq.n	8006f04 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	e069      	b.n	8006fd8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2202      	movs	r2, #2
 8006f08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2202      	movs	r2, #2
 8006f10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f14:	e031      	b.n	8006f7a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	2b04      	cmp	r3, #4
 8006f1a:	d110      	bne.n	8006f3e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f1c:	7bbb      	ldrb	r3, [r7, #14]
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d102      	bne.n	8006f28 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f22:	7b3b      	ldrb	r3, [r7, #12]
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d001      	beq.n	8006f2c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e055      	b.n	8006fd8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2202      	movs	r2, #2
 8006f30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2202      	movs	r2, #2
 8006f38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006f3c:	e01d      	b.n	8006f7a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f3e:	7bfb      	ldrb	r3, [r7, #15]
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d108      	bne.n	8006f56 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f44:	7bbb      	ldrb	r3, [r7, #14]
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d105      	bne.n	8006f56 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f4a:	7b7b      	ldrb	r3, [r7, #13]
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d102      	bne.n	8006f56 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f50:	7b3b      	ldrb	r3, [r7, #12]
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d001      	beq.n	8006f5a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	e03e      	b.n	8006fd8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2202      	movs	r2, #2
 8006f5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2202      	movs	r2, #2
 8006f66:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2202      	movs	r2, #2
 8006f6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2202      	movs	r2, #2
 8006f76:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d003      	beq.n	8006f88 <HAL_TIM_Encoder_Start+0xc4>
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	2b04      	cmp	r3, #4
 8006f84:	d008      	beq.n	8006f98 <HAL_TIM_Encoder_Start+0xd4>
 8006f86:	e00f      	b.n	8006fa8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	2100      	movs	r1, #0
 8006f90:	4618      	mov	r0, r3
 8006f92:	f000 fd79 	bl	8007a88 <TIM_CCxChannelCmd>
      break;
 8006f96:	e016      	b.n	8006fc6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	2104      	movs	r1, #4
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f000 fd71 	bl	8007a88 <TIM_CCxChannelCmd>
      break;
 8006fa6:	e00e      	b.n	8006fc6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2201      	movs	r2, #1
 8006fae:	2100      	movs	r1, #0
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f000 fd69 	bl	8007a88 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	2104      	movs	r1, #4
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f000 fd62 	bl	8007a88 <TIM_CCxChannelCmd>
      break;
 8006fc4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f042 0201 	orr.w	r2, r2, #1
 8006fd4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006fd6:	2300      	movs	r3, #0
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3710      	adds	r7, #16
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	f003 0302 	and.w	r3, r3, #2
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d020      	beq.n	8007044 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f003 0302 	and.w	r3, r3, #2
 8007008:	2b00      	cmp	r3, #0
 800700a:	d01b      	beq.n	8007044 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f06f 0202 	mvn.w	r2, #2
 8007014:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2201      	movs	r2, #1
 800701a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	699b      	ldr	r3, [r3, #24]
 8007022:	f003 0303 	and.w	r3, r3, #3
 8007026:	2b00      	cmp	r3, #0
 8007028:	d003      	beq.n	8007032 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 fa5b 	bl	80074e6 <HAL_TIM_IC_CaptureCallback>
 8007030:	e005      	b.n	800703e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 fa4d 	bl	80074d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 fa5e 	bl	80074fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	f003 0304 	and.w	r3, r3, #4
 800704a:	2b00      	cmp	r3, #0
 800704c:	d020      	beq.n	8007090 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	f003 0304 	and.w	r3, r3, #4
 8007054:	2b00      	cmp	r3, #0
 8007056:	d01b      	beq.n	8007090 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f06f 0204 	mvn.w	r2, #4
 8007060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2202      	movs	r2, #2
 8007066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	699b      	ldr	r3, [r3, #24]
 800706e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007072:	2b00      	cmp	r3, #0
 8007074:	d003      	beq.n	800707e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 fa35 	bl	80074e6 <HAL_TIM_IC_CaptureCallback>
 800707c:	e005      	b.n	800708a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 fa27 	bl	80074d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 fa38 	bl	80074fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	f003 0308 	and.w	r3, r3, #8
 8007096:	2b00      	cmp	r3, #0
 8007098:	d020      	beq.n	80070dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f003 0308 	and.w	r3, r3, #8
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d01b      	beq.n	80070dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f06f 0208 	mvn.w	r2, #8
 80070ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2204      	movs	r2, #4
 80070b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	69db      	ldr	r3, [r3, #28]
 80070ba:	f003 0303 	and.w	r3, r3, #3
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d003      	beq.n	80070ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 fa0f 	bl	80074e6 <HAL_TIM_IC_CaptureCallback>
 80070c8:	e005      	b.n	80070d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 fa01 	bl	80074d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f000 fa12 	bl	80074fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	f003 0310 	and.w	r3, r3, #16
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d020      	beq.n	8007128 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f003 0310 	and.w	r3, r3, #16
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d01b      	beq.n	8007128 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f06f 0210 	mvn.w	r2, #16
 80070f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2208      	movs	r2, #8
 80070fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	69db      	ldr	r3, [r3, #28]
 8007106:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800710a:	2b00      	cmp	r3, #0
 800710c:	d003      	beq.n	8007116 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 f9e9 	bl	80074e6 <HAL_TIM_IC_CaptureCallback>
 8007114:	e005      	b.n	8007122 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 f9db 	bl	80074d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 f9ec 	bl	80074fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	f003 0301 	and.w	r3, r3, #1
 800712e:	2b00      	cmp	r3, #0
 8007130:	d00c      	beq.n	800714c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f003 0301 	and.w	r3, r3, #1
 8007138:	2b00      	cmp	r3, #0
 800713a:	d007      	beq.n	800714c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f06f 0201 	mvn.w	r2, #1
 8007144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f7fb fa52 	bl	80025f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007152:	2b00      	cmp	r3, #0
 8007154:	d00c      	beq.n	8007170 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800715c:	2b00      	cmp	r3, #0
 800715e:	d007      	beq.n	8007170 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 fd2a 	bl	8007bc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007176:	2b00      	cmp	r3, #0
 8007178:	d00c      	beq.n	8007194 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007180:	2b00      	cmp	r3, #0
 8007182:	d007      	beq.n	8007194 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800718c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 f9bd 	bl	800750e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	f003 0320 	and.w	r3, r3, #32
 800719a:	2b00      	cmp	r3, #0
 800719c:	d00c      	beq.n	80071b8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f003 0320 	and.w	r3, r3, #32
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d007      	beq.n	80071b8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f06f 0220 	mvn.w	r2, #32
 80071b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 fcfc 	bl	8007bb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80071b8:	bf00      	nop
 80071ba:	3710      	adds	r7, #16
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b086      	sub	sp, #24
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	60b9      	str	r1, [r7, #8]
 80071ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071cc:	2300      	movs	r3, #0
 80071ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d101      	bne.n	80071de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80071da:	2302      	movs	r3, #2
 80071dc:	e0ae      	b.n	800733c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2201      	movs	r2, #1
 80071e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2b0c      	cmp	r3, #12
 80071ea:	f200 809f 	bhi.w	800732c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80071ee:	a201      	add	r2, pc, #4	@ (adr r2, 80071f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80071f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f4:	08007229 	.word	0x08007229
 80071f8:	0800732d 	.word	0x0800732d
 80071fc:	0800732d 	.word	0x0800732d
 8007200:	0800732d 	.word	0x0800732d
 8007204:	08007269 	.word	0x08007269
 8007208:	0800732d 	.word	0x0800732d
 800720c:	0800732d 	.word	0x0800732d
 8007210:	0800732d 	.word	0x0800732d
 8007214:	080072ab 	.word	0x080072ab
 8007218:	0800732d 	.word	0x0800732d
 800721c:	0800732d 	.word	0x0800732d
 8007220:	0800732d 	.word	0x0800732d
 8007224:	080072eb 	.word	0x080072eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	68b9      	ldr	r1, [r7, #8]
 800722e:	4618      	mov	r0, r3
 8007230:	f000 fa04 	bl	800763c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	699a      	ldr	r2, [r3, #24]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f042 0208 	orr.w	r2, r2, #8
 8007242:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	699a      	ldr	r2, [r3, #24]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f022 0204 	bic.w	r2, r2, #4
 8007252:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	6999      	ldr	r1, [r3, #24]
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	691a      	ldr	r2, [r3, #16]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	430a      	orrs	r2, r1
 8007264:	619a      	str	r2, [r3, #24]
      break;
 8007266:	e064      	b.n	8007332 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	68b9      	ldr	r1, [r7, #8]
 800726e:	4618      	mov	r0, r3
 8007270:	f000 fa4a 	bl	8007708 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	699a      	ldr	r2, [r3, #24]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007282:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	699a      	ldr	r2, [r3, #24]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007292:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	6999      	ldr	r1, [r3, #24]
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	691b      	ldr	r3, [r3, #16]
 800729e:	021a      	lsls	r2, r3, #8
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	430a      	orrs	r2, r1
 80072a6:	619a      	str	r2, [r3, #24]
      break;
 80072a8:	e043      	b.n	8007332 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	68b9      	ldr	r1, [r7, #8]
 80072b0:	4618      	mov	r0, r3
 80072b2:	f000 fa95 	bl	80077e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	69da      	ldr	r2, [r3, #28]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f042 0208 	orr.w	r2, r2, #8
 80072c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	69da      	ldr	r2, [r3, #28]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f022 0204 	bic.w	r2, r2, #4
 80072d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	69d9      	ldr	r1, [r3, #28]
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	691a      	ldr	r2, [r3, #16]
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	430a      	orrs	r2, r1
 80072e6:	61da      	str	r2, [r3, #28]
      break;
 80072e8:	e023      	b.n	8007332 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	68b9      	ldr	r1, [r7, #8]
 80072f0:	4618      	mov	r0, r3
 80072f2:	f000 fadf 	bl	80078b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	69da      	ldr	r2, [r3, #28]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007304:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	69da      	ldr	r2, [r3, #28]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007314:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	69d9      	ldr	r1, [r3, #28]
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	021a      	lsls	r2, r3, #8
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	430a      	orrs	r2, r1
 8007328:	61da      	str	r2, [r3, #28]
      break;
 800732a:	e002      	b.n	8007332 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800732c:	2301      	movs	r3, #1
 800732e:	75fb      	strb	r3, [r7, #23]
      break;
 8007330:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2200      	movs	r2, #0
 8007336:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800733a:	7dfb      	ldrb	r3, [r7, #23]
}
 800733c:	4618      	mov	r0, r3
 800733e:	3718      	adds	r7, #24
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800734e:	2300      	movs	r3, #0
 8007350:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007358:	2b01      	cmp	r3, #1
 800735a:	d101      	bne.n	8007360 <HAL_TIM_ConfigClockSource+0x1c>
 800735c:	2302      	movs	r3, #2
 800735e:	e0b4      	b.n	80074ca <HAL_TIM_ConfigClockSource+0x186>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2201      	movs	r2, #1
 8007364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2202      	movs	r2, #2
 800736c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800737e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007386:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	68ba      	ldr	r2, [r7, #8]
 800738e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007398:	d03e      	beq.n	8007418 <HAL_TIM_ConfigClockSource+0xd4>
 800739a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800739e:	f200 8087 	bhi.w	80074b0 <HAL_TIM_ConfigClockSource+0x16c>
 80073a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073a6:	f000 8086 	beq.w	80074b6 <HAL_TIM_ConfigClockSource+0x172>
 80073aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073ae:	d87f      	bhi.n	80074b0 <HAL_TIM_ConfigClockSource+0x16c>
 80073b0:	2b70      	cmp	r3, #112	@ 0x70
 80073b2:	d01a      	beq.n	80073ea <HAL_TIM_ConfigClockSource+0xa6>
 80073b4:	2b70      	cmp	r3, #112	@ 0x70
 80073b6:	d87b      	bhi.n	80074b0 <HAL_TIM_ConfigClockSource+0x16c>
 80073b8:	2b60      	cmp	r3, #96	@ 0x60
 80073ba:	d050      	beq.n	800745e <HAL_TIM_ConfigClockSource+0x11a>
 80073bc:	2b60      	cmp	r3, #96	@ 0x60
 80073be:	d877      	bhi.n	80074b0 <HAL_TIM_ConfigClockSource+0x16c>
 80073c0:	2b50      	cmp	r3, #80	@ 0x50
 80073c2:	d03c      	beq.n	800743e <HAL_TIM_ConfigClockSource+0xfa>
 80073c4:	2b50      	cmp	r3, #80	@ 0x50
 80073c6:	d873      	bhi.n	80074b0 <HAL_TIM_ConfigClockSource+0x16c>
 80073c8:	2b40      	cmp	r3, #64	@ 0x40
 80073ca:	d058      	beq.n	800747e <HAL_TIM_ConfigClockSource+0x13a>
 80073cc:	2b40      	cmp	r3, #64	@ 0x40
 80073ce:	d86f      	bhi.n	80074b0 <HAL_TIM_ConfigClockSource+0x16c>
 80073d0:	2b30      	cmp	r3, #48	@ 0x30
 80073d2:	d064      	beq.n	800749e <HAL_TIM_ConfigClockSource+0x15a>
 80073d4:	2b30      	cmp	r3, #48	@ 0x30
 80073d6:	d86b      	bhi.n	80074b0 <HAL_TIM_ConfigClockSource+0x16c>
 80073d8:	2b20      	cmp	r3, #32
 80073da:	d060      	beq.n	800749e <HAL_TIM_ConfigClockSource+0x15a>
 80073dc:	2b20      	cmp	r3, #32
 80073de:	d867      	bhi.n	80074b0 <HAL_TIM_ConfigClockSource+0x16c>
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d05c      	beq.n	800749e <HAL_TIM_ConfigClockSource+0x15a>
 80073e4:	2b10      	cmp	r3, #16
 80073e6:	d05a      	beq.n	800749e <HAL_TIM_ConfigClockSource+0x15a>
 80073e8:	e062      	b.n	80074b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80073fa:	f000 fb25 	bl	8007a48 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800740c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	68ba      	ldr	r2, [r7, #8]
 8007414:	609a      	str	r2, [r3, #8]
      break;
 8007416:	e04f      	b.n	80074b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007428:	f000 fb0e 	bl	8007a48 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	689a      	ldr	r2, [r3, #8]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800743a:	609a      	str	r2, [r3, #8]
      break;
 800743c:	e03c      	b.n	80074b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800744a:	461a      	mov	r2, r3
 800744c:	f000 fa82 	bl	8007954 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	2150      	movs	r1, #80	@ 0x50
 8007456:	4618      	mov	r0, r3
 8007458:	f000 fadb 	bl	8007a12 <TIM_ITRx_SetConfig>
      break;
 800745c:	e02c      	b.n	80074b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800746a:	461a      	mov	r2, r3
 800746c:	f000 faa1 	bl	80079b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2160      	movs	r1, #96	@ 0x60
 8007476:	4618      	mov	r0, r3
 8007478:	f000 facb 	bl	8007a12 <TIM_ITRx_SetConfig>
      break;
 800747c:	e01c      	b.n	80074b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800748a:	461a      	mov	r2, r3
 800748c:	f000 fa62 	bl	8007954 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	2140      	movs	r1, #64	@ 0x40
 8007496:	4618      	mov	r0, r3
 8007498:	f000 fabb 	bl	8007a12 <TIM_ITRx_SetConfig>
      break;
 800749c:	e00c      	b.n	80074b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4619      	mov	r1, r3
 80074a8:	4610      	mov	r0, r2
 80074aa:	f000 fab2 	bl	8007a12 <TIM_ITRx_SetConfig>
      break;
 80074ae:	e003      	b.n	80074b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	73fb      	strb	r3, [r7, #15]
      break;
 80074b4:	e000      	b.n	80074b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80074b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80074c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3710      	adds	r7, #16
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074d2:	b480      	push	{r7}
 80074d4:	b083      	sub	sp, #12
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80074da:	bf00      	nop
 80074dc:	370c      	adds	r7, #12
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr

080074e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80074e6:	b480      	push	{r7}
 80074e8:	b083      	sub	sp, #12
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80074ee:	bf00      	nop
 80074f0:	370c      	adds	r7, #12
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr

080074fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80074fa:	b480      	push	{r7}
 80074fc:	b083      	sub	sp, #12
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007502:	bf00      	nop
 8007504:	370c      	adds	r7, #12
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr

0800750e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800750e:	b480      	push	{r7}
 8007510:	b083      	sub	sp, #12
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007516:	bf00      	nop
 8007518:	370c      	adds	r7, #12
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr
	...

08007524 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007524:	b480      	push	{r7}
 8007526:	b085      	sub	sp, #20
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	4a3a      	ldr	r2, [pc, #232]	@ (8007620 <TIM_Base_SetConfig+0xfc>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d00f      	beq.n	800755c <TIM_Base_SetConfig+0x38>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007542:	d00b      	beq.n	800755c <TIM_Base_SetConfig+0x38>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	4a37      	ldr	r2, [pc, #220]	@ (8007624 <TIM_Base_SetConfig+0x100>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d007      	beq.n	800755c <TIM_Base_SetConfig+0x38>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	4a36      	ldr	r2, [pc, #216]	@ (8007628 <TIM_Base_SetConfig+0x104>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d003      	beq.n	800755c <TIM_Base_SetConfig+0x38>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	4a35      	ldr	r2, [pc, #212]	@ (800762c <TIM_Base_SetConfig+0x108>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d108      	bne.n	800756e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007562:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	68fa      	ldr	r2, [r7, #12]
 800756a:	4313      	orrs	r3, r2
 800756c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4a2b      	ldr	r2, [pc, #172]	@ (8007620 <TIM_Base_SetConfig+0xfc>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d01b      	beq.n	80075ae <TIM_Base_SetConfig+0x8a>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800757c:	d017      	beq.n	80075ae <TIM_Base_SetConfig+0x8a>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4a28      	ldr	r2, [pc, #160]	@ (8007624 <TIM_Base_SetConfig+0x100>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d013      	beq.n	80075ae <TIM_Base_SetConfig+0x8a>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4a27      	ldr	r2, [pc, #156]	@ (8007628 <TIM_Base_SetConfig+0x104>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d00f      	beq.n	80075ae <TIM_Base_SetConfig+0x8a>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4a26      	ldr	r2, [pc, #152]	@ (800762c <TIM_Base_SetConfig+0x108>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d00b      	beq.n	80075ae <TIM_Base_SetConfig+0x8a>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4a25      	ldr	r2, [pc, #148]	@ (8007630 <TIM_Base_SetConfig+0x10c>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d007      	beq.n	80075ae <TIM_Base_SetConfig+0x8a>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	4a24      	ldr	r2, [pc, #144]	@ (8007634 <TIM_Base_SetConfig+0x110>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d003      	beq.n	80075ae <TIM_Base_SetConfig+0x8a>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4a23      	ldr	r2, [pc, #140]	@ (8007638 <TIM_Base_SetConfig+0x114>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d108      	bne.n	80075c0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80075b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	68fa      	ldr	r2, [r7, #12]
 80075bc:	4313      	orrs	r3, r2
 80075be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	695b      	ldr	r3, [r3, #20]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	68fa      	ldr	r2, [r7, #12]
 80075d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	689a      	ldr	r2, [r3, #8]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	4a0e      	ldr	r2, [pc, #56]	@ (8007620 <TIM_Base_SetConfig+0xfc>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d103      	bne.n	80075f4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	691a      	ldr	r2, [r3, #16]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2201      	movs	r2, #1
 80075f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	691b      	ldr	r3, [r3, #16]
 80075fe:	f003 0301 	and.w	r3, r3, #1
 8007602:	2b01      	cmp	r3, #1
 8007604:	d105      	bne.n	8007612 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	691b      	ldr	r3, [r3, #16]
 800760a:	f023 0201 	bic.w	r2, r3, #1
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	611a      	str	r2, [r3, #16]
  }
}
 8007612:	bf00      	nop
 8007614:	3714      	adds	r7, #20
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr
 800761e:	bf00      	nop
 8007620:	40010000 	.word	0x40010000
 8007624:	40000400 	.word	0x40000400
 8007628:	40000800 	.word	0x40000800
 800762c:	40000c00 	.word	0x40000c00
 8007630:	40014000 	.word	0x40014000
 8007634:	40014400 	.word	0x40014400
 8007638:	40014800 	.word	0x40014800

0800763c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800763c:	b480      	push	{r7}
 800763e:	b087      	sub	sp, #28
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6a1b      	ldr	r3, [r3, #32]
 800764a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6a1b      	ldr	r3, [r3, #32]
 8007650:	f023 0201 	bic.w	r2, r3, #1
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	699b      	ldr	r3, [r3, #24]
 8007662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800766a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f023 0303 	bic.w	r3, r3, #3
 8007672:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	68fa      	ldr	r2, [r7, #12]
 800767a:	4313      	orrs	r3, r2
 800767c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	f023 0302 	bic.w	r3, r3, #2
 8007684:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	697a      	ldr	r2, [r7, #20]
 800768c:	4313      	orrs	r3, r2
 800768e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	4a1c      	ldr	r2, [pc, #112]	@ (8007704 <TIM_OC1_SetConfig+0xc8>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d10c      	bne.n	80076b2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	f023 0308 	bic.w	r3, r3, #8
 800769e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	697a      	ldr	r2, [r7, #20]
 80076a6:	4313      	orrs	r3, r2
 80076a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	f023 0304 	bic.w	r3, r3, #4
 80076b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	4a13      	ldr	r2, [pc, #76]	@ (8007704 <TIM_OC1_SetConfig+0xc8>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d111      	bne.n	80076de <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80076c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80076c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	695b      	ldr	r3, [r3, #20]
 80076ce:	693a      	ldr	r2, [r7, #16]
 80076d0:	4313      	orrs	r3, r2
 80076d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	699b      	ldr	r3, [r3, #24]
 80076d8:	693a      	ldr	r2, [r7, #16]
 80076da:	4313      	orrs	r3, r2
 80076dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	693a      	ldr	r2, [r7, #16]
 80076e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	68fa      	ldr	r2, [r7, #12]
 80076e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	685a      	ldr	r2, [r3, #4]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	697a      	ldr	r2, [r7, #20]
 80076f6:	621a      	str	r2, [r3, #32]
}
 80076f8:	bf00      	nop
 80076fa:	371c      	adds	r7, #28
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr
 8007704:	40010000 	.word	0x40010000

08007708 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007708:	b480      	push	{r7}
 800770a:	b087      	sub	sp, #28
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6a1b      	ldr	r3, [r3, #32]
 8007716:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6a1b      	ldr	r3, [r3, #32]
 800771c:	f023 0210 	bic.w	r2, r3, #16
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	699b      	ldr	r3, [r3, #24]
 800772e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800773e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	021b      	lsls	r3, r3, #8
 8007746:	68fa      	ldr	r2, [r7, #12]
 8007748:	4313      	orrs	r3, r2
 800774a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	f023 0320 	bic.w	r3, r3, #32
 8007752:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	011b      	lsls	r3, r3, #4
 800775a:	697a      	ldr	r2, [r7, #20]
 800775c:	4313      	orrs	r3, r2
 800775e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	4a1e      	ldr	r2, [pc, #120]	@ (80077dc <TIM_OC2_SetConfig+0xd4>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d10d      	bne.n	8007784 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800776e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	011b      	lsls	r3, r3, #4
 8007776:	697a      	ldr	r2, [r7, #20]
 8007778:	4313      	orrs	r3, r2
 800777a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007782:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	4a15      	ldr	r2, [pc, #84]	@ (80077dc <TIM_OC2_SetConfig+0xd4>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d113      	bne.n	80077b4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007792:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800779a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	695b      	ldr	r3, [r3, #20]
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	693a      	ldr	r2, [r7, #16]
 80077a4:	4313      	orrs	r3, r2
 80077a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	699b      	ldr	r3, [r3, #24]
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	693a      	ldr	r2, [r7, #16]
 80077b0:	4313      	orrs	r3, r2
 80077b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	693a      	ldr	r2, [r7, #16]
 80077b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	68fa      	ldr	r2, [r7, #12]
 80077be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	685a      	ldr	r2, [r3, #4]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	697a      	ldr	r2, [r7, #20]
 80077cc:	621a      	str	r2, [r3, #32]
}
 80077ce:	bf00      	nop
 80077d0:	371c      	adds	r7, #28
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr
 80077da:	bf00      	nop
 80077dc:	40010000 	.word	0x40010000

080077e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b087      	sub	sp, #28
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6a1b      	ldr	r3, [r3, #32]
 80077ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6a1b      	ldr	r3, [r3, #32]
 80077f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	69db      	ldr	r3, [r3, #28]
 8007806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800780e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f023 0303 	bic.w	r3, r3, #3
 8007816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	68fa      	ldr	r2, [r7, #12]
 800781e:	4313      	orrs	r3, r2
 8007820:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007828:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	021b      	lsls	r3, r3, #8
 8007830:	697a      	ldr	r2, [r7, #20]
 8007832:	4313      	orrs	r3, r2
 8007834:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	4a1d      	ldr	r2, [pc, #116]	@ (80078b0 <TIM_OC3_SetConfig+0xd0>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d10d      	bne.n	800785a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007844:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	021b      	lsls	r3, r3, #8
 800784c:	697a      	ldr	r2, [r7, #20]
 800784e:	4313      	orrs	r3, r2
 8007850:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007858:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4a14      	ldr	r2, [pc, #80]	@ (80078b0 <TIM_OC3_SetConfig+0xd0>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d113      	bne.n	800788a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007868:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007870:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	695b      	ldr	r3, [r3, #20]
 8007876:	011b      	lsls	r3, r3, #4
 8007878:	693a      	ldr	r2, [r7, #16]
 800787a:	4313      	orrs	r3, r2
 800787c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	699b      	ldr	r3, [r3, #24]
 8007882:	011b      	lsls	r3, r3, #4
 8007884:	693a      	ldr	r2, [r7, #16]
 8007886:	4313      	orrs	r3, r2
 8007888:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	693a      	ldr	r2, [r7, #16]
 800788e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	68fa      	ldr	r2, [r7, #12]
 8007894:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	685a      	ldr	r2, [r3, #4]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	697a      	ldr	r2, [r7, #20]
 80078a2:	621a      	str	r2, [r3, #32]
}
 80078a4:	bf00      	nop
 80078a6:	371c      	adds	r7, #28
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr
 80078b0:	40010000 	.word	0x40010000

080078b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b087      	sub	sp, #28
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6a1b      	ldr	r3, [r3, #32]
 80078c2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6a1b      	ldr	r3, [r3, #32]
 80078c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	69db      	ldr	r3, [r3, #28]
 80078da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	021b      	lsls	r3, r3, #8
 80078f2:	68fa      	ldr	r2, [r7, #12]
 80078f4:	4313      	orrs	r3, r2
 80078f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80078fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	031b      	lsls	r3, r3, #12
 8007906:	693a      	ldr	r2, [r7, #16]
 8007908:	4313      	orrs	r3, r2
 800790a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	4a10      	ldr	r2, [pc, #64]	@ (8007950 <TIM_OC4_SetConfig+0x9c>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d109      	bne.n	8007928 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800791a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	695b      	ldr	r3, [r3, #20]
 8007920:	019b      	lsls	r3, r3, #6
 8007922:	697a      	ldr	r2, [r7, #20]
 8007924:	4313      	orrs	r3, r2
 8007926:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	697a      	ldr	r2, [r7, #20]
 800792c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	68fa      	ldr	r2, [r7, #12]
 8007932:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	685a      	ldr	r2, [r3, #4]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	693a      	ldr	r2, [r7, #16]
 8007940:	621a      	str	r2, [r3, #32]
}
 8007942:	bf00      	nop
 8007944:	371c      	adds	r7, #28
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop
 8007950:	40010000 	.word	0x40010000

08007954 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007954:	b480      	push	{r7}
 8007956:	b087      	sub	sp, #28
 8007958:	af00      	add	r7, sp, #0
 800795a:	60f8      	str	r0, [r7, #12]
 800795c:	60b9      	str	r1, [r7, #8]
 800795e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	6a1b      	ldr	r3, [r3, #32]
 8007964:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6a1b      	ldr	r3, [r3, #32]
 800796a:	f023 0201 	bic.w	r2, r3, #1
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	699b      	ldr	r3, [r3, #24]
 8007976:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800797e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	011b      	lsls	r3, r3, #4
 8007984:	693a      	ldr	r2, [r7, #16]
 8007986:	4313      	orrs	r3, r2
 8007988:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	f023 030a 	bic.w	r3, r3, #10
 8007990:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007992:	697a      	ldr	r2, [r7, #20]
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	4313      	orrs	r3, r2
 8007998:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	693a      	ldr	r2, [r7, #16]
 800799e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	697a      	ldr	r2, [r7, #20]
 80079a4:	621a      	str	r2, [r3, #32]
}
 80079a6:	bf00      	nop
 80079a8:	371c      	adds	r7, #28
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr

080079b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079b2:	b480      	push	{r7}
 80079b4:	b087      	sub	sp, #28
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	60f8      	str	r0, [r7, #12]
 80079ba:	60b9      	str	r1, [r7, #8]
 80079bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	6a1b      	ldr	r3, [r3, #32]
 80079c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6a1b      	ldr	r3, [r3, #32]
 80079c8:	f023 0210 	bic.w	r2, r3, #16
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	699b      	ldr	r3, [r3, #24]
 80079d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80079dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	031b      	lsls	r3, r3, #12
 80079e2:	693a      	ldr	r2, [r7, #16]
 80079e4:	4313      	orrs	r3, r2
 80079e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80079ee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	011b      	lsls	r3, r3, #4
 80079f4:	697a      	ldr	r2, [r7, #20]
 80079f6:	4313      	orrs	r3, r2
 80079f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	693a      	ldr	r2, [r7, #16]
 80079fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	697a      	ldr	r2, [r7, #20]
 8007a04:	621a      	str	r2, [r3, #32]
}
 8007a06:	bf00      	nop
 8007a08:	371c      	adds	r7, #28
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr

08007a12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a12:	b480      	push	{r7}
 8007a14:	b085      	sub	sp, #20
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
 8007a1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	689b      	ldr	r3, [r3, #8]
 8007a20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a2a:	683a      	ldr	r2, [r7, #0]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	f043 0307 	orr.w	r3, r3, #7
 8007a34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	68fa      	ldr	r2, [r7, #12]
 8007a3a:	609a      	str	r2, [r3, #8]
}
 8007a3c:	bf00      	nop
 8007a3e:	3714      	adds	r7, #20
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr

08007a48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b087      	sub	sp, #28
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	60f8      	str	r0, [r7, #12]
 8007a50:	60b9      	str	r1, [r7, #8]
 8007a52:	607a      	str	r2, [r7, #4]
 8007a54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007a62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	021a      	lsls	r2, r3, #8
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	431a      	orrs	r2, r3
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	697a      	ldr	r2, [r7, #20]
 8007a72:	4313      	orrs	r3, r2
 8007a74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	697a      	ldr	r2, [r7, #20]
 8007a7a:	609a      	str	r2, [r3, #8]
}
 8007a7c:	bf00      	nop
 8007a7e:	371c      	adds	r7, #28
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b087      	sub	sp, #28
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	60b9      	str	r1, [r7, #8]
 8007a92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	f003 031f 	and.w	r3, r3, #31
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8007aa0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	6a1a      	ldr	r2, [r3, #32]
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	43db      	mvns	r3, r3
 8007aaa:	401a      	ands	r2, r3
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	6a1a      	ldr	r2, [r3, #32]
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	f003 031f 	and.w	r3, r3, #31
 8007aba:	6879      	ldr	r1, [r7, #4]
 8007abc:	fa01 f303 	lsl.w	r3, r1, r3
 8007ac0:	431a      	orrs	r2, r3
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	621a      	str	r2, [r3, #32]
}
 8007ac6:	bf00      	nop
 8007ac8:	371c      	adds	r7, #28
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr
	...

08007ad4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b085      	sub	sp, #20
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d101      	bne.n	8007aec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ae8:	2302      	movs	r3, #2
 8007aea:	e050      	b.n	8007b8e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2202      	movs	r2, #2
 8007af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	68fa      	ldr	r2, [r7, #12]
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	68fa      	ldr	r2, [r7, #12]
 8007b24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a1c      	ldr	r2, [pc, #112]	@ (8007b9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d018      	beq.n	8007b62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b38:	d013      	beq.n	8007b62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a18      	ldr	r2, [pc, #96]	@ (8007ba0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d00e      	beq.n	8007b62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a16      	ldr	r2, [pc, #88]	@ (8007ba4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d009      	beq.n	8007b62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a15      	ldr	r2, [pc, #84]	@ (8007ba8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d004      	beq.n	8007b62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a13      	ldr	r2, [pc, #76]	@ (8007bac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d10c      	bne.n	8007b7c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	68ba      	ldr	r2, [r7, #8]
 8007b70:	4313      	orrs	r3, r2
 8007b72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	68ba      	ldr	r2, [r7, #8]
 8007b7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007b8c:	2300      	movs	r3, #0
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3714      	adds	r7, #20
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr
 8007b9a:	bf00      	nop
 8007b9c:	40010000 	.word	0x40010000
 8007ba0:	40000400 	.word	0x40000400
 8007ba4:	40000800 	.word	0x40000800
 8007ba8:	40000c00 	.word	0x40000c00
 8007bac:	40014000 	.word	0x40014000

08007bb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007bb8:	bf00      	nop
 8007bba:	370c      	adds	r7, #12
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007bcc:	bf00      	nop
 8007bce:	370c      	adds	r7, #12
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr

08007bd8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007bd8:	b084      	sub	sp, #16
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	b084      	sub	sp, #16
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
 8007be2:	f107 001c 	add.w	r0, r7, #28
 8007be6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007bea:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d123      	bne.n	8007c3a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bf6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007c06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	68db      	ldr	r3, [r3, #12]
 8007c12:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007c1a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d105      	bne.n	8007c2e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f001 fae8 	bl	8009204 <USB_CoreReset>
 8007c34:	4603      	mov	r3, r0
 8007c36:	73fb      	strb	r3, [r7, #15]
 8007c38:	e01b      	b.n	8007c72 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	68db      	ldr	r3, [r3, #12]
 8007c3e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f001 fadc 	bl	8009204 <USB_CoreReset>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007c50:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d106      	bne.n	8007c66 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c5c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	639a      	str	r2, [r3, #56]	@ 0x38
 8007c64:	e005      	b.n	8007c72 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c6a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007c72:	7fbb      	ldrb	r3, [r7, #30]
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d10b      	bne.n	8007c90 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	f043 0206 	orr.w	r2, r3, #6
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	f043 0220 	orr.w	r2, r3, #32
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3710      	adds	r7, #16
 8007c96:	46bd      	mov	sp, r7
 8007c98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c9c:	b004      	add	sp, #16
 8007c9e:	4770      	bx	lr

08007ca0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b087      	sub	sp, #28
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	60f8      	str	r0, [r7, #12]
 8007ca8:	60b9      	str	r1, [r7, #8]
 8007caa:	4613      	mov	r3, r2
 8007cac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007cae:	79fb      	ldrb	r3, [r7, #7]
 8007cb0:	2b02      	cmp	r3, #2
 8007cb2:	d165      	bne.n	8007d80 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	4a41      	ldr	r2, [pc, #260]	@ (8007dbc <USB_SetTurnaroundTime+0x11c>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d906      	bls.n	8007cca <USB_SetTurnaroundTime+0x2a>
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	4a40      	ldr	r2, [pc, #256]	@ (8007dc0 <USB_SetTurnaroundTime+0x120>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d202      	bcs.n	8007cca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007cc4:	230f      	movs	r3, #15
 8007cc6:	617b      	str	r3, [r7, #20]
 8007cc8:	e062      	b.n	8007d90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	4a3c      	ldr	r2, [pc, #240]	@ (8007dc0 <USB_SetTurnaroundTime+0x120>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d306      	bcc.n	8007ce0 <USB_SetTurnaroundTime+0x40>
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	4a3b      	ldr	r2, [pc, #236]	@ (8007dc4 <USB_SetTurnaroundTime+0x124>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d202      	bcs.n	8007ce0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007cda:	230e      	movs	r3, #14
 8007cdc:	617b      	str	r3, [r7, #20]
 8007cde:	e057      	b.n	8007d90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	4a38      	ldr	r2, [pc, #224]	@ (8007dc4 <USB_SetTurnaroundTime+0x124>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d306      	bcc.n	8007cf6 <USB_SetTurnaroundTime+0x56>
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	4a37      	ldr	r2, [pc, #220]	@ (8007dc8 <USB_SetTurnaroundTime+0x128>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d202      	bcs.n	8007cf6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007cf0:	230d      	movs	r3, #13
 8007cf2:	617b      	str	r3, [r7, #20]
 8007cf4:	e04c      	b.n	8007d90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	4a33      	ldr	r2, [pc, #204]	@ (8007dc8 <USB_SetTurnaroundTime+0x128>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d306      	bcc.n	8007d0c <USB_SetTurnaroundTime+0x6c>
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	4a32      	ldr	r2, [pc, #200]	@ (8007dcc <USB_SetTurnaroundTime+0x12c>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d802      	bhi.n	8007d0c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007d06:	230c      	movs	r3, #12
 8007d08:	617b      	str	r3, [r7, #20]
 8007d0a:	e041      	b.n	8007d90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	4a2f      	ldr	r2, [pc, #188]	@ (8007dcc <USB_SetTurnaroundTime+0x12c>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d906      	bls.n	8007d22 <USB_SetTurnaroundTime+0x82>
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	4a2e      	ldr	r2, [pc, #184]	@ (8007dd0 <USB_SetTurnaroundTime+0x130>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d802      	bhi.n	8007d22 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007d1c:	230b      	movs	r3, #11
 8007d1e:	617b      	str	r3, [r7, #20]
 8007d20:	e036      	b.n	8007d90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	4a2a      	ldr	r2, [pc, #168]	@ (8007dd0 <USB_SetTurnaroundTime+0x130>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d906      	bls.n	8007d38 <USB_SetTurnaroundTime+0x98>
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	4a29      	ldr	r2, [pc, #164]	@ (8007dd4 <USB_SetTurnaroundTime+0x134>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d802      	bhi.n	8007d38 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007d32:	230a      	movs	r3, #10
 8007d34:	617b      	str	r3, [r7, #20]
 8007d36:	e02b      	b.n	8007d90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	4a26      	ldr	r2, [pc, #152]	@ (8007dd4 <USB_SetTurnaroundTime+0x134>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d906      	bls.n	8007d4e <USB_SetTurnaroundTime+0xae>
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	4a25      	ldr	r2, [pc, #148]	@ (8007dd8 <USB_SetTurnaroundTime+0x138>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d202      	bcs.n	8007d4e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007d48:	2309      	movs	r3, #9
 8007d4a:	617b      	str	r3, [r7, #20]
 8007d4c:	e020      	b.n	8007d90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	4a21      	ldr	r2, [pc, #132]	@ (8007dd8 <USB_SetTurnaroundTime+0x138>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d306      	bcc.n	8007d64 <USB_SetTurnaroundTime+0xc4>
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	4a20      	ldr	r2, [pc, #128]	@ (8007ddc <USB_SetTurnaroundTime+0x13c>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d802      	bhi.n	8007d64 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007d5e:	2308      	movs	r3, #8
 8007d60:	617b      	str	r3, [r7, #20]
 8007d62:	e015      	b.n	8007d90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	4a1d      	ldr	r2, [pc, #116]	@ (8007ddc <USB_SetTurnaroundTime+0x13c>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d906      	bls.n	8007d7a <USB_SetTurnaroundTime+0xda>
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	4a1c      	ldr	r2, [pc, #112]	@ (8007de0 <USB_SetTurnaroundTime+0x140>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d202      	bcs.n	8007d7a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007d74:	2307      	movs	r3, #7
 8007d76:	617b      	str	r3, [r7, #20]
 8007d78:	e00a      	b.n	8007d90 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007d7a:	2306      	movs	r3, #6
 8007d7c:	617b      	str	r3, [r7, #20]
 8007d7e:	e007      	b.n	8007d90 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007d80:	79fb      	ldrb	r3, [r7, #7]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d102      	bne.n	8007d8c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007d86:	2309      	movs	r3, #9
 8007d88:	617b      	str	r3, [r7, #20]
 8007d8a:	e001      	b.n	8007d90 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007d8c:	2309      	movs	r3, #9
 8007d8e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	68db      	ldr	r3, [r3, #12]
 8007d94:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	68da      	ldr	r2, [r3, #12]
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	029b      	lsls	r3, r3, #10
 8007da4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007da8:	431a      	orrs	r2, r3
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007dae:	2300      	movs	r3, #0
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	371c      	adds	r7, #28
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr
 8007dbc:	00d8acbf 	.word	0x00d8acbf
 8007dc0:	00e4e1c0 	.word	0x00e4e1c0
 8007dc4:	00f42400 	.word	0x00f42400
 8007dc8:	01067380 	.word	0x01067380
 8007dcc:	011a499f 	.word	0x011a499f
 8007dd0:	01312cff 	.word	0x01312cff
 8007dd4:	014ca43f 	.word	0x014ca43f
 8007dd8:	016e3600 	.word	0x016e3600
 8007ddc:	01a6ab1f 	.word	0x01a6ab1f
 8007de0:	01e84800 	.word	0x01e84800

08007de4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b083      	sub	sp, #12
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	f043 0201 	orr.w	r2, r3, #1
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	370c      	adds	r7, #12
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr

08007e06 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e06:	b480      	push	{r7}
 8007e08:	b083      	sub	sp, #12
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	f023 0201 	bic.w	r2, r3, #1
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007e1a:	2300      	movs	r3, #0
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	370c      	adds	r7, #12
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b084      	sub	sp, #16
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	460b      	mov	r3, r1
 8007e32:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007e34:	2300      	movs	r3, #0
 8007e36:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	68db      	ldr	r3, [r3, #12]
 8007e3c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007e44:	78fb      	ldrb	r3, [r7, #3]
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	d115      	bne.n	8007e76 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	68db      	ldr	r3, [r3, #12]
 8007e4e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007e56:	200a      	movs	r0, #10
 8007e58:	f7fb f9b0 	bl	80031bc <HAL_Delay>
      ms += 10U;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	330a      	adds	r3, #10
 8007e60:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f001 f93f 	bl	80090e6 <USB_GetMode>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d01e      	beq.n	8007eac <USB_SetCurrentMode+0x84>
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2bc7      	cmp	r3, #199	@ 0xc7
 8007e72:	d9f0      	bls.n	8007e56 <USB_SetCurrentMode+0x2e>
 8007e74:	e01a      	b.n	8007eac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007e76:	78fb      	ldrb	r3, [r7, #3]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d115      	bne.n	8007ea8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	68db      	ldr	r3, [r3, #12]
 8007e80:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007e88:	200a      	movs	r0, #10
 8007e8a:	f7fb f997 	bl	80031bc <HAL_Delay>
      ms += 10U;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	330a      	adds	r3, #10
 8007e92:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f001 f926 	bl	80090e6 <USB_GetMode>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d005      	beq.n	8007eac <USB_SetCurrentMode+0x84>
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2bc7      	cmp	r3, #199	@ 0xc7
 8007ea4:	d9f0      	bls.n	8007e88 <USB_SetCurrentMode+0x60>
 8007ea6:	e001      	b.n	8007eac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	e005      	b.n	8007eb8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2bc8      	cmp	r3, #200	@ 0xc8
 8007eb0:	d101      	bne.n	8007eb6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	e000      	b.n	8007eb8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007eb6:	2300      	movs	r3, #0
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3710      	adds	r7, #16
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ec0:	b084      	sub	sp, #16
 8007ec2:	b580      	push	{r7, lr}
 8007ec4:	b086      	sub	sp, #24
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	6078      	str	r0, [r7, #4]
 8007eca:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007ece:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007eda:	2300      	movs	r3, #0
 8007edc:	613b      	str	r3, [r7, #16]
 8007ede:	e009      	b.n	8007ef4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	3340      	adds	r3, #64	@ 0x40
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	4413      	add	r3, r2
 8007eea:	2200      	movs	r2, #0
 8007eec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	3301      	adds	r3, #1
 8007ef2:	613b      	str	r3, [r7, #16]
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	2b0e      	cmp	r3, #14
 8007ef8:	d9f2      	bls.n	8007ee0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007efa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d11c      	bne.n	8007f3c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	68fa      	ldr	r2, [r7, #12]
 8007f0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007f10:	f043 0302 	orr.w	r3, r3, #2
 8007f14:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f1a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f26:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f32:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	639a      	str	r2, [r3, #56]	@ 0x38
 8007f3a:	e00b      	b.n	8007f54 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f40:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f4c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007f60:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d10d      	bne.n	8007f84 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007f68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d104      	bne.n	8007f7a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007f70:	2100      	movs	r1, #0
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 f968 	bl	8008248 <USB_SetDevSpeed>
 8007f78:	e008      	b.n	8007f8c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007f7a:	2101      	movs	r1, #1
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 f963 	bl	8008248 <USB_SetDevSpeed>
 8007f82:	e003      	b.n	8007f8c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007f84:	2103      	movs	r1, #3
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 f95e 	bl	8008248 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007f8c:	2110      	movs	r1, #16
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 f8fa 	bl	8008188 <USB_FlushTxFifo>
 8007f94:	4603      	mov	r3, r0
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d001      	beq.n	8007f9e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 f924 	bl	80081ec <USB_FlushRxFifo>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d001      	beq.n	8007fae <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8007faa:	2301      	movs	r3, #1
 8007fac:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fcc:	461a      	mov	r2, r3
 8007fce:	2300      	movs	r3, #0
 8007fd0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	613b      	str	r3, [r7, #16]
 8007fd6:	e043      	b.n	8008060 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	015a      	lsls	r2, r3, #5
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	4413      	add	r3, r2
 8007fe0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007fea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007fee:	d118      	bne.n	8008022 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d10a      	bne.n	800800c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	015a      	lsls	r2, r3, #5
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008002:	461a      	mov	r2, r3
 8008004:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008008:	6013      	str	r3, [r2, #0]
 800800a:	e013      	b.n	8008034 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	015a      	lsls	r2, r3, #5
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	4413      	add	r3, r2
 8008014:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008018:	461a      	mov	r2, r3
 800801a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800801e:	6013      	str	r3, [r2, #0]
 8008020:	e008      	b.n	8008034 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	015a      	lsls	r2, r3, #5
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	4413      	add	r3, r2
 800802a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800802e:	461a      	mov	r2, r3
 8008030:	2300      	movs	r3, #0
 8008032:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	015a      	lsls	r2, r3, #5
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	4413      	add	r3, r2
 800803c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008040:	461a      	mov	r2, r3
 8008042:	2300      	movs	r3, #0
 8008044:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	015a      	lsls	r2, r3, #5
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	4413      	add	r3, r2
 800804e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008052:	461a      	mov	r2, r3
 8008054:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008058:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	3301      	adds	r3, #1
 800805e:	613b      	str	r3, [r7, #16]
 8008060:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008064:	461a      	mov	r2, r3
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	4293      	cmp	r3, r2
 800806a:	d3b5      	bcc.n	8007fd8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800806c:	2300      	movs	r3, #0
 800806e:	613b      	str	r3, [r7, #16]
 8008070:	e043      	b.n	80080fa <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	015a      	lsls	r2, r3, #5
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	4413      	add	r3, r2
 800807a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008084:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008088:	d118      	bne.n	80080bc <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d10a      	bne.n	80080a6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	015a      	lsls	r2, r3, #5
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	4413      	add	r3, r2
 8008098:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800809c:	461a      	mov	r2, r3
 800809e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80080a2:	6013      	str	r3, [r2, #0]
 80080a4:	e013      	b.n	80080ce <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	015a      	lsls	r2, r3, #5
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	4413      	add	r3, r2
 80080ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080b2:	461a      	mov	r2, r3
 80080b4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80080b8:	6013      	str	r3, [r2, #0]
 80080ba:	e008      	b.n	80080ce <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	015a      	lsls	r2, r3, #5
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	4413      	add	r3, r2
 80080c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080c8:	461a      	mov	r2, r3
 80080ca:	2300      	movs	r3, #0
 80080cc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	015a      	lsls	r2, r3, #5
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	4413      	add	r3, r2
 80080d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080da:	461a      	mov	r2, r3
 80080dc:	2300      	movs	r3, #0
 80080de:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	015a      	lsls	r2, r3, #5
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	4413      	add	r3, r2
 80080e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080ec:	461a      	mov	r2, r3
 80080ee:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80080f2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	3301      	adds	r3, #1
 80080f8:	613b      	str	r3, [r7, #16]
 80080fa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80080fe:	461a      	mov	r2, r3
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	4293      	cmp	r3, r2
 8008104:	d3b5      	bcc.n	8008072 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800810c:	691b      	ldr	r3, [r3, #16]
 800810e:	68fa      	ldr	r2, [r7, #12]
 8008110:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008114:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008118:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008126:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008128:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800812c:	2b00      	cmp	r3, #0
 800812e:	d105      	bne.n	800813c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	699b      	ldr	r3, [r3, #24]
 8008134:	f043 0210 	orr.w	r2, r3, #16
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	699a      	ldr	r2, [r3, #24]
 8008140:	4b10      	ldr	r3, [pc, #64]	@ (8008184 <USB_DevInit+0x2c4>)
 8008142:	4313      	orrs	r3, r2
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008148:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800814c:	2b00      	cmp	r3, #0
 800814e:	d005      	beq.n	800815c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	699b      	ldr	r3, [r3, #24]
 8008154:	f043 0208 	orr.w	r2, r3, #8
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800815c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008160:	2b01      	cmp	r3, #1
 8008162:	d107      	bne.n	8008174 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	699b      	ldr	r3, [r3, #24]
 8008168:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800816c:	f043 0304 	orr.w	r3, r3, #4
 8008170:	687a      	ldr	r2, [r7, #4]
 8008172:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008174:	7dfb      	ldrb	r3, [r7, #23]
}
 8008176:	4618      	mov	r0, r3
 8008178:	3718      	adds	r7, #24
 800817a:	46bd      	mov	sp, r7
 800817c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008180:	b004      	add	sp, #16
 8008182:	4770      	bx	lr
 8008184:	803c3800 	.word	0x803c3800

08008188 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008188:	b480      	push	{r7}
 800818a:	b085      	sub	sp, #20
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008192:	2300      	movs	r3, #0
 8008194:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	3301      	adds	r3, #1
 800819a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80081a2:	d901      	bls.n	80081a8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80081a4:	2303      	movs	r3, #3
 80081a6:	e01b      	b.n	80081e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	691b      	ldr	r3, [r3, #16]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	daf2      	bge.n	8008196 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80081b0:	2300      	movs	r3, #0
 80081b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	019b      	lsls	r3, r3, #6
 80081b8:	f043 0220 	orr.w	r2, r3, #32
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	3301      	adds	r3, #1
 80081c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80081cc:	d901      	bls.n	80081d2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80081ce:	2303      	movs	r3, #3
 80081d0:	e006      	b.n	80081e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	691b      	ldr	r3, [r3, #16]
 80081d6:	f003 0320 	and.w	r3, r3, #32
 80081da:	2b20      	cmp	r3, #32
 80081dc:	d0f0      	beq.n	80081c0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80081de:	2300      	movs	r3, #0
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3714      	adds	r7, #20
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr

080081ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b085      	sub	sp, #20
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80081f4:	2300      	movs	r3, #0
 80081f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	3301      	adds	r3, #1
 80081fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008204:	d901      	bls.n	800820a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008206:	2303      	movs	r3, #3
 8008208:	e018      	b.n	800823c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	691b      	ldr	r3, [r3, #16]
 800820e:	2b00      	cmp	r3, #0
 8008210:	daf2      	bge.n	80081f8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008212:	2300      	movs	r3, #0
 8008214:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2210      	movs	r2, #16
 800821a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	3301      	adds	r3, #1
 8008220:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008228:	d901      	bls.n	800822e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800822a:	2303      	movs	r3, #3
 800822c:	e006      	b.n	800823c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	691b      	ldr	r3, [r3, #16]
 8008232:	f003 0310 	and.w	r3, r3, #16
 8008236:	2b10      	cmp	r3, #16
 8008238:	d0f0      	beq.n	800821c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800823a:	2300      	movs	r3, #0
}
 800823c:	4618      	mov	r0, r3
 800823e:	3714      	adds	r7, #20
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr

08008248 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008248:	b480      	push	{r7}
 800824a:	b085      	sub	sp, #20
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	460b      	mov	r3, r1
 8008252:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800825e:	681a      	ldr	r2, [r3, #0]
 8008260:	78fb      	ldrb	r3, [r7, #3]
 8008262:	68f9      	ldr	r1, [r7, #12]
 8008264:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008268:	4313      	orrs	r3, r2
 800826a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800826c:	2300      	movs	r3, #0
}
 800826e:	4618      	mov	r0, r3
 8008270:	3714      	adds	r7, #20
 8008272:	46bd      	mov	sp, r7
 8008274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008278:	4770      	bx	lr

0800827a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800827a:	b480      	push	{r7}
 800827c:	b087      	sub	sp, #28
 800827e:	af00      	add	r7, sp, #0
 8008280:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800828c:	689b      	ldr	r3, [r3, #8]
 800828e:	f003 0306 	and.w	r3, r3, #6
 8008292:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d102      	bne.n	80082a0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800829a:	2300      	movs	r3, #0
 800829c:	75fb      	strb	r3, [r7, #23]
 800829e:	e00a      	b.n	80082b6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2b02      	cmp	r3, #2
 80082a4:	d002      	beq.n	80082ac <USB_GetDevSpeed+0x32>
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2b06      	cmp	r3, #6
 80082aa:	d102      	bne.n	80082b2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80082ac:	2302      	movs	r3, #2
 80082ae:	75fb      	strb	r3, [r7, #23]
 80082b0:	e001      	b.n	80082b6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80082b2:	230f      	movs	r3, #15
 80082b4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80082b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	371c      	adds	r7, #28
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr

080082c4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b085      	sub	sp, #20
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	781b      	ldrb	r3, [r3, #0]
 80082d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	785b      	ldrb	r3, [r3, #1]
 80082dc:	2b01      	cmp	r3, #1
 80082de:	d13a      	bne.n	8008356 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082e6:	69da      	ldr	r2, [r3, #28]
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	f003 030f 	and.w	r3, r3, #15
 80082f0:	2101      	movs	r1, #1
 80082f2:	fa01 f303 	lsl.w	r3, r1, r3
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	68f9      	ldr	r1, [r7, #12]
 80082fa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80082fe:	4313      	orrs	r3, r2
 8008300:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	015a      	lsls	r2, r3, #5
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	4413      	add	r3, r2
 800830a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008314:	2b00      	cmp	r3, #0
 8008316:	d155      	bne.n	80083c4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	015a      	lsls	r2, r3, #5
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	4413      	add	r3, r2
 8008320:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008324:	681a      	ldr	r2, [r3, #0]
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	689b      	ldr	r3, [r3, #8]
 800832a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	791b      	ldrb	r3, [r3, #4]
 8008332:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008334:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	059b      	lsls	r3, r3, #22
 800833a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800833c:	4313      	orrs	r3, r2
 800833e:	68ba      	ldr	r2, [r7, #8]
 8008340:	0151      	lsls	r1, r2, #5
 8008342:	68fa      	ldr	r2, [r7, #12]
 8008344:	440a      	add	r2, r1
 8008346:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800834a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800834e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008352:	6013      	str	r3, [r2, #0]
 8008354:	e036      	b.n	80083c4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800835c:	69da      	ldr	r2, [r3, #28]
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	f003 030f 	and.w	r3, r3, #15
 8008366:	2101      	movs	r1, #1
 8008368:	fa01 f303 	lsl.w	r3, r1, r3
 800836c:	041b      	lsls	r3, r3, #16
 800836e:	68f9      	ldr	r1, [r7, #12]
 8008370:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008374:	4313      	orrs	r3, r2
 8008376:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	015a      	lsls	r2, r3, #5
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	4413      	add	r3, r2
 8008380:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800838a:	2b00      	cmp	r3, #0
 800838c:	d11a      	bne.n	80083c4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	015a      	lsls	r2, r3, #5
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	4413      	add	r3, r2
 8008396:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	689b      	ldr	r3, [r3, #8]
 80083a0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	791b      	ldrb	r3, [r3, #4]
 80083a8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80083aa:	430b      	orrs	r3, r1
 80083ac:	4313      	orrs	r3, r2
 80083ae:	68ba      	ldr	r2, [r7, #8]
 80083b0:	0151      	lsls	r1, r2, #5
 80083b2:	68fa      	ldr	r2, [r7, #12]
 80083b4:	440a      	add	r2, r1
 80083b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80083ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80083be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083c2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80083c4:	2300      	movs	r3, #0
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3714      	adds	r7, #20
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr
	...

080083d4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b085      	sub	sp, #20
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	785b      	ldrb	r3, [r3, #1]
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d161      	bne.n	80084b4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	015a      	lsls	r2, r3, #5
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	4413      	add	r3, r2
 80083f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008402:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008406:	d11f      	bne.n	8008448 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	015a      	lsls	r2, r3, #5
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	4413      	add	r3, r2
 8008410:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	68ba      	ldr	r2, [r7, #8]
 8008418:	0151      	lsls	r1, r2, #5
 800841a:	68fa      	ldr	r2, [r7, #12]
 800841c:	440a      	add	r2, r1
 800841e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008422:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008426:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	015a      	lsls	r2, r3, #5
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	4413      	add	r3, r2
 8008430:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	68ba      	ldr	r2, [r7, #8]
 8008438:	0151      	lsls	r1, r2, #5
 800843a:	68fa      	ldr	r2, [r7, #12]
 800843c:	440a      	add	r2, r1
 800843e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008442:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008446:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800844e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	f003 030f 	and.w	r3, r3, #15
 8008458:	2101      	movs	r1, #1
 800845a:	fa01 f303 	lsl.w	r3, r1, r3
 800845e:	b29b      	uxth	r3, r3
 8008460:	43db      	mvns	r3, r3
 8008462:	68f9      	ldr	r1, [r7, #12]
 8008464:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008468:	4013      	ands	r3, r2
 800846a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008472:	69da      	ldr	r2, [r3, #28]
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	f003 030f 	and.w	r3, r3, #15
 800847c:	2101      	movs	r1, #1
 800847e:	fa01 f303 	lsl.w	r3, r1, r3
 8008482:	b29b      	uxth	r3, r3
 8008484:	43db      	mvns	r3, r3
 8008486:	68f9      	ldr	r1, [r7, #12]
 8008488:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800848c:	4013      	ands	r3, r2
 800848e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	015a      	lsls	r2, r3, #5
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	4413      	add	r3, r2
 8008498:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	0159      	lsls	r1, r3, #5
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	440b      	add	r3, r1
 80084a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084aa:	4619      	mov	r1, r3
 80084ac:	4b35      	ldr	r3, [pc, #212]	@ (8008584 <USB_DeactivateEndpoint+0x1b0>)
 80084ae:	4013      	ands	r3, r2
 80084b0:	600b      	str	r3, [r1, #0]
 80084b2:	e060      	b.n	8008576 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	015a      	lsls	r2, r3, #5
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	4413      	add	r3, r2
 80084bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80084c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80084ca:	d11f      	bne.n	800850c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	015a      	lsls	r2, r3, #5
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	4413      	add	r3, r2
 80084d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	68ba      	ldr	r2, [r7, #8]
 80084dc:	0151      	lsls	r1, r2, #5
 80084de:	68fa      	ldr	r2, [r7, #12]
 80084e0:	440a      	add	r2, r1
 80084e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80084e6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80084ea:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	015a      	lsls	r2, r3, #5
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	4413      	add	r3, r2
 80084f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	68ba      	ldr	r2, [r7, #8]
 80084fc:	0151      	lsls	r1, r2, #5
 80084fe:	68fa      	ldr	r2, [r7, #12]
 8008500:	440a      	add	r2, r1
 8008502:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008506:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800850a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008512:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	781b      	ldrb	r3, [r3, #0]
 8008518:	f003 030f 	and.w	r3, r3, #15
 800851c:	2101      	movs	r1, #1
 800851e:	fa01 f303 	lsl.w	r3, r1, r3
 8008522:	041b      	lsls	r3, r3, #16
 8008524:	43db      	mvns	r3, r3
 8008526:	68f9      	ldr	r1, [r7, #12]
 8008528:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800852c:	4013      	ands	r3, r2
 800852e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008536:	69da      	ldr	r2, [r3, #28]
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	f003 030f 	and.w	r3, r3, #15
 8008540:	2101      	movs	r1, #1
 8008542:	fa01 f303 	lsl.w	r3, r1, r3
 8008546:	041b      	lsls	r3, r3, #16
 8008548:	43db      	mvns	r3, r3
 800854a:	68f9      	ldr	r1, [r7, #12]
 800854c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008550:	4013      	ands	r3, r2
 8008552:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	015a      	lsls	r2, r3, #5
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	4413      	add	r3, r2
 800855c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	0159      	lsls	r1, r3, #5
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	440b      	add	r3, r1
 800856a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800856e:	4619      	mov	r1, r3
 8008570:	4b05      	ldr	r3, [pc, #20]	@ (8008588 <USB_DeactivateEndpoint+0x1b4>)
 8008572:	4013      	ands	r3, r2
 8008574:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008576:	2300      	movs	r3, #0
}
 8008578:	4618      	mov	r0, r3
 800857a:	3714      	adds	r7, #20
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr
 8008584:	ec337800 	.word	0xec337800
 8008588:	eff37800 	.word	0xeff37800

0800858c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b08a      	sub	sp, #40	@ 0x28
 8008590:	af02      	add	r7, sp, #8
 8008592:	60f8      	str	r0, [r7, #12]
 8008594:	60b9      	str	r1, [r7, #8]
 8008596:	4613      	mov	r3, r2
 8008598:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	785b      	ldrb	r3, [r3, #1]
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	f040 817f 	bne.w	80088ac <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	691b      	ldr	r3, [r3, #16]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d132      	bne.n	800861c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80085b6:	69bb      	ldr	r3, [r7, #24]
 80085b8:	015a      	lsls	r2, r3, #5
 80085ba:	69fb      	ldr	r3, [r7, #28]
 80085bc:	4413      	add	r3, r2
 80085be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085c2:	691b      	ldr	r3, [r3, #16]
 80085c4:	69ba      	ldr	r2, [r7, #24]
 80085c6:	0151      	lsls	r1, r2, #5
 80085c8:	69fa      	ldr	r2, [r7, #28]
 80085ca:	440a      	add	r2, r1
 80085cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80085d0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80085d4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80085d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80085da:	69bb      	ldr	r3, [r7, #24]
 80085dc:	015a      	lsls	r2, r3, #5
 80085de:	69fb      	ldr	r3, [r7, #28]
 80085e0:	4413      	add	r3, r2
 80085e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085e6:	691b      	ldr	r3, [r3, #16]
 80085e8:	69ba      	ldr	r2, [r7, #24]
 80085ea:	0151      	lsls	r1, r2, #5
 80085ec:	69fa      	ldr	r2, [r7, #28]
 80085ee:	440a      	add	r2, r1
 80085f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80085f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80085f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	015a      	lsls	r2, r3, #5
 80085fe:	69fb      	ldr	r3, [r7, #28]
 8008600:	4413      	add	r3, r2
 8008602:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008606:	691b      	ldr	r3, [r3, #16]
 8008608:	69ba      	ldr	r2, [r7, #24]
 800860a:	0151      	lsls	r1, r2, #5
 800860c:	69fa      	ldr	r2, [r7, #28]
 800860e:	440a      	add	r2, r1
 8008610:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008614:	0cdb      	lsrs	r3, r3, #19
 8008616:	04db      	lsls	r3, r3, #19
 8008618:	6113      	str	r3, [r2, #16]
 800861a:	e097      	b.n	800874c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800861c:	69bb      	ldr	r3, [r7, #24]
 800861e:	015a      	lsls	r2, r3, #5
 8008620:	69fb      	ldr	r3, [r7, #28]
 8008622:	4413      	add	r3, r2
 8008624:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008628:	691b      	ldr	r3, [r3, #16]
 800862a:	69ba      	ldr	r2, [r7, #24]
 800862c:	0151      	lsls	r1, r2, #5
 800862e:	69fa      	ldr	r2, [r7, #28]
 8008630:	440a      	add	r2, r1
 8008632:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008636:	0cdb      	lsrs	r3, r3, #19
 8008638:	04db      	lsls	r3, r3, #19
 800863a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800863c:	69bb      	ldr	r3, [r7, #24]
 800863e:	015a      	lsls	r2, r3, #5
 8008640:	69fb      	ldr	r3, [r7, #28]
 8008642:	4413      	add	r3, r2
 8008644:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008648:	691b      	ldr	r3, [r3, #16]
 800864a:	69ba      	ldr	r2, [r7, #24]
 800864c:	0151      	lsls	r1, r2, #5
 800864e:	69fa      	ldr	r2, [r7, #28]
 8008650:	440a      	add	r2, r1
 8008652:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008656:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800865a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800865e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008660:	69bb      	ldr	r3, [r7, #24]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d11a      	bne.n	800869c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	691a      	ldr	r2, [r3, #16]
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	689b      	ldr	r3, [r3, #8]
 800866e:	429a      	cmp	r2, r3
 8008670:	d903      	bls.n	800867a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	689a      	ldr	r2, [r3, #8]
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800867a:	69bb      	ldr	r3, [r7, #24]
 800867c:	015a      	lsls	r2, r3, #5
 800867e:	69fb      	ldr	r3, [r7, #28]
 8008680:	4413      	add	r3, r2
 8008682:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008686:	691b      	ldr	r3, [r3, #16]
 8008688:	69ba      	ldr	r2, [r7, #24]
 800868a:	0151      	lsls	r1, r2, #5
 800868c:	69fa      	ldr	r2, [r7, #28]
 800868e:	440a      	add	r2, r1
 8008690:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008694:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008698:	6113      	str	r3, [r2, #16]
 800869a:	e044      	b.n	8008726 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	691a      	ldr	r2, [r3, #16]
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	689b      	ldr	r3, [r3, #8]
 80086a4:	4413      	add	r3, r2
 80086a6:	1e5a      	subs	r2, r3, #1
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	689b      	ldr	r3, [r3, #8]
 80086ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80086b0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80086b2:	69bb      	ldr	r3, [r7, #24]
 80086b4:	015a      	lsls	r2, r3, #5
 80086b6:	69fb      	ldr	r3, [r7, #28]
 80086b8:	4413      	add	r3, r2
 80086ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086be:	691a      	ldr	r2, [r3, #16]
 80086c0:	8afb      	ldrh	r3, [r7, #22]
 80086c2:	04d9      	lsls	r1, r3, #19
 80086c4:	4ba4      	ldr	r3, [pc, #656]	@ (8008958 <USB_EPStartXfer+0x3cc>)
 80086c6:	400b      	ands	r3, r1
 80086c8:	69b9      	ldr	r1, [r7, #24]
 80086ca:	0148      	lsls	r0, r1, #5
 80086cc:	69f9      	ldr	r1, [r7, #28]
 80086ce:	4401      	add	r1, r0
 80086d0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80086d4:	4313      	orrs	r3, r2
 80086d6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	791b      	ldrb	r3, [r3, #4]
 80086dc:	2b01      	cmp	r3, #1
 80086de:	d122      	bne.n	8008726 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80086e0:	69bb      	ldr	r3, [r7, #24]
 80086e2:	015a      	lsls	r2, r3, #5
 80086e4:	69fb      	ldr	r3, [r7, #28]
 80086e6:	4413      	add	r3, r2
 80086e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086ec:	691b      	ldr	r3, [r3, #16]
 80086ee:	69ba      	ldr	r2, [r7, #24]
 80086f0:	0151      	lsls	r1, r2, #5
 80086f2:	69fa      	ldr	r2, [r7, #28]
 80086f4:	440a      	add	r2, r1
 80086f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80086fa:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80086fe:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8008700:	69bb      	ldr	r3, [r7, #24]
 8008702:	015a      	lsls	r2, r3, #5
 8008704:	69fb      	ldr	r3, [r7, #28]
 8008706:	4413      	add	r3, r2
 8008708:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800870c:	691a      	ldr	r2, [r3, #16]
 800870e:	8afb      	ldrh	r3, [r7, #22]
 8008710:	075b      	lsls	r3, r3, #29
 8008712:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8008716:	69b9      	ldr	r1, [r7, #24]
 8008718:	0148      	lsls	r0, r1, #5
 800871a:	69f9      	ldr	r1, [r7, #28]
 800871c:	4401      	add	r1, r0
 800871e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008722:	4313      	orrs	r3, r2
 8008724:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008726:	69bb      	ldr	r3, [r7, #24]
 8008728:	015a      	lsls	r2, r3, #5
 800872a:	69fb      	ldr	r3, [r7, #28]
 800872c:	4413      	add	r3, r2
 800872e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008732:	691a      	ldr	r2, [r3, #16]
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	691b      	ldr	r3, [r3, #16]
 8008738:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800873c:	69b9      	ldr	r1, [r7, #24]
 800873e:	0148      	lsls	r0, r1, #5
 8008740:	69f9      	ldr	r1, [r7, #28]
 8008742:	4401      	add	r1, r0
 8008744:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008748:	4313      	orrs	r3, r2
 800874a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800874c:	79fb      	ldrb	r3, [r7, #7]
 800874e:	2b01      	cmp	r3, #1
 8008750:	d14b      	bne.n	80087ea <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	69db      	ldr	r3, [r3, #28]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d009      	beq.n	800876e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800875a:	69bb      	ldr	r3, [r7, #24]
 800875c:	015a      	lsls	r2, r3, #5
 800875e:	69fb      	ldr	r3, [r7, #28]
 8008760:	4413      	add	r3, r2
 8008762:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008766:	461a      	mov	r2, r3
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	69db      	ldr	r3, [r3, #28]
 800876c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	791b      	ldrb	r3, [r3, #4]
 8008772:	2b01      	cmp	r3, #1
 8008774:	d128      	bne.n	80087c8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008776:	69fb      	ldr	r3, [r7, #28]
 8008778:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800877c:	689b      	ldr	r3, [r3, #8]
 800877e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008782:	2b00      	cmp	r3, #0
 8008784:	d110      	bne.n	80087a8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008786:	69bb      	ldr	r3, [r7, #24]
 8008788:	015a      	lsls	r2, r3, #5
 800878a:	69fb      	ldr	r3, [r7, #28]
 800878c:	4413      	add	r3, r2
 800878e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	69ba      	ldr	r2, [r7, #24]
 8008796:	0151      	lsls	r1, r2, #5
 8008798:	69fa      	ldr	r2, [r7, #28]
 800879a:	440a      	add	r2, r1
 800879c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087a0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80087a4:	6013      	str	r3, [r2, #0]
 80087a6:	e00f      	b.n	80087c8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80087a8:	69bb      	ldr	r3, [r7, #24]
 80087aa:	015a      	lsls	r2, r3, #5
 80087ac:	69fb      	ldr	r3, [r7, #28]
 80087ae:	4413      	add	r3, r2
 80087b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	69ba      	ldr	r2, [r7, #24]
 80087b8:	0151      	lsls	r1, r2, #5
 80087ba:	69fa      	ldr	r2, [r7, #28]
 80087bc:	440a      	add	r2, r1
 80087be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80087c6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80087c8:	69bb      	ldr	r3, [r7, #24]
 80087ca:	015a      	lsls	r2, r3, #5
 80087cc:	69fb      	ldr	r3, [r7, #28]
 80087ce:	4413      	add	r3, r2
 80087d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	69ba      	ldr	r2, [r7, #24]
 80087d8:	0151      	lsls	r1, r2, #5
 80087da:	69fa      	ldr	r2, [r7, #28]
 80087dc:	440a      	add	r2, r1
 80087de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087e2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80087e6:	6013      	str	r3, [r2, #0]
 80087e8:	e166      	b.n	8008ab8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80087ea:	69bb      	ldr	r3, [r7, #24]
 80087ec:	015a      	lsls	r2, r3, #5
 80087ee:	69fb      	ldr	r3, [r7, #28]
 80087f0:	4413      	add	r3, r2
 80087f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	69ba      	ldr	r2, [r7, #24]
 80087fa:	0151      	lsls	r1, r2, #5
 80087fc:	69fa      	ldr	r2, [r7, #28]
 80087fe:	440a      	add	r2, r1
 8008800:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008804:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008808:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	791b      	ldrb	r3, [r3, #4]
 800880e:	2b01      	cmp	r3, #1
 8008810:	d015      	beq.n	800883e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	691b      	ldr	r3, [r3, #16]
 8008816:	2b00      	cmp	r3, #0
 8008818:	f000 814e 	beq.w	8008ab8 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800881c:	69fb      	ldr	r3, [r7, #28]
 800881e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008822:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	f003 030f 	and.w	r3, r3, #15
 800882c:	2101      	movs	r1, #1
 800882e:	fa01 f303 	lsl.w	r3, r1, r3
 8008832:	69f9      	ldr	r1, [r7, #28]
 8008834:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008838:	4313      	orrs	r3, r2
 800883a:	634b      	str	r3, [r1, #52]	@ 0x34
 800883c:	e13c      	b.n	8008ab8 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800883e:	69fb      	ldr	r3, [r7, #28]
 8008840:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008844:	689b      	ldr	r3, [r3, #8]
 8008846:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800884a:	2b00      	cmp	r3, #0
 800884c:	d110      	bne.n	8008870 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800884e:	69bb      	ldr	r3, [r7, #24]
 8008850:	015a      	lsls	r2, r3, #5
 8008852:	69fb      	ldr	r3, [r7, #28]
 8008854:	4413      	add	r3, r2
 8008856:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	69ba      	ldr	r2, [r7, #24]
 800885e:	0151      	lsls	r1, r2, #5
 8008860:	69fa      	ldr	r2, [r7, #28]
 8008862:	440a      	add	r2, r1
 8008864:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008868:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800886c:	6013      	str	r3, [r2, #0]
 800886e:	e00f      	b.n	8008890 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008870:	69bb      	ldr	r3, [r7, #24]
 8008872:	015a      	lsls	r2, r3, #5
 8008874:	69fb      	ldr	r3, [r7, #28]
 8008876:	4413      	add	r3, r2
 8008878:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	69ba      	ldr	r2, [r7, #24]
 8008880:	0151      	lsls	r1, r2, #5
 8008882:	69fa      	ldr	r2, [r7, #28]
 8008884:	440a      	add	r2, r1
 8008886:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800888a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800888e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	68d9      	ldr	r1, [r3, #12]
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	781a      	ldrb	r2, [r3, #0]
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	691b      	ldr	r3, [r3, #16]
 800889c:	b298      	uxth	r0, r3
 800889e:	79fb      	ldrb	r3, [r7, #7]
 80088a0:	9300      	str	r3, [sp, #0]
 80088a2:	4603      	mov	r3, r0
 80088a4:	68f8      	ldr	r0, [r7, #12]
 80088a6:	f000 f9b9 	bl	8008c1c <USB_WritePacket>
 80088aa:	e105      	b.n	8008ab8 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80088ac:	69bb      	ldr	r3, [r7, #24]
 80088ae:	015a      	lsls	r2, r3, #5
 80088b0:	69fb      	ldr	r3, [r7, #28]
 80088b2:	4413      	add	r3, r2
 80088b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088b8:	691b      	ldr	r3, [r3, #16]
 80088ba:	69ba      	ldr	r2, [r7, #24]
 80088bc:	0151      	lsls	r1, r2, #5
 80088be:	69fa      	ldr	r2, [r7, #28]
 80088c0:	440a      	add	r2, r1
 80088c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80088c6:	0cdb      	lsrs	r3, r3, #19
 80088c8:	04db      	lsls	r3, r3, #19
 80088ca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80088cc:	69bb      	ldr	r3, [r7, #24]
 80088ce:	015a      	lsls	r2, r3, #5
 80088d0:	69fb      	ldr	r3, [r7, #28]
 80088d2:	4413      	add	r3, r2
 80088d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088d8:	691b      	ldr	r3, [r3, #16]
 80088da:	69ba      	ldr	r2, [r7, #24]
 80088dc:	0151      	lsls	r1, r2, #5
 80088de:	69fa      	ldr	r2, [r7, #28]
 80088e0:	440a      	add	r2, r1
 80088e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80088e6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80088ea:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80088ee:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80088f0:	69bb      	ldr	r3, [r7, #24]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d132      	bne.n	800895c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	691b      	ldr	r3, [r3, #16]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d003      	beq.n	8008906 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	689a      	ldr	r2, [r3, #8]
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	689a      	ldr	r2, [r3, #8]
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800890e:	69bb      	ldr	r3, [r7, #24]
 8008910:	015a      	lsls	r2, r3, #5
 8008912:	69fb      	ldr	r3, [r7, #28]
 8008914:	4413      	add	r3, r2
 8008916:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800891a:	691a      	ldr	r2, [r3, #16]
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	6a1b      	ldr	r3, [r3, #32]
 8008920:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008924:	69b9      	ldr	r1, [r7, #24]
 8008926:	0148      	lsls	r0, r1, #5
 8008928:	69f9      	ldr	r1, [r7, #28]
 800892a:	4401      	add	r1, r0
 800892c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008930:	4313      	orrs	r3, r2
 8008932:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008934:	69bb      	ldr	r3, [r7, #24]
 8008936:	015a      	lsls	r2, r3, #5
 8008938:	69fb      	ldr	r3, [r7, #28]
 800893a:	4413      	add	r3, r2
 800893c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008940:	691b      	ldr	r3, [r3, #16]
 8008942:	69ba      	ldr	r2, [r7, #24]
 8008944:	0151      	lsls	r1, r2, #5
 8008946:	69fa      	ldr	r2, [r7, #28]
 8008948:	440a      	add	r2, r1
 800894a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800894e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008952:	6113      	str	r3, [r2, #16]
 8008954:	e062      	b.n	8008a1c <USB_EPStartXfer+0x490>
 8008956:	bf00      	nop
 8008958:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	691b      	ldr	r3, [r3, #16]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d123      	bne.n	80089ac <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008964:	69bb      	ldr	r3, [r7, #24]
 8008966:	015a      	lsls	r2, r3, #5
 8008968:	69fb      	ldr	r3, [r7, #28]
 800896a:	4413      	add	r3, r2
 800896c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008970:	691a      	ldr	r2, [r3, #16]
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	689b      	ldr	r3, [r3, #8]
 8008976:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800897a:	69b9      	ldr	r1, [r7, #24]
 800897c:	0148      	lsls	r0, r1, #5
 800897e:	69f9      	ldr	r1, [r7, #28]
 8008980:	4401      	add	r1, r0
 8008982:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008986:	4313      	orrs	r3, r2
 8008988:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800898a:	69bb      	ldr	r3, [r7, #24]
 800898c:	015a      	lsls	r2, r3, #5
 800898e:	69fb      	ldr	r3, [r7, #28]
 8008990:	4413      	add	r3, r2
 8008992:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008996:	691b      	ldr	r3, [r3, #16]
 8008998:	69ba      	ldr	r2, [r7, #24]
 800899a:	0151      	lsls	r1, r2, #5
 800899c:	69fa      	ldr	r2, [r7, #28]
 800899e:	440a      	add	r2, r1
 80089a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80089a4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80089a8:	6113      	str	r3, [r2, #16]
 80089aa:	e037      	b.n	8008a1c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	691a      	ldr	r2, [r3, #16]
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	689b      	ldr	r3, [r3, #8]
 80089b4:	4413      	add	r3, r2
 80089b6:	1e5a      	subs	r2, r3, #1
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	689b      	ldr	r3, [r3, #8]
 80089bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80089c0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	689b      	ldr	r3, [r3, #8]
 80089c6:	8afa      	ldrh	r2, [r7, #22]
 80089c8:	fb03 f202 	mul.w	r2, r3, r2
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80089d0:	69bb      	ldr	r3, [r7, #24]
 80089d2:	015a      	lsls	r2, r3, #5
 80089d4:	69fb      	ldr	r3, [r7, #28]
 80089d6:	4413      	add	r3, r2
 80089d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089dc:	691a      	ldr	r2, [r3, #16]
 80089de:	8afb      	ldrh	r3, [r7, #22]
 80089e0:	04d9      	lsls	r1, r3, #19
 80089e2:	4b38      	ldr	r3, [pc, #224]	@ (8008ac4 <USB_EPStartXfer+0x538>)
 80089e4:	400b      	ands	r3, r1
 80089e6:	69b9      	ldr	r1, [r7, #24]
 80089e8:	0148      	lsls	r0, r1, #5
 80089ea:	69f9      	ldr	r1, [r7, #28]
 80089ec:	4401      	add	r1, r0
 80089ee:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80089f2:	4313      	orrs	r3, r2
 80089f4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80089f6:	69bb      	ldr	r3, [r7, #24]
 80089f8:	015a      	lsls	r2, r3, #5
 80089fa:	69fb      	ldr	r3, [r7, #28]
 80089fc:	4413      	add	r3, r2
 80089fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a02:	691a      	ldr	r2, [r3, #16]
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	6a1b      	ldr	r3, [r3, #32]
 8008a08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a0c:	69b9      	ldr	r1, [r7, #24]
 8008a0e:	0148      	lsls	r0, r1, #5
 8008a10:	69f9      	ldr	r1, [r7, #28]
 8008a12:	4401      	add	r1, r0
 8008a14:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008a1c:	79fb      	ldrb	r3, [r7, #7]
 8008a1e:	2b01      	cmp	r3, #1
 8008a20:	d10d      	bne.n	8008a3e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	68db      	ldr	r3, [r3, #12]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d009      	beq.n	8008a3e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	68d9      	ldr	r1, [r3, #12]
 8008a2e:	69bb      	ldr	r3, [r7, #24]
 8008a30:	015a      	lsls	r2, r3, #5
 8008a32:	69fb      	ldr	r3, [r7, #28]
 8008a34:	4413      	add	r3, r2
 8008a36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a3a:	460a      	mov	r2, r1
 8008a3c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	791b      	ldrb	r3, [r3, #4]
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	d128      	bne.n	8008a98 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008a46:	69fb      	ldr	r3, [r7, #28]
 8008a48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a4c:	689b      	ldr	r3, [r3, #8]
 8008a4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d110      	bne.n	8008a78 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008a56:	69bb      	ldr	r3, [r7, #24]
 8008a58:	015a      	lsls	r2, r3, #5
 8008a5a:	69fb      	ldr	r3, [r7, #28]
 8008a5c:	4413      	add	r3, r2
 8008a5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	69ba      	ldr	r2, [r7, #24]
 8008a66:	0151      	lsls	r1, r2, #5
 8008a68:	69fa      	ldr	r2, [r7, #28]
 8008a6a:	440a      	add	r2, r1
 8008a6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a70:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008a74:	6013      	str	r3, [r2, #0]
 8008a76:	e00f      	b.n	8008a98 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008a78:	69bb      	ldr	r3, [r7, #24]
 8008a7a:	015a      	lsls	r2, r3, #5
 8008a7c:	69fb      	ldr	r3, [r7, #28]
 8008a7e:	4413      	add	r3, r2
 8008a80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	69ba      	ldr	r2, [r7, #24]
 8008a88:	0151      	lsls	r1, r2, #5
 8008a8a:	69fa      	ldr	r2, [r7, #28]
 8008a8c:	440a      	add	r2, r1
 8008a8e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a96:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008a98:	69bb      	ldr	r3, [r7, #24]
 8008a9a:	015a      	lsls	r2, r3, #5
 8008a9c:	69fb      	ldr	r3, [r7, #28]
 8008a9e:	4413      	add	r3, r2
 8008aa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	69ba      	ldr	r2, [r7, #24]
 8008aa8:	0151      	lsls	r1, r2, #5
 8008aaa:	69fa      	ldr	r2, [r7, #28]
 8008aac:	440a      	add	r2, r1
 8008aae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ab2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008ab6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008ab8:	2300      	movs	r3, #0
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3720      	adds	r7, #32
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
 8008ac2:	bf00      	nop
 8008ac4:	1ff80000 	.word	0x1ff80000

08008ac8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b087      	sub	sp, #28
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	785b      	ldrb	r3, [r3, #1]
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d14a      	bne.n	8008b7c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	015a      	lsls	r2, r3, #5
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	4413      	add	r3, r2
 8008af0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008afa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008afe:	f040 8086 	bne.w	8008c0e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	781b      	ldrb	r3, [r3, #0]
 8008b06:	015a      	lsls	r2, r3, #5
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	4413      	add	r3, r2
 8008b0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	683a      	ldr	r2, [r7, #0]
 8008b14:	7812      	ldrb	r2, [r2, #0]
 8008b16:	0151      	lsls	r1, r2, #5
 8008b18:	693a      	ldr	r2, [r7, #16]
 8008b1a:	440a      	add	r2, r1
 8008b1c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b20:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008b24:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	015a      	lsls	r2, r3, #5
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	4413      	add	r3, r2
 8008b30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	683a      	ldr	r2, [r7, #0]
 8008b38:	7812      	ldrb	r2, [r2, #0]
 8008b3a:	0151      	lsls	r1, r2, #5
 8008b3c:	693a      	ldr	r2, [r7, #16]
 8008b3e:	440a      	add	r2, r1
 8008b40:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b44:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008b48:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	3301      	adds	r3, #1
 8008b4e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d902      	bls.n	8008b60 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	75fb      	strb	r3, [r7, #23]
          break;
 8008b5e:	e056      	b.n	8008c0e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	015a      	lsls	r2, r3, #5
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	4413      	add	r3, r2
 8008b6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008b74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008b78:	d0e7      	beq.n	8008b4a <USB_EPStopXfer+0x82>
 8008b7a:	e048      	b.n	8008c0e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	015a      	lsls	r2, r3, #5
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	4413      	add	r3, r2
 8008b86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008b90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008b94:	d13b      	bne.n	8008c0e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	781b      	ldrb	r3, [r3, #0]
 8008b9a:	015a      	lsls	r2, r3, #5
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	4413      	add	r3, r2
 8008ba0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	683a      	ldr	r2, [r7, #0]
 8008ba8:	7812      	ldrb	r2, [r2, #0]
 8008baa:	0151      	lsls	r1, r2, #5
 8008bac:	693a      	ldr	r2, [r7, #16]
 8008bae:	440a      	add	r2, r1
 8008bb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008bb4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008bb8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	781b      	ldrb	r3, [r3, #0]
 8008bbe:	015a      	lsls	r2, r3, #5
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	4413      	add	r3, r2
 8008bc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	683a      	ldr	r2, [r7, #0]
 8008bcc:	7812      	ldrb	r2, [r2, #0]
 8008bce:	0151      	lsls	r1, r2, #5
 8008bd0:	693a      	ldr	r2, [r7, #16]
 8008bd2:	440a      	add	r2, r1
 8008bd4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008bd8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008bdc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	3301      	adds	r3, #1
 8008be2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d902      	bls.n	8008bf4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008bee:	2301      	movs	r3, #1
 8008bf0:	75fb      	strb	r3, [r7, #23]
          break;
 8008bf2:	e00c      	b.n	8008c0e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	015a      	lsls	r2, r3, #5
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	4413      	add	r3, r2
 8008bfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008c08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c0c:	d0e7      	beq.n	8008bde <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008c0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	371c      	adds	r7, #28
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr

08008c1c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b089      	sub	sp, #36	@ 0x24
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	60f8      	str	r0, [r7, #12]
 8008c24:	60b9      	str	r1, [r7, #8]
 8008c26:	4611      	mov	r1, r2
 8008c28:	461a      	mov	r2, r3
 8008c2a:	460b      	mov	r3, r1
 8008c2c:	71fb      	strb	r3, [r7, #7]
 8008c2e:	4613      	mov	r3, r2
 8008c30:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008c3a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d123      	bne.n	8008c8a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008c42:	88bb      	ldrh	r3, [r7, #4]
 8008c44:	3303      	adds	r3, #3
 8008c46:	089b      	lsrs	r3, r3, #2
 8008c48:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	61bb      	str	r3, [r7, #24]
 8008c4e:	e018      	b.n	8008c82 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008c50:	79fb      	ldrb	r3, [r7, #7]
 8008c52:	031a      	lsls	r2, r3, #12
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	4413      	add	r3, r2
 8008c58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	69fb      	ldr	r3, [r7, #28]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008c64:	69fb      	ldr	r3, [r7, #28]
 8008c66:	3301      	adds	r3, #1
 8008c68:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008c6a:	69fb      	ldr	r3, [r7, #28]
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008c70:	69fb      	ldr	r3, [r7, #28]
 8008c72:	3301      	adds	r3, #1
 8008c74:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008c76:	69fb      	ldr	r3, [r7, #28]
 8008c78:	3301      	adds	r3, #1
 8008c7a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008c7c:	69bb      	ldr	r3, [r7, #24]
 8008c7e:	3301      	adds	r3, #1
 8008c80:	61bb      	str	r3, [r7, #24]
 8008c82:	69ba      	ldr	r2, [r7, #24]
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d3e2      	bcc.n	8008c50 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008c8a:	2300      	movs	r3, #0
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3724      	adds	r7, #36	@ 0x24
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	4770      	bx	lr

08008c98 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b08b      	sub	sp, #44	@ 0x2c
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	60f8      	str	r0, [r7, #12]
 8008ca0:	60b9      	str	r1, [r7, #8]
 8008ca2:	4613      	mov	r3, r2
 8008ca4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008cae:	88fb      	ldrh	r3, [r7, #6]
 8008cb0:	089b      	lsrs	r3, r3, #2
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008cb6:	88fb      	ldrh	r3, [r7, #6]
 8008cb8:	f003 0303 	and.w	r3, r3, #3
 8008cbc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	623b      	str	r3, [r7, #32]
 8008cc2:	e014      	b.n	8008cee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008cc4:	69bb      	ldr	r3, [r7, #24]
 8008cc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008cca:	681a      	ldr	r2, [r3, #0]
 8008ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cce:	601a      	str	r2, [r3, #0]
    pDest++;
 8008cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cd8:	3301      	adds	r3, #1
 8008cda:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cde:	3301      	adds	r3, #1
 8008ce0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ce4:	3301      	adds	r3, #1
 8008ce6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008ce8:	6a3b      	ldr	r3, [r7, #32]
 8008cea:	3301      	adds	r3, #1
 8008cec:	623b      	str	r3, [r7, #32]
 8008cee:	6a3a      	ldr	r2, [r7, #32]
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d3e6      	bcc.n	8008cc4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008cf6:	8bfb      	ldrh	r3, [r7, #30]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d01e      	beq.n	8008d3a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008d00:	69bb      	ldr	r3, [r7, #24]
 8008d02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d06:	461a      	mov	r2, r3
 8008d08:	f107 0310 	add.w	r3, r7, #16
 8008d0c:	6812      	ldr	r2, [r2, #0]
 8008d0e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008d10:	693a      	ldr	r2, [r7, #16]
 8008d12:	6a3b      	ldr	r3, [r7, #32]
 8008d14:	b2db      	uxtb	r3, r3
 8008d16:	00db      	lsls	r3, r3, #3
 8008d18:	fa22 f303 	lsr.w	r3, r2, r3
 8008d1c:	b2da      	uxtb	r2, r3
 8008d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d20:	701a      	strb	r2, [r3, #0]
      i++;
 8008d22:	6a3b      	ldr	r3, [r7, #32]
 8008d24:	3301      	adds	r3, #1
 8008d26:	623b      	str	r3, [r7, #32]
      pDest++;
 8008d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008d2e:	8bfb      	ldrh	r3, [r7, #30]
 8008d30:	3b01      	subs	r3, #1
 8008d32:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008d34:	8bfb      	ldrh	r3, [r7, #30]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d1ea      	bne.n	8008d10 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	372c      	adds	r7, #44	@ 0x2c
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr

08008d48 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b085      	sub	sp, #20
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	781b      	ldrb	r3, [r3, #0]
 8008d5a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	785b      	ldrb	r3, [r3, #1]
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d12c      	bne.n	8008dbe <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	015a      	lsls	r2, r3, #5
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	4413      	add	r3, r2
 8008d6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	db12      	blt.n	8008d9c <USB_EPSetStall+0x54>
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d00f      	beq.n	8008d9c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	015a      	lsls	r2, r3, #5
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	4413      	add	r3, r2
 8008d84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	68ba      	ldr	r2, [r7, #8]
 8008d8c:	0151      	lsls	r1, r2, #5
 8008d8e:	68fa      	ldr	r2, [r7, #12]
 8008d90:	440a      	add	r2, r1
 8008d92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d96:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008d9a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	015a      	lsls	r2, r3, #5
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	4413      	add	r3, r2
 8008da4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	68ba      	ldr	r2, [r7, #8]
 8008dac:	0151      	lsls	r1, r2, #5
 8008dae:	68fa      	ldr	r2, [r7, #12]
 8008db0:	440a      	add	r2, r1
 8008db2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008db6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008dba:	6013      	str	r3, [r2, #0]
 8008dbc:	e02b      	b.n	8008e16 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	015a      	lsls	r2, r3, #5
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	4413      	add	r3, r2
 8008dc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	db12      	blt.n	8008df6 <USB_EPSetStall+0xae>
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d00f      	beq.n	8008df6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	015a      	lsls	r2, r3, #5
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	4413      	add	r3, r2
 8008dde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	68ba      	ldr	r2, [r7, #8]
 8008de6:	0151      	lsls	r1, r2, #5
 8008de8:	68fa      	ldr	r2, [r7, #12]
 8008dea:	440a      	add	r2, r1
 8008dec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008df0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008df4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	015a      	lsls	r2, r3, #5
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	4413      	add	r3, r2
 8008dfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	68ba      	ldr	r2, [r7, #8]
 8008e06:	0151      	lsls	r1, r2, #5
 8008e08:	68fa      	ldr	r2, [r7, #12]
 8008e0a:	440a      	add	r2, r1
 8008e0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e10:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008e14:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008e16:	2300      	movs	r3, #0
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3714      	adds	r7, #20
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr

08008e24 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b085      	sub	sp, #20
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	781b      	ldrb	r3, [r3, #0]
 8008e36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	785b      	ldrb	r3, [r3, #1]
 8008e3c:	2b01      	cmp	r3, #1
 8008e3e:	d128      	bne.n	8008e92 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	015a      	lsls	r2, r3, #5
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	4413      	add	r3, r2
 8008e48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	68ba      	ldr	r2, [r7, #8]
 8008e50:	0151      	lsls	r1, r2, #5
 8008e52:	68fa      	ldr	r2, [r7, #12]
 8008e54:	440a      	add	r2, r1
 8008e56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e5a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008e5e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	791b      	ldrb	r3, [r3, #4]
 8008e64:	2b03      	cmp	r3, #3
 8008e66:	d003      	beq.n	8008e70 <USB_EPClearStall+0x4c>
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	791b      	ldrb	r3, [r3, #4]
 8008e6c:	2b02      	cmp	r3, #2
 8008e6e:	d138      	bne.n	8008ee2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	015a      	lsls	r2, r3, #5
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	4413      	add	r3, r2
 8008e78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	68ba      	ldr	r2, [r7, #8]
 8008e80:	0151      	lsls	r1, r2, #5
 8008e82:	68fa      	ldr	r2, [r7, #12]
 8008e84:	440a      	add	r2, r1
 8008e86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e8e:	6013      	str	r3, [r2, #0]
 8008e90:	e027      	b.n	8008ee2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	015a      	lsls	r2, r3, #5
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	4413      	add	r3, r2
 8008e9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	68ba      	ldr	r2, [r7, #8]
 8008ea2:	0151      	lsls	r1, r2, #5
 8008ea4:	68fa      	ldr	r2, [r7, #12]
 8008ea6:	440a      	add	r2, r1
 8008ea8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008eac:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008eb0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	791b      	ldrb	r3, [r3, #4]
 8008eb6:	2b03      	cmp	r3, #3
 8008eb8:	d003      	beq.n	8008ec2 <USB_EPClearStall+0x9e>
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	791b      	ldrb	r3, [r3, #4]
 8008ebe:	2b02      	cmp	r3, #2
 8008ec0:	d10f      	bne.n	8008ee2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	015a      	lsls	r2, r3, #5
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	4413      	add	r3, r2
 8008eca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	68ba      	ldr	r2, [r7, #8]
 8008ed2:	0151      	lsls	r1, r2, #5
 8008ed4:	68fa      	ldr	r2, [r7, #12]
 8008ed6:	440a      	add	r2, r1
 8008ed8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008edc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ee0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008ee2:	2300      	movs	r3, #0
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3714      	adds	r7, #20
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr

08008ef0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b085      	sub	sp, #20
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	460b      	mov	r3, r1
 8008efa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	68fa      	ldr	r2, [r7, #12]
 8008f0a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008f0e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008f12:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f1a:	681a      	ldr	r2, [r3, #0]
 8008f1c:	78fb      	ldrb	r3, [r7, #3]
 8008f1e:	011b      	lsls	r3, r3, #4
 8008f20:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008f24:	68f9      	ldr	r1, [r7, #12]
 8008f26:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008f2e:	2300      	movs	r3, #0
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3714      	adds	r7, #20
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr

08008f3c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b085      	sub	sp, #20
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	68fa      	ldr	r2, [r7, #12]
 8008f52:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008f56:	f023 0303 	bic.w	r3, r3, #3
 8008f5a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f62:	685b      	ldr	r3, [r3, #4]
 8008f64:	68fa      	ldr	r2, [r7, #12]
 8008f66:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008f6a:	f023 0302 	bic.w	r3, r3, #2
 8008f6e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008f70:	2300      	movs	r3, #0
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3714      	adds	r7, #20
 8008f76:	46bd      	mov	sp, r7
 8008f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7c:	4770      	bx	lr

08008f7e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008f7e:	b480      	push	{r7}
 8008f80:	b085      	sub	sp, #20
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	68fa      	ldr	r2, [r7, #12]
 8008f94:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008f98:	f023 0303 	bic.w	r3, r3, #3
 8008f9c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008fa4:	685b      	ldr	r3, [r3, #4]
 8008fa6:	68fa      	ldr	r2, [r7, #12]
 8008fa8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008fac:	f043 0302 	orr.w	r3, r3, #2
 8008fb0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008fb2:	2300      	movs	r3, #0
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3714      	adds	r7, #20
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbe:	4770      	bx	lr

08008fc0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b085      	sub	sp, #20
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	695b      	ldr	r3, [r3, #20]
 8008fcc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	699b      	ldr	r3, [r3, #24]
 8008fd2:	68fa      	ldr	r2, [r7, #12]
 8008fd4:	4013      	ands	r3, r2
 8008fd6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3714      	adds	r7, #20
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe4:	4770      	bx	lr

08008fe6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008fe6:	b480      	push	{r7}
 8008fe8:	b085      	sub	sp, #20
 8008fea:	af00      	add	r7, sp, #0
 8008fec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ff8:	699b      	ldr	r3, [r3, #24]
 8008ffa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009002:	69db      	ldr	r3, [r3, #28]
 8009004:	68ba      	ldr	r2, [r7, #8]
 8009006:	4013      	ands	r3, r2
 8009008:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	0c1b      	lsrs	r3, r3, #16
}
 800900e:	4618      	mov	r0, r3
 8009010:	3714      	adds	r7, #20
 8009012:	46bd      	mov	sp, r7
 8009014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009018:	4770      	bx	lr

0800901a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800901a:	b480      	push	{r7}
 800901c:	b085      	sub	sp, #20
 800901e:	af00      	add	r7, sp, #0
 8009020:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800902c:	699b      	ldr	r3, [r3, #24]
 800902e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009036:	69db      	ldr	r3, [r3, #28]
 8009038:	68ba      	ldr	r2, [r7, #8]
 800903a:	4013      	ands	r3, r2
 800903c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	b29b      	uxth	r3, r3
}
 8009042:	4618      	mov	r0, r3
 8009044:	3714      	adds	r7, #20
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr

0800904e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800904e:	b480      	push	{r7}
 8009050:	b085      	sub	sp, #20
 8009052:	af00      	add	r7, sp, #0
 8009054:	6078      	str	r0, [r7, #4]
 8009056:	460b      	mov	r3, r1
 8009058:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800905e:	78fb      	ldrb	r3, [r7, #3]
 8009060:	015a      	lsls	r2, r3, #5
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	4413      	add	r3, r2
 8009066:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800906a:	689b      	ldr	r3, [r3, #8]
 800906c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009074:	695b      	ldr	r3, [r3, #20]
 8009076:	68ba      	ldr	r2, [r7, #8]
 8009078:	4013      	ands	r3, r2
 800907a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800907c:	68bb      	ldr	r3, [r7, #8]
}
 800907e:	4618      	mov	r0, r3
 8009080:	3714      	adds	r7, #20
 8009082:	46bd      	mov	sp, r7
 8009084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009088:	4770      	bx	lr

0800908a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800908a:	b480      	push	{r7}
 800908c:	b087      	sub	sp, #28
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
 8009092:	460b      	mov	r3, r1
 8009094:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090a0:	691b      	ldr	r3, [r3, #16]
 80090a2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090ac:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80090ae:	78fb      	ldrb	r3, [r7, #3]
 80090b0:	f003 030f 	and.w	r3, r3, #15
 80090b4:	68fa      	ldr	r2, [r7, #12]
 80090b6:	fa22 f303 	lsr.w	r3, r2, r3
 80090ba:	01db      	lsls	r3, r3, #7
 80090bc:	b2db      	uxtb	r3, r3
 80090be:	693a      	ldr	r2, [r7, #16]
 80090c0:	4313      	orrs	r3, r2
 80090c2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80090c4:	78fb      	ldrb	r3, [r7, #3]
 80090c6:	015a      	lsls	r2, r3, #5
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	4413      	add	r3, r2
 80090cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090d0:	689b      	ldr	r3, [r3, #8]
 80090d2:	693a      	ldr	r2, [r7, #16]
 80090d4:	4013      	ands	r3, r2
 80090d6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80090d8:	68bb      	ldr	r3, [r7, #8]
}
 80090da:	4618      	mov	r0, r3
 80090dc:	371c      	adds	r7, #28
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr

080090e6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80090e6:	b480      	push	{r7}
 80090e8:	b083      	sub	sp, #12
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	695b      	ldr	r3, [r3, #20]
 80090f2:	f003 0301 	and.w	r3, r3, #1
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	370c      	adds	r7, #12
 80090fa:	46bd      	mov	sp, r7
 80090fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009100:	4770      	bx	lr

08009102 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8009102:	b480      	push	{r7}
 8009104:	b085      	sub	sp, #20
 8009106:	af00      	add	r7, sp, #0
 8009108:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	68fa      	ldr	r2, [r7, #12]
 8009118:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800911c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009120:	f023 0307 	bic.w	r3, r3, #7
 8009124:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	68fa      	ldr	r2, [r7, #12]
 8009130:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009134:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009138:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800913a:	2300      	movs	r3, #0
}
 800913c:	4618      	mov	r0, r3
 800913e:	3714      	adds	r7, #20
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr

08009148 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8009148:	b480      	push	{r7}
 800914a:	b087      	sub	sp, #28
 800914c:	af00      	add	r7, sp, #0
 800914e:	60f8      	str	r0, [r7, #12]
 8009150:	460b      	mov	r3, r1
 8009152:	607a      	str	r2, [r7, #4]
 8009154:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	333c      	adds	r3, #60	@ 0x3c
 800915e:	3304      	adds	r3, #4
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	4a26      	ldr	r2, [pc, #152]	@ (8009200 <USB_EP0_OutStart+0xb8>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d90a      	bls.n	8009182 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009178:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800917c:	d101      	bne.n	8009182 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800917e:	2300      	movs	r3, #0
 8009180:	e037      	b.n	80091f2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009188:	461a      	mov	r2, r3
 800918a:	2300      	movs	r3, #0
 800918c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009194:	691b      	ldr	r3, [r3, #16]
 8009196:	697a      	ldr	r2, [r7, #20]
 8009198:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800919c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80091a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091a8:	691b      	ldr	r3, [r3, #16]
 80091aa:	697a      	ldr	r2, [r7, #20]
 80091ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80091b0:	f043 0318 	orr.w	r3, r3, #24
 80091b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091bc:	691b      	ldr	r3, [r3, #16]
 80091be:	697a      	ldr	r2, [r7, #20]
 80091c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80091c4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80091c8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80091ca:	7afb      	ldrb	r3, [r7, #11]
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d10f      	bne.n	80091f0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091d6:	461a      	mov	r2, r3
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	697a      	ldr	r2, [r7, #20]
 80091e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80091ea:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80091ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80091f0:	2300      	movs	r3, #0
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	371c      	adds	r7, #28
 80091f6:	46bd      	mov	sp, r7
 80091f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fc:	4770      	bx	lr
 80091fe:	bf00      	nop
 8009200:	4f54300a 	.word	0x4f54300a

08009204 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009204:	b480      	push	{r7}
 8009206:	b085      	sub	sp, #20
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800920c:	2300      	movs	r3, #0
 800920e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	3301      	adds	r3, #1
 8009214:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800921c:	d901      	bls.n	8009222 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800921e:	2303      	movs	r3, #3
 8009220:	e01b      	b.n	800925a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	691b      	ldr	r3, [r3, #16]
 8009226:	2b00      	cmp	r3, #0
 8009228:	daf2      	bge.n	8009210 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800922a:	2300      	movs	r3, #0
 800922c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	691b      	ldr	r3, [r3, #16]
 8009232:	f043 0201 	orr.w	r2, r3, #1
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	3301      	adds	r3, #1
 800923e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009246:	d901      	bls.n	800924c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009248:	2303      	movs	r3, #3
 800924a:	e006      	b.n	800925a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	691b      	ldr	r3, [r3, #16]
 8009250:	f003 0301 	and.w	r3, r3, #1
 8009254:	2b01      	cmp	r3, #1
 8009256:	d0f0      	beq.n	800923a <USB_CoreReset+0x36>

  return HAL_OK;
 8009258:	2300      	movs	r3, #0
}
 800925a:	4618      	mov	r0, r3
 800925c:	3714      	adds	r7, #20
 800925e:	46bd      	mov	sp, r7
 8009260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009264:	4770      	bx	lr
	...

08009268 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b084      	sub	sp, #16
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	460b      	mov	r3, r1
 8009272:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009274:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009278:	f002 fc9a 	bl	800bbb0 <USBD_static_malloc>
 800927c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d109      	bne.n	8009298 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	32b0      	adds	r2, #176	@ 0xb0
 800928e:	2100      	movs	r1, #0
 8009290:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009294:	2302      	movs	r3, #2
 8009296:	e0d4      	b.n	8009442 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009298:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800929c:	2100      	movs	r1, #0
 800929e:	68f8      	ldr	r0, [r7, #12]
 80092a0:	f002 fcca 	bl	800bc38 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	32b0      	adds	r2, #176	@ 0xb0
 80092ae:	68f9      	ldr	r1, [r7, #12]
 80092b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	32b0      	adds	r2, #176	@ 0xb0
 80092be:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	7c1b      	ldrb	r3, [r3, #16]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d138      	bne.n	8009342 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80092d0:	4b5e      	ldr	r3, [pc, #376]	@ (800944c <USBD_CDC_Init+0x1e4>)
 80092d2:	7819      	ldrb	r1, [r3, #0]
 80092d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80092d8:	2202      	movs	r2, #2
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f002 fb45 	bl	800b96a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80092e0:	4b5a      	ldr	r3, [pc, #360]	@ (800944c <USBD_CDC_Init+0x1e4>)
 80092e2:	781b      	ldrb	r3, [r3, #0]
 80092e4:	f003 020f 	and.w	r2, r3, #15
 80092e8:	6879      	ldr	r1, [r7, #4]
 80092ea:	4613      	mov	r3, r2
 80092ec:	009b      	lsls	r3, r3, #2
 80092ee:	4413      	add	r3, r2
 80092f0:	009b      	lsls	r3, r3, #2
 80092f2:	440b      	add	r3, r1
 80092f4:	3324      	adds	r3, #36	@ 0x24
 80092f6:	2201      	movs	r2, #1
 80092f8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80092fa:	4b55      	ldr	r3, [pc, #340]	@ (8009450 <USBD_CDC_Init+0x1e8>)
 80092fc:	7819      	ldrb	r1, [r3, #0]
 80092fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009302:	2202      	movs	r2, #2
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f002 fb30 	bl	800b96a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800930a:	4b51      	ldr	r3, [pc, #324]	@ (8009450 <USBD_CDC_Init+0x1e8>)
 800930c:	781b      	ldrb	r3, [r3, #0]
 800930e:	f003 020f 	and.w	r2, r3, #15
 8009312:	6879      	ldr	r1, [r7, #4]
 8009314:	4613      	mov	r3, r2
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	4413      	add	r3, r2
 800931a:	009b      	lsls	r3, r3, #2
 800931c:	440b      	add	r3, r1
 800931e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009322:	2201      	movs	r2, #1
 8009324:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009326:	4b4b      	ldr	r3, [pc, #300]	@ (8009454 <USBD_CDC_Init+0x1ec>)
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	f003 020f 	and.w	r2, r3, #15
 800932e:	6879      	ldr	r1, [r7, #4]
 8009330:	4613      	mov	r3, r2
 8009332:	009b      	lsls	r3, r3, #2
 8009334:	4413      	add	r3, r2
 8009336:	009b      	lsls	r3, r3, #2
 8009338:	440b      	add	r3, r1
 800933a:	3326      	adds	r3, #38	@ 0x26
 800933c:	2210      	movs	r2, #16
 800933e:	801a      	strh	r2, [r3, #0]
 8009340:	e035      	b.n	80093ae <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009342:	4b42      	ldr	r3, [pc, #264]	@ (800944c <USBD_CDC_Init+0x1e4>)
 8009344:	7819      	ldrb	r1, [r3, #0]
 8009346:	2340      	movs	r3, #64	@ 0x40
 8009348:	2202      	movs	r2, #2
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f002 fb0d 	bl	800b96a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009350:	4b3e      	ldr	r3, [pc, #248]	@ (800944c <USBD_CDC_Init+0x1e4>)
 8009352:	781b      	ldrb	r3, [r3, #0]
 8009354:	f003 020f 	and.w	r2, r3, #15
 8009358:	6879      	ldr	r1, [r7, #4]
 800935a:	4613      	mov	r3, r2
 800935c:	009b      	lsls	r3, r3, #2
 800935e:	4413      	add	r3, r2
 8009360:	009b      	lsls	r3, r3, #2
 8009362:	440b      	add	r3, r1
 8009364:	3324      	adds	r3, #36	@ 0x24
 8009366:	2201      	movs	r2, #1
 8009368:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800936a:	4b39      	ldr	r3, [pc, #228]	@ (8009450 <USBD_CDC_Init+0x1e8>)
 800936c:	7819      	ldrb	r1, [r3, #0]
 800936e:	2340      	movs	r3, #64	@ 0x40
 8009370:	2202      	movs	r2, #2
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f002 faf9 	bl	800b96a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009378:	4b35      	ldr	r3, [pc, #212]	@ (8009450 <USBD_CDC_Init+0x1e8>)
 800937a:	781b      	ldrb	r3, [r3, #0]
 800937c:	f003 020f 	and.w	r2, r3, #15
 8009380:	6879      	ldr	r1, [r7, #4]
 8009382:	4613      	mov	r3, r2
 8009384:	009b      	lsls	r3, r3, #2
 8009386:	4413      	add	r3, r2
 8009388:	009b      	lsls	r3, r3, #2
 800938a:	440b      	add	r3, r1
 800938c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009390:	2201      	movs	r2, #1
 8009392:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009394:	4b2f      	ldr	r3, [pc, #188]	@ (8009454 <USBD_CDC_Init+0x1ec>)
 8009396:	781b      	ldrb	r3, [r3, #0]
 8009398:	f003 020f 	and.w	r2, r3, #15
 800939c:	6879      	ldr	r1, [r7, #4]
 800939e:	4613      	mov	r3, r2
 80093a0:	009b      	lsls	r3, r3, #2
 80093a2:	4413      	add	r3, r2
 80093a4:	009b      	lsls	r3, r3, #2
 80093a6:	440b      	add	r3, r1
 80093a8:	3326      	adds	r3, #38	@ 0x26
 80093aa:	2210      	movs	r2, #16
 80093ac:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80093ae:	4b29      	ldr	r3, [pc, #164]	@ (8009454 <USBD_CDC_Init+0x1ec>)
 80093b0:	7819      	ldrb	r1, [r3, #0]
 80093b2:	2308      	movs	r3, #8
 80093b4:	2203      	movs	r2, #3
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f002 fad7 	bl	800b96a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80093bc:	4b25      	ldr	r3, [pc, #148]	@ (8009454 <USBD_CDC_Init+0x1ec>)
 80093be:	781b      	ldrb	r3, [r3, #0]
 80093c0:	f003 020f 	and.w	r2, r3, #15
 80093c4:	6879      	ldr	r1, [r7, #4]
 80093c6:	4613      	mov	r3, r2
 80093c8:	009b      	lsls	r3, r3, #2
 80093ca:	4413      	add	r3, r2
 80093cc:	009b      	lsls	r3, r3, #2
 80093ce:	440b      	add	r3, r1
 80093d0:	3324      	adds	r3, #36	@ 0x24
 80093d2:	2201      	movs	r2, #1
 80093d4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	2200      	movs	r2, #0
 80093da:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80093e4:	687a      	ldr	r2, [r7, #4]
 80093e6:	33b0      	adds	r3, #176	@ 0xb0
 80093e8:	009b      	lsls	r3, r3, #2
 80093ea:	4413      	add	r3, r2
 80093ec:	685b      	ldr	r3, [r3, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2200      	movs	r2, #0
 80093f6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2200      	movs	r2, #0
 80093fe:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8009408:	2b00      	cmp	r3, #0
 800940a:	d101      	bne.n	8009410 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800940c:	2302      	movs	r3, #2
 800940e:	e018      	b.n	8009442 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	7c1b      	ldrb	r3, [r3, #16]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d10a      	bne.n	800942e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009418:	4b0d      	ldr	r3, [pc, #52]	@ (8009450 <USBD_CDC_Init+0x1e8>)
 800941a:	7819      	ldrb	r1, [r3, #0]
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009422:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f002 fb8e 	bl	800bb48 <USBD_LL_PrepareReceive>
 800942c:	e008      	b.n	8009440 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800942e:	4b08      	ldr	r3, [pc, #32]	@ (8009450 <USBD_CDC_Init+0x1e8>)
 8009430:	7819      	ldrb	r1, [r3, #0]
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009438:	2340      	movs	r3, #64	@ 0x40
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f002 fb84 	bl	800bb48 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009440:	2300      	movs	r3, #0
}
 8009442:	4618      	mov	r0, r3
 8009444:	3710      	adds	r7, #16
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
 800944a:	bf00      	nop
 800944c:	200000bb 	.word	0x200000bb
 8009450:	200000bc 	.word	0x200000bc
 8009454:	200000bd 	.word	0x200000bd

08009458 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b082      	sub	sp, #8
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	460b      	mov	r3, r1
 8009462:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009464:	4b3a      	ldr	r3, [pc, #232]	@ (8009550 <USBD_CDC_DeInit+0xf8>)
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	4619      	mov	r1, r3
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f002 faa3 	bl	800b9b6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009470:	4b37      	ldr	r3, [pc, #220]	@ (8009550 <USBD_CDC_DeInit+0xf8>)
 8009472:	781b      	ldrb	r3, [r3, #0]
 8009474:	f003 020f 	and.w	r2, r3, #15
 8009478:	6879      	ldr	r1, [r7, #4]
 800947a:	4613      	mov	r3, r2
 800947c:	009b      	lsls	r3, r3, #2
 800947e:	4413      	add	r3, r2
 8009480:	009b      	lsls	r3, r3, #2
 8009482:	440b      	add	r3, r1
 8009484:	3324      	adds	r3, #36	@ 0x24
 8009486:	2200      	movs	r2, #0
 8009488:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800948a:	4b32      	ldr	r3, [pc, #200]	@ (8009554 <USBD_CDC_DeInit+0xfc>)
 800948c:	781b      	ldrb	r3, [r3, #0]
 800948e:	4619      	mov	r1, r3
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f002 fa90 	bl	800b9b6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009496:	4b2f      	ldr	r3, [pc, #188]	@ (8009554 <USBD_CDC_DeInit+0xfc>)
 8009498:	781b      	ldrb	r3, [r3, #0]
 800949a:	f003 020f 	and.w	r2, r3, #15
 800949e:	6879      	ldr	r1, [r7, #4]
 80094a0:	4613      	mov	r3, r2
 80094a2:	009b      	lsls	r3, r3, #2
 80094a4:	4413      	add	r3, r2
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	440b      	add	r3, r1
 80094aa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80094ae:	2200      	movs	r2, #0
 80094b0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80094b2:	4b29      	ldr	r3, [pc, #164]	@ (8009558 <USBD_CDC_DeInit+0x100>)
 80094b4:	781b      	ldrb	r3, [r3, #0]
 80094b6:	4619      	mov	r1, r3
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f002 fa7c 	bl	800b9b6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80094be:	4b26      	ldr	r3, [pc, #152]	@ (8009558 <USBD_CDC_DeInit+0x100>)
 80094c0:	781b      	ldrb	r3, [r3, #0]
 80094c2:	f003 020f 	and.w	r2, r3, #15
 80094c6:	6879      	ldr	r1, [r7, #4]
 80094c8:	4613      	mov	r3, r2
 80094ca:	009b      	lsls	r3, r3, #2
 80094cc:	4413      	add	r3, r2
 80094ce:	009b      	lsls	r3, r3, #2
 80094d0:	440b      	add	r3, r1
 80094d2:	3324      	adds	r3, #36	@ 0x24
 80094d4:	2200      	movs	r2, #0
 80094d6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80094d8:	4b1f      	ldr	r3, [pc, #124]	@ (8009558 <USBD_CDC_DeInit+0x100>)
 80094da:	781b      	ldrb	r3, [r3, #0]
 80094dc:	f003 020f 	and.w	r2, r3, #15
 80094e0:	6879      	ldr	r1, [r7, #4]
 80094e2:	4613      	mov	r3, r2
 80094e4:	009b      	lsls	r3, r3, #2
 80094e6:	4413      	add	r3, r2
 80094e8:	009b      	lsls	r3, r3, #2
 80094ea:	440b      	add	r3, r1
 80094ec:	3326      	adds	r3, #38	@ 0x26
 80094ee:	2200      	movs	r2, #0
 80094f0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	32b0      	adds	r2, #176	@ 0xb0
 80094fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d01f      	beq.n	8009544 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800950a:	687a      	ldr	r2, [r7, #4]
 800950c:	33b0      	adds	r3, #176	@ 0xb0
 800950e:	009b      	lsls	r3, r3, #2
 8009510:	4413      	add	r3, r2
 8009512:	685b      	ldr	r3, [r3, #4]
 8009514:	685b      	ldr	r3, [r3, #4]
 8009516:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	32b0      	adds	r2, #176	@ 0xb0
 8009522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009526:	4618      	mov	r0, r3
 8009528:	f002 fb50 	bl	800bbcc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	32b0      	adds	r2, #176	@ 0xb0
 8009536:	2100      	movs	r1, #0
 8009538:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2200      	movs	r2, #0
 8009540:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009544:	2300      	movs	r3, #0
}
 8009546:	4618      	mov	r0, r3
 8009548:	3708      	adds	r7, #8
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
 800954e:	bf00      	nop
 8009550:	200000bb 	.word	0x200000bb
 8009554:	200000bc 	.word	0x200000bc
 8009558:	200000bd 	.word	0x200000bd

0800955c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b086      	sub	sp, #24
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
 8009564:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	32b0      	adds	r2, #176	@ 0xb0
 8009570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009574:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009576:	2300      	movs	r3, #0
 8009578:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800957a:	2300      	movs	r3, #0
 800957c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800957e:	2300      	movs	r3, #0
 8009580:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009582:	693b      	ldr	r3, [r7, #16]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d101      	bne.n	800958c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009588:	2303      	movs	r3, #3
 800958a:	e0bf      	b.n	800970c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	781b      	ldrb	r3, [r3, #0]
 8009590:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009594:	2b00      	cmp	r3, #0
 8009596:	d050      	beq.n	800963a <USBD_CDC_Setup+0xde>
 8009598:	2b20      	cmp	r3, #32
 800959a:	f040 80af 	bne.w	80096fc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	88db      	ldrh	r3, [r3, #6]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d03a      	beq.n	800961c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	781b      	ldrb	r3, [r3, #0]
 80095aa:	b25b      	sxtb	r3, r3
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	da1b      	bge.n	80095e8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80095b6:	687a      	ldr	r2, [r7, #4]
 80095b8:	33b0      	adds	r3, #176	@ 0xb0
 80095ba:	009b      	lsls	r3, r3, #2
 80095bc:	4413      	add	r3, r2
 80095be:	685b      	ldr	r3, [r3, #4]
 80095c0:	689b      	ldr	r3, [r3, #8]
 80095c2:	683a      	ldr	r2, [r7, #0]
 80095c4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80095c6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80095c8:	683a      	ldr	r2, [r7, #0]
 80095ca:	88d2      	ldrh	r2, [r2, #6]
 80095cc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	88db      	ldrh	r3, [r3, #6]
 80095d2:	2b07      	cmp	r3, #7
 80095d4:	bf28      	it	cs
 80095d6:	2307      	movcs	r3, #7
 80095d8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	89fa      	ldrh	r2, [r7, #14]
 80095de:	4619      	mov	r1, r3
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f001 fd93 	bl	800b10c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80095e6:	e090      	b.n	800970a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	785a      	ldrb	r2, [r3, #1]
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	88db      	ldrh	r3, [r3, #6]
 80095f6:	2b3f      	cmp	r3, #63	@ 0x3f
 80095f8:	d803      	bhi.n	8009602 <USBD_CDC_Setup+0xa6>
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	88db      	ldrh	r3, [r3, #6]
 80095fe:	b2da      	uxtb	r2, r3
 8009600:	e000      	b.n	8009604 <USBD_CDC_Setup+0xa8>
 8009602:	2240      	movs	r2, #64	@ 0x40
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800960a:	6939      	ldr	r1, [r7, #16]
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8009612:	461a      	mov	r2, r3
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f001 fda5 	bl	800b164 <USBD_CtlPrepareRx>
      break;
 800961a:	e076      	b.n	800970a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009622:	687a      	ldr	r2, [r7, #4]
 8009624:	33b0      	adds	r3, #176	@ 0xb0
 8009626:	009b      	lsls	r3, r3, #2
 8009628:	4413      	add	r3, r2
 800962a:	685b      	ldr	r3, [r3, #4]
 800962c:	689b      	ldr	r3, [r3, #8]
 800962e:	683a      	ldr	r2, [r7, #0]
 8009630:	7850      	ldrb	r0, [r2, #1]
 8009632:	2200      	movs	r2, #0
 8009634:	6839      	ldr	r1, [r7, #0]
 8009636:	4798      	blx	r3
      break;
 8009638:	e067      	b.n	800970a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	785b      	ldrb	r3, [r3, #1]
 800963e:	2b0b      	cmp	r3, #11
 8009640:	d851      	bhi.n	80096e6 <USBD_CDC_Setup+0x18a>
 8009642:	a201      	add	r2, pc, #4	@ (adr r2, 8009648 <USBD_CDC_Setup+0xec>)
 8009644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009648:	08009679 	.word	0x08009679
 800964c:	080096f5 	.word	0x080096f5
 8009650:	080096e7 	.word	0x080096e7
 8009654:	080096e7 	.word	0x080096e7
 8009658:	080096e7 	.word	0x080096e7
 800965c:	080096e7 	.word	0x080096e7
 8009660:	080096e7 	.word	0x080096e7
 8009664:	080096e7 	.word	0x080096e7
 8009668:	080096e7 	.word	0x080096e7
 800966c:	080096e7 	.word	0x080096e7
 8009670:	080096a3 	.word	0x080096a3
 8009674:	080096cd 	.word	0x080096cd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800967e:	b2db      	uxtb	r3, r3
 8009680:	2b03      	cmp	r3, #3
 8009682:	d107      	bne.n	8009694 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009684:	f107 030a 	add.w	r3, r7, #10
 8009688:	2202      	movs	r2, #2
 800968a:	4619      	mov	r1, r3
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f001 fd3d 	bl	800b10c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009692:	e032      	b.n	80096fa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009694:	6839      	ldr	r1, [r7, #0]
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f001 fcbb 	bl	800b012 <USBD_CtlError>
            ret = USBD_FAIL;
 800969c:	2303      	movs	r3, #3
 800969e:	75fb      	strb	r3, [r7, #23]
          break;
 80096a0:	e02b      	b.n	80096fa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096a8:	b2db      	uxtb	r3, r3
 80096aa:	2b03      	cmp	r3, #3
 80096ac:	d107      	bne.n	80096be <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80096ae:	f107 030d 	add.w	r3, r7, #13
 80096b2:	2201      	movs	r2, #1
 80096b4:	4619      	mov	r1, r3
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f001 fd28 	bl	800b10c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80096bc:	e01d      	b.n	80096fa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80096be:	6839      	ldr	r1, [r7, #0]
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f001 fca6 	bl	800b012 <USBD_CtlError>
            ret = USBD_FAIL;
 80096c6:	2303      	movs	r3, #3
 80096c8:	75fb      	strb	r3, [r7, #23]
          break;
 80096ca:	e016      	b.n	80096fa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096d2:	b2db      	uxtb	r3, r3
 80096d4:	2b03      	cmp	r3, #3
 80096d6:	d00f      	beq.n	80096f8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80096d8:	6839      	ldr	r1, [r7, #0]
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f001 fc99 	bl	800b012 <USBD_CtlError>
            ret = USBD_FAIL;
 80096e0:	2303      	movs	r3, #3
 80096e2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80096e4:	e008      	b.n	80096f8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80096e6:	6839      	ldr	r1, [r7, #0]
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f001 fc92 	bl	800b012 <USBD_CtlError>
          ret = USBD_FAIL;
 80096ee:	2303      	movs	r3, #3
 80096f0:	75fb      	strb	r3, [r7, #23]
          break;
 80096f2:	e002      	b.n	80096fa <USBD_CDC_Setup+0x19e>
          break;
 80096f4:	bf00      	nop
 80096f6:	e008      	b.n	800970a <USBD_CDC_Setup+0x1ae>
          break;
 80096f8:	bf00      	nop
      }
      break;
 80096fa:	e006      	b.n	800970a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80096fc:	6839      	ldr	r1, [r7, #0]
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f001 fc87 	bl	800b012 <USBD_CtlError>
      ret = USBD_FAIL;
 8009704:	2303      	movs	r3, #3
 8009706:	75fb      	strb	r3, [r7, #23]
      break;
 8009708:	bf00      	nop
  }

  return (uint8_t)ret;
 800970a:	7dfb      	ldrb	r3, [r7, #23]
}
 800970c:	4618      	mov	r0, r3
 800970e:	3718      	adds	r7, #24
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b084      	sub	sp, #16
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	460b      	mov	r3, r1
 800971e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009726:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	32b0      	adds	r2, #176	@ 0xb0
 8009732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d101      	bne.n	800973e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800973a:	2303      	movs	r3, #3
 800973c:	e065      	b.n	800980a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	32b0      	adds	r2, #176	@ 0xb0
 8009748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800974c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800974e:	78fb      	ldrb	r3, [r7, #3]
 8009750:	f003 020f 	and.w	r2, r3, #15
 8009754:	6879      	ldr	r1, [r7, #4]
 8009756:	4613      	mov	r3, r2
 8009758:	009b      	lsls	r3, r3, #2
 800975a:	4413      	add	r3, r2
 800975c:	009b      	lsls	r3, r3, #2
 800975e:	440b      	add	r3, r1
 8009760:	3318      	adds	r3, #24
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d02f      	beq.n	80097c8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009768:	78fb      	ldrb	r3, [r7, #3]
 800976a:	f003 020f 	and.w	r2, r3, #15
 800976e:	6879      	ldr	r1, [r7, #4]
 8009770:	4613      	mov	r3, r2
 8009772:	009b      	lsls	r3, r3, #2
 8009774:	4413      	add	r3, r2
 8009776:	009b      	lsls	r3, r3, #2
 8009778:	440b      	add	r3, r1
 800977a:	3318      	adds	r3, #24
 800977c:	681a      	ldr	r2, [r3, #0]
 800977e:	78fb      	ldrb	r3, [r7, #3]
 8009780:	f003 010f 	and.w	r1, r3, #15
 8009784:	68f8      	ldr	r0, [r7, #12]
 8009786:	460b      	mov	r3, r1
 8009788:	00db      	lsls	r3, r3, #3
 800978a:	440b      	add	r3, r1
 800978c:	009b      	lsls	r3, r3, #2
 800978e:	4403      	add	r3, r0
 8009790:	331c      	adds	r3, #28
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	fbb2 f1f3 	udiv	r1, r2, r3
 8009798:	fb01 f303 	mul.w	r3, r1, r3
 800979c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d112      	bne.n	80097c8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80097a2:	78fb      	ldrb	r3, [r7, #3]
 80097a4:	f003 020f 	and.w	r2, r3, #15
 80097a8:	6879      	ldr	r1, [r7, #4]
 80097aa:	4613      	mov	r3, r2
 80097ac:	009b      	lsls	r3, r3, #2
 80097ae:	4413      	add	r3, r2
 80097b0:	009b      	lsls	r3, r3, #2
 80097b2:	440b      	add	r3, r1
 80097b4:	3318      	adds	r3, #24
 80097b6:	2200      	movs	r2, #0
 80097b8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80097ba:	78f9      	ldrb	r1, [r7, #3]
 80097bc:	2300      	movs	r3, #0
 80097be:	2200      	movs	r2, #0
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f002 f9a0 	bl	800bb06 <USBD_LL_Transmit>
 80097c6:	e01f      	b.n	8009808 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	2200      	movs	r2, #0
 80097cc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80097d6:	687a      	ldr	r2, [r7, #4]
 80097d8:	33b0      	adds	r3, #176	@ 0xb0
 80097da:	009b      	lsls	r3, r3, #2
 80097dc:	4413      	add	r3, r2
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	691b      	ldr	r3, [r3, #16]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d010      	beq.n	8009808 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80097ec:	687a      	ldr	r2, [r7, #4]
 80097ee:	33b0      	adds	r3, #176	@ 0xb0
 80097f0:	009b      	lsls	r3, r3, #2
 80097f2:	4413      	add	r3, r2
 80097f4:	685b      	ldr	r3, [r3, #4]
 80097f6:	691b      	ldr	r3, [r3, #16]
 80097f8:	68ba      	ldr	r2, [r7, #8]
 80097fa:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80097fe:	68ba      	ldr	r2, [r7, #8]
 8009800:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009804:	78fa      	ldrb	r2, [r7, #3]
 8009806:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009808:	2300      	movs	r3, #0
}
 800980a:	4618      	mov	r0, r3
 800980c:	3710      	adds	r7, #16
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}

08009812 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009812:	b580      	push	{r7, lr}
 8009814:	b084      	sub	sp, #16
 8009816:	af00      	add	r7, sp, #0
 8009818:	6078      	str	r0, [r7, #4]
 800981a:	460b      	mov	r3, r1
 800981c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	32b0      	adds	r2, #176	@ 0xb0
 8009828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800982c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	32b0      	adds	r2, #176	@ 0xb0
 8009838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d101      	bne.n	8009844 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009840:	2303      	movs	r3, #3
 8009842:	e01a      	b.n	800987a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009844:	78fb      	ldrb	r3, [r7, #3]
 8009846:	4619      	mov	r1, r3
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f002 f99e 	bl	800bb8a <USBD_LL_GetRxDataSize>
 800984e:	4602      	mov	r2, r0
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800985c:	687a      	ldr	r2, [r7, #4]
 800985e:	33b0      	adds	r3, #176	@ 0xb0
 8009860:	009b      	lsls	r3, r3, #2
 8009862:	4413      	add	r3, r2
 8009864:	685b      	ldr	r3, [r3, #4]
 8009866:	68db      	ldr	r3, [r3, #12]
 8009868:	68fa      	ldr	r2, [r7, #12]
 800986a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800986e:	68fa      	ldr	r2, [r7, #12]
 8009870:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009874:	4611      	mov	r1, r2
 8009876:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009878:	2300      	movs	r3, #0
}
 800987a:	4618      	mov	r0, r3
 800987c:	3710      	adds	r7, #16
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}

08009882 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009882:	b580      	push	{r7, lr}
 8009884:	b084      	sub	sp, #16
 8009886:	af00      	add	r7, sp, #0
 8009888:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	32b0      	adds	r2, #176	@ 0xb0
 8009894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009898:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d101      	bne.n	80098a4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80098a0:	2303      	movs	r3, #3
 80098a2:	e024      	b.n	80098ee <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80098aa:	687a      	ldr	r2, [r7, #4]
 80098ac:	33b0      	adds	r3, #176	@ 0xb0
 80098ae:	009b      	lsls	r3, r3, #2
 80098b0:	4413      	add	r3, r2
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d019      	beq.n	80098ec <USBD_CDC_EP0_RxReady+0x6a>
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80098be:	2bff      	cmp	r3, #255	@ 0xff
 80098c0:	d014      	beq.n	80098ec <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80098c8:	687a      	ldr	r2, [r7, #4]
 80098ca:	33b0      	adds	r3, #176	@ 0xb0
 80098cc:	009b      	lsls	r3, r3, #2
 80098ce:	4413      	add	r3, r2
 80098d0:	685b      	ldr	r3, [r3, #4]
 80098d2:	689b      	ldr	r3, [r3, #8]
 80098d4:	68fa      	ldr	r2, [r7, #12]
 80098d6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80098da:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80098dc:	68fa      	ldr	r2, [r7, #12]
 80098de:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80098e2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	22ff      	movs	r2, #255	@ 0xff
 80098e8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80098ec:	2300      	movs	r3, #0
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3710      	adds	r7, #16
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}
	...

080098f8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b086      	sub	sp, #24
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009900:	2182      	movs	r1, #130	@ 0x82
 8009902:	4818      	ldr	r0, [pc, #96]	@ (8009964 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009904:	f000 fd4f 	bl	800a3a6 <USBD_GetEpDesc>
 8009908:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800990a:	2101      	movs	r1, #1
 800990c:	4815      	ldr	r0, [pc, #84]	@ (8009964 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800990e:	f000 fd4a 	bl	800a3a6 <USBD_GetEpDesc>
 8009912:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009914:	2181      	movs	r1, #129	@ 0x81
 8009916:	4813      	ldr	r0, [pc, #76]	@ (8009964 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009918:	f000 fd45 	bl	800a3a6 <USBD_GetEpDesc>
 800991c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d002      	beq.n	800992a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	2210      	movs	r2, #16
 8009928:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d006      	beq.n	800993e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	2200      	movs	r2, #0
 8009934:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009938:	711a      	strb	r2, [r3, #4]
 800993a:	2200      	movs	r2, #0
 800993c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d006      	beq.n	8009952 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2200      	movs	r2, #0
 8009948:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800994c:	711a      	strb	r2, [r3, #4]
 800994e:	2200      	movs	r2, #0
 8009950:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2243      	movs	r2, #67	@ 0x43
 8009956:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009958:	4b02      	ldr	r3, [pc, #8]	@ (8009964 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800995a:	4618      	mov	r0, r3
 800995c:	3718      	adds	r7, #24
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}
 8009962:	bf00      	nop
 8009964:	20000078 	.word	0x20000078

08009968 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b086      	sub	sp, #24
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009970:	2182      	movs	r1, #130	@ 0x82
 8009972:	4818      	ldr	r0, [pc, #96]	@ (80099d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009974:	f000 fd17 	bl	800a3a6 <USBD_GetEpDesc>
 8009978:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800997a:	2101      	movs	r1, #1
 800997c:	4815      	ldr	r0, [pc, #84]	@ (80099d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800997e:	f000 fd12 	bl	800a3a6 <USBD_GetEpDesc>
 8009982:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009984:	2181      	movs	r1, #129	@ 0x81
 8009986:	4813      	ldr	r0, [pc, #76]	@ (80099d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009988:	f000 fd0d 	bl	800a3a6 <USBD_GetEpDesc>
 800998c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d002      	beq.n	800999a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	2210      	movs	r2, #16
 8009998:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d006      	beq.n	80099ae <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	2200      	movs	r2, #0
 80099a4:	711a      	strb	r2, [r3, #4]
 80099a6:	2200      	movs	r2, #0
 80099a8:	f042 0202 	orr.w	r2, r2, #2
 80099ac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d006      	beq.n	80099c2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	2200      	movs	r2, #0
 80099b8:	711a      	strb	r2, [r3, #4]
 80099ba:	2200      	movs	r2, #0
 80099bc:	f042 0202 	orr.w	r2, r2, #2
 80099c0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2243      	movs	r2, #67	@ 0x43
 80099c6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80099c8:	4b02      	ldr	r3, [pc, #8]	@ (80099d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3718      	adds	r7, #24
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
 80099d2:	bf00      	nop
 80099d4:	20000078 	.word	0x20000078

080099d8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b086      	sub	sp, #24
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80099e0:	2182      	movs	r1, #130	@ 0x82
 80099e2:	4818      	ldr	r0, [pc, #96]	@ (8009a44 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80099e4:	f000 fcdf 	bl	800a3a6 <USBD_GetEpDesc>
 80099e8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80099ea:	2101      	movs	r1, #1
 80099ec:	4815      	ldr	r0, [pc, #84]	@ (8009a44 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80099ee:	f000 fcda 	bl	800a3a6 <USBD_GetEpDesc>
 80099f2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80099f4:	2181      	movs	r1, #129	@ 0x81
 80099f6:	4813      	ldr	r0, [pc, #76]	@ (8009a44 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80099f8:	f000 fcd5 	bl	800a3a6 <USBD_GetEpDesc>
 80099fc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d002      	beq.n	8009a0a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	2210      	movs	r2, #16
 8009a08:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d006      	beq.n	8009a1e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	2200      	movs	r2, #0
 8009a14:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009a18:	711a      	strb	r2, [r3, #4]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d006      	beq.n	8009a32 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2200      	movs	r2, #0
 8009a28:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009a2c:	711a      	strb	r2, [r3, #4]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2243      	movs	r2, #67	@ 0x43
 8009a36:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009a38:	4b02      	ldr	r3, [pc, #8]	@ (8009a44 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3718      	adds	r7, #24
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}
 8009a42:	bf00      	nop
 8009a44:	20000078 	.word	0x20000078

08009a48 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b083      	sub	sp, #12
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	220a      	movs	r2, #10
 8009a54:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009a56:	4b03      	ldr	r3, [pc, #12]	@ (8009a64 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	370c      	adds	r7, #12
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a62:	4770      	bx	lr
 8009a64:	20000034 	.word	0x20000034

08009a68 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b083      	sub	sp, #12
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d101      	bne.n	8009a7c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009a78:	2303      	movs	r3, #3
 8009a7a:	e009      	b.n	8009a90 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a82:	687a      	ldr	r2, [r7, #4]
 8009a84:	33b0      	adds	r3, #176	@ 0xb0
 8009a86:	009b      	lsls	r3, r3, #2
 8009a88:	4413      	add	r3, r2
 8009a8a:	683a      	ldr	r2, [r7, #0]
 8009a8c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009a8e:	2300      	movs	r3, #0
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	370c      	adds	r7, #12
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr

08009a9c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b087      	sub	sp, #28
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	60f8      	str	r0, [r7, #12]
 8009aa4:	60b9      	str	r1, [r7, #8]
 8009aa6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	32b0      	adds	r2, #176	@ 0xb0
 8009ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ab6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d101      	bne.n	8009ac2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009abe:	2303      	movs	r3, #3
 8009ac0:	e008      	b.n	8009ad4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	68ba      	ldr	r2, [r7, #8]
 8009ac6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	687a      	ldr	r2, [r7, #4]
 8009ace:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009ad2:	2300      	movs	r3, #0
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	371c      	adds	r7, #28
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr

08009ae0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b085      	sub	sp, #20
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	32b0      	adds	r2, #176	@ 0xb0
 8009af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009af8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d101      	bne.n	8009b04 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009b00:	2303      	movs	r3, #3
 8009b02:	e004      	b.n	8009b0e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	683a      	ldr	r2, [r7, #0]
 8009b08:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009b0c:	2300      	movs	r3, #0
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3714      	adds	r7, #20
 8009b12:	46bd      	mov	sp, r7
 8009b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b18:	4770      	bx	lr
	...

08009b1c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b084      	sub	sp, #16
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	32b0      	adds	r2, #176	@ 0xb0
 8009b2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b32:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8009b34:	2301      	movs	r3, #1
 8009b36:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d101      	bne.n	8009b42 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009b3e:	2303      	movs	r3, #3
 8009b40:	e025      	b.n	8009b8e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d11f      	bne.n	8009b8c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	2201      	movs	r2, #1
 8009b50:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009b54:	4b10      	ldr	r3, [pc, #64]	@ (8009b98 <USBD_CDC_TransmitPacket+0x7c>)
 8009b56:	781b      	ldrb	r3, [r3, #0]
 8009b58:	f003 020f 	and.w	r2, r3, #15
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	4613      	mov	r3, r2
 8009b66:	009b      	lsls	r3, r3, #2
 8009b68:	4413      	add	r3, r2
 8009b6a:	009b      	lsls	r3, r3, #2
 8009b6c:	4403      	add	r3, r0
 8009b6e:	3318      	adds	r3, #24
 8009b70:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009b72:	4b09      	ldr	r3, [pc, #36]	@ (8009b98 <USBD_CDC_TransmitPacket+0x7c>)
 8009b74:	7819      	ldrb	r1, [r3, #0]
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f001 ffbf 	bl	800bb06 <USBD_LL_Transmit>

    ret = USBD_OK;
 8009b88:	2300      	movs	r3, #0
 8009b8a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3710      	adds	r7, #16
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}
 8009b96:	bf00      	nop
 8009b98:	200000bb 	.word	0x200000bb

08009b9c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b084      	sub	sp, #16
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	32b0      	adds	r2, #176	@ 0xb0
 8009bae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bb2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	32b0      	adds	r2, #176	@ 0xb0
 8009bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d101      	bne.n	8009bca <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009bc6:	2303      	movs	r3, #3
 8009bc8:	e018      	b.n	8009bfc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	7c1b      	ldrb	r3, [r3, #16]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d10a      	bne.n	8009be8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8009c04 <USBD_CDC_ReceivePacket+0x68>)
 8009bd4:	7819      	ldrb	r1, [r3, #0]
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009bdc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f001 ffb1 	bl	800bb48 <USBD_LL_PrepareReceive>
 8009be6:	e008      	b.n	8009bfa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009be8:	4b06      	ldr	r3, [pc, #24]	@ (8009c04 <USBD_CDC_ReceivePacket+0x68>)
 8009bea:	7819      	ldrb	r1, [r3, #0]
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009bf2:	2340      	movs	r3, #64	@ 0x40
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f001 ffa7 	bl	800bb48 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009bfa:	2300      	movs	r3, #0
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3710      	adds	r7, #16
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}
 8009c04:	200000bc 	.word	0x200000bc

08009c08 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b086      	sub	sp, #24
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	60f8      	str	r0, [r7, #12]
 8009c10:	60b9      	str	r1, [r7, #8]
 8009c12:	4613      	mov	r3, r2
 8009c14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d101      	bne.n	8009c20 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009c1c:	2303      	movs	r3, #3
 8009c1e:	e01f      	b.n	8009c60 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	2200      	movs	r2, #0
 8009c24:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	2200      	movs	r2, #0
 8009c34:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d003      	beq.n	8009c46 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	68ba      	ldr	r2, [r7, #8]
 8009c42:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2201      	movs	r2, #1
 8009c4a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	79fa      	ldrb	r2, [r7, #7]
 8009c52:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009c54:	68f8      	ldr	r0, [r7, #12]
 8009c56:	f001 fe21 	bl	800b89c <USBD_LL_Init>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009c5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3718      	adds	r7, #24
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}

08009c68 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b084      	sub	sp, #16
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
 8009c70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009c72:	2300      	movs	r3, #0
 8009c74:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d101      	bne.n	8009c80 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009c7c:	2303      	movs	r3, #3
 8009c7e:	e025      	b.n	8009ccc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	683a      	ldr	r2, [r7, #0]
 8009c84:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	32ae      	adds	r2, #174	@ 0xae
 8009c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d00f      	beq.n	8009cbc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	32ae      	adds	r2, #174	@ 0xae
 8009ca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cac:	f107 020e 	add.w	r2, r7, #14
 8009cb0:	4610      	mov	r0, r2
 8009cb2:	4798      	blx	r3
 8009cb4:	4602      	mov	r2, r0
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009cc2:	1c5a      	adds	r2, r3, #1
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8009cca:	2300      	movs	r3, #0
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	3710      	adds	r7, #16
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}

08009cd4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b082      	sub	sp, #8
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f001 fe29 	bl	800b934 <USBD_LL_Start>
 8009ce2:	4603      	mov	r3, r0
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3708      	adds	r7, #8
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}

08009cec <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b083      	sub	sp, #12
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009cf4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	370c      	adds	r7, #12
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d00:	4770      	bx	lr

08009d02 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d02:	b580      	push	{r7, lr}
 8009d04:	b084      	sub	sp, #16
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	6078      	str	r0, [r7, #4]
 8009d0a:	460b      	mov	r3, r1
 8009d0c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d009      	beq.n	8009d30 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	78fa      	ldrb	r2, [r7, #3]
 8009d26:	4611      	mov	r1, r2
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	4798      	blx	r3
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3710      	adds	r7, #16
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}

08009d3a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d3a:	b580      	push	{r7, lr}
 8009d3c:	b084      	sub	sp, #16
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	6078      	str	r0, [r7, #4]
 8009d42:	460b      	mov	r3, r1
 8009d44:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d46:	2300      	movs	r3, #0
 8009d48:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d50:	685b      	ldr	r3, [r3, #4]
 8009d52:	78fa      	ldrb	r2, [r7, #3]
 8009d54:	4611      	mov	r1, r2
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	4798      	blx	r3
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d001      	beq.n	8009d64 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009d60:	2303      	movs	r3, #3
 8009d62:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3710      	adds	r7, #16
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}

08009d6e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009d6e:	b580      	push	{r7, lr}
 8009d70:	b084      	sub	sp, #16
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	6078      	str	r0, [r7, #4]
 8009d76:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009d7e:	6839      	ldr	r1, [r7, #0]
 8009d80:	4618      	mov	r0, r3
 8009d82:	f001 f90c 	bl	800af9e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2201      	movs	r2, #1
 8009d8a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009d94:	461a      	mov	r2, r3
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009da2:	f003 031f 	and.w	r3, r3, #31
 8009da6:	2b02      	cmp	r3, #2
 8009da8:	d01a      	beq.n	8009de0 <USBD_LL_SetupStage+0x72>
 8009daa:	2b02      	cmp	r3, #2
 8009dac:	d822      	bhi.n	8009df4 <USBD_LL_SetupStage+0x86>
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d002      	beq.n	8009db8 <USBD_LL_SetupStage+0x4a>
 8009db2:	2b01      	cmp	r3, #1
 8009db4:	d00a      	beq.n	8009dcc <USBD_LL_SetupStage+0x5e>
 8009db6:	e01d      	b.n	8009df4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009dbe:	4619      	mov	r1, r3
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f000 fb63 	bl	800a48c <USBD_StdDevReq>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	73fb      	strb	r3, [r7, #15]
      break;
 8009dca:	e020      	b.n	8009e0e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009dd2:	4619      	mov	r1, r3
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f000 fbcb 	bl	800a570 <USBD_StdItfReq>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	73fb      	strb	r3, [r7, #15]
      break;
 8009dde:	e016      	b.n	8009e0e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009de6:	4619      	mov	r1, r3
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f000 fc2d 	bl	800a648 <USBD_StdEPReq>
 8009dee:	4603      	mov	r3, r0
 8009df0:	73fb      	strb	r3, [r7, #15]
      break;
 8009df2:	e00c      	b.n	8009e0e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009dfa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009dfe:	b2db      	uxtb	r3, r3
 8009e00:	4619      	mov	r1, r3
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f001 fdf6 	bl	800b9f4 <USBD_LL_StallEP>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8009e0c:	bf00      	nop
  }

  return ret;
 8009e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3710      	adds	r7, #16
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}

08009e18 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b086      	sub	sp, #24
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	60f8      	str	r0, [r7, #12]
 8009e20:	460b      	mov	r3, r1
 8009e22:	607a      	str	r2, [r7, #4]
 8009e24:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009e26:	2300      	movs	r3, #0
 8009e28:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009e2a:	7afb      	ldrb	r3, [r7, #11]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d16e      	bne.n	8009f0e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009e36:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009e3e:	2b03      	cmp	r3, #3
 8009e40:	f040 8098 	bne.w	8009f74 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	689a      	ldr	r2, [r3, #8]
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	68db      	ldr	r3, [r3, #12]
 8009e4c:	429a      	cmp	r2, r3
 8009e4e:	d913      	bls.n	8009e78 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	689a      	ldr	r2, [r3, #8]
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	68db      	ldr	r3, [r3, #12]
 8009e58:	1ad2      	subs	r2, r2, r3
 8009e5a:	693b      	ldr	r3, [r7, #16]
 8009e5c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	68da      	ldr	r2, [r3, #12]
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	689b      	ldr	r3, [r3, #8]
 8009e66:	4293      	cmp	r3, r2
 8009e68:	bf28      	it	cs
 8009e6a:	4613      	movcs	r3, r2
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	6879      	ldr	r1, [r7, #4]
 8009e70:	68f8      	ldr	r0, [r7, #12]
 8009e72:	f001 f994 	bl	800b19e <USBD_CtlContinueRx>
 8009e76:	e07d      	b.n	8009f74 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009e7e:	f003 031f 	and.w	r3, r3, #31
 8009e82:	2b02      	cmp	r3, #2
 8009e84:	d014      	beq.n	8009eb0 <USBD_LL_DataOutStage+0x98>
 8009e86:	2b02      	cmp	r3, #2
 8009e88:	d81d      	bhi.n	8009ec6 <USBD_LL_DataOutStage+0xae>
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d002      	beq.n	8009e94 <USBD_LL_DataOutStage+0x7c>
 8009e8e:	2b01      	cmp	r3, #1
 8009e90:	d003      	beq.n	8009e9a <USBD_LL_DataOutStage+0x82>
 8009e92:	e018      	b.n	8009ec6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009e94:	2300      	movs	r3, #0
 8009e96:	75bb      	strb	r3, [r7, #22]
            break;
 8009e98:	e018      	b.n	8009ecc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009ea0:	b2db      	uxtb	r3, r3
 8009ea2:	4619      	mov	r1, r3
 8009ea4:	68f8      	ldr	r0, [r7, #12]
 8009ea6:	f000 fa64 	bl	800a372 <USBD_CoreFindIF>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	75bb      	strb	r3, [r7, #22]
            break;
 8009eae:	e00d      	b.n	8009ecc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009eb6:	b2db      	uxtb	r3, r3
 8009eb8:	4619      	mov	r1, r3
 8009eba:	68f8      	ldr	r0, [r7, #12]
 8009ebc:	f000 fa66 	bl	800a38c <USBD_CoreFindEP>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	75bb      	strb	r3, [r7, #22]
            break;
 8009ec4:	e002      	b.n	8009ecc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	75bb      	strb	r3, [r7, #22]
            break;
 8009eca:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009ecc:	7dbb      	ldrb	r3, [r7, #22]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d119      	bne.n	8009f06 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ed8:	b2db      	uxtb	r3, r3
 8009eda:	2b03      	cmp	r3, #3
 8009edc:	d113      	bne.n	8009f06 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009ede:	7dba      	ldrb	r2, [r7, #22]
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	32ae      	adds	r2, #174	@ 0xae
 8009ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ee8:	691b      	ldr	r3, [r3, #16]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d00b      	beq.n	8009f06 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009eee:	7dba      	ldrb	r2, [r7, #22]
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009ef6:	7dba      	ldrb	r2, [r7, #22]
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	32ae      	adds	r2, #174	@ 0xae
 8009efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f00:	691b      	ldr	r3, [r3, #16]
 8009f02:	68f8      	ldr	r0, [r7, #12]
 8009f04:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009f06:	68f8      	ldr	r0, [r7, #12]
 8009f08:	f001 f95a 	bl	800b1c0 <USBD_CtlSendStatus>
 8009f0c:	e032      	b.n	8009f74 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009f0e:	7afb      	ldrb	r3, [r7, #11]
 8009f10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f14:	b2db      	uxtb	r3, r3
 8009f16:	4619      	mov	r1, r3
 8009f18:	68f8      	ldr	r0, [r7, #12]
 8009f1a:	f000 fa37 	bl	800a38c <USBD_CoreFindEP>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009f22:	7dbb      	ldrb	r3, [r7, #22]
 8009f24:	2bff      	cmp	r3, #255	@ 0xff
 8009f26:	d025      	beq.n	8009f74 <USBD_LL_DataOutStage+0x15c>
 8009f28:	7dbb      	ldrb	r3, [r7, #22]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d122      	bne.n	8009f74 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f34:	b2db      	uxtb	r3, r3
 8009f36:	2b03      	cmp	r3, #3
 8009f38:	d117      	bne.n	8009f6a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009f3a:	7dba      	ldrb	r2, [r7, #22]
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	32ae      	adds	r2, #174	@ 0xae
 8009f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f44:	699b      	ldr	r3, [r3, #24]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d00f      	beq.n	8009f6a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009f4a:	7dba      	ldrb	r2, [r7, #22]
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009f52:	7dba      	ldrb	r2, [r7, #22]
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	32ae      	adds	r2, #174	@ 0xae
 8009f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f5c:	699b      	ldr	r3, [r3, #24]
 8009f5e:	7afa      	ldrb	r2, [r7, #11]
 8009f60:	4611      	mov	r1, r2
 8009f62:	68f8      	ldr	r0, [r7, #12]
 8009f64:	4798      	blx	r3
 8009f66:	4603      	mov	r3, r0
 8009f68:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009f6a:	7dfb      	ldrb	r3, [r7, #23]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d001      	beq.n	8009f74 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009f70:	7dfb      	ldrb	r3, [r7, #23]
 8009f72:	e000      	b.n	8009f76 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009f74:	2300      	movs	r3, #0
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	3718      	adds	r7, #24
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}

08009f7e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009f7e:	b580      	push	{r7, lr}
 8009f80:	b086      	sub	sp, #24
 8009f82:	af00      	add	r7, sp, #0
 8009f84:	60f8      	str	r0, [r7, #12]
 8009f86:	460b      	mov	r3, r1
 8009f88:	607a      	str	r2, [r7, #4]
 8009f8a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009f8c:	7afb      	ldrb	r3, [r7, #11]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d16f      	bne.n	800a072 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	3314      	adds	r3, #20
 8009f96:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009f9e:	2b02      	cmp	r3, #2
 8009fa0:	d15a      	bne.n	800a058 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	689a      	ldr	r2, [r3, #8]
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	68db      	ldr	r3, [r3, #12]
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d914      	bls.n	8009fd8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	689a      	ldr	r2, [r3, #8]
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	68db      	ldr	r3, [r3, #12]
 8009fb6:	1ad2      	subs	r2, r2, r3
 8009fb8:	693b      	ldr	r3, [r7, #16]
 8009fba:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	689b      	ldr	r3, [r3, #8]
 8009fc0:	461a      	mov	r2, r3
 8009fc2:	6879      	ldr	r1, [r7, #4]
 8009fc4:	68f8      	ldr	r0, [r7, #12]
 8009fc6:	f001 f8bc 	bl	800b142 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009fca:	2300      	movs	r3, #0
 8009fcc:	2200      	movs	r2, #0
 8009fce:	2100      	movs	r1, #0
 8009fd0:	68f8      	ldr	r0, [r7, #12]
 8009fd2:	f001 fdb9 	bl	800bb48 <USBD_LL_PrepareReceive>
 8009fd6:	e03f      	b.n	800a058 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	68da      	ldr	r2, [r3, #12]
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	689b      	ldr	r3, [r3, #8]
 8009fe0:	429a      	cmp	r2, r3
 8009fe2:	d11c      	bne.n	800a01e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	685a      	ldr	r2, [r3, #4]
 8009fe8:	693b      	ldr	r3, [r7, #16]
 8009fea:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009fec:	429a      	cmp	r2, r3
 8009fee:	d316      	bcc.n	800a01e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	685a      	ldr	r2, [r3, #4]
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	d20f      	bcs.n	800a01e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009ffe:	2200      	movs	r2, #0
 800a000:	2100      	movs	r1, #0
 800a002:	68f8      	ldr	r0, [r7, #12]
 800a004:	f001 f89d 	bl	800b142 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	2200      	movs	r2, #0
 800a00c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a010:	2300      	movs	r3, #0
 800a012:	2200      	movs	r2, #0
 800a014:	2100      	movs	r1, #0
 800a016:	68f8      	ldr	r0, [r7, #12]
 800a018:	f001 fd96 	bl	800bb48 <USBD_LL_PrepareReceive>
 800a01c:	e01c      	b.n	800a058 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a024:	b2db      	uxtb	r3, r3
 800a026:	2b03      	cmp	r3, #3
 800a028:	d10f      	bne.n	800a04a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a030:	68db      	ldr	r3, [r3, #12]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d009      	beq.n	800a04a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	2200      	movs	r2, #0
 800a03a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a044:	68db      	ldr	r3, [r3, #12]
 800a046:	68f8      	ldr	r0, [r7, #12]
 800a048:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a04a:	2180      	movs	r1, #128	@ 0x80
 800a04c:	68f8      	ldr	r0, [r7, #12]
 800a04e:	f001 fcd1 	bl	800b9f4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a052:	68f8      	ldr	r0, [r7, #12]
 800a054:	f001 f8c7 	bl	800b1e6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d03a      	beq.n	800a0d8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a062:	68f8      	ldr	r0, [r7, #12]
 800a064:	f7ff fe42 	bl	8009cec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2200      	movs	r2, #0
 800a06c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a070:	e032      	b.n	800a0d8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a072:	7afb      	ldrb	r3, [r7, #11]
 800a074:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a078:	b2db      	uxtb	r3, r3
 800a07a:	4619      	mov	r1, r3
 800a07c:	68f8      	ldr	r0, [r7, #12]
 800a07e:	f000 f985 	bl	800a38c <USBD_CoreFindEP>
 800a082:	4603      	mov	r3, r0
 800a084:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a086:	7dfb      	ldrb	r3, [r7, #23]
 800a088:	2bff      	cmp	r3, #255	@ 0xff
 800a08a:	d025      	beq.n	800a0d8 <USBD_LL_DataInStage+0x15a>
 800a08c:	7dfb      	ldrb	r3, [r7, #23]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d122      	bne.n	800a0d8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a098:	b2db      	uxtb	r3, r3
 800a09a:	2b03      	cmp	r3, #3
 800a09c:	d11c      	bne.n	800a0d8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a09e:	7dfa      	ldrb	r2, [r7, #23]
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	32ae      	adds	r2, #174	@ 0xae
 800a0a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0a8:	695b      	ldr	r3, [r3, #20]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d014      	beq.n	800a0d8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a0ae:	7dfa      	ldrb	r2, [r7, #23]
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a0b6:	7dfa      	ldrb	r2, [r7, #23]
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	32ae      	adds	r2, #174	@ 0xae
 800a0bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0c0:	695b      	ldr	r3, [r3, #20]
 800a0c2:	7afa      	ldrb	r2, [r7, #11]
 800a0c4:	4611      	mov	r1, r2
 800a0c6:	68f8      	ldr	r0, [r7, #12]
 800a0c8:	4798      	blx	r3
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a0ce:	7dbb      	ldrb	r3, [r7, #22]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d001      	beq.n	800a0d8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a0d4:	7dbb      	ldrb	r3, [r7, #22]
 800a0d6:	e000      	b.n	800a0da <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a0d8:	2300      	movs	r3, #0
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3718      	adds	r7, #24
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}

0800a0e2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a0e2:	b580      	push	{r7, lr}
 800a0e4:	b084      	sub	sp, #16
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2200      	movs	r2, #0
 800a102:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2200      	movs	r2, #0
 800a108:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2200      	movs	r2, #0
 800a110:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d014      	beq.n	800a148 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a124:	685b      	ldr	r3, [r3, #4]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d00e      	beq.n	800a148 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a130:	685b      	ldr	r3, [r3, #4]
 800a132:	687a      	ldr	r2, [r7, #4]
 800a134:	6852      	ldr	r2, [r2, #4]
 800a136:	b2d2      	uxtb	r2, r2
 800a138:	4611      	mov	r1, r2
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	4798      	blx	r3
 800a13e:	4603      	mov	r3, r0
 800a140:	2b00      	cmp	r3, #0
 800a142:	d001      	beq.n	800a148 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a144:	2303      	movs	r3, #3
 800a146:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a148:	2340      	movs	r3, #64	@ 0x40
 800a14a:	2200      	movs	r2, #0
 800a14c:	2100      	movs	r1, #0
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f001 fc0b 	bl	800b96a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2201      	movs	r2, #1
 800a158:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2240      	movs	r2, #64	@ 0x40
 800a160:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a164:	2340      	movs	r3, #64	@ 0x40
 800a166:	2200      	movs	r2, #0
 800a168:	2180      	movs	r1, #128	@ 0x80
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f001 fbfd 	bl	800b96a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2201      	movs	r2, #1
 800a174:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2240      	movs	r2, #64	@ 0x40
 800a17a:	621a      	str	r2, [r3, #32]

  return ret;
 800a17c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3710      	adds	r7, #16
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}

0800a186 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a186:	b480      	push	{r7}
 800a188:	b083      	sub	sp, #12
 800a18a:	af00      	add	r7, sp, #0
 800a18c:	6078      	str	r0, [r7, #4]
 800a18e:	460b      	mov	r3, r1
 800a190:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	78fa      	ldrb	r2, [r7, #3]
 800a196:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a198:	2300      	movs	r3, #0
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	370c      	adds	r7, #12
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a4:	4770      	bx	lr

0800a1a6 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a1a6:	b480      	push	{r7}
 800a1a8:	b083      	sub	sp, #12
 800a1aa:	af00      	add	r7, sp, #0
 800a1ac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1b4:	b2db      	uxtb	r3, r3
 800a1b6:	2b04      	cmp	r3, #4
 800a1b8:	d006      	beq.n	800a1c8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1c0:	b2da      	uxtb	r2, r3
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2204      	movs	r2, #4
 800a1cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a1d0:	2300      	movs	r3, #0
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	370c      	adds	r7, #12
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1dc:	4770      	bx	lr

0800a1de <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a1de:	b480      	push	{r7}
 800a1e0:	b083      	sub	sp, #12
 800a1e2:	af00      	add	r7, sp, #0
 800a1e4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1ec:	b2db      	uxtb	r3, r3
 800a1ee:	2b04      	cmp	r3, #4
 800a1f0:	d106      	bne.n	800a200 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a1f8:	b2da      	uxtb	r2, r3
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a200:	2300      	movs	r3, #0
}
 800a202:	4618      	mov	r0, r3
 800a204:	370c      	adds	r7, #12
 800a206:	46bd      	mov	sp, r7
 800a208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20c:	4770      	bx	lr

0800a20e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a20e:	b580      	push	{r7, lr}
 800a210:	b082      	sub	sp, #8
 800a212:	af00      	add	r7, sp, #0
 800a214:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a21c:	b2db      	uxtb	r3, r3
 800a21e:	2b03      	cmp	r3, #3
 800a220:	d110      	bne.n	800a244 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d00b      	beq.n	800a244 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a232:	69db      	ldr	r3, [r3, #28]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d005      	beq.n	800a244 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a23e:	69db      	ldr	r3, [r3, #28]
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a244:	2300      	movs	r3, #0
}
 800a246:	4618      	mov	r0, r3
 800a248:	3708      	adds	r7, #8
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}

0800a24e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a24e:	b580      	push	{r7, lr}
 800a250:	b082      	sub	sp, #8
 800a252:	af00      	add	r7, sp, #0
 800a254:	6078      	str	r0, [r7, #4]
 800a256:	460b      	mov	r3, r1
 800a258:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	32ae      	adds	r2, #174	@ 0xae
 800a264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d101      	bne.n	800a270 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a26c:	2303      	movs	r3, #3
 800a26e:	e01c      	b.n	800a2aa <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a276:	b2db      	uxtb	r3, r3
 800a278:	2b03      	cmp	r3, #3
 800a27a:	d115      	bne.n	800a2a8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	32ae      	adds	r2, #174	@ 0xae
 800a286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a28a:	6a1b      	ldr	r3, [r3, #32]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d00b      	beq.n	800a2a8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	32ae      	adds	r2, #174	@ 0xae
 800a29a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a29e:	6a1b      	ldr	r3, [r3, #32]
 800a2a0:	78fa      	ldrb	r2, [r7, #3]
 800a2a2:	4611      	mov	r1, r2
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a2a8:	2300      	movs	r3, #0
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3708      	adds	r7, #8
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}

0800a2b2 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a2b2:	b580      	push	{r7, lr}
 800a2b4:	b082      	sub	sp, #8
 800a2b6:	af00      	add	r7, sp, #0
 800a2b8:	6078      	str	r0, [r7, #4]
 800a2ba:	460b      	mov	r3, r1
 800a2bc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	32ae      	adds	r2, #174	@ 0xae
 800a2c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d101      	bne.n	800a2d4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a2d0:	2303      	movs	r3, #3
 800a2d2:	e01c      	b.n	800a30e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2da:	b2db      	uxtb	r3, r3
 800a2dc:	2b03      	cmp	r3, #3
 800a2de:	d115      	bne.n	800a30c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	32ae      	adds	r2, #174	@ 0xae
 800a2ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d00b      	beq.n	800a30c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	32ae      	adds	r2, #174	@ 0xae
 800a2fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a304:	78fa      	ldrb	r2, [r7, #3]
 800a306:	4611      	mov	r1, r2
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a30c:	2300      	movs	r3, #0
}
 800a30e:	4618      	mov	r0, r3
 800a310:	3708      	adds	r7, #8
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}

0800a316 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a316:	b480      	push	{r7}
 800a318:	b083      	sub	sp, #12
 800a31a:	af00      	add	r7, sp, #0
 800a31c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a31e:	2300      	movs	r3, #0
}
 800a320:	4618      	mov	r0, r3
 800a322:	370c      	adds	r7, #12
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr

0800a32c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b084      	sub	sp, #16
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a334:	2300      	movs	r3, #0
 800a336:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2201      	movs	r2, #1
 800a33c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a346:	2b00      	cmp	r3, #0
 800a348:	d00e      	beq.n	800a368 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a350:	685b      	ldr	r3, [r3, #4]
 800a352:	687a      	ldr	r2, [r7, #4]
 800a354:	6852      	ldr	r2, [r2, #4]
 800a356:	b2d2      	uxtb	r2, r2
 800a358:	4611      	mov	r1, r2
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	4798      	blx	r3
 800a35e:	4603      	mov	r3, r0
 800a360:	2b00      	cmp	r3, #0
 800a362:	d001      	beq.n	800a368 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a364:	2303      	movs	r3, #3
 800a366:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a368:	7bfb      	ldrb	r3, [r7, #15]
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3710      	adds	r7, #16
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}

0800a372 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a372:	b480      	push	{r7}
 800a374:	b083      	sub	sp, #12
 800a376:	af00      	add	r7, sp, #0
 800a378:	6078      	str	r0, [r7, #4]
 800a37a:	460b      	mov	r3, r1
 800a37c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a37e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a380:	4618      	mov	r0, r3
 800a382:	370c      	adds	r7, #12
 800a384:	46bd      	mov	sp, r7
 800a386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38a:	4770      	bx	lr

0800a38c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b083      	sub	sp, #12
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
 800a394:	460b      	mov	r3, r1
 800a396:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a398:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	370c      	adds	r7, #12
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a4:	4770      	bx	lr

0800a3a6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a3a6:	b580      	push	{r7, lr}
 800a3a8:	b086      	sub	sp, #24
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	6078      	str	r0, [r7, #4]
 800a3ae:	460b      	mov	r3, r1
 800a3b0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	885b      	ldrh	r3, [r3, #2]
 800a3c2:	b29b      	uxth	r3, r3
 800a3c4:	68fa      	ldr	r2, [r7, #12]
 800a3c6:	7812      	ldrb	r2, [r2, #0]
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d91f      	bls.n	800a40c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	781b      	ldrb	r3, [r3, #0]
 800a3d0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a3d2:	e013      	b.n	800a3fc <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a3d4:	f107 030a 	add.w	r3, r7, #10
 800a3d8:	4619      	mov	r1, r3
 800a3da:	6978      	ldr	r0, [r7, #20]
 800a3dc:	f000 f81b 	bl	800a416 <USBD_GetNextDesc>
 800a3e0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	785b      	ldrb	r3, [r3, #1]
 800a3e6:	2b05      	cmp	r3, #5
 800a3e8:	d108      	bne.n	800a3fc <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a3ee:	693b      	ldr	r3, [r7, #16]
 800a3f0:	789b      	ldrb	r3, [r3, #2]
 800a3f2:	78fa      	ldrb	r2, [r7, #3]
 800a3f4:	429a      	cmp	r2, r3
 800a3f6:	d008      	beq.n	800a40a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	885b      	ldrh	r3, [r3, #2]
 800a400:	b29a      	uxth	r2, r3
 800a402:	897b      	ldrh	r3, [r7, #10]
 800a404:	429a      	cmp	r2, r3
 800a406:	d8e5      	bhi.n	800a3d4 <USBD_GetEpDesc+0x2e>
 800a408:	e000      	b.n	800a40c <USBD_GetEpDesc+0x66>
          break;
 800a40a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a40c:	693b      	ldr	r3, [r7, #16]
}
 800a40e:	4618      	mov	r0, r3
 800a410:	3718      	adds	r7, #24
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}

0800a416 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a416:	b480      	push	{r7}
 800a418:	b085      	sub	sp, #20
 800a41a:	af00      	add	r7, sp, #0
 800a41c:	6078      	str	r0, [r7, #4]
 800a41e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	881b      	ldrh	r3, [r3, #0]
 800a428:	68fa      	ldr	r2, [r7, #12]
 800a42a:	7812      	ldrb	r2, [r2, #0]
 800a42c:	4413      	add	r3, r2
 800a42e:	b29a      	uxth	r2, r3
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	781b      	ldrb	r3, [r3, #0]
 800a438:	461a      	mov	r2, r3
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	4413      	add	r3, r2
 800a43e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a440:	68fb      	ldr	r3, [r7, #12]
}
 800a442:	4618      	mov	r0, r3
 800a444:	3714      	adds	r7, #20
 800a446:	46bd      	mov	sp, r7
 800a448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44c:	4770      	bx	lr

0800a44e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a44e:	b480      	push	{r7}
 800a450:	b087      	sub	sp, #28
 800a452:	af00      	add	r7, sp, #0
 800a454:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	781b      	ldrb	r3, [r3, #0]
 800a45e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	3301      	adds	r3, #1
 800a464:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a466:	697b      	ldr	r3, [r7, #20]
 800a468:	781b      	ldrb	r3, [r3, #0]
 800a46a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a46c:	8a3b      	ldrh	r3, [r7, #16]
 800a46e:	021b      	lsls	r3, r3, #8
 800a470:	b21a      	sxth	r2, r3
 800a472:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a476:	4313      	orrs	r3, r2
 800a478:	b21b      	sxth	r3, r3
 800a47a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a47c:	89fb      	ldrh	r3, [r7, #14]
}
 800a47e:	4618      	mov	r0, r3
 800a480:	371c      	adds	r7, #28
 800a482:	46bd      	mov	sp, r7
 800a484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a488:	4770      	bx	lr
	...

0800a48c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b084      	sub	sp, #16
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
 800a494:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a496:	2300      	movs	r3, #0
 800a498:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	781b      	ldrb	r3, [r3, #0]
 800a49e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a4a2:	2b40      	cmp	r3, #64	@ 0x40
 800a4a4:	d005      	beq.n	800a4b2 <USBD_StdDevReq+0x26>
 800a4a6:	2b40      	cmp	r3, #64	@ 0x40
 800a4a8:	d857      	bhi.n	800a55a <USBD_StdDevReq+0xce>
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d00f      	beq.n	800a4ce <USBD_StdDevReq+0x42>
 800a4ae:	2b20      	cmp	r3, #32
 800a4b0:	d153      	bne.n	800a55a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	32ae      	adds	r2, #174	@ 0xae
 800a4bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4c0:	689b      	ldr	r3, [r3, #8]
 800a4c2:	6839      	ldr	r1, [r7, #0]
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	4798      	blx	r3
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	73fb      	strb	r3, [r7, #15]
      break;
 800a4cc:	e04a      	b.n	800a564 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	785b      	ldrb	r3, [r3, #1]
 800a4d2:	2b09      	cmp	r3, #9
 800a4d4:	d83b      	bhi.n	800a54e <USBD_StdDevReq+0xc2>
 800a4d6:	a201      	add	r2, pc, #4	@ (adr r2, 800a4dc <USBD_StdDevReq+0x50>)
 800a4d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4dc:	0800a531 	.word	0x0800a531
 800a4e0:	0800a545 	.word	0x0800a545
 800a4e4:	0800a54f 	.word	0x0800a54f
 800a4e8:	0800a53b 	.word	0x0800a53b
 800a4ec:	0800a54f 	.word	0x0800a54f
 800a4f0:	0800a50f 	.word	0x0800a50f
 800a4f4:	0800a505 	.word	0x0800a505
 800a4f8:	0800a54f 	.word	0x0800a54f
 800a4fc:	0800a527 	.word	0x0800a527
 800a500:	0800a519 	.word	0x0800a519
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a504:	6839      	ldr	r1, [r7, #0]
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f000 fa3c 	bl	800a984 <USBD_GetDescriptor>
          break;
 800a50c:	e024      	b.n	800a558 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a50e:	6839      	ldr	r1, [r7, #0]
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f000 fba1 	bl	800ac58 <USBD_SetAddress>
          break;
 800a516:	e01f      	b.n	800a558 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a518:	6839      	ldr	r1, [r7, #0]
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f000 fbe0 	bl	800ace0 <USBD_SetConfig>
 800a520:	4603      	mov	r3, r0
 800a522:	73fb      	strb	r3, [r7, #15]
          break;
 800a524:	e018      	b.n	800a558 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a526:	6839      	ldr	r1, [r7, #0]
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f000 fc83 	bl	800ae34 <USBD_GetConfig>
          break;
 800a52e:	e013      	b.n	800a558 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a530:	6839      	ldr	r1, [r7, #0]
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f000 fcb4 	bl	800aea0 <USBD_GetStatus>
          break;
 800a538:	e00e      	b.n	800a558 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a53a:	6839      	ldr	r1, [r7, #0]
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f000 fce3 	bl	800af08 <USBD_SetFeature>
          break;
 800a542:	e009      	b.n	800a558 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a544:	6839      	ldr	r1, [r7, #0]
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f000 fd07 	bl	800af5a <USBD_ClrFeature>
          break;
 800a54c:	e004      	b.n	800a558 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a54e:	6839      	ldr	r1, [r7, #0]
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f000 fd5e 	bl	800b012 <USBD_CtlError>
          break;
 800a556:	bf00      	nop
      }
      break;
 800a558:	e004      	b.n	800a564 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a55a:	6839      	ldr	r1, [r7, #0]
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f000 fd58 	bl	800b012 <USBD_CtlError>
      break;
 800a562:	bf00      	nop
  }

  return ret;
 800a564:	7bfb      	ldrb	r3, [r7, #15]
}
 800a566:	4618      	mov	r0, r3
 800a568:	3710      	adds	r7, #16
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}
 800a56e:	bf00      	nop

0800a570 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b084      	sub	sp, #16
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
 800a578:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a57a:	2300      	movs	r3, #0
 800a57c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	781b      	ldrb	r3, [r3, #0]
 800a582:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a586:	2b40      	cmp	r3, #64	@ 0x40
 800a588:	d005      	beq.n	800a596 <USBD_StdItfReq+0x26>
 800a58a:	2b40      	cmp	r3, #64	@ 0x40
 800a58c:	d852      	bhi.n	800a634 <USBD_StdItfReq+0xc4>
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d001      	beq.n	800a596 <USBD_StdItfReq+0x26>
 800a592:	2b20      	cmp	r3, #32
 800a594:	d14e      	bne.n	800a634 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a59c:	b2db      	uxtb	r3, r3
 800a59e:	3b01      	subs	r3, #1
 800a5a0:	2b02      	cmp	r3, #2
 800a5a2:	d840      	bhi.n	800a626 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	889b      	ldrh	r3, [r3, #4]
 800a5a8:	b2db      	uxtb	r3, r3
 800a5aa:	2b01      	cmp	r3, #1
 800a5ac:	d836      	bhi.n	800a61c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	889b      	ldrh	r3, [r3, #4]
 800a5b2:	b2db      	uxtb	r3, r3
 800a5b4:	4619      	mov	r1, r3
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f7ff fedb 	bl	800a372 <USBD_CoreFindIF>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a5c0:	7bbb      	ldrb	r3, [r7, #14]
 800a5c2:	2bff      	cmp	r3, #255	@ 0xff
 800a5c4:	d01d      	beq.n	800a602 <USBD_StdItfReq+0x92>
 800a5c6:	7bbb      	ldrb	r3, [r7, #14]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d11a      	bne.n	800a602 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a5cc:	7bba      	ldrb	r2, [r7, #14]
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	32ae      	adds	r2, #174	@ 0xae
 800a5d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5d6:	689b      	ldr	r3, [r3, #8]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d00f      	beq.n	800a5fc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a5dc:	7bba      	ldrb	r2, [r7, #14]
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a5e4:	7bba      	ldrb	r2, [r7, #14]
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	32ae      	adds	r2, #174	@ 0xae
 800a5ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5ee:	689b      	ldr	r3, [r3, #8]
 800a5f0:	6839      	ldr	r1, [r7, #0]
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	4798      	blx	r3
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a5fa:	e004      	b.n	800a606 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a5fc:	2303      	movs	r3, #3
 800a5fe:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a600:	e001      	b.n	800a606 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a602:	2303      	movs	r3, #3
 800a604:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	88db      	ldrh	r3, [r3, #6]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d110      	bne.n	800a630 <USBD_StdItfReq+0xc0>
 800a60e:	7bfb      	ldrb	r3, [r7, #15]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d10d      	bne.n	800a630 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	f000 fdd3 	bl	800b1c0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a61a:	e009      	b.n	800a630 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a61c:	6839      	ldr	r1, [r7, #0]
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f000 fcf7 	bl	800b012 <USBD_CtlError>
          break;
 800a624:	e004      	b.n	800a630 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a626:	6839      	ldr	r1, [r7, #0]
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f000 fcf2 	bl	800b012 <USBD_CtlError>
          break;
 800a62e:	e000      	b.n	800a632 <USBD_StdItfReq+0xc2>
          break;
 800a630:	bf00      	nop
      }
      break;
 800a632:	e004      	b.n	800a63e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a634:	6839      	ldr	r1, [r7, #0]
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	f000 fceb 	bl	800b012 <USBD_CtlError>
      break;
 800a63c:	bf00      	nop
  }

  return ret;
 800a63e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a640:	4618      	mov	r0, r3
 800a642:	3710      	adds	r7, #16
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}

0800a648 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b084      	sub	sp, #16
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
 800a650:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a652:	2300      	movs	r3, #0
 800a654:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	889b      	ldrh	r3, [r3, #4]
 800a65a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	781b      	ldrb	r3, [r3, #0]
 800a660:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a664:	2b40      	cmp	r3, #64	@ 0x40
 800a666:	d007      	beq.n	800a678 <USBD_StdEPReq+0x30>
 800a668:	2b40      	cmp	r3, #64	@ 0x40
 800a66a:	f200 817f 	bhi.w	800a96c <USBD_StdEPReq+0x324>
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d02a      	beq.n	800a6c8 <USBD_StdEPReq+0x80>
 800a672:	2b20      	cmp	r3, #32
 800a674:	f040 817a 	bne.w	800a96c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a678:	7bbb      	ldrb	r3, [r7, #14]
 800a67a:	4619      	mov	r1, r3
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f7ff fe85 	bl	800a38c <USBD_CoreFindEP>
 800a682:	4603      	mov	r3, r0
 800a684:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a686:	7b7b      	ldrb	r3, [r7, #13]
 800a688:	2bff      	cmp	r3, #255	@ 0xff
 800a68a:	f000 8174 	beq.w	800a976 <USBD_StdEPReq+0x32e>
 800a68e:	7b7b      	ldrb	r3, [r7, #13]
 800a690:	2b00      	cmp	r3, #0
 800a692:	f040 8170 	bne.w	800a976 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a696:	7b7a      	ldrb	r2, [r7, #13]
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a69e:	7b7a      	ldrb	r2, [r7, #13]
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	32ae      	adds	r2, #174	@ 0xae
 800a6a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6a8:	689b      	ldr	r3, [r3, #8]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	f000 8163 	beq.w	800a976 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a6b0:	7b7a      	ldrb	r2, [r7, #13]
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	32ae      	adds	r2, #174	@ 0xae
 800a6b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6ba:	689b      	ldr	r3, [r3, #8]
 800a6bc:	6839      	ldr	r1, [r7, #0]
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	4798      	blx	r3
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a6c6:	e156      	b.n	800a976 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	785b      	ldrb	r3, [r3, #1]
 800a6cc:	2b03      	cmp	r3, #3
 800a6ce:	d008      	beq.n	800a6e2 <USBD_StdEPReq+0x9a>
 800a6d0:	2b03      	cmp	r3, #3
 800a6d2:	f300 8145 	bgt.w	800a960 <USBD_StdEPReq+0x318>
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	f000 809b 	beq.w	800a812 <USBD_StdEPReq+0x1ca>
 800a6dc:	2b01      	cmp	r3, #1
 800a6de:	d03c      	beq.n	800a75a <USBD_StdEPReq+0x112>
 800a6e0:	e13e      	b.n	800a960 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6e8:	b2db      	uxtb	r3, r3
 800a6ea:	2b02      	cmp	r3, #2
 800a6ec:	d002      	beq.n	800a6f4 <USBD_StdEPReq+0xac>
 800a6ee:	2b03      	cmp	r3, #3
 800a6f0:	d016      	beq.n	800a720 <USBD_StdEPReq+0xd8>
 800a6f2:	e02c      	b.n	800a74e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a6f4:	7bbb      	ldrb	r3, [r7, #14]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d00d      	beq.n	800a716 <USBD_StdEPReq+0xce>
 800a6fa:	7bbb      	ldrb	r3, [r7, #14]
 800a6fc:	2b80      	cmp	r3, #128	@ 0x80
 800a6fe:	d00a      	beq.n	800a716 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a700:	7bbb      	ldrb	r3, [r7, #14]
 800a702:	4619      	mov	r1, r3
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f001 f975 	bl	800b9f4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a70a:	2180      	movs	r1, #128	@ 0x80
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f001 f971 	bl	800b9f4 <USBD_LL_StallEP>
 800a712:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a714:	e020      	b.n	800a758 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a716:	6839      	ldr	r1, [r7, #0]
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f000 fc7a 	bl	800b012 <USBD_CtlError>
              break;
 800a71e:	e01b      	b.n	800a758 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	885b      	ldrh	r3, [r3, #2]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d10e      	bne.n	800a746 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a728:	7bbb      	ldrb	r3, [r7, #14]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d00b      	beq.n	800a746 <USBD_StdEPReq+0xfe>
 800a72e:	7bbb      	ldrb	r3, [r7, #14]
 800a730:	2b80      	cmp	r3, #128	@ 0x80
 800a732:	d008      	beq.n	800a746 <USBD_StdEPReq+0xfe>
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	88db      	ldrh	r3, [r3, #6]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d104      	bne.n	800a746 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a73c:	7bbb      	ldrb	r3, [r7, #14]
 800a73e:	4619      	mov	r1, r3
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f001 f957 	bl	800b9f4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f000 fd3a 	bl	800b1c0 <USBD_CtlSendStatus>

              break;
 800a74c:	e004      	b.n	800a758 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a74e:	6839      	ldr	r1, [r7, #0]
 800a750:	6878      	ldr	r0, [r7, #4]
 800a752:	f000 fc5e 	bl	800b012 <USBD_CtlError>
              break;
 800a756:	bf00      	nop
          }
          break;
 800a758:	e107      	b.n	800a96a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a760:	b2db      	uxtb	r3, r3
 800a762:	2b02      	cmp	r3, #2
 800a764:	d002      	beq.n	800a76c <USBD_StdEPReq+0x124>
 800a766:	2b03      	cmp	r3, #3
 800a768:	d016      	beq.n	800a798 <USBD_StdEPReq+0x150>
 800a76a:	e04b      	b.n	800a804 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a76c:	7bbb      	ldrb	r3, [r7, #14]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d00d      	beq.n	800a78e <USBD_StdEPReq+0x146>
 800a772:	7bbb      	ldrb	r3, [r7, #14]
 800a774:	2b80      	cmp	r3, #128	@ 0x80
 800a776:	d00a      	beq.n	800a78e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a778:	7bbb      	ldrb	r3, [r7, #14]
 800a77a:	4619      	mov	r1, r3
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f001 f939 	bl	800b9f4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a782:	2180      	movs	r1, #128	@ 0x80
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f001 f935 	bl	800b9f4 <USBD_LL_StallEP>
 800a78a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a78c:	e040      	b.n	800a810 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a78e:	6839      	ldr	r1, [r7, #0]
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f000 fc3e 	bl	800b012 <USBD_CtlError>
              break;
 800a796:	e03b      	b.n	800a810 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	885b      	ldrh	r3, [r3, #2]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d136      	bne.n	800a80e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a7a0:	7bbb      	ldrb	r3, [r7, #14]
 800a7a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d004      	beq.n	800a7b4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a7aa:	7bbb      	ldrb	r3, [r7, #14]
 800a7ac:	4619      	mov	r1, r3
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f001 f93f 	bl	800ba32 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f000 fd03 	bl	800b1c0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a7ba:	7bbb      	ldrb	r3, [r7, #14]
 800a7bc:	4619      	mov	r1, r3
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f7ff fde4 	bl	800a38c <USBD_CoreFindEP>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a7c8:	7b7b      	ldrb	r3, [r7, #13]
 800a7ca:	2bff      	cmp	r3, #255	@ 0xff
 800a7cc:	d01f      	beq.n	800a80e <USBD_StdEPReq+0x1c6>
 800a7ce:	7b7b      	ldrb	r3, [r7, #13]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d11c      	bne.n	800a80e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a7d4:	7b7a      	ldrb	r2, [r7, #13]
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a7dc:	7b7a      	ldrb	r2, [r7, #13]
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	32ae      	adds	r2, #174	@ 0xae
 800a7e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7e6:	689b      	ldr	r3, [r3, #8]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d010      	beq.n	800a80e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a7ec:	7b7a      	ldrb	r2, [r7, #13]
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	32ae      	adds	r2, #174	@ 0xae
 800a7f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7f6:	689b      	ldr	r3, [r3, #8]
 800a7f8:	6839      	ldr	r1, [r7, #0]
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	4798      	blx	r3
 800a7fe:	4603      	mov	r3, r0
 800a800:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a802:	e004      	b.n	800a80e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a804:	6839      	ldr	r1, [r7, #0]
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f000 fc03 	bl	800b012 <USBD_CtlError>
              break;
 800a80c:	e000      	b.n	800a810 <USBD_StdEPReq+0x1c8>
              break;
 800a80e:	bf00      	nop
          }
          break;
 800a810:	e0ab      	b.n	800a96a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a818:	b2db      	uxtb	r3, r3
 800a81a:	2b02      	cmp	r3, #2
 800a81c:	d002      	beq.n	800a824 <USBD_StdEPReq+0x1dc>
 800a81e:	2b03      	cmp	r3, #3
 800a820:	d032      	beq.n	800a888 <USBD_StdEPReq+0x240>
 800a822:	e097      	b.n	800a954 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a824:	7bbb      	ldrb	r3, [r7, #14]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d007      	beq.n	800a83a <USBD_StdEPReq+0x1f2>
 800a82a:	7bbb      	ldrb	r3, [r7, #14]
 800a82c:	2b80      	cmp	r3, #128	@ 0x80
 800a82e:	d004      	beq.n	800a83a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a830:	6839      	ldr	r1, [r7, #0]
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f000 fbed 	bl	800b012 <USBD_CtlError>
                break;
 800a838:	e091      	b.n	800a95e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a83a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	da0b      	bge.n	800a85a <USBD_StdEPReq+0x212>
 800a842:	7bbb      	ldrb	r3, [r7, #14]
 800a844:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a848:	4613      	mov	r3, r2
 800a84a:	009b      	lsls	r3, r3, #2
 800a84c:	4413      	add	r3, r2
 800a84e:	009b      	lsls	r3, r3, #2
 800a850:	3310      	adds	r3, #16
 800a852:	687a      	ldr	r2, [r7, #4]
 800a854:	4413      	add	r3, r2
 800a856:	3304      	adds	r3, #4
 800a858:	e00b      	b.n	800a872 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a85a:	7bbb      	ldrb	r3, [r7, #14]
 800a85c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a860:	4613      	mov	r3, r2
 800a862:	009b      	lsls	r3, r3, #2
 800a864:	4413      	add	r3, r2
 800a866:	009b      	lsls	r3, r3, #2
 800a868:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a86c:	687a      	ldr	r2, [r7, #4]
 800a86e:	4413      	add	r3, r2
 800a870:	3304      	adds	r3, #4
 800a872:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	2200      	movs	r2, #0
 800a878:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	2202      	movs	r2, #2
 800a87e:	4619      	mov	r1, r3
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f000 fc43 	bl	800b10c <USBD_CtlSendData>
              break;
 800a886:	e06a      	b.n	800a95e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a888:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	da11      	bge.n	800a8b4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a890:	7bbb      	ldrb	r3, [r7, #14]
 800a892:	f003 020f 	and.w	r2, r3, #15
 800a896:	6879      	ldr	r1, [r7, #4]
 800a898:	4613      	mov	r3, r2
 800a89a:	009b      	lsls	r3, r3, #2
 800a89c:	4413      	add	r3, r2
 800a89e:	009b      	lsls	r3, r3, #2
 800a8a0:	440b      	add	r3, r1
 800a8a2:	3324      	adds	r3, #36	@ 0x24
 800a8a4:	881b      	ldrh	r3, [r3, #0]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d117      	bne.n	800a8da <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a8aa:	6839      	ldr	r1, [r7, #0]
 800a8ac:	6878      	ldr	r0, [r7, #4]
 800a8ae:	f000 fbb0 	bl	800b012 <USBD_CtlError>
                  break;
 800a8b2:	e054      	b.n	800a95e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a8b4:	7bbb      	ldrb	r3, [r7, #14]
 800a8b6:	f003 020f 	and.w	r2, r3, #15
 800a8ba:	6879      	ldr	r1, [r7, #4]
 800a8bc:	4613      	mov	r3, r2
 800a8be:	009b      	lsls	r3, r3, #2
 800a8c0:	4413      	add	r3, r2
 800a8c2:	009b      	lsls	r3, r3, #2
 800a8c4:	440b      	add	r3, r1
 800a8c6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a8ca:	881b      	ldrh	r3, [r3, #0]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d104      	bne.n	800a8da <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a8d0:	6839      	ldr	r1, [r7, #0]
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f000 fb9d 	bl	800b012 <USBD_CtlError>
                  break;
 800a8d8:	e041      	b.n	800a95e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a8da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	da0b      	bge.n	800a8fa <USBD_StdEPReq+0x2b2>
 800a8e2:	7bbb      	ldrb	r3, [r7, #14]
 800a8e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a8e8:	4613      	mov	r3, r2
 800a8ea:	009b      	lsls	r3, r3, #2
 800a8ec:	4413      	add	r3, r2
 800a8ee:	009b      	lsls	r3, r3, #2
 800a8f0:	3310      	adds	r3, #16
 800a8f2:	687a      	ldr	r2, [r7, #4]
 800a8f4:	4413      	add	r3, r2
 800a8f6:	3304      	adds	r3, #4
 800a8f8:	e00b      	b.n	800a912 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a8fa:	7bbb      	ldrb	r3, [r7, #14]
 800a8fc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a900:	4613      	mov	r3, r2
 800a902:	009b      	lsls	r3, r3, #2
 800a904:	4413      	add	r3, r2
 800a906:	009b      	lsls	r3, r3, #2
 800a908:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a90c:	687a      	ldr	r2, [r7, #4]
 800a90e:	4413      	add	r3, r2
 800a910:	3304      	adds	r3, #4
 800a912:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a914:	7bbb      	ldrb	r3, [r7, #14]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d002      	beq.n	800a920 <USBD_StdEPReq+0x2d8>
 800a91a:	7bbb      	ldrb	r3, [r7, #14]
 800a91c:	2b80      	cmp	r3, #128	@ 0x80
 800a91e:	d103      	bne.n	800a928 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	2200      	movs	r2, #0
 800a924:	601a      	str	r2, [r3, #0]
 800a926:	e00e      	b.n	800a946 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a928:	7bbb      	ldrb	r3, [r7, #14]
 800a92a:	4619      	mov	r1, r3
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f001 f89f 	bl	800ba70 <USBD_LL_IsStallEP>
 800a932:	4603      	mov	r3, r0
 800a934:	2b00      	cmp	r3, #0
 800a936:	d003      	beq.n	800a940 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	2201      	movs	r2, #1
 800a93c:	601a      	str	r2, [r3, #0]
 800a93e:	e002      	b.n	800a946 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	2200      	movs	r2, #0
 800a944:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	2202      	movs	r2, #2
 800a94a:	4619      	mov	r1, r3
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	f000 fbdd 	bl	800b10c <USBD_CtlSendData>
              break;
 800a952:	e004      	b.n	800a95e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a954:	6839      	ldr	r1, [r7, #0]
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f000 fb5b 	bl	800b012 <USBD_CtlError>
              break;
 800a95c:	bf00      	nop
          }
          break;
 800a95e:	e004      	b.n	800a96a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a960:	6839      	ldr	r1, [r7, #0]
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f000 fb55 	bl	800b012 <USBD_CtlError>
          break;
 800a968:	bf00      	nop
      }
      break;
 800a96a:	e005      	b.n	800a978 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a96c:	6839      	ldr	r1, [r7, #0]
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f000 fb4f 	bl	800b012 <USBD_CtlError>
      break;
 800a974:	e000      	b.n	800a978 <USBD_StdEPReq+0x330>
      break;
 800a976:	bf00      	nop
  }

  return ret;
 800a978:	7bfb      	ldrb	r3, [r7, #15]
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3710      	adds	r7, #16
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}
	...

0800a984 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b084      	sub	sp, #16
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a98e:	2300      	movs	r3, #0
 800a990:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a992:	2300      	movs	r3, #0
 800a994:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a996:	2300      	movs	r3, #0
 800a998:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	885b      	ldrh	r3, [r3, #2]
 800a99e:	0a1b      	lsrs	r3, r3, #8
 800a9a0:	b29b      	uxth	r3, r3
 800a9a2:	3b01      	subs	r3, #1
 800a9a4:	2b06      	cmp	r3, #6
 800a9a6:	f200 8128 	bhi.w	800abfa <USBD_GetDescriptor+0x276>
 800a9aa:	a201      	add	r2, pc, #4	@ (adr r2, 800a9b0 <USBD_GetDescriptor+0x2c>)
 800a9ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9b0:	0800a9cd 	.word	0x0800a9cd
 800a9b4:	0800a9e5 	.word	0x0800a9e5
 800a9b8:	0800aa25 	.word	0x0800aa25
 800a9bc:	0800abfb 	.word	0x0800abfb
 800a9c0:	0800abfb 	.word	0x0800abfb
 800a9c4:	0800ab9b 	.word	0x0800ab9b
 800a9c8:	0800abc7 	.word	0x0800abc7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	687a      	ldr	r2, [r7, #4]
 800a9d6:	7c12      	ldrb	r2, [r2, #16]
 800a9d8:	f107 0108 	add.w	r1, r7, #8
 800a9dc:	4610      	mov	r0, r2
 800a9de:	4798      	blx	r3
 800a9e0:	60f8      	str	r0, [r7, #12]
      break;
 800a9e2:	e112      	b.n	800ac0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	7c1b      	ldrb	r3, [r3, #16]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d10d      	bne.n	800aa08 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9f4:	f107 0208 	add.w	r2, r7, #8
 800a9f8:	4610      	mov	r0, r2
 800a9fa:	4798      	blx	r3
 800a9fc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	3301      	adds	r3, #1
 800aa02:	2202      	movs	r2, #2
 800aa04:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800aa06:	e100      	b.n	800ac0a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa10:	f107 0208 	add.w	r2, r7, #8
 800aa14:	4610      	mov	r0, r2
 800aa16:	4798      	blx	r3
 800aa18:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	3301      	adds	r3, #1
 800aa1e:	2202      	movs	r2, #2
 800aa20:	701a      	strb	r2, [r3, #0]
      break;
 800aa22:	e0f2      	b.n	800ac0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	885b      	ldrh	r3, [r3, #2]
 800aa28:	b2db      	uxtb	r3, r3
 800aa2a:	2b05      	cmp	r3, #5
 800aa2c:	f200 80ac 	bhi.w	800ab88 <USBD_GetDescriptor+0x204>
 800aa30:	a201      	add	r2, pc, #4	@ (adr r2, 800aa38 <USBD_GetDescriptor+0xb4>)
 800aa32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa36:	bf00      	nop
 800aa38:	0800aa51 	.word	0x0800aa51
 800aa3c:	0800aa85 	.word	0x0800aa85
 800aa40:	0800aab9 	.word	0x0800aab9
 800aa44:	0800aaed 	.word	0x0800aaed
 800aa48:	0800ab21 	.word	0x0800ab21
 800aa4c:	0800ab55 	.word	0x0800ab55
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa56:	685b      	ldr	r3, [r3, #4]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d00b      	beq.n	800aa74 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa62:	685b      	ldr	r3, [r3, #4]
 800aa64:	687a      	ldr	r2, [r7, #4]
 800aa66:	7c12      	ldrb	r2, [r2, #16]
 800aa68:	f107 0108 	add.w	r1, r7, #8
 800aa6c:	4610      	mov	r0, r2
 800aa6e:	4798      	blx	r3
 800aa70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa72:	e091      	b.n	800ab98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aa74:	6839      	ldr	r1, [r7, #0]
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f000 facb 	bl	800b012 <USBD_CtlError>
            err++;
 800aa7c:	7afb      	ldrb	r3, [r7, #11]
 800aa7e:	3301      	adds	r3, #1
 800aa80:	72fb      	strb	r3, [r7, #11]
          break;
 800aa82:	e089      	b.n	800ab98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa8a:	689b      	ldr	r3, [r3, #8]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d00b      	beq.n	800aaa8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa96:	689b      	ldr	r3, [r3, #8]
 800aa98:	687a      	ldr	r2, [r7, #4]
 800aa9a:	7c12      	ldrb	r2, [r2, #16]
 800aa9c:	f107 0108 	add.w	r1, r7, #8
 800aaa0:	4610      	mov	r0, r2
 800aaa2:	4798      	blx	r3
 800aaa4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aaa6:	e077      	b.n	800ab98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aaa8:	6839      	ldr	r1, [r7, #0]
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	f000 fab1 	bl	800b012 <USBD_CtlError>
            err++;
 800aab0:	7afb      	ldrb	r3, [r7, #11]
 800aab2:	3301      	adds	r3, #1
 800aab4:	72fb      	strb	r3, [r7, #11]
          break;
 800aab6:	e06f      	b.n	800ab98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aabe:	68db      	ldr	r3, [r3, #12]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d00b      	beq.n	800aadc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aaca:	68db      	ldr	r3, [r3, #12]
 800aacc:	687a      	ldr	r2, [r7, #4]
 800aace:	7c12      	ldrb	r2, [r2, #16]
 800aad0:	f107 0108 	add.w	r1, r7, #8
 800aad4:	4610      	mov	r0, r2
 800aad6:	4798      	blx	r3
 800aad8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aada:	e05d      	b.n	800ab98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aadc:	6839      	ldr	r1, [r7, #0]
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f000 fa97 	bl	800b012 <USBD_CtlError>
            err++;
 800aae4:	7afb      	ldrb	r3, [r7, #11]
 800aae6:	3301      	adds	r3, #1
 800aae8:	72fb      	strb	r3, [r7, #11]
          break;
 800aaea:	e055      	b.n	800ab98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aaf2:	691b      	ldr	r3, [r3, #16]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d00b      	beq.n	800ab10 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aafe:	691b      	ldr	r3, [r3, #16]
 800ab00:	687a      	ldr	r2, [r7, #4]
 800ab02:	7c12      	ldrb	r2, [r2, #16]
 800ab04:	f107 0108 	add.w	r1, r7, #8
 800ab08:	4610      	mov	r0, r2
 800ab0a:	4798      	blx	r3
 800ab0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab0e:	e043      	b.n	800ab98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab10:	6839      	ldr	r1, [r7, #0]
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f000 fa7d 	bl	800b012 <USBD_CtlError>
            err++;
 800ab18:	7afb      	ldrb	r3, [r7, #11]
 800ab1a:	3301      	adds	r3, #1
 800ab1c:	72fb      	strb	r3, [r7, #11]
          break;
 800ab1e:	e03b      	b.n	800ab98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab26:	695b      	ldr	r3, [r3, #20]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d00b      	beq.n	800ab44 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab32:	695b      	ldr	r3, [r3, #20]
 800ab34:	687a      	ldr	r2, [r7, #4]
 800ab36:	7c12      	ldrb	r2, [r2, #16]
 800ab38:	f107 0108 	add.w	r1, r7, #8
 800ab3c:	4610      	mov	r0, r2
 800ab3e:	4798      	blx	r3
 800ab40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab42:	e029      	b.n	800ab98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab44:	6839      	ldr	r1, [r7, #0]
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f000 fa63 	bl	800b012 <USBD_CtlError>
            err++;
 800ab4c:	7afb      	ldrb	r3, [r7, #11]
 800ab4e:	3301      	adds	r3, #1
 800ab50:	72fb      	strb	r3, [r7, #11]
          break;
 800ab52:	e021      	b.n	800ab98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab5a:	699b      	ldr	r3, [r3, #24]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d00b      	beq.n	800ab78 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab66:	699b      	ldr	r3, [r3, #24]
 800ab68:	687a      	ldr	r2, [r7, #4]
 800ab6a:	7c12      	ldrb	r2, [r2, #16]
 800ab6c:	f107 0108 	add.w	r1, r7, #8
 800ab70:	4610      	mov	r0, r2
 800ab72:	4798      	blx	r3
 800ab74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab76:	e00f      	b.n	800ab98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab78:	6839      	ldr	r1, [r7, #0]
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	f000 fa49 	bl	800b012 <USBD_CtlError>
            err++;
 800ab80:	7afb      	ldrb	r3, [r7, #11]
 800ab82:	3301      	adds	r3, #1
 800ab84:	72fb      	strb	r3, [r7, #11]
          break;
 800ab86:	e007      	b.n	800ab98 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ab88:	6839      	ldr	r1, [r7, #0]
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f000 fa41 	bl	800b012 <USBD_CtlError>
          err++;
 800ab90:	7afb      	ldrb	r3, [r7, #11]
 800ab92:	3301      	adds	r3, #1
 800ab94:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ab96:	bf00      	nop
      }
      break;
 800ab98:	e037      	b.n	800ac0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	7c1b      	ldrb	r3, [r3, #16]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d109      	bne.n	800abb6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aba8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abaa:	f107 0208 	add.w	r2, r7, #8
 800abae:	4610      	mov	r0, r2
 800abb0:	4798      	blx	r3
 800abb2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800abb4:	e029      	b.n	800ac0a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800abb6:	6839      	ldr	r1, [r7, #0]
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f000 fa2a 	bl	800b012 <USBD_CtlError>
        err++;
 800abbe:	7afb      	ldrb	r3, [r7, #11]
 800abc0:	3301      	adds	r3, #1
 800abc2:	72fb      	strb	r3, [r7, #11]
      break;
 800abc4:	e021      	b.n	800ac0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	7c1b      	ldrb	r3, [r3, #16]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d10d      	bne.n	800abea <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abd6:	f107 0208 	add.w	r2, r7, #8
 800abda:	4610      	mov	r0, r2
 800abdc:	4798      	blx	r3
 800abde:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	3301      	adds	r3, #1
 800abe4:	2207      	movs	r2, #7
 800abe6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800abe8:	e00f      	b.n	800ac0a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800abea:	6839      	ldr	r1, [r7, #0]
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	f000 fa10 	bl	800b012 <USBD_CtlError>
        err++;
 800abf2:	7afb      	ldrb	r3, [r7, #11]
 800abf4:	3301      	adds	r3, #1
 800abf6:	72fb      	strb	r3, [r7, #11]
      break;
 800abf8:	e007      	b.n	800ac0a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800abfa:	6839      	ldr	r1, [r7, #0]
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	f000 fa08 	bl	800b012 <USBD_CtlError>
      err++;
 800ac02:	7afb      	ldrb	r3, [r7, #11]
 800ac04:	3301      	adds	r3, #1
 800ac06:	72fb      	strb	r3, [r7, #11]
      break;
 800ac08:	bf00      	nop
  }

  if (err != 0U)
 800ac0a:	7afb      	ldrb	r3, [r7, #11]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d11e      	bne.n	800ac4e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	88db      	ldrh	r3, [r3, #6]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d016      	beq.n	800ac46 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800ac18:	893b      	ldrh	r3, [r7, #8]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d00e      	beq.n	800ac3c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	88da      	ldrh	r2, [r3, #6]
 800ac22:	893b      	ldrh	r3, [r7, #8]
 800ac24:	4293      	cmp	r3, r2
 800ac26:	bf28      	it	cs
 800ac28:	4613      	movcs	r3, r2
 800ac2a:	b29b      	uxth	r3, r3
 800ac2c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ac2e:	893b      	ldrh	r3, [r7, #8]
 800ac30:	461a      	mov	r2, r3
 800ac32:	68f9      	ldr	r1, [r7, #12]
 800ac34:	6878      	ldr	r0, [r7, #4]
 800ac36:	f000 fa69 	bl	800b10c <USBD_CtlSendData>
 800ac3a:	e009      	b.n	800ac50 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ac3c:	6839      	ldr	r1, [r7, #0]
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f000 f9e7 	bl	800b012 <USBD_CtlError>
 800ac44:	e004      	b.n	800ac50 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f000 faba 	bl	800b1c0 <USBD_CtlSendStatus>
 800ac4c:	e000      	b.n	800ac50 <USBD_GetDescriptor+0x2cc>
    return;
 800ac4e:	bf00      	nop
  }
}
 800ac50:	3710      	adds	r7, #16
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}
 800ac56:	bf00      	nop

0800ac58 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b084      	sub	sp, #16
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
 800ac60:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	889b      	ldrh	r3, [r3, #4]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d131      	bne.n	800acce <USBD_SetAddress+0x76>
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	88db      	ldrh	r3, [r3, #6]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d12d      	bne.n	800acce <USBD_SetAddress+0x76>
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	885b      	ldrh	r3, [r3, #2]
 800ac76:	2b7f      	cmp	r3, #127	@ 0x7f
 800ac78:	d829      	bhi.n	800acce <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	885b      	ldrh	r3, [r3, #2]
 800ac7e:	b2db      	uxtb	r3, r3
 800ac80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac84:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac8c:	b2db      	uxtb	r3, r3
 800ac8e:	2b03      	cmp	r3, #3
 800ac90:	d104      	bne.n	800ac9c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ac92:	6839      	ldr	r1, [r7, #0]
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f000 f9bc 	bl	800b012 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac9a:	e01d      	b.n	800acd8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	7bfa      	ldrb	r2, [r7, #15]
 800aca0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800aca4:	7bfb      	ldrb	r3, [r7, #15]
 800aca6:	4619      	mov	r1, r3
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f000 ff0d 	bl	800bac8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f000 fa86 	bl	800b1c0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800acb4:	7bfb      	ldrb	r3, [r7, #15]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d004      	beq.n	800acc4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2202      	movs	r2, #2
 800acbe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acc2:	e009      	b.n	800acd8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2201      	movs	r2, #1
 800acc8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800accc:	e004      	b.n	800acd8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800acce:	6839      	ldr	r1, [r7, #0]
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f000 f99e 	bl	800b012 <USBD_CtlError>
  }
}
 800acd6:	bf00      	nop
 800acd8:	bf00      	nop
 800acda:	3710      	adds	r7, #16
 800acdc:	46bd      	mov	sp, r7
 800acde:	bd80      	pop	{r7, pc}

0800ace0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b084      	sub	sp, #16
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
 800ace8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800acea:	2300      	movs	r3, #0
 800acec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	885b      	ldrh	r3, [r3, #2]
 800acf2:	b2da      	uxtb	r2, r3
 800acf4:	4b4e      	ldr	r3, [pc, #312]	@ (800ae30 <USBD_SetConfig+0x150>)
 800acf6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800acf8:	4b4d      	ldr	r3, [pc, #308]	@ (800ae30 <USBD_SetConfig+0x150>)
 800acfa:	781b      	ldrb	r3, [r3, #0]
 800acfc:	2b01      	cmp	r3, #1
 800acfe:	d905      	bls.n	800ad0c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ad00:	6839      	ldr	r1, [r7, #0]
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f000 f985 	bl	800b012 <USBD_CtlError>
    return USBD_FAIL;
 800ad08:	2303      	movs	r3, #3
 800ad0a:	e08c      	b.n	800ae26 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad12:	b2db      	uxtb	r3, r3
 800ad14:	2b02      	cmp	r3, #2
 800ad16:	d002      	beq.n	800ad1e <USBD_SetConfig+0x3e>
 800ad18:	2b03      	cmp	r3, #3
 800ad1a:	d029      	beq.n	800ad70 <USBD_SetConfig+0x90>
 800ad1c:	e075      	b.n	800ae0a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ad1e:	4b44      	ldr	r3, [pc, #272]	@ (800ae30 <USBD_SetConfig+0x150>)
 800ad20:	781b      	ldrb	r3, [r3, #0]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d020      	beq.n	800ad68 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ad26:	4b42      	ldr	r3, [pc, #264]	@ (800ae30 <USBD_SetConfig+0x150>)
 800ad28:	781b      	ldrb	r3, [r3, #0]
 800ad2a:	461a      	mov	r2, r3
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ad30:	4b3f      	ldr	r3, [pc, #252]	@ (800ae30 <USBD_SetConfig+0x150>)
 800ad32:	781b      	ldrb	r3, [r3, #0]
 800ad34:	4619      	mov	r1, r3
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f7fe ffe3 	bl	8009d02 <USBD_SetClassConfig>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ad40:	7bfb      	ldrb	r3, [r7, #15]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d008      	beq.n	800ad58 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ad46:	6839      	ldr	r1, [r7, #0]
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f000 f962 	bl	800b012 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	2202      	movs	r2, #2
 800ad52:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ad56:	e065      	b.n	800ae24 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f000 fa31 	bl	800b1c0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2203      	movs	r2, #3
 800ad62:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ad66:	e05d      	b.n	800ae24 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	f000 fa29 	bl	800b1c0 <USBD_CtlSendStatus>
      break;
 800ad6e:	e059      	b.n	800ae24 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ad70:	4b2f      	ldr	r3, [pc, #188]	@ (800ae30 <USBD_SetConfig+0x150>)
 800ad72:	781b      	ldrb	r3, [r3, #0]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d112      	bne.n	800ad9e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2202      	movs	r2, #2
 800ad7c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800ad80:	4b2b      	ldr	r3, [pc, #172]	@ (800ae30 <USBD_SetConfig+0x150>)
 800ad82:	781b      	ldrb	r3, [r3, #0]
 800ad84:	461a      	mov	r2, r3
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ad8a:	4b29      	ldr	r3, [pc, #164]	@ (800ae30 <USBD_SetConfig+0x150>)
 800ad8c:	781b      	ldrb	r3, [r3, #0]
 800ad8e:	4619      	mov	r1, r3
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f7fe ffd2 	bl	8009d3a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f000 fa12 	bl	800b1c0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ad9c:	e042      	b.n	800ae24 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ad9e:	4b24      	ldr	r3, [pc, #144]	@ (800ae30 <USBD_SetConfig+0x150>)
 800ada0:	781b      	ldrb	r3, [r3, #0]
 800ada2:	461a      	mov	r2, r3
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	685b      	ldr	r3, [r3, #4]
 800ada8:	429a      	cmp	r2, r3
 800adaa:	d02a      	beq.n	800ae02 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	685b      	ldr	r3, [r3, #4]
 800adb0:	b2db      	uxtb	r3, r3
 800adb2:	4619      	mov	r1, r3
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f7fe ffc0 	bl	8009d3a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800adba:	4b1d      	ldr	r3, [pc, #116]	@ (800ae30 <USBD_SetConfig+0x150>)
 800adbc:	781b      	ldrb	r3, [r3, #0]
 800adbe:	461a      	mov	r2, r3
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800adc4:	4b1a      	ldr	r3, [pc, #104]	@ (800ae30 <USBD_SetConfig+0x150>)
 800adc6:	781b      	ldrb	r3, [r3, #0]
 800adc8:	4619      	mov	r1, r3
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f7fe ff99 	bl	8009d02 <USBD_SetClassConfig>
 800add0:	4603      	mov	r3, r0
 800add2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800add4:	7bfb      	ldrb	r3, [r7, #15]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d00f      	beq.n	800adfa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800adda:	6839      	ldr	r1, [r7, #0]
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f000 f918 	bl	800b012 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	685b      	ldr	r3, [r3, #4]
 800ade6:	b2db      	uxtb	r3, r3
 800ade8:	4619      	mov	r1, r3
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f7fe ffa5 	bl	8009d3a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2202      	movs	r2, #2
 800adf4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800adf8:	e014      	b.n	800ae24 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f000 f9e0 	bl	800b1c0 <USBD_CtlSendStatus>
      break;
 800ae00:	e010      	b.n	800ae24 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f000 f9dc 	bl	800b1c0 <USBD_CtlSendStatus>
      break;
 800ae08:	e00c      	b.n	800ae24 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ae0a:	6839      	ldr	r1, [r7, #0]
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f000 f900 	bl	800b012 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ae12:	4b07      	ldr	r3, [pc, #28]	@ (800ae30 <USBD_SetConfig+0x150>)
 800ae14:	781b      	ldrb	r3, [r3, #0]
 800ae16:	4619      	mov	r1, r3
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f7fe ff8e 	bl	8009d3a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ae1e:	2303      	movs	r3, #3
 800ae20:	73fb      	strb	r3, [r7, #15]
      break;
 800ae22:	bf00      	nop
  }

  return ret;
 800ae24:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	3710      	adds	r7, #16
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}
 800ae2e:	bf00      	nop
 800ae30:	20000674 	.word	0x20000674

0800ae34 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b082      	sub	sp, #8
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
 800ae3c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	88db      	ldrh	r3, [r3, #6]
 800ae42:	2b01      	cmp	r3, #1
 800ae44:	d004      	beq.n	800ae50 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ae46:	6839      	ldr	r1, [r7, #0]
 800ae48:	6878      	ldr	r0, [r7, #4]
 800ae4a:	f000 f8e2 	bl	800b012 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ae4e:	e023      	b.n	800ae98 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae56:	b2db      	uxtb	r3, r3
 800ae58:	2b02      	cmp	r3, #2
 800ae5a:	dc02      	bgt.n	800ae62 <USBD_GetConfig+0x2e>
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	dc03      	bgt.n	800ae68 <USBD_GetConfig+0x34>
 800ae60:	e015      	b.n	800ae8e <USBD_GetConfig+0x5a>
 800ae62:	2b03      	cmp	r3, #3
 800ae64:	d00b      	beq.n	800ae7e <USBD_GetConfig+0x4a>
 800ae66:	e012      	b.n	800ae8e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	3308      	adds	r3, #8
 800ae72:	2201      	movs	r2, #1
 800ae74:	4619      	mov	r1, r3
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f000 f948 	bl	800b10c <USBD_CtlSendData>
        break;
 800ae7c:	e00c      	b.n	800ae98 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	3304      	adds	r3, #4
 800ae82:	2201      	movs	r2, #1
 800ae84:	4619      	mov	r1, r3
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f000 f940 	bl	800b10c <USBD_CtlSendData>
        break;
 800ae8c:	e004      	b.n	800ae98 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ae8e:	6839      	ldr	r1, [r7, #0]
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f000 f8be 	bl	800b012 <USBD_CtlError>
        break;
 800ae96:	bf00      	nop
}
 800ae98:	bf00      	nop
 800ae9a:	3708      	adds	r7, #8
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}

0800aea0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b082      	sub	sp, #8
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
 800aea8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aeb0:	b2db      	uxtb	r3, r3
 800aeb2:	3b01      	subs	r3, #1
 800aeb4:	2b02      	cmp	r3, #2
 800aeb6:	d81e      	bhi.n	800aef6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	88db      	ldrh	r3, [r3, #6]
 800aebc:	2b02      	cmp	r3, #2
 800aebe:	d004      	beq.n	800aeca <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800aec0:	6839      	ldr	r1, [r7, #0]
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f000 f8a5 	bl	800b012 <USBD_CtlError>
        break;
 800aec8:	e01a      	b.n	800af00 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2201      	movs	r2, #1
 800aece:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d005      	beq.n	800aee6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	68db      	ldr	r3, [r3, #12]
 800aede:	f043 0202 	orr.w	r2, r3, #2
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	330c      	adds	r3, #12
 800aeea:	2202      	movs	r2, #2
 800aeec:	4619      	mov	r1, r3
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f000 f90c 	bl	800b10c <USBD_CtlSendData>
      break;
 800aef4:	e004      	b.n	800af00 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800aef6:	6839      	ldr	r1, [r7, #0]
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f000 f88a 	bl	800b012 <USBD_CtlError>
      break;
 800aefe:	bf00      	nop
  }
}
 800af00:	bf00      	nop
 800af02:	3708      	adds	r7, #8
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}

0800af08 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b082      	sub	sp, #8
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	885b      	ldrh	r3, [r3, #2]
 800af16:	2b01      	cmp	r3, #1
 800af18:	d107      	bne.n	800af2a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2201      	movs	r2, #1
 800af1e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	f000 f94c 	bl	800b1c0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800af28:	e013      	b.n	800af52 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	885b      	ldrh	r3, [r3, #2]
 800af2e:	2b02      	cmp	r3, #2
 800af30:	d10b      	bne.n	800af4a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	889b      	ldrh	r3, [r3, #4]
 800af36:	0a1b      	lsrs	r3, r3, #8
 800af38:	b29b      	uxth	r3, r3
 800af3a:	b2da      	uxtb	r2, r3
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f000 f93c 	bl	800b1c0 <USBD_CtlSendStatus>
}
 800af48:	e003      	b.n	800af52 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800af4a:	6839      	ldr	r1, [r7, #0]
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f000 f860 	bl	800b012 <USBD_CtlError>
}
 800af52:	bf00      	nop
 800af54:	3708      	adds	r7, #8
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}

0800af5a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af5a:	b580      	push	{r7, lr}
 800af5c:	b082      	sub	sp, #8
 800af5e:	af00      	add	r7, sp, #0
 800af60:	6078      	str	r0, [r7, #4]
 800af62:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af6a:	b2db      	uxtb	r3, r3
 800af6c:	3b01      	subs	r3, #1
 800af6e:	2b02      	cmp	r3, #2
 800af70:	d80b      	bhi.n	800af8a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	885b      	ldrh	r3, [r3, #2]
 800af76:	2b01      	cmp	r3, #1
 800af78:	d10c      	bne.n	800af94 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2200      	movs	r2, #0
 800af7e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f000 f91c 	bl	800b1c0 <USBD_CtlSendStatus>
      }
      break;
 800af88:	e004      	b.n	800af94 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800af8a:	6839      	ldr	r1, [r7, #0]
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f000 f840 	bl	800b012 <USBD_CtlError>
      break;
 800af92:	e000      	b.n	800af96 <USBD_ClrFeature+0x3c>
      break;
 800af94:	bf00      	nop
  }
}
 800af96:	bf00      	nop
 800af98:	3708      	adds	r7, #8
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}

0800af9e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800af9e:	b580      	push	{r7, lr}
 800afa0:	b084      	sub	sp, #16
 800afa2:	af00      	add	r7, sp, #0
 800afa4:	6078      	str	r0, [r7, #4]
 800afa6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	781a      	ldrb	r2, [r3, #0]
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	3301      	adds	r3, #1
 800afb8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	781a      	ldrb	r2, [r3, #0]
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	3301      	adds	r3, #1
 800afc6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800afc8:	68f8      	ldr	r0, [r7, #12]
 800afca:	f7ff fa40 	bl	800a44e <SWAPBYTE>
 800afce:	4603      	mov	r3, r0
 800afd0:	461a      	mov	r2, r3
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	3301      	adds	r3, #1
 800afda:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	3301      	adds	r3, #1
 800afe0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800afe2:	68f8      	ldr	r0, [r7, #12]
 800afe4:	f7ff fa33 	bl	800a44e <SWAPBYTE>
 800afe8:	4603      	mov	r3, r0
 800afea:	461a      	mov	r2, r3
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	3301      	adds	r3, #1
 800aff4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	3301      	adds	r3, #1
 800affa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800affc:	68f8      	ldr	r0, [r7, #12]
 800affe:	f7ff fa26 	bl	800a44e <SWAPBYTE>
 800b002:	4603      	mov	r3, r0
 800b004:	461a      	mov	r2, r3
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	80da      	strh	r2, [r3, #6]
}
 800b00a:	bf00      	nop
 800b00c:	3710      	adds	r7, #16
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}

0800b012 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b012:	b580      	push	{r7, lr}
 800b014:	b082      	sub	sp, #8
 800b016:	af00      	add	r7, sp, #0
 800b018:	6078      	str	r0, [r7, #4]
 800b01a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b01c:	2180      	movs	r1, #128	@ 0x80
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f000 fce8 	bl	800b9f4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b024:	2100      	movs	r1, #0
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f000 fce4 	bl	800b9f4 <USBD_LL_StallEP>
}
 800b02c:	bf00      	nop
 800b02e:	3708      	adds	r7, #8
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}

0800b034 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b086      	sub	sp, #24
 800b038:	af00      	add	r7, sp, #0
 800b03a:	60f8      	str	r0, [r7, #12]
 800b03c:	60b9      	str	r1, [r7, #8]
 800b03e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b040:	2300      	movs	r3, #0
 800b042:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d042      	beq.n	800b0d0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800b04e:	6938      	ldr	r0, [r7, #16]
 800b050:	f000 f842 	bl	800b0d8 <USBD_GetLen>
 800b054:	4603      	mov	r3, r0
 800b056:	3301      	adds	r3, #1
 800b058:	005b      	lsls	r3, r3, #1
 800b05a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b05e:	d808      	bhi.n	800b072 <USBD_GetString+0x3e>
 800b060:	6938      	ldr	r0, [r7, #16]
 800b062:	f000 f839 	bl	800b0d8 <USBD_GetLen>
 800b066:	4603      	mov	r3, r0
 800b068:	3301      	adds	r3, #1
 800b06a:	b29b      	uxth	r3, r3
 800b06c:	005b      	lsls	r3, r3, #1
 800b06e:	b29a      	uxth	r2, r3
 800b070:	e001      	b.n	800b076 <USBD_GetString+0x42>
 800b072:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b07a:	7dfb      	ldrb	r3, [r7, #23]
 800b07c:	68ba      	ldr	r2, [r7, #8]
 800b07e:	4413      	add	r3, r2
 800b080:	687a      	ldr	r2, [r7, #4]
 800b082:	7812      	ldrb	r2, [r2, #0]
 800b084:	701a      	strb	r2, [r3, #0]
  idx++;
 800b086:	7dfb      	ldrb	r3, [r7, #23]
 800b088:	3301      	adds	r3, #1
 800b08a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b08c:	7dfb      	ldrb	r3, [r7, #23]
 800b08e:	68ba      	ldr	r2, [r7, #8]
 800b090:	4413      	add	r3, r2
 800b092:	2203      	movs	r2, #3
 800b094:	701a      	strb	r2, [r3, #0]
  idx++;
 800b096:	7dfb      	ldrb	r3, [r7, #23]
 800b098:	3301      	adds	r3, #1
 800b09a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b09c:	e013      	b.n	800b0c6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800b09e:	7dfb      	ldrb	r3, [r7, #23]
 800b0a0:	68ba      	ldr	r2, [r7, #8]
 800b0a2:	4413      	add	r3, r2
 800b0a4:	693a      	ldr	r2, [r7, #16]
 800b0a6:	7812      	ldrb	r2, [r2, #0]
 800b0a8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b0aa:	693b      	ldr	r3, [r7, #16]
 800b0ac:	3301      	adds	r3, #1
 800b0ae:	613b      	str	r3, [r7, #16]
    idx++;
 800b0b0:	7dfb      	ldrb	r3, [r7, #23]
 800b0b2:	3301      	adds	r3, #1
 800b0b4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b0b6:	7dfb      	ldrb	r3, [r7, #23]
 800b0b8:	68ba      	ldr	r2, [r7, #8]
 800b0ba:	4413      	add	r3, r2
 800b0bc:	2200      	movs	r2, #0
 800b0be:	701a      	strb	r2, [r3, #0]
    idx++;
 800b0c0:	7dfb      	ldrb	r3, [r7, #23]
 800b0c2:	3301      	adds	r3, #1
 800b0c4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b0c6:	693b      	ldr	r3, [r7, #16]
 800b0c8:	781b      	ldrb	r3, [r3, #0]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d1e7      	bne.n	800b09e <USBD_GetString+0x6a>
 800b0ce:	e000      	b.n	800b0d2 <USBD_GetString+0x9e>
    return;
 800b0d0:	bf00      	nop
  }
}
 800b0d2:	3718      	adds	r7, #24
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd80      	pop	{r7, pc}

0800b0d8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b0d8:	b480      	push	{r7}
 800b0da:	b085      	sub	sp, #20
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b0e8:	e005      	b.n	800b0f6 <USBD_GetLen+0x1e>
  {
    len++;
 800b0ea:	7bfb      	ldrb	r3, [r7, #15]
 800b0ec:	3301      	adds	r3, #1
 800b0ee:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	3301      	adds	r3, #1
 800b0f4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	781b      	ldrb	r3, [r3, #0]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d1f5      	bne.n	800b0ea <USBD_GetLen+0x12>
  }

  return len;
 800b0fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800b100:	4618      	mov	r0, r3
 800b102:	3714      	adds	r7, #20
 800b104:	46bd      	mov	sp, r7
 800b106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10a:	4770      	bx	lr

0800b10c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b084      	sub	sp, #16
 800b110:	af00      	add	r7, sp, #0
 800b112:	60f8      	str	r0, [r7, #12]
 800b114:	60b9      	str	r1, [r7, #8]
 800b116:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	2202      	movs	r2, #2
 800b11c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	687a      	ldr	r2, [r7, #4]
 800b124:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	687a      	ldr	r2, [r7, #4]
 800b12a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	68ba      	ldr	r2, [r7, #8]
 800b130:	2100      	movs	r1, #0
 800b132:	68f8      	ldr	r0, [r7, #12]
 800b134:	f000 fce7 	bl	800bb06 <USBD_LL_Transmit>

  return USBD_OK;
 800b138:	2300      	movs	r3, #0
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	3710      	adds	r7, #16
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}

0800b142 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b142:	b580      	push	{r7, lr}
 800b144:	b084      	sub	sp, #16
 800b146:	af00      	add	r7, sp, #0
 800b148:	60f8      	str	r0, [r7, #12]
 800b14a:	60b9      	str	r1, [r7, #8]
 800b14c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	68ba      	ldr	r2, [r7, #8]
 800b152:	2100      	movs	r1, #0
 800b154:	68f8      	ldr	r0, [r7, #12]
 800b156:	f000 fcd6 	bl	800bb06 <USBD_LL_Transmit>

  return USBD_OK;
 800b15a:	2300      	movs	r3, #0
}
 800b15c:	4618      	mov	r0, r3
 800b15e:	3710      	adds	r7, #16
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}

0800b164 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b084      	sub	sp, #16
 800b168:	af00      	add	r7, sp, #0
 800b16a:	60f8      	str	r0, [r7, #12]
 800b16c:	60b9      	str	r1, [r7, #8]
 800b16e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	2203      	movs	r2, #3
 800b174:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	687a      	ldr	r2, [r7, #4]
 800b17c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	687a      	ldr	r2, [r7, #4]
 800b184:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	68ba      	ldr	r2, [r7, #8]
 800b18c:	2100      	movs	r1, #0
 800b18e:	68f8      	ldr	r0, [r7, #12]
 800b190:	f000 fcda 	bl	800bb48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b194:	2300      	movs	r3, #0
}
 800b196:	4618      	mov	r0, r3
 800b198:	3710      	adds	r7, #16
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}

0800b19e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b19e:	b580      	push	{r7, lr}
 800b1a0:	b084      	sub	sp, #16
 800b1a2:	af00      	add	r7, sp, #0
 800b1a4:	60f8      	str	r0, [r7, #12]
 800b1a6:	60b9      	str	r1, [r7, #8]
 800b1a8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	68ba      	ldr	r2, [r7, #8]
 800b1ae:	2100      	movs	r1, #0
 800b1b0:	68f8      	ldr	r0, [r7, #12]
 800b1b2:	f000 fcc9 	bl	800bb48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b1b6:	2300      	movs	r3, #0
}
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	3710      	adds	r7, #16
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	bd80      	pop	{r7, pc}

0800b1c0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b082      	sub	sp, #8
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2204      	movs	r2, #4
 800b1cc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	2100      	movs	r1, #0
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f000 fc95 	bl	800bb06 <USBD_LL_Transmit>

  return USBD_OK;
 800b1dc:	2300      	movs	r3, #0
}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	3708      	adds	r7, #8
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}

0800b1e6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b1e6:	b580      	push	{r7, lr}
 800b1e8:	b082      	sub	sp, #8
 800b1ea:	af00      	add	r7, sp, #0
 800b1ec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2205      	movs	r2, #5
 800b1f2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	2100      	movs	r1, #0
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	f000 fca3 	bl	800bb48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b202:	2300      	movs	r3, #0
}
 800b204:	4618      	mov	r0, r3
 800b206:	3708      	adds	r7, #8
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}

0800b20c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b210:	2200      	movs	r2, #0
 800b212:	4912      	ldr	r1, [pc, #72]	@ (800b25c <MX_USB_DEVICE_Init+0x50>)
 800b214:	4812      	ldr	r0, [pc, #72]	@ (800b260 <MX_USB_DEVICE_Init+0x54>)
 800b216:	f7fe fcf7 	bl	8009c08 <USBD_Init>
 800b21a:	4603      	mov	r3, r0
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d001      	beq.n	800b224 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b220:	f7f7 fa26 	bl	8002670 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b224:	490f      	ldr	r1, [pc, #60]	@ (800b264 <MX_USB_DEVICE_Init+0x58>)
 800b226:	480e      	ldr	r0, [pc, #56]	@ (800b260 <MX_USB_DEVICE_Init+0x54>)
 800b228:	f7fe fd1e 	bl	8009c68 <USBD_RegisterClass>
 800b22c:	4603      	mov	r3, r0
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d001      	beq.n	800b236 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b232:	f7f7 fa1d 	bl	8002670 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b236:	490c      	ldr	r1, [pc, #48]	@ (800b268 <MX_USB_DEVICE_Init+0x5c>)
 800b238:	4809      	ldr	r0, [pc, #36]	@ (800b260 <MX_USB_DEVICE_Init+0x54>)
 800b23a:	f7fe fc15 	bl	8009a68 <USBD_CDC_RegisterInterface>
 800b23e:	4603      	mov	r3, r0
 800b240:	2b00      	cmp	r3, #0
 800b242:	d001      	beq.n	800b248 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b244:	f7f7 fa14 	bl	8002670 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b248:	4805      	ldr	r0, [pc, #20]	@ (800b260 <MX_USB_DEVICE_Init+0x54>)
 800b24a:	f7fe fd43 	bl	8009cd4 <USBD_Start>
 800b24e:	4603      	mov	r3, r0
 800b250:	2b00      	cmp	r3, #0
 800b252:	d001      	beq.n	800b258 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b254:	f7f7 fa0c 	bl	8002670 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b258:	bf00      	nop
 800b25a:	bd80      	pop	{r7, pc}
 800b25c:	200000d4 	.word	0x200000d4
 800b260:	20000678 	.word	0x20000678
 800b264:	20000040 	.word	0x20000040
 800b268:	200000c0 	.word	0x200000c0

0800b26c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b270:	2200      	movs	r2, #0
 800b272:	4905      	ldr	r1, [pc, #20]	@ (800b288 <CDC_Init_FS+0x1c>)
 800b274:	4805      	ldr	r0, [pc, #20]	@ (800b28c <CDC_Init_FS+0x20>)
 800b276:	f7fe fc11 	bl	8009a9c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b27a:	4905      	ldr	r1, [pc, #20]	@ (800b290 <CDC_Init_FS+0x24>)
 800b27c:	4803      	ldr	r0, [pc, #12]	@ (800b28c <CDC_Init_FS+0x20>)
 800b27e:	f7fe fc2f 	bl	8009ae0 <USBD_CDC_SetRxBuffer>

  return (USBD_OK);
 800b282:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b284:	4618      	mov	r0, r3
 800b286:	bd80      	pop	{r7, pc}
 800b288:	20001154 	.word	0x20001154
 800b28c:	20000678 	.word	0x20000678
 800b290:	20000954 	.word	0x20000954

0800b294 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b294:	b480      	push	{r7}
 800b296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b298:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	46bd      	mov	sp, r7
 800b29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a2:	4770      	bx	lr

0800b2a4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b2a4:	b480      	push	{r7}
 800b2a6:	b083      	sub	sp, #12
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	6039      	str	r1, [r7, #0]
 800b2ae:	71fb      	strb	r3, [r7, #7]
 800b2b0:	4613      	mov	r3, r2
 800b2b2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b2b4:	79fb      	ldrb	r3, [r7, #7]
 800b2b6:	2b23      	cmp	r3, #35	@ 0x23
 800b2b8:	d84a      	bhi.n	800b350 <CDC_Control_FS+0xac>
 800b2ba:	a201      	add	r2, pc, #4	@ (adr r2, 800b2c0 <CDC_Control_FS+0x1c>)
 800b2bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2c0:	0800b351 	.word	0x0800b351
 800b2c4:	0800b351 	.word	0x0800b351
 800b2c8:	0800b351 	.word	0x0800b351
 800b2cc:	0800b351 	.word	0x0800b351
 800b2d0:	0800b351 	.word	0x0800b351
 800b2d4:	0800b351 	.word	0x0800b351
 800b2d8:	0800b351 	.word	0x0800b351
 800b2dc:	0800b351 	.word	0x0800b351
 800b2e0:	0800b351 	.word	0x0800b351
 800b2e4:	0800b351 	.word	0x0800b351
 800b2e8:	0800b351 	.word	0x0800b351
 800b2ec:	0800b351 	.word	0x0800b351
 800b2f0:	0800b351 	.word	0x0800b351
 800b2f4:	0800b351 	.word	0x0800b351
 800b2f8:	0800b351 	.word	0x0800b351
 800b2fc:	0800b351 	.word	0x0800b351
 800b300:	0800b351 	.word	0x0800b351
 800b304:	0800b351 	.word	0x0800b351
 800b308:	0800b351 	.word	0x0800b351
 800b30c:	0800b351 	.word	0x0800b351
 800b310:	0800b351 	.word	0x0800b351
 800b314:	0800b351 	.word	0x0800b351
 800b318:	0800b351 	.word	0x0800b351
 800b31c:	0800b351 	.word	0x0800b351
 800b320:	0800b351 	.word	0x0800b351
 800b324:	0800b351 	.word	0x0800b351
 800b328:	0800b351 	.word	0x0800b351
 800b32c:	0800b351 	.word	0x0800b351
 800b330:	0800b351 	.word	0x0800b351
 800b334:	0800b351 	.word	0x0800b351
 800b338:	0800b351 	.word	0x0800b351
 800b33c:	0800b351 	.word	0x0800b351
 800b340:	0800b351 	.word	0x0800b351
 800b344:	0800b351 	.word	0x0800b351
 800b348:	0800b351 	.word	0x0800b351
 800b34c:	0800b351 	.word	0x0800b351
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b350:	bf00      	nop
  }

  return (USBD_OK);
 800b352:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b354:	4618      	mov	r0, r3
 800b356:	370c      	adds	r7, #12
 800b358:	46bd      	mov	sp, r7
 800b35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35e:	4770      	bx	lr

0800b360 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b082      	sub	sp, #8
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
 800b368:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b36a:	6879      	ldr	r1, [r7, #4]
 800b36c:	4808      	ldr	r0, [pc, #32]	@ (800b390 <CDC_Receive_FS+0x30>)
 800b36e:	f7fe fbb7 	bl	8009ae0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b372:	4807      	ldr	r0, [pc, #28]	@ (800b390 <CDC_Receive_FS+0x30>)
 800b374:	f7fe fc12 	bl	8009b9c <USBD_CDC_ReceivePacket>
  CDC_ReceiveCallBack(Buf, Len[0]); // preguntar
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	4619      	mov	r1, r3
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f7f7 f960 	bl	8002644 <CDC_ReceiveCallBack>
  return (USBD_OK);
 800b384:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b386:	4618      	mov	r0, r3
 800b388:	3708      	adds	r7, #8
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd80      	pop	{r7, pc}
 800b38e:	bf00      	nop
 800b390:	20000678 	.word	0x20000678

0800b394 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b084      	sub	sp, #16
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
 800b39c:	460b      	mov	r3, r1
 800b39e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b3a4:	4b0d      	ldr	r3, [pc, #52]	@ (800b3dc <CDC_Transmit_FS+0x48>)
 800b3a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b3aa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d001      	beq.n	800b3ba <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	e00b      	b.n	800b3d2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b3ba:	887b      	ldrh	r3, [r7, #2]
 800b3bc:	461a      	mov	r2, r3
 800b3be:	6879      	ldr	r1, [r7, #4]
 800b3c0:	4806      	ldr	r0, [pc, #24]	@ (800b3dc <CDC_Transmit_FS+0x48>)
 800b3c2:	f7fe fb6b 	bl	8009a9c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b3c6:	4805      	ldr	r0, [pc, #20]	@ (800b3dc <CDC_Transmit_FS+0x48>)
 800b3c8:	f7fe fba8 	bl	8009b1c <USBD_CDC_TransmitPacket>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b3d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3710      	adds	r7, #16
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}
 800b3da:	bf00      	nop
 800b3dc:	20000678 	.word	0x20000678

0800b3e0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b3e0:	b480      	push	{r7}
 800b3e2:	b087      	sub	sp, #28
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	60f8      	str	r0, [r7, #12]
 800b3e8:	60b9      	str	r1, [r7, #8]
 800b3ea:	4613      	mov	r3, r2
 800b3ec:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b3f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	371c      	adds	r7, #28
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b400:	4770      	bx	lr
	...

0800b404 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b404:	b480      	push	{r7}
 800b406:	b083      	sub	sp, #12
 800b408:	af00      	add	r7, sp, #0
 800b40a:	4603      	mov	r3, r0
 800b40c:	6039      	str	r1, [r7, #0]
 800b40e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	2212      	movs	r2, #18
 800b414:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b416:	4b03      	ldr	r3, [pc, #12]	@ (800b424 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b418:	4618      	mov	r0, r3
 800b41a:	370c      	adds	r7, #12
 800b41c:	46bd      	mov	sp, r7
 800b41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b422:	4770      	bx	lr
 800b424:	200000f0 	.word	0x200000f0

0800b428 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b428:	b480      	push	{r7}
 800b42a:	b083      	sub	sp, #12
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	4603      	mov	r3, r0
 800b430:	6039      	str	r1, [r7, #0]
 800b432:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	2204      	movs	r2, #4
 800b438:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b43a:	4b03      	ldr	r3, [pc, #12]	@ (800b448 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b43c:	4618      	mov	r0, r3
 800b43e:	370c      	adds	r7, #12
 800b440:	46bd      	mov	sp, r7
 800b442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b446:	4770      	bx	lr
 800b448:	20000104 	.word	0x20000104

0800b44c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b082      	sub	sp, #8
 800b450:	af00      	add	r7, sp, #0
 800b452:	4603      	mov	r3, r0
 800b454:	6039      	str	r1, [r7, #0]
 800b456:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b458:	79fb      	ldrb	r3, [r7, #7]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d105      	bne.n	800b46a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b45e:	683a      	ldr	r2, [r7, #0]
 800b460:	4907      	ldr	r1, [pc, #28]	@ (800b480 <USBD_FS_ProductStrDescriptor+0x34>)
 800b462:	4808      	ldr	r0, [pc, #32]	@ (800b484 <USBD_FS_ProductStrDescriptor+0x38>)
 800b464:	f7ff fde6 	bl	800b034 <USBD_GetString>
 800b468:	e004      	b.n	800b474 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b46a:	683a      	ldr	r2, [r7, #0]
 800b46c:	4904      	ldr	r1, [pc, #16]	@ (800b480 <USBD_FS_ProductStrDescriptor+0x34>)
 800b46e:	4805      	ldr	r0, [pc, #20]	@ (800b484 <USBD_FS_ProductStrDescriptor+0x38>)
 800b470:	f7ff fde0 	bl	800b034 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b474:	4b02      	ldr	r3, [pc, #8]	@ (800b480 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b476:	4618      	mov	r0, r3
 800b478:	3708      	adds	r7, #8
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}
 800b47e:	bf00      	nop
 800b480:	20001954 	.word	0x20001954
 800b484:	0800cc54 	.word	0x0800cc54

0800b488 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b082      	sub	sp, #8
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	4603      	mov	r3, r0
 800b490:	6039      	str	r1, [r7, #0]
 800b492:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b494:	683a      	ldr	r2, [r7, #0]
 800b496:	4904      	ldr	r1, [pc, #16]	@ (800b4a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b498:	4804      	ldr	r0, [pc, #16]	@ (800b4ac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b49a:	f7ff fdcb 	bl	800b034 <USBD_GetString>
  return USBD_StrDesc;
 800b49e:	4b02      	ldr	r3, [pc, #8]	@ (800b4a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3708      	adds	r7, #8
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}
 800b4a8:	20001954 	.word	0x20001954
 800b4ac:	0800cc6c 	.word	0x0800cc6c

0800b4b0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b082      	sub	sp, #8
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	6039      	str	r1, [r7, #0]
 800b4ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	221a      	movs	r2, #26
 800b4c0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b4c2:	f000 f843 	bl	800b54c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b4c6:	4b02      	ldr	r3, [pc, #8]	@ (800b4d0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	3708      	adds	r7, #8
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd80      	pop	{r7, pc}
 800b4d0:	20000108 	.word	0x20000108

0800b4d4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b082      	sub	sp, #8
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	4603      	mov	r3, r0
 800b4dc:	6039      	str	r1, [r7, #0]
 800b4de:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b4e0:	79fb      	ldrb	r3, [r7, #7]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d105      	bne.n	800b4f2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b4e6:	683a      	ldr	r2, [r7, #0]
 800b4e8:	4907      	ldr	r1, [pc, #28]	@ (800b508 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b4ea:	4808      	ldr	r0, [pc, #32]	@ (800b50c <USBD_FS_ConfigStrDescriptor+0x38>)
 800b4ec:	f7ff fda2 	bl	800b034 <USBD_GetString>
 800b4f0:	e004      	b.n	800b4fc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b4f2:	683a      	ldr	r2, [r7, #0]
 800b4f4:	4904      	ldr	r1, [pc, #16]	@ (800b508 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b4f6:	4805      	ldr	r0, [pc, #20]	@ (800b50c <USBD_FS_ConfigStrDescriptor+0x38>)
 800b4f8:	f7ff fd9c 	bl	800b034 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b4fc:	4b02      	ldr	r3, [pc, #8]	@ (800b508 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b4fe:	4618      	mov	r0, r3
 800b500:	3708      	adds	r7, #8
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}
 800b506:	bf00      	nop
 800b508:	20001954 	.word	0x20001954
 800b50c:	0800cc80 	.word	0x0800cc80

0800b510 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b082      	sub	sp, #8
 800b514:	af00      	add	r7, sp, #0
 800b516:	4603      	mov	r3, r0
 800b518:	6039      	str	r1, [r7, #0]
 800b51a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b51c:	79fb      	ldrb	r3, [r7, #7]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d105      	bne.n	800b52e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b522:	683a      	ldr	r2, [r7, #0]
 800b524:	4907      	ldr	r1, [pc, #28]	@ (800b544 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b526:	4808      	ldr	r0, [pc, #32]	@ (800b548 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b528:	f7ff fd84 	bl	800b034 <USBD_GetString>
 800b52c:	e004      	b.n	800b538 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b52e:	683a      	ldr	r2, [r7, #0]
 800b530:	4904      	ldr	r1, [pc, #16]	@ (800b544 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b532:	4805      	ldr	r0, [pc, #20]	@ (800b548 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b534:	f7ff fd7e 	bl	800b034 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b538:	4b02      	ldr	r3, [pc, #8]	@ (800b544 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3708      	adds	r7, #8
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}
 800b542:	bf00      	nop
 800b544:	20001954 	.word	0x20001954
 800b548:	0800cc8c 	.word	0x0800cc8c

0800b54c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b084      	sub	sp, #16
 800b550:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b552:	4b0f      	ldr	r3, [pc, #60]	@ (800b590 <Get_SerialNum+0x44>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b558:	4b0e      	ldr	r3, [pc, #56]	@ (800b594 <Get_SerialNum+0x48>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b55e:	4b0e      	ldr	r3, [pc, #56]	@ (800b598 <Get_SerialNum+0x4c>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b564:	68fa      	ldr	r2, [r7, #12]
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	4413      	add	r3, r2
 800b56a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d009      	beq.n	800b586 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b572:	2208      	movs	r2, #8
 800b574:	4909      	ldr	r1, [pc, #36]	@ (800b59c <Get_SerialNum+0x50>)
 800b576:	68f8      	ldr	r0, [r7, #12]
 800b578:	f000 f814 	bl	800b5a4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b57c:	2204      	movs	r2, #4
 800b57e:	4908      	ldr	r1, [pc, #32]	@ (800b5a0 <Get_SerialNum+0x54>)
 800b580:	68b8      	ldr	r0, [r7, #8]
 800b582:	f000 f80f 	bl	800b5a4 <IntToUnicode>
  }
}
 800b586:	bf00      	nop
 800b588:	3710      	adds	r7, #16
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}
 800b58e:	bf00      	nop
 800b590:	1fff7a10 	.word	0x1fff7a10
 800b594:	1fff7a14 	.word	0x1fff7a14
 800b598:	1fff7a18 	.word	0x1fff7a18
 800b59c:	2000010a 	.word	0x2000010a
 800b5a0:	2000011a 	.word	0x2000011a

0800b5a4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	b087      	sub	sp, #28
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	60f8      	str	r0, [r7, #12]
 800b5ac:	60b9      	str	r1, [r7, #8]
 800b5ae:	4613      	mov	r3, r2
 800b5b0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	75fb      	strb	r3, [r7, #23]
 800b5ba:	e027      	b.n	800b60c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	0f1b      	lsrs	r3, r3, #28
 800b5c0:	2b09      	cmp	r3, #9
 800b5c2:	d80b      	bhi.n	800b5dc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	0f1b      	lsrs	r3, r3, #28
 800b5c8:	b2da      	uxtb	r2, r3
 800b5ca:	7dfb      	ldrb	r3, [r7, #23]
 800b5cc:	005b      	lsls	r3, r3, #1
 800b5ce:	4619      	mov	r1, r3
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	440b      	add	r3, r1
 800b5d4:	3230      	adds	r2, #48	@ 0x30
 800b5d6:	b2d2      	uxtb	r2, r2
 800b5d8:	701a      	strb	r2, [r3, #0]
 800b5da:	e00a      	b.n	800b5f2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	0f1b      	lsrs	r3, r3, #28
 800b5e0:	b2da      	uxtb	r2, r3
 800b5e2:	7dfb      	ldrb	r3, [r7, #23]
 800b5e4:	005b      	lsls	r3, r3, #1
 800b5e6:	4619      	mov	r1, r3
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	440b      	add	r3, r1
 800b5ec:	3237      	adds	r2, #55	@ 0x37
 800b5ee:	b2d2      	uxtb	r2, r2
 800b5f0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	011b      	lsls	r3, r3, #4
 800b5f6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b5f8:	7dfb      	ldrb	r3, [r7, #23]
 800b5fa:	005b      	lsls	r3, r3, #1
 800b5fc:	3301      	adds	r3, #1
 800b5fe:	68ba      	ldr	r2, [r7, #8]
 800b600:	4413      	add	r3, r2
 800b602:	2200      	movs	r2, #0
 800b604:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b606:	7dfb      	ldrb	r3, [r7, #23]
 800b608:	3301      	adds	r3, #1
 800b60a:	75fb      	strb	r3, [r7, #23]
 800b60c:	7dfa      	ldrb	r2, [r7, #23]
 800b60e:	79fb      	ldrb	r3, [r7, #7]
 800b610:	429a      	cmp	r2, r3
 800b612:	d3d3      	bcc.n	800b5bc <IntToUnicode+0x18>
  }
}
 800b614:	bf00      	nop
 800b616:	bf00      	nop
 800b618:	371c      	adds	r7, #28
 800b61a:	46bd      	mov	sp, r7
 800b61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b620:	4770      	bx	lr
	...

0800b624 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b08a      	sub	sp, #40	@ 0x28
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b62c:	f107 0314 	add.w	r3, r7, #20
 800b630:	2200      	movs	r2, #0
 800b632:	601a      	str	r2, [r3, #0]
 800b634:	605a      	str	r2, [r3, #4]
 800b636:	609a      	str	r2, [r3, #8]
 800b638:	60da      	str	r2, [r3, #12]
 800b63a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b644:	d13a      	bne.n	800b6bc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b646:	2300      	movs	r3, #0
 800b648:	613b      	str	r3, [r7, #16]
 800b64a:	4b1e      	ldr	r3, [pc, #120]	@ (800b6c4 <HAL_PCD_MspInit+0xa0>)
 800b64c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b64e:	4a1d      	ldr	r2, [pc, #116]	@ (800b6c4 <HAL_PCD_MspInit+0xa0>)
 800b650:	f043 0301 	orr.w	r3, r3, #1
 800b654:	6313      	str	r3, [r2, #48]	@ 0x30
 800b656:	4b1b      	ldr	r3, [pc, #108]	@ (800b6c4 <HAL_PCD_MspInit+0xa0>)
 800b658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b65a:	f003 0301 	and.w	r3, r3, #1
 800b65e:	613b      	str	r3, [r7, #16]
 800b660:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b662:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800b666:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b668:	2302      	movs	r3, #2
 800b66a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b66c:	2300      	movs	r3, #0
 800b66e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b670:	2303      	movs	r3, #3
 800b672:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b674:	230a      	movs	r3, #10
 800b676:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b678:	f107 0314 	add.w	r3, r7, #20
 800b67c:	4619      	mov	r1, r3
 800b67e:	4812      	ldr	r0, [pc, #72]	@ (800b6c8 <HAL_PCD_MspInit+0xa4>)
 800b680:	f7f8 ffba 	bl	80045f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b684:	4b0f      	ldr	r3, [pc, #60]	@ (800b6c4 <HAL_PCD_MspInit+0xa0>)
 800b686:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b688:	4a0e      	ldr	r2, [pc, #56]	@ (800b6c4 <HAL_PCD_MspInit+0xa0>)
 800b68a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b68e:	6353      	str	r3, [r2, #52]	@ 0x34
 800b690:	2300      	movs	r3, #0
 800b692:	60fb      	str	r3, [r7, #12]
 800b694:	4b0b      	ldr	r3, [pc, #44]	@ (800b6c4 <HAL_PCD_MspInit+0xa0>)
 800b696:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b698:	4a0a      	ldr	r2, [pc, #40]	@ (800b6c4 <HAL_PCD_MspInit+0xa0>)
 800b69a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b69e:	6453      	str	r3, [r2, #68]	@ 0x44
 800b6a0:	4b08      	ldr	r3, [pc, #32]	@ (800b6c4 <HAL_PCD_MspInit+0xa0>)
 800b6a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b6a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b6a8:	60fb      	str	r3, [r7, #12]
 800b6aa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	2100      	movs	r1, #0
 800b6b0:	2043      	movs	r0, #67	@ 0x43
 800b6b2:	f7f8 fbfa 	bl	8003eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b6b6:	2043      	movs	r0, #67	@ 0x43
 800b6b8:	f7f8 fc13 	bl	8003ee2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b6bc:	bf00      	nop
 800b6be:	3728      	adds	r7, #40	@ 0x28
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd80      	pop	{r7, pc}
 800b6c4:	40023800 	.word	0x40023800
 800b6c8:	40020000 	.word	0x40020000

0800b6cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b082      	sub	sp, #8
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b6e0:	4619      	mov	r1, r3
 800b6e2:	4610      	mov	r0, r2
 800b6e4:	f7fe fb43 	bl	8009d6e <USBD_LL_SetupStage>
}
 800b6e8:	bf00      	nop
 800b6ea:	3708      	adds	r7, #8
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bd80      	pop	{r7, pc}

0800b6f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b082      	sub	sp, #8
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
 800b6f8:	460b      	mov	r3, r1
 800b6fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b702:	78fa      	ldrb	r2, [r7, #3]
 800b704:	6879      	ldr	r1, [r7, #4]
 800b706:	4613      	mov	r3, r2
 800b708:	00db      	lsls	r3, r3, #3
 800b70a:	4413      	add	r3, r2
 800b70c:	009b      	lsls	r3, r3, #2
 800b70e:	440b      	add	r3, r1
 800b710:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b714:	681a      	ldr	r2, [r3, #0]
 800b716:	78fb      	ldrb	r3, [r7, #3]
 800b718:	4619      	mov	r1, r3
 800b71a:	f7fe fb7d 	bl	8009e18 <USBD_LL_DataOutStage>
}
 800b71e:	bf00      	nop
 800b720:	3708      	adds	r7, #8
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}

0800b726 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b726:	b580      	push	{r7, lr}
 800b728:	b082      	sub	sp, #8
 800b72a:	af00      	add	r7, sp, #0
 800b72c:	6078      	str	r0, [r7, #4]
 800b72e:	460b      	mov	r3, r1
 800b730:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b738:	78fa      	ldrb	r2, [r7, #3]
 800b73a:	6879      	ldr	r1, [r7, #4]
 800b73c:	4613      	mov	r3, r2
 800b73e:	00db      	lsls	r3, r3, #3
 800b740:	4413      	add	r3, r2
 800b742:	009b      	lsls	r3, r3, #2
 800b744:	440b      	add	r3, r1
 800b746:	3320      	adds	r3, #32
 800b748:	681a      	ldr	r2, [r3, #0]
 800b74a:	78fb      	ldrb	r3, [r7, #3]
 800b74c:	4619      	mov	r1, r3
 800b74e:	f7fe fc16 	bl	8009f7e <USBD_LL_DataInStage>
}
 800b752:	bf00      	nop
 800b754:	3708      	adds	r7, #8
 800b756:	46bd      	mov	sp, r7
 800b758:	bd80      	pop	{r7, pc}

0800b75a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b75a:	b580      	push	{r7, lr}
 800b75c:	b082      	sub	sp, #8
 800b75e:	af00      	add	r7, sp, #0
 800b760:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b768:	4618      	mov	r0, r3
 800b76a:	f7fe fd50 	bl	800a20e <USBD_LL_SOF>
}
 800b76e:	bf00      	nop
 800b770:	3708      	adds	r7, #8
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}

0800b776 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b776:	b580      	push	{r7, lr}
 800b778:	b084      	sub	sp, #16
 800b77a:	af00      	add	r7, sp, #0
 800b77c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b77e:	2301      	movs	r3, #1
 800b780:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	79db      	ldrb	r3, [r3, #7]
 800b786:	2b02      	cmp	r3, #2
 800b788:	d001      	beq.n	800b78e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b78a:	f7f6 ff71 	bl	8002670 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b794:	7bfa      	ldrb	r2, [r7, #15]
 800b796:	4611      	mov	r1, r2
 800b798:	4618      	mov	r0, r3
 800b79a:	f7fe fcf4 	bl	800a186 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	f7fe fc9c 	bl	800a0e2 <USBD_LL_Reset>
}
 800b7aa:	bf00      	nop
 800b7ac:	3710      	adds	r7, #16
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}
	...

0800b7b4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b082      	sub	sp, #8
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f7fe fcef 	bl	800a1a6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	687a      	ldr	r2, [r7, #4]
 800b7d4:	6812      	ldr	r2, [r2, #0]
 800b7d6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b7da:	f043 0301 	orr.w	r3, r3, #1
 800b7de:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	7adb      	ldrb	r3, [r3, #11]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d005      	beq.n	800b7f4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b7e8:	4b04      	ldr	r3, [pc, #16]	@ (800b7fc <HAL_PCD_SuspendCallback+0x48>)
 800b7ea:	691b      	ldr	r3, [r3, #16]
 800b7ec:	4a03      	ldr	r2, [pc, #12]	@ (800b7fc <HAL_PCD_SuspendCallback+0x48>)
 800b7ee:	f043 0306 	orr.w	r3, r3, #6
 800b7f2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b7f4:	bf00      	nop
 800b7f6:	3708      	adds	r7, #8
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}
 800b7fc:	e000ed00 	.word	0xe000ed00

0800b800 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b082      	sub	sp, #8
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b80e:	4618      	mov	r0, r3
 800b810:	f7fe fce5 	bl	800a1de <USBD_LL_Resume>
}
 800b814:	bf00      	nop
 800b816:	3708      	adds	r7, #8
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}

0800b81c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b082      	sub	sp, #8
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
 800b824:	460b      	mov	r3, r1
 800b826:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b82e:	78fa      	ldrb	r2, [r7, #3]
 800b830:	4611      	mov	r1, r2
 800b832:	4618      	mov	r0, r3
 800b834:	f7fe fd3d 	bl	800a2b2 <USBD_LL_IsoOUTIncomplete>
}
 800b838:	bf00      	nop
 800b83a:	3708      	adds	r7, #8
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}

0800b840 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b082      	sub	sp, #8
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
 800b848:	460b      	mov	r3, r1
 800b84a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b852:	78fa      	ldrb	r2, [r7, #3]
 800b854:	4611      	mov	r1, r2
 800b856:	4618      	mov	r0, r3
 800b858:	f7fe fcf9 	bl	800a24e <USBD_LL_IsoINIncomplete>
}
 800b85c:	bf00      	nop
 800b85e:	3708      	adds	r7, #8
 800b860:	46bd      	mov	sp, r7
 800b862:	bd80      	pop	{r7, pc}

0800b864 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b082      	sub	sp, #8
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b872:	4618      	mov	r0, r3
 800b874:	f7fe fd4f 	bl	800a316 <USBD_LL_DevConnected>
}
 800b878:	bf00      	nop
 800b87a:	3708      	adds	r7, #8
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd80      	pop	{r7, pc}

0800b880 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b082      	sub	sp, #8
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b88e:	4618      	mov	r0, r3
 800b890:	f7fe fd4c 	bl	800a32c <USBD_LL_DevDisconnected>
}
 800b894:	bf00      	nop
 800b896:	3708      	adds	r7, #8
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}

0800b89c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b082      	sub	sp, #8
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	781b      	ldrb	r3, [r3, #0]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d13c      	bne.n	800b926 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b8ac:	4a20      	ldr	r2, [pc, #128]	@ (800b930 <USBD_LL_Init+0x94>)
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	4a1e      	ldr	r2, [pc, #120]	@ (800b930 <USBD_LL_Init+0x94>)
 800b8b8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b8bc:	4b1c      	ldr	r3, [pc, #112]	@ (800b930 <USBD_LL_Init+0x94>)
 800b8be:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b8c2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b8c4:	4b1a      	ldr	r3, [pc, #104]	@ (800b930 <USBD_LL_Init+0x94>)
 800b8c6:	2204      	movs	r2, #4
 800b8c8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b8ca:	4b19      	ldr	r3, [pc, #100]	@ (800b930 <USBD_LL_Init+0x94>)
 800b8cc:	2202      	movs	r2, #2
 800b8ce:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b8d0:	4b17      	ldr	r3, [pc, #92]	@ (800b930 <USBD_LL_Init+0x94>)
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b8d6:	4b16      	ldr	r3, [pc, #88]	@ (800b930 <USBD_LL_Init+0x94>)
 800b8d8:	2202      	movs	r2, #2
 800b8da:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b8dc:	4b14      	ldr	r3, [pc, #80]	@ (800b930 <USBD_LL_Init+0x94>)
 800b8de:	2200      	movs	r2, #0
 800b8e0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b8e2:	4b13      	ldr	r3, [pc, #76]	@ (800b930 <USBD_LL_Init+0x94>)
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b8e8:	4b11      	ldr	r3, [pc, #68]	@ (800b930 <USBD_LL_Init+0x94>)
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b8ee:	4b10      	ldr	r3, [pc, #64]	@ (800b930 <USBD_LL_Init+0x94>)
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b8f4:	4b0e      	ldr	r3, [pc, #56]	@ (800b930 <USBD_LL_Init+0x94>)
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b8fa:	480d      	ldr	r0, [pc, #52]	@ (800b930 <USBD_LL_Init+0x94>)
 800b8fc:	f7f9 f990 	bl	8004c20 <HAL_PCD_Init>
 800b900:	4603      	mov	r3, r0
 800b902:	2b00      	cmp	r3, #0
 800b904:	d001      	beq.n	800b90a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b906:	f7f6 feb3 	bl	8002670 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b90a:	2180      	movs	r1, #128	@ 0x80
 800b90c:	4808      	ldr	r0, [pc, #32]	@ (800b930 <USBD_LL_Init+0x94>)
 800b90e:	f7fa fbbc 	bl	800608a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b912:	2240      	movs	r2, #64	@ 0x40
 800b914:	2100      	movs	r1, #0
 800b916:	4806      	ldr	r0, [pc, #24]	@ (800b930 <USBD_LL_Init+0x94>)
 800b918:	f7fa fb70 	bl	8005ffc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b91c:	2280      	movs	r2, #128	@ 0x80
 800b91e:	2101      	movs	r1, #1
 800b920:	4803      	ldr	r0, [pc, #12]	@ (800b930 <USBD_LL_Init+0x94>)
 800b922:	f7fa fb6b 	bl	8005ffc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b926:	2300      	movs	r3, #0
}
 800b928:	4618      	mov	r0, r3
 800b92a:	3708      	adds	r7, #8
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}
 800b930:	20001b54 	.word	0x20001b54

0800b934 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b084      	sub	sp, #16
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b93c:	2300      	movs	r3, #0
 800b93e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b940:	2300      	movs	r3, #0
 800b942:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b94a:	4618      	mov	r0, r3
 800b94c:	f7f9 fa77 	bl	8004e3e <HAL_PCD_Start>
 800b950:	4603      	mov	r3, r0
 800b952:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b954:	7bfb      	ldrb	r3, [r7, #15]
 800b956:	4618      	mov	r0, r3
 800b958:	f000 f942 	bl	800bbe0 <USBD_Get_USB_Status>
 800b95c:	4603      	mov	r3, r0
 800b95e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b960:	7bbb      	ldrb	r3, [r7, #14]
}
 800b962:	4618      	mov	r0, r3
 800b964:	3710      	adds	r7, #16
 800b966:	46bd      	mov	sp, r7
 800b968:	bd80      	pop	{r7, pc}

0800b96a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b96a:	b580      	push	{r7, lr}
 800b96c:	b084      	sub	sp, #16
 800b96e:	af00      	add	r7, sp, #0
 800b970:	6078      	str	r0, [r7, #4]
 800b972:	4608      	mov	r0, r1
 800b974:	4611      	mov	r1, r2
 800b976:	461a      	mov	r2, r3
 800b978:	4603      	mov	r3, r0
 800b97a:	70fb      	strb	r3, [r7, #3]
 800b97c:	460b      	mov	r3, r1
 800b97e:	70bb      	strb	r3, [r7, #2]
 800b980:	4613      	mov	r3, r2
 800b982:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b984:	2300      	movs	r3, #0
 800b986:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b988:	2300      	movs	r3, #0
 800b98a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b992:	78bb      	ldrb	r3, [r7, #2]
 800b994:	883a      	ldrh	r2, [r7, #0]
 800b996:	78f9      	ldrb	r1, [r7, #3]
 800b998:	f7f9 ff4b 	bl	8005832 <HAL_PCD_EP_Open>
 800b99c:	4603      	mov	r3, r0
 800b99e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9a0:	7bfb      	ldrb	r3, [r7, #15]
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f000 f91c 	bl	800bbe0 <USBD_Get_USB_Status>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	3710      	adds	r7, #16
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}

0800b9b6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b9b6:	b580      	push	{r7, lr}
 800b9b8:	b084      	sub	sp, #16
 800b9ba:	af00      	add	r7, sp, #0
 800b9bc:	6078      	str	r0, [r7, #4]
 800b9be:	460b      	mov	r3, r1
 800b9c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b9d0:	78fa      	ldrb	r2, [r7, #3]
 800b9d2:	4611      	mov	r1, r2
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f7f9 ff96 	bl	8005906 <HAL_PCD_EP_Close>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9de:	7bfb      	ldrb	r3, [r7, #15]
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f000 f8fd 	bl	800bbe0 <USBD_Get_USB_Status>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9ea:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	3710      	adds	r7, #16
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}

0800b9f4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b084      	sub	sp, #16
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
 800b9fc:	460b      	mov	r3, r1
 800b9fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba00:	2300      	movs	r3, #0
 800ba02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba04:	2300      	movs	r3, #0
 800ba06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ba0e:	78fa      	ldrb	r2, [r7, #3]
 800ba10:	4611      	mov	r1, r2
 800ba12:	4618      	mov	r0, r3
 800ba14:	f7fa f84e 	bl	8005ab4 <HAL_PCD_EP_SetStall>
 800ba18:	4603      	mov	r3, r0
 800ba1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba1c:	7bfb      	ldrb	r3, [r7, #15]
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f000 f8de 	bl	800bbe0 <USBD_Get_USB_Status>
 800ba24:	4603      	mov	r3, r0
 800ba26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba28:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3710      	adds	r7, #16
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}

0800ba32 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba32:	b580      	push	{r7, lr}
 800ba34:	b084      	sub	sp, #16
 800ba36:	af00      	add	r7, sp, #0
 800ba38:	6078      	str	r0, [r7, #4]
 800ba3a:	460b      	mov	r3, r1
 800ba3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba42:	2300      	movs	r3, #0
 800ba44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ba4c:	78fa      	ldrb	r2, [r7, #3]
 800ba4e:	4611      	mov	r1, r2
 800ba50:	4618      	mov	r0, r3
 800ba52:	f7fa f892 	bl	8005b7a <HAL_PCD_EP_ClrStall>
 800ba56:	4603      	mov	r3, r0
 800ba58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba5a:	7bfb      	ldrb	r3, [r7, #15]
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f000 f8bf 	bl	800bbe0 <USBD_Get_USB_Status>
 800ba62:	4603      	mov	r3, r0
 800ba64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba66:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba68:	4618      	mov	r0, r3
 800ba6a:	3710      	adds	r7, #16
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bd80      	pop	{r7, pc}

0800ba70 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba70:	b480      	push	{r7}
 800ba72:	b085      	sub	sp, #20
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
 800ba78:	460b      	mov	r3, r1
 800ba7a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ba82:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ba84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	da0b      	bge.n	800baa4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ba8c:	78fb      	ldrb	r3, [r7, #3]
 800ba8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ba92:	68f9      	ldr	r1, [r7, #12]
 800ba94:	4613      	mov	r3, r2
 800ba96:	00db      	lsls	r3, r3, #3
 800ba98:	4413      	add	r3, r2
 800ba9a:	009b      	lsls	r3, r3, #2
 800ba9c:	440b      	add	r3, r1
 800ba9e:	3316      	adds	r3, #22
 800baa0:	781b      	ldrb	r3, [r3, #0]
 800baa2:	e00b      	b.n	800babc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800baa4:	78fb      	ldrb	r3, [r7, #3]
 800baa6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800baaa:	68f9      	ldr	r1, [r7, #12]
 800baac:	4613      	mov	r3, r2
 800baae:	00db      	lsls	r3, r3, #3
 800bab0:	4413      	add	r3, r2
 800bab2:	009b      	lsls	r3, r3, #2
 800bab4:	440b      	add	r3, r1
 800bab6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800baba:	781b      	ldrb	r3, [r3, #0]
  }
}
 800babc:	4618      	mov	r0, r3
 800babe:	3714      	adds	r7, #20
 800bac0:	46bd      	mov	sp, r7
 800bac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac6:	4770      	bx	lr

0800bac8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b084      	sub	sp, #16
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
 800bad0:	460b      	mov	r3, r1
 800bad2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bad4:	2300      	movs	r3, #0
 800bad6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bad8:	2300      	movs	r3, #0
 800bada:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bae2:	78fa      	ldrb	r2, [r7, #3]
 800bae4:	4611      	mov	r1, r2
 800bae6:	4618      	mov	r0, r3
 800bae8:	f7f9 fe7f 	bl	80057ea <HAL_PCD_SetAddress>
 800baec:	4603      	mov	r3, r0
 800baee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800baf0:	7bfb      	ldrb	r3, [r7, #15]
 800baf2:	4618      	mov	r0, r3
 800baf4:	f000 f874 	bl	800bbe0 <USBD_Get_USB_Status>
 800baf8:	4603      	mov	r3, r0
 800bafa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bafc:	7bbb      	ldrb	r3, [r7, #14]
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	3710      	adds	r7, #16
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}

0800bb06 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bb06:	b580      	push	{r7, lr}
 800bb08:	b086      	sub	sp, #24
 800bb0a:	af00      	add	r7, sp, #0
 800bb0c:	60f8      	str	r0, [r7, #12]
 800bb0e:	607a      	str	r2, [r7, #4]
 800bb10:	603b      	str	r3, [r7, #0]
 800bb12:	460b      	mov	r3, r1
 800bb14:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb16:	2300      	movs	r3, #0
 800bb18:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bb24:	7af9      	ldrb	r1, [r7, #11]
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	687a      	ldr	r2, [r7, #4]
 800bb2a:	f7f9 ff89 	bl	8005a40 <HAL_PCD_EP_Transmit>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb32:	7dfb      	ldrb	r3, [r7, #23]
 800bb34:	4618      	mov	r0, r3
 800bb36:	f000 f853 	bl	800bbe0 <USBD_Get_USB_Status>
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bb3e:	7dbb      	ldrb	r3, [r7, #22]
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	3718      	adds	r7, #24
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}

0800bb48 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b086      	sub	sp, #24
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	60f8      	str	r0, [r7, #12]
 800bb50:	607a      	str	r2, [r7, #4]
 800bb52:	603b      	str	r3, [r7, #0]
 800bb54:	460b      	mov	r3, r1
 800bb56:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb58:	2300      	movs	r3, #0
 800bb5a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bb66:	7af9      	ldrb	r1, [r7, #11]
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	687a      	ldr	r2, [r7, #4]
 800bb6c:	f7f9 ff15 	bl	800599a <HAL_PCD_EP_Receive>
 800bb70:	4603      	mov	r3, r0
 800bb72:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb74:	7dfb      	ldrb	r3, [r7, #23]
 800bb76:	4618      	mov	r0, r3
 800bb78:	f000 f832 	bl	800bbe0 <USBD_Get_USB_Status>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bb80:	7dbb      	ldrb	r3, [r7, #22]
}
 800bb82:	4618      	mov	r0, r3
 800bb84:	3718      	adds	r7, #24
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}

0800bb8a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb8a:	b580      	push	{r7, lr}
 800bb8c:	b082      	sub	sp, #8
 800bb8e:	af00      	add	r7, sp, #0
 800bb90:	6078      	str	r0, [r7, #4]
 800bb92:	460b      	mov	r3, r1
 800bb94:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bb9c:	78fa      	ldrb	r2, [r7, #3]
 800bb9e:	4611      	mov	r1, r2
 800bba0:	4618      	mov	r0, r3
 800bba2:	f7f9 ff35 	bl	8005a10 <HAL_PCD_EP_GetRxCount>
 800bba6:	4603      	mov	r3, r0
}
 800bba8:	4618      	mov	r0, r3
 800bbaa:	3708      	adds	r7, #8
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd80      	pop	{r7, pc}

0800bbb0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bbb0:	b480      	push	{r7}
 800bbb2:	b083      	sub	sp, #12
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bbb8:	4b03      	ldr	r3, [pc, #12]	@ (800bbc8 <USBD_static_malloc+0x18>)
}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	370c      	adds	r7, #12
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc4:	4770      	bx	lr
 800bbc6:	bf00      	nop
 800bbc8:	20002038 	.word	0x20002038

0800bbcc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bbcc:	b480      	push	{r7}
 800bbce:	b083      	sub	sp, #12
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]

}
 800bbd4:	bf00      	nop
 800bbd6:	370c      	adds	r7, #12
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbde:	4770      	bx	lr

0800bbe0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bbe0:	b480      	push	{r7}
 800bbe2:	b085      	sub	sp, #20
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbea:	2300      	movs	r3, #0
 800bbec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bbee:	79fb      	ldrb	r3, [r7, #7]
 800bbf0:	2b03      	cmp	r3, #3
 800bbf2:	d817      	bhi.n	800bc24 <USBD_Get_USB_Status+0x44>
 800bbf4:	a201      	add	r2, pc, #4	@ (adr r2, 800bbfc <USBD_Get_USB_Status+0x1c>)
 800bbf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbfa:	bf00      	nop
 800bbfc:	0800bc0d 	.word	0x0800bc0d
 800bc00:	0800bc13 	.word	0x0800bc13
 800bc04:	0800bc19 	.word	0x0800bc19
 800bc08:	0800bc1f 	.word	0x0800bc1f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	73fb      	strb	r3, [r7, #15]
    break;
 800bc10:	e00b      	b.n	800bc2a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bc12:	2303      	movs	r3, #3
 800bc14:	73fb      	strb	r3, [r7, #15]
    break;
 800bc16:	e008      	b.n	800bc2a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bc18:	2301      	movs	r3, #1
 800bc1a:	73fb      	strb	r3, [r7, #15]
    break;
 800bc1c:	e005      	b.n	800bc2a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bc1e:	2303      	movs	r3, #3
 800bc20:	73fb      	strb	r3, [r7, #15]
    break;
 800bc22:	e002      	b.n	800bc2a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bc24:	2303      	movs	r3, #3
 800bc26:	73fb      	strb	r3, [r7, #15]
    break;
 800bc28:	bf00      	nop
  }
  return usb_status;
 800bc2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	3714      	adds	r7, #20
 800bc30:	46bd      	mov	sp, r7
 800bc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc36:	4770      	bx	lr

0800bc38 <memset>:
 800bc38:	4402      	add	r2, r0
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	4293      	cmp	r3, r2
 800bc3e:	d100      	bne.n	800bc42 <memset+0xa>
 800bc40:	4770      	bx	lr
 800bc42:	f803 1b01 	strb.w	r1, [r3], #1
 800bc46:	e7f9      	b.n	800bc3c <memset+0x4>

0800bc48 <__errno>:
 800bc48:	4b01      	ldr	r3, [pc, #4]	@ (800bc50 <__errno+0x8>)
 800bc4a:	6818      	ldr	r0, [r3, #0]
 800bc4c:	4770      	bx	lr
 800bc4e:	bf00      	nop
 800bc50:	20000124 	.word	0x20000124

0800bc54 <__libc_init_array>:
 800bc54:	b570      	push	{r4, r5, r6, lr}
 800bc56:	4d0d      	ldr	r5, [pc, #52]	@ (800bc8c <__libc_init_array+0x38>)
 800bc58:	4c0d      	ldr	r4, [pc, #52]	@ (800bc90 <__libc_init_array+0x3c>)
 800bc5a:	1b64      	subs	r4, r4, r5
 800bc5c:	10a4      	asrs	r4, r4, #2
 800bc5e:	2600      	movs	r6, #0
 800bc60:	42a6      	cmp	r6, r4
 800bc62:	d109      	bne.n	800bc78 <__libc_init_array+0x24>
 800bc64:	4d0b      	ldr	r5, [pc, #44]	@ (800bc94 <__libc_init_array+0x40>)
 800bc66:	4c0c      	ldr	r4, [pc, #48]	@ (800bc98 <__libc_init_array+0x44>)
 800bc68:	f000 ffe8 	bl	800cc3c <_init>
 800bc6c:	1b64      	subs	r4, r4, r5
 800bc6e:	10a4      	asrs	r4, r4, #2
 800bc70:	2600      	movs	r6, #0
 800bc72:	42a6      	cmp	r6, r4
 800bc74:	d105      	bne.n	800bc82 <__libc_init_array+0x2e>
 800bc76:	bd70      	pop	{r4, r5, r6, pc}
 800bc78:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc7c:	4798      	blx	r3
 800bc7e:	3601      	adds	r6, #1
 800bc80:	e7ee      	b.n	800bc60 <__libc_init_array+0xc>
 800bc82:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc86:	4798      	blx	r3
 800bc88:	3601      	adds	r6, #1
 800bc8a:	e7f2      	b.n	800bc72 <__libc_init_array+0x1e>
 800bc8c:	0800d098 	.word	0x0800d098
 800bc90:	0800d098 	.word	0x0800d098
 800bc94:	0800d098 	.word	0x0800d098
 800bc98:	0800d09c 	.word	0x0800d09c

0800bc9c <memcpy>:
 800bc9c:	440a      	add	r2, r1
 800bc9e:	4291      	cmp	r1, r2
 800bca0:	f100 33ff 	add.w	r3, r0, #4294967295
 800bca4:	d100      	bne.n	800bca8 <memcpy+0xc>
 800bca6:	4770      	bx	lr
 800bca8:	b510      	push	{r4, lr}
 800bcaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bcae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bcb2:	4291      	cmp	r1, r2
 800bcb4:	d1f9      	bne.n	800bcaa <memcpy+0xe>
 800bcb6:	bd10      	pop	{r4, pc}

0800bcb8 <log>:
 800bcb8:	b538      	push	{r3, r4, r5, lr}
 800bcba:	ed2d 8b02 	vpush	{d8}
 800bcbe:	ec55 4b10 	vmov	r4, r5, d0
 800bcc2:	f000 f911 	bl	800bee8 <__ieee754_log>
 800bcc6:	4622      	mov	r2, r4
 800bcc8:	462b      	mov	r3, r5
 800bcca:	4620      	mov	r0, r4
 800bccc:	4629      	mov	r1, r5
 800bcce:	eeb0 8a40 	vmov.f32	s16, s0
 800bcd2:	eef0 8a60 	vmov.f32	s17, s1
 800bcd6:	f7f4 fed5 	bl	8000a84 <__aeabi_dcmpun>
 800bcda:	b998      	cbnz	r0, 800bd04 <log+0x4c>
 800bcdc:	2200      	movs	r2, #0
 800bcde:	2300      	movs	r3, #0
 800bce0:	4620      	mov	r0, r4
 800bce2:	4629      	mov	r1, r5
 800bce4:	f7f4 fec4 	bl	8000a70 <__aeabi_dcmpgt>
 800bce8:	b960      	cbnz	r0, 800bd04 <log+0x4c>
 800bcea:	2200      	movs	r2, #0
 800bcec:	2300      	movs	r3, #0
 800bcee:	4620      	mov	r0, r4
 800bcf0:	4629      	mov	r1, r5
 800bcf2:	f7f4 fe95 	bl	8000a20 <__aeabi_dcmpeq>
 800bcf6:	b160      	cbz	r0, 800bd12 <log+0x5a>
 800bcf8:	f7ff ffa6 	bl	800bc48 <__errno>
 800bcfc:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 800bd28 <log+0x70>
 800bd00:	2322      	movs	r3, #34	@ 0x22
 800bd02:	6003      	str	r3, [r0, #0]
 800bd04:	eeb0 0a48 	vmov.f32	s0, s16
 800bd08:	eef0 0a68 	vmov.f32	s1, s17
 800bd0c:	ecbd 8b02 	vpop	{d8}
 800bd10:	bd38      	pop	{r3, r4, r5, pc}
 800bd12:	f7ff ff99 	bl	800bc48 <__errno>
 800bd16:	ecbd 8b02 	vpop	{d8}
 800bd1a:	2321      	movs	r3, #33	@ 0x21
 800bd1c:	6003      	str	r3, [r0, #0]
 800bd1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd22:	4803      	ldr	r0, [pc, #12]	@ (800bd30 <log+0x78>)
 800bd24:	f000 b8b0 	b.w	800be88 <nan>
 800bd28:	00000000 	.word	0x00000000
 800bd2c:	fff00000 	.word	0xfff00000
 800bd30:	0800ccbc 	.word	0x0800ccbc

0800bd34 <sqrtf>:
 800bd34:	b508      	push	{r3, lr}
 800bd36:	ed2d 8b02 	vpush	{d8}
 800bd3a:	eeb0 8a40 	vmov.f32	s16, s0
 800bd3e:	f000 f8ab 	bl	800be98 <__ieee754_sqrtf>
 800bd42:	eeb4 8a48 	vcmp.f32	s16, s16
 800bd46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd4a:	d60c      	bvs.n	800bd66 <sqrtf+0x32>
 800bd4c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800bd6c <sqrtf+0x38>
 800bd50:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800bd54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd58:	d505      	bpl.n	800bd66 <sqrtf+0x32>
 800bd5a:	f7ff ff75 	bl	800bc48 <__errno>
 800bd5e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800bd62:	2321      	movs	r3, #33	@ 0x21
 800bd64:	6003      	str	r3, [r0, #0]
 800bd66:	ecbd 8b02 	vpop	{d8}
 800bd6a:	bd08      	pop	{r3, pc}
 800bd6c:	00000000 	.word	0x00000000

0800bd70 <cosf>:
 800bd70:	ee10 3a10 	vmov	r3, s0
 800bd74:	b507      	push	{r0, r1, r2, lr}
 800bd76:	4a1e      	ldr	r2, [pc, #120]	@ (800bdf0 <cosf+0x80>)
 800bd78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bd7c:	4293      	cmp	r3, r2
 800bd7e:	d806      	bhi.n	800bd8e <cosf+0x1e>
 800bd80:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800bdf4 <cosf+0x84>
 800bd84:	b003      	add	sp, #12
 800bd86:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd8a:	f000 ba63 	b.w	800c254 <__kernel_cosf>
 800bd8e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800bd92:	d304      	bcc.n	800bd9e <cosf+0x2e>
 800bd94:	ee30 0a40 	vsub.f32	s0, s0, s0
 800bd98:	b003      	add	sp, #12
 800bd9a:	f85d fb04 	ldr.w	pc, [sp], #4
 800bd9e:	4668      	mov	r0, sp
 800bda0:	f000 faf8 	bl	800c394 <__ieee754_rem_pio2f>
 800bda4:	f000 0003 	and.w	r0, r0, #3
 800bda8:	2801      	cmp	r0, #1
 800bdaa:	d009      	beq.n	800bdc0 <cosf+0x50>
 800bdac:	2802      	cmp	r0, #2
 800bdae:	d010      	beq.n	800bdd2 <cosf+0x62>
 800bdb0:	b9b0      	cbnz	r0, 800bde0 <cosf+0x70>
 800bdb2:	eddd 0a01 	vldr	s1, [sp, #4]
 800bdb6:	ed9d 0a00 	vldr	s0, [sp]
 800bdba:	f000 fa4b 	bl	800c254 <__kernel_cosf>
 800bdbe:	e7eb      	b.n	800bd98 <cosf+0x28>
 800bdc0:	eddd 0a01 	vldr	s1, [sp, #4]
 800bdc4:	ed9d 0a00 	vldr	s0, [sp]
 800bdc8:	f000 fa9c 	bl	800c304 <__kernel_sinf>
 800bdcc:	eeb1 0a40 	vneg.f32	s0, s0
 800bdd0:	e7e2      	b.n	800bd98 <cosf+0x28>
 800bdd2:	eddd 0a01 	vldr	s1, [sp, #4]
 800bdd6:	ed9d 0a00 	vldr	s0, [sp]
 800bdda:	f000 fa3b 	bl	800c254 <__kernel_cosf>
 800bdde:	e7f5      	b.n	800bdcc <cosf+0x5c>
 800bde0:	eddd 0a01 	vldr	s1, [sp, #4]
 800bde4:	ed9d 0a00 	vldr	s0, [sp]
 800bde8:	2001      	movs	r0, #1
 800bdea:	f000 fa8b 	bl	800c304 <__kernel_sinf>
 800bdee:	e7d3      	b.n	800bd98 <cosf+0x28>
 800bdf0:	3f490fd8 	.word	0x3f490fd8
 800bdf4:	00000000 	.word	0x00000000

0800bdf8 <sinf>:
 800bdf8:	ee10 3a10 	vmov	r3, s0
 800bdfc:	b507      	push	{r0, r1, r2, lr}
 800bdfe:	4a1f      	ldr	r2, [pc, #124]	@ (800be7c <sinf+0x84>)
 800be00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800be04:	4293      	cmp	r3, r2
 800be06:	d807      	bhi.n	800be18 <sinf+0x20>
 800be08:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800be80 <sinf+0x88>
 800be0c:	2000      	movs	r0, #0
 800be0e:	b003      	add	sp, #12
 800be10:	f85d eb04 	ldr.w	lr, [sp], #4
 800be14:	f000 ba76 	b.w	800c304 <__kernel_sinf>
 800be18:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800be1c:	d304      	bcc.n	800be28 <sinf+0x30>
 800be1e:	ee30 0a40 	vsub.f32	s0, s0, s0
 800be22:	b003      	add	sp, #12
 800be24:	f85d fb04 	ldr.w	pc, [sp], #4
 800be28:	4668      	mov	r0, sp
 800be2a:	f000 fab3 	bl	800c394 <__ieee754_rem_pio2f>
 800be2e:	f000 0003 	and.w	r0, r0, #3
 800be32:	2801      	cmp	r0, #1
 800be34:	d00a      	beq.n	800be4c <sinf+0x54>
 800be36:	2802      	cmp	r0, #2
 800be38:	d00f      	beq.n	800be5a <sinf+0x62>
 800be3a:	b9c0      	cbnz	r0, 800be6e <sinf+0x76>
 800be3c:	eddd 0a01 	vldr	s1, [sp, #4]
 800be40:	ed9d 0a00 	vldr	s0, [sp]
 800be44:	2001      	movs	r0, #1
 800be46:	f000 fa5d 	bl	800c304 <__kernel_sinf>
 800be4a:	e7ea      	b.n	800be22 <sinf+0x2a>
 800be4c:	eddd 0a01 	vldr	s1, [sp, #4]
 800be50:	ed9d 0a00 	vldr	s0, [sp]
 800be54:	f000 f9fe 	bl	800c254 <__kernel_cosf>
 800be58:	e7e3      	b.n	800be22 <sinf+0x2a>
 800be5a:	eddd 0a01 	vldr	s1, [sp, #4]
 800be5e:	ed9d 0a00 	vldr	s0, [sp]
 800be62:	2001      	movs	r0, #1
 800be64:	f000 fa4e 	bl	800c304 <__kernel_sinf>
 800be68:	eeb1 0a40 	vneg.f32	s0, s0
 800be6c:	e7d9      	b.n	800be22 <sinf+0x2a>
 800be6e:	eddd 0a01 	vldr	s1, [sp, #4]
 800be72:	ed9d 0a00 	vldr	s0, [sp]
 800be76:	f000 f9ed 	bl	800c254 <__kernel_cosf>
 800be7a:	e7f5      	b.n	800be68 <sinf+0x70>
 800be7c:	3f490fd8 	.word	0x3f490fd8
	...

0800be88 <nan>:
 800be88:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800be90 <nan+0x8>
 800be8c:	4770      	bx	lr
 800be8e:	bf00      	nop
 800be90:	00000000 	.word	0x00000000
 800be94:	7ff80000 	.word	0x7ff80000

0800be98 <__ieee754_sqrtf>:
 800be98:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800be9c:	4770      	bx	lr
	...

0800bea0 <roundf>:
 800bea0:	ee10 0a10 	vmov	r0, s0
 800bea4:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800bea8:	3a7f      	subs	r2, #127	@ 0x7f
 800beaa:	2a16      	cmp	r2, #22
 800beac:	dc15      	bgt.n	800beda <roundf+0x3a>
 800beae:	2a00      	cmp	r2, #0
 800beb0:	da08      	bge.n	800bec4 <roundf+0x24>
 800beb2:	3201      	adds	r2, #1
 800beb4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800beb8:	d101      	bne.n	800bebe <roundf+0x1e>
 800beba:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 800bebe:	ee00 3a10 	vmov	s0, r3
 800bec2:	4770      	bx	lr
 800bec4:	4907      	ldr	r1, [pc, #28]	@ (800bee4 <roundf+0x44>)
 800bec6:	4111      	asrs	r1, r2
 800bec8:	4201      	tst	r1, r0
 800beca:	d0fa      	beq.n	800bec2 <roundf+0x22>
 800becc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800bed0:	4113      	asrs	r3, r2
 800bed2:	4403      	add	r3, r0
 800bed4:	ea23 0301 	bic.w	r3, r3, r1
 800bed8:	e7f1      	b.n	800bebe <roundf+0x1e>
 800beda:	2a80      	cmp	r2, #128	@ 0x80
 800bedc:	d1f1      	bne.n	800bec2 <roundf+0x22>
 800bede:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bee2:	4770      	bx	lr
 800bee4:	007fffff 	.word	0x007fffff

0800bee8 <__ieee754_log>:
 800bee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beec:	ec51 0b10 	vmov	r0, r1, d0
 800bef0:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800bef4:	b087      	sub	sp, #28
 800bef6:	460d      	mov	r5, r1
 800bef8:	da26      	bge.n	800bf48 <__ieee754_log+0x60>
 800befa:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800befe:	4303      	orrs	r3, r0
 800bf00:	4602      	mov	r2, r0
 800bf02:	d10a      	bne.n	800bf1a <__ieee754_log+0x32>
 800bf04:	49ce      	ldr	r1, [pc, #824]	@ (800c240 <__ieee754_log+0x358>)
 800bf06:	2200      	movs	r2, #0
 800bf08:	2300      	movs	r3, #0
 800bf0a:	2000      	movs	r0, #0
 800bf0c:	f7f4 fc4a 	bl	80007a4 <__aeabi_ddiv>
 800bf10:	ec41 0b10 	vmov	d0, r0, r1
 800bf14:	b007      	add	sp, #28
 800bf16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf1a:	2900      	cmp	r1, #0
 800bf1c:	da05      	bge.n	800bf2a <__ieee754_log+0x42>
 800bf1e:	460b      	mov	r3, r1
 800bf20:	f7f4 f95e 	bl	80001e0 <__aeabi_dsub>
 800bf24:	2200      	movs	r2, #0
 800bf26:	2300      	movs	r3, #0
 800bf28:	e7f0      	b.n	800bf0c <__ieee754_log+0x24>
 800bf2a:	4bc6      	ldr	r3, [pc, #792]	@ (800c244 <__ieee754_log+0x35c>)
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	f7f4 fb0f 	bl	8000550 <__aeabi_dmul>
 800bf32:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 800bf36:	460d      	mov	r5, r1
 800bf38:	4ac3      	ldr	r2, [pc, #780]	@ (800c248 <__ieee754_log+0x360>)
 800bf3a:	4295      	cmp	r5, r2
 800bf3c:	dd06      	ble.n	800bf4c <__ieee754_log+0x64>
 800bf3e:	4602      	mov	r2, r0
 800bf40:	460b      	mov	r3, r1
 800bf42:	f7f4 f94f 	bl	80001e4 <__adddf3>
 800bf46:	e7e3      	b.n	800bf10 <__ieee754_log+0x28>
 800bf48:	2300      	movs	r3, #0
 800bf4a:	e7f5      	b.n	800bf38 <__ieee754_log+0x50>
 800bf4c:	152c      	asrs	r4, r5, #20
 800bf4e:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800bf52:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800bf56:	441c      	add	r4, r3
 800bf58:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 800bf5c:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 800bf60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bf64:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 800bf68:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 800bf6c:	ea42 0105 	orr.w	r1, r2, r5
 800bf70:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800bf74:	2200      	movs	r2, #0
 800bf76:	4bb5      	ldr	r3, [pc, #724]	@ (800c24c <__ieee754_log+0x364>)
 800bf78:	f7f4 f932 	bl	80001e0 <__aeabi_dsub>
 800bf7c:	1cab      	adds	r3, r5, #2
 800bf7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bf82:	2b02      	cmp	r3, #2
 800bf84:	4682      	mov	sl, r0
 800bf86:	468b      	mov	fp, r1
 800bf88:	f04f 0200 	mov.w	r2, #0
 800bf8c:	dc53      	bgt.n	800c036 <__ieee754_log+0x14e>
 800bf8e:	2300      	movs	r3, #0
 800bf90:	f7f4 fd46 	bl	8000a20 <__aeabi_dcmpeq>
 800bf94:	b1d0      	cbz	r0, 800bfcc <__ieee754_log+0xe4>
 800bf96:	2c00      	cmp	r4, #0
 800bf98:	f000 8120 	beq.w	800c1dc <__ieee754_log+0x2f4>
 800bf9c:	4620      	mov	r0, r4
 800bf9e:	f7f4 fa6d 	bl	800047c <__aeabi_i2d>
 800bfa2:	a391      	add	r3, pc, #580	@ (adr r3, 800c1e8 <__ieee754_log+0x300>)
 800bfa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa8:	4606      	mov	r6, r0
 800bfaa:	460f      	mov	r7, r1
 800bfac:	f7f4 fad0 	bl	8000550 <__aeabi_dmul>
 800bfb0:	a38f      	add	r3, pc, #572	@ (adr r3, 800c1f0 <__ieee754_log+0x308>)
 800bfb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb6:	4604      	mov	r4, r0
 800bfb8:	460d      	mov	r5, r1
 800bfba:	4630      	mov	r0, r6
 800bfbc:	4639      	mov	r1, r7
 800bfbe:	f7f4 fac7 	bl	8000550 <__aeabi_dmul>
 800bfc2:	4602      	mov	r2, r0
 800bfc4:	460b      	mov	r3, r1
 800bfc6:	4620      	mov	r0, r4
 800bfc8:	4629      	mov	r1, r5
 800bfca:	e7ba      	b.n	800bf42 <__ieee754_log+0x5a>
 800bfcc:	a38a      	add	r3, pc, #552	@ (adr r3, 800c1f8 <__ieee754_log+0x310>)
 800bfce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfd2:	4650      	mov	r0, sl
 800bfd4:	4659      	mov	r1, fp
 800bfd6:	f7f4 fabb 	bl	8000550 <__aeabi_dmul>
 800bfda:	4602      	mov	r2, r0
 800bfdc:	460b      	mov	r3, r1
 800bfde:	2000      	movs	r0, #0
 800bfe0:	499b      	ldr	r1, [pc, #620]	@ (800c250 <__ieee754_log+0x368>)
 800bfe2:	f7f4 f8fd 	bl	80001e0 <__aeabi_dsub>
 800bfe6:	4652      	mov	r2, sl
 800bfe8:	4606      	mov	r6, r0
 800bfea:	460f      	mov	r7, r1
 800bfec:	465b      	mov	r3, fp
 800bfee:	4650      	mov	r0, sl
 800bff0:	4659      	mov	r1, fp
 800bff2:	f7f4 faad 	bl	8000550 <__aeabi_dmul>
 800bff6:	4602      	mov	r2, r0
 800bff8:	460b      	mov	r3, r1
 800bffa:	4630      	mov	r0, r6
 800bffc:	4639      	mov	r1, r7
 800bffe:	f7f4 faa7 	bl	8000550 <__aeabi_dmul>
 800c002:	4606      	mov	r6, r0
 800c004:	460f      	mov	r7, r1
 800c006:	b914      	cbnz	r4, 800c00e <__ieee754_log+0x126>
 800c008:	4632      	mov	r2, r6
 800c00a:	463b      	mov	r3, r7
 800c00c:	e0a0      	b.n	800c150 <__ieee754_log+0x268>
 800c00e:	4620      	mov	r0, r4
 800c010:	f7f4 fa34 	bl	800047c <__aeabi_i2d>
 800c014:	a374      	add	r3, pc, #464	@ (adr r3, 800c1e8 <__ieee754_log+0x300>)
 800c016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c01a:	4680      	mov	r8, r0
 800c01c:	4689      	mov	r9, r1
 800c01e:	f7f4 fa97 	bl	8000550 <__aeabi_dmul>
 800c022:	a373      	add	r3, pc, #460	@ (adr r3, 800c1f0 <__ieee754_log+0x308>)
 800c024:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c028:	4604      	mov	r4, r0
 800c02a:	460d      	mov	r5, r1
 800c02c:	4640      	mov	r0, r8
 800c02e:	4649      	mov	r1, r9
 800c030:	f7f4 fa8e 	bl	8000550 <__aeabi_dmul>
 800c034:	e0a5      	b.n	800c182 <__ieee754_log+0x29a>
 800c036:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c03a:	f7f4 f8d3 	bl	80001e4 <__adddf3>
 800c03e:	4602      	mov	r2, r0
 800c040:	460b      	mov	r3, r1
 800c042:	4650      	mov	r0, sl
 800c044:	4659      	mov	r1, fp
 800c046:	f7f4 fbad 	bl	80007a4 <__aeabi_ddiv>
 800c04a:	e9cd 0100 	strd	r0, r1, [sp]
 800c04e:	4620      	mov	r0, r4
 800c050:	f7f4 fa14 	bl	800047c <__aeabi_i2d>
 800c054:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c058:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c05c:	4610      	mov	r0, r2
 800c05e:	4619      	mov	r1, r3
 800c060:	f7f4 fa76 	bl	8000550 <__aeabi_dmul>
 800c064:	4602      	mov	r2, r0
 800c066:	460b      	mov	r3, r1
 800c068:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c06c:	f7f4 fa70 	bl	8000550 <__aeabi_dmul>
 800c070:	a363      	add	r3, pc, #396	@ (adr r3, 800c200 <__ieee754_log+0x318>)
 800c072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c076:	4680      	mov	r8, r0
 800c078:	4689      	mov	r9, r1
 800c07a:	f7f4 fa69 	bl	8000550 <__aeabi_dmul>
 800c07e:	a362      	add	r3, pc, #392	@ (adr r3, 800c208 <__ieee754_log+0x320>)
 800c080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c084:	f7f4 f8ae 	bl	80001e4 <__adddf3>
 800c088:	4642      	mov	r2, r8
 800c08a:	464b      	mov	r3, r9
 800c08c:	f7f4 fa60 	bl	8000550 <__aeabi_dmul>
 800c090:	a35f      	add	r3, pc, #380	@ (adr r3, 800c210 <__ieee754_log+0x328>)
 800c092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c096:	f7f4 f8a5 	bl	80001e4 <__adddf3>
 800c09a:	4642      	mov	r2, r8
 800c09c:	464b      	mov	r3, r9
 800c09e:	f7f4 fa57 	bl	8000550 <__aeabi_dmul>
 800c0a2:	a35d      	add	r3, pc, #372	@ (adr r3, 800c218 <__ieee754_log+0x330>)
 800c0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a8:	f7f4 f89c 	bl	80001e4 <__adddf3>
 800c0ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c0b0:	f7f4 fa4e 	bl	8000550 <__aeabi_dmul>
 800c0b4:	a35a      	add	r3, pc, #360	@ (adr r3, 800c220 <__ieee754_log+0x338>)
 800c0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c0be:	4640      	mov	r0, r8
 800c0c0:	4649      	mov	r1, r9
 800c0c2:	f7f4 fa45 	bl	8000550 <__aeabi_dmul>
 800c0c6:	a358      	add	r3, pc, #352	@ (adr r3, 800c228 <__ieee754_log+0x340>)
 800c0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0cc:	f7f4 f88a 	bl	80001e4 <__adddf3>
 800c0d0:	4642      	mov	r2, r8
 800c0d2:	464b      	mov	r3, r9
 800c0d4:	f7f4 fa3c 	bl	8000550 <__aeabi_dmul>
 800c0d8:	a355      	add	r3, pc, #340	@ (adr r3, 800c230 <__ieee754_log+0x348>)
 800c0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0de:	f7f4 f881 	bl	80001e4 <__adddf3>
 800c0e2:	4642      	mov	r2, r8
 800c0e4:	464b      	mov	r3, r9
 800c0e6:	f7f4 fa33 	bl	8000550 <__aeabi_dmul>
 800c0ea:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800c0ee:	4602      	mov	r2, r0
 800c0f0:	460b      	mov	r3, r1
 800c0f2:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800c0f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c0fa:	f7f4 f873 	bl	80001e4 <__adddf3>
 800c0fe:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 800c102:	3551      	adds	r5, #81	@ 0x51
 800c104:	4335      	orrs	r5, r6
 800c106:	2d00      	cmp	r5, #0
 800c108:	4680      	mov	r8, r0
 800c10a:	4689      	mov	r9, r1
 800c10c:	dd48      	ble.n	800c1a0 <__ieee754_log+0x2b8>
 800c10e:	4b50      	ldr	r3, [pc, #320]	@ (800c250 <__ieee754_log+0x368>)
 800c110:	2200      	movs	r2, #0
 800c112:	4650      	mov	r0, sl
 800c114:	4659      	mov	r1, fp
 800c116:	f7f4 fa1b 	bl	8000550 <__aeabi_dmul>
 800c11a:	4652      	mov	r2, sl
 800c11c:	465b      	mov	r3, fp
 800c11e:	f7f4 fa17 	bl	8000550 <__aeabi_dmul>
 800c122:	4602      	mov	r2, r0
 800c124:	460b      	mov	r3, r1
 800c126:	4606      	mov	r6, r0
 800c128:	460f      	mov	r7, r1
 800c12a:	4640      	mov	r0, r8
 800c12c:	4649      	mov	r1, r9
 800c12e:	f7f4 f859 	bl	80001e4 <__adddf3>
 800c132:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c136:	f7f4 fa0b 	bl	8000550 <__aeabi_dmul>
 800c13a:	4680      	mov	r8, r0
 800c13c:	4689      	mov	r9, r1
 800c13e:	b964      	cbnz	r4, 800c15a <__ieee754_log+0x272>
 800c140:	4602      	mov	r2, r0
 800c142:	460b      	mov	r3, r1
 800c144:	4630      	mov	r0, r6
 800c146:	4639      	mov	r1, r7
 800c148:	f7f4 f84a 	bl	80001e0 <__aeabi_dsub>
 800c14c:	4602      	mov	r2, r0
 800c14e:	460b      	mov	r3, r1
 800c150:	4650      	mov	r0, sl
 800c152:	4659      	mov	r1, fp
 800c154:	f7f4 f844 	bl	80001e0 <__aeabi_dsub>
 800c158:	e6da      	b.n	800bf10 <__ieee754_log+0x28>
 800c15a:	a323      	add	r3, pc, #140	@ (adr r3, 800c1e8 <__ieee754_log+0x300>)
 800c15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c160:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c164:	f7f4 f9f4 	bl	8000550 <__aeabi_dmul>
 800c168:	a321      	add	r3, pc, #132	@ (adr r3, 800c1f0 <__ieee754_log+0x308>)
 800c16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c16e:	4604      	mov	r4, r0
 800c170:	460d      	mov	r5, r1
 800c172:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c176:	f7f4 f9eb 	bl	8000550 <__aeabi_dmul>
 800c17a:	4642      	mov	r2, r8
 800c17c:	464b      	mov	r3, r9
 800c17e:	f7f4 f831 	bl	80001e4 <__adddf3>
 800c182:	4602      	mov	r2, r0
 800c184:	460b      	mov	r3, r1
 800c186:	4630      	mov	r0, r6
 800c188:	4639      	mov	r1, r7
 800c18a:	f7f4 f829 	bl	80001e0 <__aeabi_dsub>
 800c18e:	4652      	mov	r2, sl
 800c190:	465b      	mov	r3, fp
 800c192:	f7f4 f825 	bl	80001e0 <__aeabi_dsub>
 800c196:	4602      	mov	r2, r0
 800c198:	460b      	mov	r3, r1
 800c19a:	4620      	mov	r0, r4
 800c19c:	4629      	mov	r1, r5
 800c19e:	e7d9      	b.n	800c154 <__ieee754_log+0x26c>
 800c1a0:	4602      	mov	r2, r0
 800c1a2:	460b      	mov	r3, r1
 800c1a4:	4650      	mov	r0, sl
 800c1a6:	4659      	mov	r1, fp
 800c1a8:	f7f4 f81a 	bl	80001e0 <__aeabi_dsub>
 800c1ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c1b0:	f7f4 f9ce 	bl	8000550 <__aeabi_dmul>
 800c1b4:	4606      	mov	r6, r0
 800c1b6:	460f      	mov	r7, r1
 800c1b8:	2c00      	cmp	r4, #0
 800c1ba:	f43f af25 	beq.w	800c008 <__ieee754_log+0x120>
 800c1be:	a30a      	add	r3, pc, #40	@ (adr r3, 800c1e8 <__ieee754_log+0x300>)
 800c1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1c8:	f7f4 f9c2 	bl	8000550 <__aeabi_dmul>
 800c1cc:	a308      	add	r3, pc, #32	@ (adr r3, 800c1f0 <__ieee754_log+0x308>)
 800c1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1d2:	4604      	mov	r4, r0
 800c1d4:	460d      	mov	r5, r1
 800c1d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1da:	e729      	b.n	800c030 <__ieee754_log+0x148>
 800c1dc:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 800c238 <__ieee754_log+0x350>
 800c1e0:	e698      	b.n	800bf14 <__ieee754_log+0x2c>
 800c1e2:	bf00      	nop
 800c1e4:	f3af 8000 	nop.w
 800c1e8:	fee00000 	.word	0xfee00000
 800c1ec:	3fe62e42 	.word	0x3fe62e42
 800c1f0:	35793c76 	.word	0x35793c76
 800c1f4:	3dea39ef 	.word	0x3dea39ef
 800c1f8:	55555555 	.word	0x55555555
 800c1fc:	3fd55555 	.word	0x3fd55555
 800c200:	df3e5244 	.word	0xdf3e5244
 800c204:	3fc2f112 	.word	0x3fc2f112
 800c208:	96cb03de 	.word	0x96cb03de
 800c20c:	3fc74664 	.word	0x3fc74664
 800c210:	94229359 	.word	0x94229359
 800c214:	3fd24924 	.word	0x3fd24924
 800c218:	55555593 	.word	0x55555593
 800c21c:	3fe55555 	.word	0x3fe55555
 800c220:	d078c69f 	.word	0xd078c69f
 800c224:	3fc39a09 	.word	0x3fc39a09
 800c228:	1d8e78af 	.word	0x1d8e78af
 800c22c:	3fcc71c5 	.word	0x3fcc71c5
 800c230:	9997fa04 	.word	0x9997fa04
 800c234:	3fd99999 	.word	0x3fd99999
	...
 800c240:	c3500000 	.word	0xc3500000
 800c244:	43500000 	.word	0x43500000
 800c248:	7fefffff 	.word	0x7fefffff
 800c24c:	3ff00000 	.word	0x3ff00000
 800c250:	3fe00000 	.word	0x3fe00000

0800c254 <__kernel_cosf>:
 800c254:	ee10 3a10 	vmov	r3, s0
 800c258:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c25c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800c260:	eef0 6a40 	vmov.f32	s13, s0
 800c264:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c268:	d204      	bcs.n	800c274 <__kernel_cosf+0x20>
 800c26a:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800c26e:	ee17 2a90 	vmov	r2, s15
 800c272:	b342      	cbz	r2, 800c2c6 <__kernel_cosf+0x72>
 800c274:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800c278:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800c2e4 <__kernel_cosf+0x90>
 800c27c:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800c2e8 <__kernel_cosf+0x94>
 800c280:	4a1a      	ldr	r2, [pc, #104]	@ (800c2ec <__kernel_cosf+0x98>)
 800c282:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c286:	4293      	cmp	r3, r2
 800c288:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800c2f0 <__kernel_cosf+0x9c>
 800c28c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c290:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800c2f4 <__kernel_cosf+0xa0>
 800c294:	eea7 6a87 	vfma.f32	s12, s15, s14
 800c298:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800c2f8 <__kernel_cosf+0xa4>
 800c29c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c2a0:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800c2fc <__kernel_cosf+0xa8>
 800c2a4:	eea7 6a87 	vfma.f32	s12, s15, s14
 800c2a8:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800c2ac:	ee26 6a07 	vmul.f32	s12, s12, s14
 800c2b0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800c2b4:	eee7 0a06 	vfma.f32	s1, s14, s12
 800c2b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2bc:	d804      	bhi.n	800c2c8 <__kernel_cosf+0x74>
 800c2be:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800c2c2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c2c6:	4770      	bx	lr
 800c2c8:	4a0d      	ldr	r2, [pc, #52]	@ (800c300 <__kernel_cosf+0xac>)
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	bf9a      	itte	ls
 800c2ce:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800c2d2:	ee07 3a10 	vmovls	s14, r3
 800c2d6:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800c2da:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c2de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c2e2:	e7ec      	b.n	800c2be <__kernel_cosf+0x6a>
 800c2e4:	ad47d74e 	.word	0xad47d74e
 800c2e8:	310f74f6 	.word	0x310f74f6
 800c2ec:	3e999999 	.word	0x3e999999
 800c2f0:	b493f27c 	.word	0xb493f27c
 800c2f4:	37d00d01 	.word	0x37d00d01
 800c2f8:	bab60b61 	.word	0xbab60b61
 800c2fc:	3d2aaaab 	.word	0x3d2aaaab
 800c300:	3f480000 	.word	0x3f480000

0800c304 <__kernel_sinf>:
 800c304:	ee10 3a10 	vmov	r3, s0
 800c308:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c30c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800c310:	d204      	bcs.n	800c31c <__kernel_sinf+0x18>
 800c312:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c316:	ee17 3a90 	vmov	r3, s15
 800c31a:	b35b      	cbz	r3, 800c374 <__kernel_sinf+0x70>
 800c31c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c320:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800c378 <__kernel_sinf+0x74>
 800c324:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800c37c <__kernel_sinf+0x78>
 800c328:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c32c:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800c380 <__kernel_sinf+0x7c>
 800c330:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c334:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800c384 <__kernel_sinf+0x80>
 800c338:	eea7 6a87 	vfma.f32	s12, s15, s14
 800c33c:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800c388 <__kernel_sinf+0x84>
 800c340:	ee60 6a07 	vmul.f32	s13, s0, s14
 800c344:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c348:	b930      	cbnz	r0, 800c358 <__kernel_sinf+0x54>
 800c34a:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800c38c <__kernel_sinf+0x88>
 800c34e:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c352:	eea6 0a26 	vfma.f32	s0, s12, s13
 800c356:	4770      	bx	lr
 800c358:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800c35c:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800c360:	eee0 7a86 	vfma.f32	s15, s1, s12
 800c364:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800c368:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800c390 <__kernel_sinf+0x8c>
 800c36c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800c370:	ee30 0a60 	vsub.f32	s0, s0, s1
 800c374:	4770      	bx	lr
 800c376:	bf00      	nop
 800c378:	2f2ec9d3 	.word	0x2f2ec9d3
 800c37c:	b2d72f34 	.word	0xb2d72f34
 800c380:	3638ef1b 	.word	0x3638ef1b
 800c384:	b9500d01 	.word	0xb9500d01
 800c388:	3c088889 	.word	0x3c088889
 800c38c:	be2aaaab 	.word	0xbe2aaaab
 800c390:	3e2aaaab 	.word	0x3e2aaaab

0800c394 <__ieee754_rem_pio2f>:
 800c394:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c396:	ee10 6a10 	vmov	r6, s0
 800c39a:	4b88      	ldr	r3, [pc, #544]	@ (800c5bc <__ieee754_rem_pio2f+0x228>)
 800c39c:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800c3a0:	429d      	cmp	r5, r3
 800c3a2:	b087      	sub	sp, #28
 800c3a4:	4604      	mov	r4, r0
 800c3a6:	d805      	bhi.n	800c3b4 <__ieee754_rem_pio2f+0x20>
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	ed80 0a00 	vstr	s0, [r0]
 800c3ae:	6043      	str	r3, [r0, #4]
 800c3b0:	2000      	movs	r0, #0
 800c3b2:	e022      	b.n	800c3fa <__ieee754_rem_pio2f+0x66>
 800c3b4:	4b82      	ldr	r3, [pc, #520]	@ (800c5c0 <__ieee754_rem_pio2f+0x22c>)
 800c3b6:	429d      	cmp	r5, r3
 800c3b8:	d83a      	bhi.n	800c430 <__ieee754_rem_pio2f+0x9c>
 800c3ba:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800c3be:	2e00      	cmp	r6, #0
 800c3c0:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800c5c4 <__ieee754_rem_pio2f+0x230>
 800c3c4:	4a80      	ldr	r2, [pc, #512]	@ (800c5c8 <__ieee754_rem_pio2f+0x234>)
 800c3c6:	f023 030f 	bic.w	r3, r3, #15
 800c3ca:	dd18      	ble.n	800c3fe <__ieee754_rem_pio2f+0x6a>
 800c3cc:	4293      	cmp	r3, r2
 800c3ce:	ee70 7a47 	vsub.f32	s15, s0, s14
 800c3d2:	bf09      	itett	eq
 800c3d4:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800c5cc <__ieee754_rem_pio2f+0x238>
 800c3d8:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800c5d0 <__ieee754_rem_pio2f+0x23c>
 800c3dc:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800c5d4 <__ieee754_rem_pio2f+0x240>
 800c3e0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800c3e4:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800c3e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c3ec:	ed80 7a00 	vstr	s14, [r0]
 800c3f0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c3f4:	edc0 7a01 	vstr	s15, [r0, #4]
 800c3f8:	2001      	movs	r0, #1
 800c3fa:	b007      	add	sp, #28
 800c3fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3fe:	4293      	cmp	r3, r2
 800c400:	ee70 7a07 	vadd.f32	s15, s0, s14
 800c404:	bf09      	itett	eq
 800c406:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800c5cc <__ieee754_rem_pio2f+0x238>
 800c40a:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800c5d0 <__ieee754_rem_pio2f+0x23c>
 800c40e:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800c5d4 <__ieee754_rem_pio2f+0x240>
 800c412:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800c416:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c41a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c41e:	ed80 7a00 	vstr	s14, [r0]
 800c422:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c426:	edc0 7a01 	vstr	s15, [r0, #4]
 800c42a:	f04f 30ff 	mov.w	r0, #4294967295
 800c42e:	e7e4      	b.n	800c3fa <__ieee754_rem_pio2f+0x66>
 800c430:	4b69      	ldr	r3, [pc, #420]	@ (800c5d8 <__ieee754_rem_pio2f+0x244>)
 800c432:	429d      	cmp	r5, r3
 800c434:	d873      	bhi.n	800c51e <__ieee754_rem_pio2f+0x18a>
 800c436:	f000 f8dd 	bl	800c5f4 <fabsf>
 800c43a:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800c5dc <__ieee754_rem_pio2f+0x248>
 800c43e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800c442:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c446:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c44a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c44e:	ee17 0a90 	vmov	r0, s15
 800c452:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800c5c4 <__ieee754_rem_pio2f+0x230>
 800c456:	eea7 0a67 	vfms.f32	s0, s14, s15
 800c45a:	281f      	cmp	r0, #31
 800c45c:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800c5d0 <__ieee754_rem_pio2f+0x23c>
 800c460:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c464:	eeb1 6a47 	vneg.f32	s12, s14
 800c468:	ee70 6a67 	vsub.f32	s13, s0, s15
 800c46c:	ee16 1a90 	vmov	r1, s13
 800c470:	dc09      	bgt.n	800c486 <__ieee754_rem_pio2f+0xf2>
 800c472:	4a5b      	ldr	r2, [pc, #364]	@ (800c5e0 <__ieee754_rem_pio2f+0x24c>)
 800c474:	1e47      	subs	r7, r0, #1
 800c476:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800c47a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800c47e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800c482:	4293      	cmp	r3, r2
 800c484:	d107      	bne.n	800c496 <__ieee754_rem_pio2f+0x102>
 800c486:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800c48a:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800c48e:	2a08      	cmp	r2, #8
 800c490:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800c494:	dc14      	bgt.n	800c4c0 <__ieee754_rem_pio2f+0x12c>
 800c496:	6021      	str	r1, [r4, #0]
 800c498:	ed94 7a00 	vldr	s14, [r4]
 800c49c:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c4a0:	2e00      	cmp	r6, #0
 800c4a2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c4a6:	ed84 0a01 	vstr	s0, [r4, #4]
 800c4aa:	daa6      	bge.n	800c3fa <__ieee754_rem_pio2f+0x66>
 800c4ac:	eeb1 7a47 	vneg.f32	s14, s14
 800c4b0:	eeb1 0a40 	vneg.f32	s0, s0
 800c4b4:	ed84 7a00 	vstr	s14, [r4]
 800c4b8:	ed84 0a01 	vstr	s0, [r4, #4]
 800c4bc:	4240      	negs	r0, r0
 800c4be:	e79c      	b.n	800c3fa <__ieee754_rem_pio2f+0x66>
 800c4c0:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800c5cc <__ieee754_rem_pio2f+0x238>
 800c4c4:	eef0 6a40 	vmov.f32	s13, s0
 800c4c8:	eee6 6a25 	vfma.f32	s13, s12, s11
 800c4cc:	ee70 7a66 	vsub.f32	s15, s0, s13
 800c4d0:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c4d4:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800c5d4 <__ieee754_rem_pio2f+0x240>
 800c4d8:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800c4dc:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800c4e0:	ee15 2a90 	vmov	r2, s11
 800c4e4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800c4e8:	1a5b      	subs	r3, r3, r1
 800c4ea:	2b19      	cmp	r3, #25
 800c4ec:	dc04      	bgt.n	800c4f8 <__ieee754_rem_pio2f+0x164>
 800c4ee:	edc4 5a00 	vstr	s11, [r4]
 800c4f2:	eeb0 0a66 	vmov.f32	s0, s13
 800c4f6:	e7cf      	b.n	800c498 <__ieee754_rem_pio2f+0x104>
 800c4f8:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800c5e4 <__ieee754_rem_pio2f+0x250>
 800c4fc:	eeb0 0a66 	vmov.f32	s0, s13
 800c500:	eea6 0a25 	vfma.f32	s0, s12, s11
 800c504:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800c508:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800c5e8 <__ieee754_rem_pio2f+0x254>
 800c50c:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c510:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800c514:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c518:	ed84 7a00 	vstr	s14, [r4]
 800c51c:	e7bc      	b.n	800c498 <__ieee754_rem_pio2f+0x104>
 800c51e:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800c522:	d306      	bcc.n	800c532 <__ieee754_rem_pio2f+0x19e>
 800c524:	ee70 7a40 	vsub.f32	s15, s0, s0
 800c528:	edc0 7a01 	vstr	s15, [r0, #4]
 800c52c:	edc0 7a00 	vstr	s15, [r0]
 800c530:	e73e      	b.n	800c3b0 <__ieee754_rem_pio2f+0x1c>
 800c532:	15ea      	asrs	r2, r5, #23
 800c534:	3a86      	subs	r2, #134	@ 0x86
 800c536:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800c53a:	ee07 3a90 	vmov	s15, r3
 800c53e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c542:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800c5ec <__ieee754_rem_pio2f+0x258>
 800c546:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c54a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c54e:	ed8d 7a03 	vstr	s14, [sp, #12]
 800c552:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c556:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c55a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c55e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c562:	ed8d 7a04 	vstr	s14, [sp, #16]
 800c566:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c56a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c56e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c572:	edcd 7a05 	vstr	s15, [sp, #20]
 800c576:	d11e      	bne.n	800c5b6 <__ieee754_rem_pio2f+0x222>
 800c578:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c57c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c580:	bf0c      	ite	eq
 800c582:	2301      	moveq	r3, #1
 800c584:	2302      	movne	r3, #2
 800c586:	491a      	ldr	r1, [pc, #104]	@ (800c5f0 <__ieee754_rem_pio2f+0x25c>)
 800c588:	9101      	str	r1, [sp, #4]
 800c58a:	2102      	movs	r1, #2
 800c58c:	9100      	str	r1, [sp, #0]
 800c58e:	a803      	add	r0, sp, #12
 800c590:	4621      	mov	r1, r4
 800c592:	f000 f837 	bl	800c604 <__kernel_rem_pio2f>
 800c596:	2e00      	cmp	r6, #0
 800c598:	f6bf af2f 	bge.w	800c3fa <__ieee754_rem_pio2f+0x66>
 800c59c:	edd4 7a00 	vldr	s15, [r4]
 800c5a0:	eef1 7a67 	vneg.f32	s15, s15
 800c5a4:	edc4 7a00 	vstr	s15, [r4]
 800c5a8:	edd4 7a01 	vldr	s15, [r4, #4]
 800c5ac:	eef1 7a67 	vneg.f32	s15, s15
 800c5b0:	edc4 7a01 	vstr	s15, [r4, #4]
 800c5b4:	e782      	b.n	800c4bc <__ieee754_rem_pio2f+0x128>
 800c5b6:	2303      	movs	r3, #3
 800c5b8:	e7e5      	b.n	800c586 <__ieee754_rem_pio2f+0x1f2>
 800c5ba:	bf00      	nop
 800c5bc:	3f490fd8 	.word	0x3f490fd8
 800c5c0:	4016cbe3 	.word	0x4016cbe3
 800c5c4:	3fc90f80 	.word	0x3fc90f80
 800c5c8:	3fc90fd0 	.word	0x3fc90fd0
 800c5cc:	37354400 	.word	0x37354400
 800c5d0:	37354443 	.word	0x37354443
 800c5d4:	2e85a308 	.word	0x2e85a308
 800c5d8:	43490f80 	.word	0x43490f80
 800c5dc:	3f22f984 	.word	0x3f22f984
 800c5e0:	0800ccc0 	.word	0x0800ccc0
 800c5e4:	2e85a300 	.word	0x2e85a300
 800c5e8:	248d3132 	.word	0x248d3132
 800c5ec:	43800000 	.word	0x43800000
 800c5f0:	0800cd40 	.word	0x0800cd40

0800c5f4 <fabsf>:
 800c5f4:	ee10 3a10 	vmov	r3, s0
 800c5f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c5fc:	ee00 3a10 	vmov	s0, r3
 800c600:	4770      	bx	lr
	...

0800c604 <__kernel_rem_pio2f>:
 800c604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c608:	ed2d 8b04 	vpush	{d8-d9}
 800c60c:	b0d9      	sub	sp, #356	@ 0x164
 800c60e:	4690      	mov	r8, r2
 800c610:	9001      	str	r0, [sp, #4]
 800c612:	4ab9      	ldr	r2, [pc, #740]	@ (800c8f8 <__kernel_rem_pio2f+0x2f4>)
 800c614:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800c616:	f118 0f04 	cmn.w	r8, #4
 800c61a:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800c61e:	460f      	mov	r7, r1
 800c620:	f103 3bff 	add.w	fp, r3, #4294967295
 800c624:	db27      	blt.n	800c676 <__kernel_rem_pio2f+0x72>
 800c626:	f1b8 0203 	subs.w	r2, r8, #3
 800c62a:	bf48      	it	mi
 800c62c:	f108 0204 	addmi.w	r2, r8, #4
 800c630:	10d2      	asrs	r2, r2, #3
 800c632:	1c55      	adds	r5, r2, #1
 800c634:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800c636:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800c908 <__kernel_rem_pio2f+0x304>
 800c63a:	00e8      	lsls	r0, r5, #3
 800c63c:	eba2 060b 	sub.w	r6, r2, fp
 800c640:	9002      	str	r0, [sp, #8]
 800c642:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800c646:	eb0a 0c0b 	add.w	ip, sl, fp
 800c64a:	ac1c      	add	r4, sp, #112	@ 0x70
 800c64c:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800c650:	2000      	movs	r0, #0
 800c652:	4560      	cmp	r0, ip
 800c654:	dd11      	ble.n	800c67a <__kernel_rem_pio2f+0x76>
 800c656:	a91c      	add	r1, sp, #112	@ 0x70
 800c658:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800c65c:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800c660:	f04f 0c00 	mov.w	ip, #0
 800c664:	45d4      	cmp	ip, sl
 800c666:	dc27      	bgt.n	800c6b8 <__kernel_rem_pio2f+0xb4>
 800c668:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c66c:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 800c908 <__kernel_rem_pio2f+0x304>
 800c670:	4606      	mov	r6, r0
 800c672:	2400      	movs	r4, #0
 800c674:	e016      	b.n	800c6a4 <__kernel_rem_pio2f+0xa0>
 800c676:	2200      	movs	r2, #0
 800c678:	e7db      	b.n	800c632 <__kernel_rem_pio2f+0x2e>
 800c67a:	42c6      	cmn	r6, r0
 800c67c:	bf5d      	ittte	pl
 800c67e:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800c682:	ee07 1a90 	vmovpl	s15, r1
 800c686:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800c68a:	eef0 7a47 	vmovmi.f32	s15, s14
 800c68e:	ece4 7a01 	vstmia	r4!, {s15}
 800c692:	3001      	adds	r0, #1
 800c694:	e7dd      	b.n	800c652 <__kernel_rem_pio2f+0x4e>
 800c696:	ecfe 6a01 	vldmia	lr!, {s13}
 800c69a:	ed96 7a00 	vldr	s14, [r6]
 800c69e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c6a2:	3401      	adds	r4, #1
 800c6a4:	455c      	cmp	r4, fp
 800c6a6:	f1a6 0604 	sub.w	r6, r6, #4
 800c6aa:	ddf4      	ble.n	800c696 <__kernel_rem_pio2f+0x92>
 800c6ac:	ece9 7a01 	vstmia	r9!, {s15}
 800c6b0:	f10c 0c01 	add.w	ip, ip, #1
 800c6b4:	3004      	adds	r0, #4
 800c6b6:	e7d5      	b.n	800c664 <__kernel_rem_pio2f+0x60>
 800c6b8:	a908      	add	r1, sp, #32
 800c6ba:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c6be:	9104      	str	r1, [sp, #16]
 800c6c0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800c6c2:	eddf 8a90 	vldr	s17, [pc, #576]	@ 800c904 <__kernel_rem_pio2f+0x300>
 800c6c6:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 800c900 <__kernel_rem_pio2f+0x2fc>
 800c6ca:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800c6ce:	9203      	str	r2, [sp, #12]
 800c6d0:	4654      	mov	r4, sl
 800c6d2:	00a2      	lsls	r2, r4, #2
 800c6d4:	9205      	str	r2, [sp, #20]
 800c6d6:	aa58      	add	r2, sp, #352	@ 0x160
 800c6d8:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800c6dc:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800c6e0:	a944      	add	r1, sp, #272	@ 0x110
 800c6e2:	aa08      	add	r2, sp, #32
 800c6e4:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800c6e8:	4694      	mov	ip, r2
 800c6ea:	4626      	mov	r6, r4
 800c6ec:	2e00      	cmp	r6, #0
 800c6ee:	f1a0 0004 	sub.w	r0, r0, #4
 800c6f2:	dc4c      	bgt.n	800c78e <__kernel_rem_pio2f+0x18a>
 800c6f4:	4628      	mov	r0, r5
 800c6f6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c6fa:	f000 f9f5 	bl	800cae8 <scalbnf>
 800c6fe:	eeb0 8a40 	vmov.f32	s16, s0
 800c702:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800c706:	ee28 0a00 	vmul.f32	s0, s16, s0
 800c70a:	f000 fa53 	bl	800cbb4 <floorf>
 800c70e:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800c712:	eea0 8a67 	vfms.f32	s16, s0, s15
 800c716:	2d00      	cmp	r5, #0
 800c718:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c71c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800c720:	ee17 9a90 	vmov	r9, s15
 800c724:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c728:	ee38 8a67 	vsub.f32	s16, s16, s15
 800c72c:	dd41      	ble.n	800c7b2 <__kernel_rem_pio2f+0x1ae>
 800c72e:	f104 3cff 	add.w	ip, r4, #4294967295
 800c732:	a908      	add	r1, sp, #32
 800c734:	f1c5 0e08 	rsb	lr, r5, #8
 800c738:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800c73c:	fa46 f00e 	asr.w	r0, r6, lr
 800c740:	4481      	add	r9, r0
 800c742:	fa00 f00e 	lsl.w	r0, r0, lr
 800c746:	1a36      	subs	r6, r6, r0
 800c748:	f1c5 0007 	rsb	r0, r5, #7
 800c74c:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800c750:	4106      	asrs	r6, r0
 800c752:	2e00      	cmp	r6, #0
 800c754:	dd3c      	ble.n	800c7d0 <__kernel_rem_pio2f+0x1cc>
 800c756:	f04f 0e00 	mov.w	lr, #0
 800c75a:	f109 0901 	add.w	r9, r9, #1
 800c75e:	4670      	mov	r0, lr
 800c760:	4574      	cmp	r4, lr
 800c762:	dc68      	bgt.n	800c836 <__kernel_rem_pio2f+0x232>
 800c764:	2d00      	cmp	r5, #0
 800c766:	dd03      	ble.n	800c770 <__kernel_rem_pio2f+0x16c>
 800c768:	2d01      	cmp	r5, #1
 800c76a:	d074      	beq.n	800c856 <__kernel_rem_pio2f+0x252>
 800c76c:	2d02      	cmp	r5, #2
 800c76e:	d07d      	beq.n	800c86c <__kernel_rem_pio2f+0x268>
 800c770:	2e02      	cmp	r6, #2
 800c772:	d12d      	bne.n	800c7d0 <__kernel_rem_pio2f+0x1cc>
 800c774:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c778:	ee30 8a48 	vsub.f32	s16, s0, s16
 800c77c:	b340      	cbz	r0, 800c7d0 <__kernel_rem_pio2f+0x1cc>
 800c77e:	4628      	mov	r0, r5
 800c780:	9306      	str	r3, [sp, #24]
 800c782:	f000 f9b1 	bl	800cae8 <scalbnf>
 800c786:	9b06      	ldr	r3, [sp, #24]
 800c788:	ee38 8a40 	vsub.f32	s16, s16, s0
 800c78c:	e020      	b.n	800c7d0 <__kernel_rem_pio2f+0x1cc>
 800c78e:	ee60 7a28 	vmul.f32	s15, s0, s17
 800c792:	3e01      	subs	r6, #1
 800c794:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c798:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c79c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800c7a0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c7a4:	ecac 0a01 	vstmia	ip!, {s0}
 800c7a8:	ed90 0a00 	vldr	s0, [r0]
 800c7ac:	ee37 0a80 	vadd.f32	s0, s15, s0
 800c7b0:	e79c      	b.n	800c6ec <__kernel_rem_pio2f+0xe8>
 800c7b2:	d105      	bne.n	800c7c0 <__kernel_rem_pio2f+0x1bc>
 800c7b4:	1e60      	subs	r0, r4, #1
 800c7b6:	a908      	add	r1, sp, #32
 800c7b8:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800c7bc:	11f6      	asrs	r6, r6, #7
 800c7be:	e7c8      	b.n	800c752 <__kernel_rem_pio2f+0x14e>
 800c7c0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800c7c4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800c7c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7cc:	da31      	bge.n	800c832 <__kernel_rem_pio2f+0x22e>
 800c7ce:	2600      	movs	r6, #0
 800c7d0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c7d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7d8:	f040 8098 	bne.w	800c90c <__kernel_rem_pio2f+0x308>
 800c7dc:	1e60      	subs	r0, r4, #1
 800c7de:	2200      	movs	r2, #0
 800c7e0:	4550      	cmp	r0, sl
 800c7e2:	da4b      	bge.n	800c87c <__kernel_rem_pio2f+0x278>
 800c7e4:	2a00      	cmp	r2, #0
 800c7e6:	d065      	beq.n	800c8b4 <__kernel_rem_pio2f+0x2b0>
 800c7e8:	3c01      	subs	r4, #1
 800c7ea:	ab08      	add	r3, sp, #32
 800c7ec:	3d08      	subs	r5, #8
 800c7ee:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d0f8      	beq.n	800c7e8 <__kernel_rem_pio2f+0x1e4>
 800c7f6:	4628      	mov	r0, r5
 800c7f8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c7fc:	f000 f974 	bl	800cae8 <scalbnf>
 800c800:	1c63      	adds	r3, r4, #1
 800c802:	aa44      	add	r2, sp, #272	@ 0x110
 800c804:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800c904 <__kernel_rem_pio2f+0x300>
 800c808:	0099      	lsls	r1, r3, #2
 800c80a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c80e:	4623      	mov	r3, r4
 800c810:	2b00      	cmp	r3, #0
 800c812:	f280 80a9 	bge.w	800c968 <__kernel_rem_pio2f+0x364>
 800c816:	4623      	mov	r3, r4
 800c818:	2b00      	cmp	r3, #0
 800c81a:	f2c0 80c7 	blt.w	800c9ac <__kernel_rem_pio2f+0x3a8>
 800c81e:	aa44      	add	r2, sp, #272	@ 0x110
 800c820:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800c824:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800c8fc <__kernel_rem_pio2f+0x2f8>
 800c828:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800c908 <__kernel_rem_pio2f+0x304>
 800c82c:	2000      	movs	r0, #0
 800c82e:	1ae2      	subs	r2, r4, r3
 800c830:	e0b1      	b.n	800c996 <__kernel_rem_pio2f+0x392>
 800c832:	2602      	movs	r6, #2
 800c834:	e78f      	b.n	800c756 <__kernel_rem_pio2f+0x152>
 800c836:	f852 1b04 	ldr.w	r1, [r2], #4
 800c83a:	b948      	cbnz	r0, 800c850 <__kernel_rem_pio2f+0x24c>
 800c83c:	b121      	cbz	r1, 800c848 <__kernel_rem_pio2f+0x244>
 800c83e:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800c842:	f842 1c04 	str.w	r1, [r2, #-4]
 800c846:	2101      	movs	r1, #1
 800c848:	f10e 0e01 	add.w	lr, lr, #1
 800c84c:	4608      	mov	r0, r1
 800c84e:	e787      	b.n	800c760 <__kernel_rem_pio2f+0x15c>
 800c850:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800c854:	e7f5      	b.n	800c842 <__kernel_rem_pio2f+0x23e>
 800c856:	f104 3cff 	add.w	ip, r4, #4294967295
 800c85a:	aa08      	add	r2, sp, #32
 800c85c:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800c860:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800c864:	a908      	add	r1, sp, #32
 800c866:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800c86a:	e781      	b.n	800c770 <__kernel_rem_pio2f+0x16c>
 800c86c:	f104 3cff 	add.w	ip, r4, #4294967295
 800c870:	aa08      	add	r2, sp, #32
 800c872:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800c876:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800c87a:	e7f3      	b.n	800c864 <__kernel_rem_pio2f+0x260>
 800c87c:	a908      	add	r1, sp, #32
 800c87e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800c882:	3801      	subs	r0, #1
 800c884:	430a      	orrs	r2, r1
 800c886:	e7ab      	b.n	800c7e0 <__kernel_rem_pio2f+0x1dc>
 800c888:	3201      	adds	r2, #1
 800c88a:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800c88e:	2e00      	cmp	r6, #0
 800c890:	d0fa      	beq.n	800c888 <__kernel_rem_pio2f+0x284>
 800c892:	9905      	ldr	r1, [sp, #20]
 800c894:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800c898:	eb0d 0001 	add.w	r0, sp, r1
 800c89c:	18e6      	adds	r6, r4, r3
 800c89e:	a91c      	add	r1, sp, #112	@ 0x70
 800c8a0:	f104 0c01 	add.w	ip, r4, #1
 800c8a4:	384c      	subs	r0, #76	@ 0x4c
 800c8a6:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800c8aa:	4422      	add	r2, r4
 800c8ac:	4562      	cmp	r2, ip
 800c8ae:	da04      	bge.n	800c8ba <__kernel_rem_pio2f+0x2b6>
 800c8b0:	4614      	mov	r4, r2
 800c8b2:	e70e      	b.n	800c6d2 <__kernel_rem_pio2f+0xce>
 800c8b4:	9804      	ldr	r0, [sp, #16]
 800c8b6:	2201      	movs	r2, #1
 800c8b8:	e7e7      	b.n	800c88a <__kernel_rem_pio2f+0x286>
 800c8ba:	9903      	ldr	r1, [sp, #12]
 800c8bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c8c0:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800c8c4:	9105      	str	r1, [sp, #20]
 800c8c6:	ee07 1a90 	vmov	s15, r1
 800c8ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c8ce:	2400      	movs	r4, #0
 800c8d0:	ece6 7a01 	vstmia	r6!, {s15}
 800c8d4:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800c908 <__kernel_rem_pio2f+0x304>
 800c8d8:	46b1      	mov	r9, r6
 800c8da:	455c      	cmp	r4, fp
 800c8dc:	dd04      	ble.n	800c8e8 <__kernel_rem_pio2f+0x2e4>
 800c8de:	ece0 7a01 	vstmia	r0!, {s15}
 800c8e2:	f10c 0c01 	add.w	ip, ip, #1
 800c8e6:	e7e1      	b.n	800c8ac <__kernel_rem_pio2f+0x2a8>
 800c8e8:	ecfe 6a01 	vldmia	lr!, {s13}
 800c8ec:	ed39 7a01 	vldmdb	r9!, {s14}
 800c8f0:	3401      	adds	r4, #1
 800c8f2:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c8f6:	e7f0      	b.n	800c8da <__kernel_rem_pio2f+0x2d6>
 800c8f8:	0800d084 	.word	0x0800d084
 800c8fc:	0800d058 	.word	0x0800d058
 800c900:	43800000 	.word	0x43800000
 800c904:	3b800000 	.word	0x3b800000
 800c908:	00000000 	.word	0x00000000
 800c90c:	9b02      	ldr	r3, [sp, #8]
 800c90e:	eeb0 0a48 	vmov.f32	s0, s16
 800c912:	eba3 0008 	sub.w	r0, r3, r8
 800c916:	f000 f8e7 	bl	800cae8 <scalbnf>
 800c91a:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800c900 <__kernel_rem_pio2f+0x2fc>
 800c91e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800c922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c926:	db19      	blt.n	800c95c <__kernel_rem_pio2f+0x358>
 800c928:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800c904 <__kernel_rem_pio2f+0x300>
 800c92c:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c930:	aa08      	add	r2, sp, #32
 800c932:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c936:	3508      	adds	r5, #8
 800c938:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c93c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800c940:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c944:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c948:	ee10 3a10 	vmov	r3, s0
 800c94c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800c950:	ee17 3a90 	vmov	r3, s15
 800c954:	3401      	adds	r4, #1
 800c956:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800c95a:	e74c      	b.n	800c7f6 <__kernel_rem_pio2f+0x1f2>
 800c95c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c960:	aa08      	add	r2, sp, #32
 800c962:	ee10 3a10 	vmov	r3, s0
 800c966:	e7f6      	b.n	800c956 <__kernel_rem_pio2f+0x352>
 800c968:	a808      	add	r0, sp, #32
 800c96a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800c96e:	9001      	str	r0, [sp, #4]
 800c970:	ee07 0a90 	vmov	s15, r0
 800c974:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c978:	3b01      	subs	r3, #1
 800c97a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800c97e:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c982:	ed62 7a01 	vstmdb	r2!, {s15}
 800c986:	e743      	b.n	800c810 <__kernel_rem_pio2f+0x20c>
 800c988:	ecfc 6a01 	vldmia	ip!, {s13}
 800c98c:	ecb5 7a01 	vldmia	r5!, {s14}
 800c990:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c994:	3001      	adds	r0, #1
 800c996:	4550      	cmp	r0, sl
 800c998:	dc01      	bgt.n	800c99e <__kernel_rem_pio2f+0x39a>
 800c99a:	4282      	cmp	r2, r0
 800c99c:	daf4      	bge.n	800c988 <__kernel_rem_pio2f+0x384>
 800c99e:	a858      	add	r0, sp, #352	@ 0x160
 800c9a0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800c9a4:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800c9a8:	3b01      	subs	r3, #1
 800c9aa:	e735      	b.n	800c818 <__kernel_rem_pio2f+0x214>
 800c9ac:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800c9ae:	2b02      	cmp	r3, #2
 800c9b0:	dc09      	bgt.n	800c9c6 <__kernel_rem_pio2f+0x3c2>
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	dc2b      	bgt.n	800ca0e <__kernel_rem_pio2f+0x40a>
 800c9b6:	d044      	beq.n	800ca42 <__kernel_rem_pio2f+0x43e>
 800c9b8:	f009 0007 	and.w	r0, r9, #7
 800c9bc:	b059      	add	sp, #356	@ 0x164
 800c9be:	ecbd 8b04 	vpop	{d8-d9}
 800c9c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9c6:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800c9c8:	2b03      	cmp	r3, #3
 800c9ca:	d1f5      	bne.n	800c9b8 <__kernel_rem_pio2f+0x3b4>
 800c9cc:	aa30      	add	r2, sp, #192	@ 0xc0
 800c9ce:	1f0b      	subs	r3, r1, #4
 800c9d0:	4413      	add	r3, r2
 800c9d2:	461a      	mov	r2, r3
 800c9d4:	4620      	mov	r0, r4
 800c9d6:	2800      	cmp	r0, #0
 800c9d8:	f1a2 0204 	sub.w	r2, r2, #4
 800c9dc:	dc52      	bgt.n	800ca84 <__kernel_rem_pio2f+0x480>
 800c9de:	4622      	mov	r2, r4
 800c9e0:	2a01      	cmp	r2, #1
 800c9e2:	f1a3 0304 	sub.w	r3, r3, #4
 800c9e6:	dc5d      	bgt.n	800caa4 <__kernel_rem_pio2f+0x4a0>
 800c9e8:	ab30      	add	r3, sp, #192	@ 0xc0
 800c9ea:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 800c908 <__kernel_rem_pio2f+0x304>
 800c9ee:	440b      	add	r3, r1
 800c9f0:	2c01      	cmp	r4, #1
 800c9f2:	dc67      	bgt.n	800cac4 <__kernel_rem_pio2f+0x4c0>
 800c9f4:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800c9f8:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800c9fc:	2e00      	cmp	r6, #0
 800c9fe:	d167      	bne.n	800cad0 <__kernel_rem_pio2f+0x4cc>
 800ca00:	edc7 6a00 	vstr	s13, [r7]
 800ca04:	ed87 7a01 	vstr	s14, [r7, #4]
 800ca08:	edc7 7a02 	vstr	s15, [r7, #8]
 800ca0c:	e7d4      	b.n	800c9b8 <__kernel_rem_pio2f+0x3b4>
 800ca0e:	ab30      	add	r3, sp, #192	@ 0xc0
 800ca10:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 800c908 <__kernel_rem_pio2f+0x304>
 800ca14:	440b      	add	r3, r1
 800ca16:	4622      	mov	r2, r4
 800ca18:	2a00      	cmp	r2, #0
 800ca1a:	da24      	bge.n	800ca66 <__kernel_rem_pio2f+0x462>
 800ca1c:	b34e      	cbz	r6, 800ca72 <__kernel_rem_pio2f+0x46e>
 800ca1e:	eef1 7a47 	vneg.f32	s15, s14
 800ca22:	edc7 7a00 	vstr	s15, [r7]
 800ca26:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800ca2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ca2e:	aa31      	add	r2, sp, #196	@ 0xc4
 800ca30:	2301      	movs	r3, #1
 800ca32:	429c      	cmp	r4, r3
 800ca34:	da20      	bge.n	800ca78 <__kernel_rem_pio2f+0x474>
 800ca36:	b10e      	cbz	r6, 800ca3c <__kernel_rem_pio2f+0x438>
 800ca38:	eef1 7a67 	vneg.f32	s15, s15
 800ca3c:	edc7 7a01 	vstr	s15, [r7, #4]
 800ca40:	e7ba      	b.n	800c9b8 <__kernel_rem_pio2f+0x3b4>
 800ca42:	ab30      	add	r3, sp, #192	@ 0xc0
 800ca44:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 800c908 <__kernel_rem_pio2f+0x304>
 800ca48:	440b      	add	r3, r1
 800ca4a:	2c00      	cmp	r4, #0
 800ca4c:	da05      	bge.n	800ca5a <__kernel_rem_pio2f+0x456>
 800ca4e:	b10e      	cbz	r6, 800ca54 <__kernel_rem_pio2f+0x450>
 800ca50:	eef1 7a67 	vneg.f32	s15, s15
 800ca54:	edc7 7a00 	vstr	s15, [r7]
 800ca58:	e7ae      	b.n	800c9b8 <__kernel_rem_pio2f+0x3b4>
 800ca5a:	ed33 7a01 	vldmdb	r3!, {s14}
 800ca5e:	3c01      	subs	r4, #1
 800ca60:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ca64:	e7f1      	b.n	800ca4a <__kernel_rem_pio2f+0x446>
 800ca66:	ed73 7a01 	vldmdb	r3!, {s15}
 800ca6a:	3a01      	subs	r2, #1
 800ca6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ca70:	e7d2      	b.n	800ca18 <__kernel_rem_pio2f+0x414>
 800ca72:	eef0 7a47 	vmov.f32	s15, s14
 800ca76:	e7d4      	b.n	800ca22 <__kernel_rem_pio2f+0x41e>
 800ca78:	ecb2 7a01 	vldmia	r2!, {s14}
 800ca7c:	3301      	adds	r3, #1
 800ca7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ca82:	e7d6      	b.n	800ca32 <__kernel_rem_pio2f+0x42e>
 800ca84:	edd2 7a00 	vldr	s15, [r2]
 800ca88:	edd2 6a01 	vldr	s13, [r2, #4]
 800ca8c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800ca90:	3801      	subs	r0, #1
 800ca92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ca96:	ed82 7a00 	vstr	s14, [r2]
 800ca9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca9e:	edc2 7a01 	vstr	s15, [r2, #4]
 800caa2:	e798      	b.n	800c9d6 <__kernel_rem_pio2f+0x3d2>
 800caa4:	edd3 7a00 	vldr	s15, [r3]
 800caa8:	edd3 6a01 	vldr	s13, [r3, #4]
 800caac:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800cab0:	3a01      	subs	r2, #1
 800cab2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cab6:	ed83 7a00 	vstr	s14, [r3]
 800caba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cabe:	edc3 7a01 	vstr	s15, [r3, #4]
 800cac2:	e78d      	b.n	800c9e0 <__kernel_rem_pio2f+0x3dc>
 800cac4:	ed33 7a01 	vldmdb	r3!, {s14}
 800cac8:	3c01      	subs	r4, #1
 800caca:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cace:	e78f      	b.n	800c9f0 <__kernel_rem_pio2f+0x3ec>
 800cad0:	eef1 6a66 	vneg.f32	s13, s13
 800cad4:	eeb1 7a47 	vneg.f32	s14, s14
 800cad8:	edc7 6a00 	vstr	s13, [r7]
 800cadc:	ed87 7a01 	vstr	s14, [r7, #4]
 800cae0:	eef1 7a67 	vneg.f32	s15, s15
 800cae4:	e790      	b.n	800ca08 <__kernel_rem_pio2f+0x404>
 800cae6:	bf00      	nop

0800cae8 <scalbnf>:
 800cae8:	ee10 3a10 	vmov	r3, s0
 800caec:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800caf0:	d02b      	beq.n	800cb4a <scalbnf+0x62>
 800caf2:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800caf6:	d302      	bcc.n	800cafe <scalbnf+0x16>
 800caf8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800cafc:	4770      	bx	lr
 800cafe:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800cb02:	d123      	bne.n	800cb4c <scalbnf+0x64>
 800cb04:	4b24      	ldr	r3, [pc, #144]	@ (800cb98 <scalbnf+0xb0>)
 800cb06:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800cb9c <scalbnf+0xb4>
 800cb0a:	4298      	cmp	r0, r3
 800cb0c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800cb10:	db17      	blt.n	800cb42 <scalbnf+0x5a>
 800cb12:	ee10 3a10 	vmov	r3, s0
 800cb16:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800cb1a:	3a19      	subs	r2, #25
 800cb1c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800cb20:	4288      	cmp	r0, r1
 800cb22:	dd15      	ble.n	800cb50 <scalbnf+0x68>
 800cb24:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800cba0 <scalbnf+0xb8>
 800cb28:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800cba4 <scalbnf+0xbc>
 800cb2c:	ee10 3a10 	vmov	r3, s0
 800cb30:	eeb0 7a67 	vmov.f32	s14, s15
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	bfb8      	it	lt
 800cb38:	eef0 7a66 	vmovlt.f32	s15, s13
 800cb3c:	ee27 0a87 	vmul.f32	s0, s15, s14
 800cb40:	4770      	bx	lr
 800cb42:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800cba8 <scalbnf+0xc0>
 800cb46:	ee27 0a80 	vmul.f32	s0, s15, s0
 800cb4a:	4770      	bx	lr
 800cb4c:	0dd2      	lsrs	r2, r2, #23
 800cb4e:	e7e5      	b.n	800cb1c <scalbnf+0x34>
 800cb50:	4410      	add	r0, r2
 800cb52:	28fe      	cmp	r0, #254	@ 0xfe
 800cb54:	dce6      	bgt.n	800cb24 <scalbnf+0x3c>
 800cb56:	2800      	cmp	r0, #0
 800cb58:	dd06      	ble.n	800cb68 <scalbnf+0x80>
 800cb5a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800cb5e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800cb62:	ee00 3a10 	vmov	s0, r3
 800cb66:	4770      	bx	lr
 800cb68:	f110 0f16 	cmn.w	r0, #22
 800cb6c:	da09      	bge.n	800cb82 <scalbnf+0x9a>
 800cb6e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800cba8 <scalbnf+0xc0>
 800cb72:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800cbac <scalbnf+0xc4>
 800cb76:	ee10 3a10 	vmov	r3, s0
 800cb7a:	eeb0 7a67 	vmov.f32	s14, s15
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	e7d9      	b.n	800cb36 <scalbnf+0x4e>
 800cb82:	3019      	adds	r0, #25
 800cb84:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800cb88:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800cb8c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800cbb0 <scalbnf+0xc8>
 800cb90:	ee07 3a90 	vmov	s15, r3
 800cb94:	e7d7      	b.n	800cb46 <scalbnf+0x5e>
 800cb96:	bf00      	nop
 800cb98:	ffff3cb0 	.word	0xffff3cb0
 800cb9c:	4c000000 	.word	0x4c000000
 800cba0:	7149f2ca 	.word	0x7149f2ca
 800cba4:	f149f2ca 	.word	0xf149f2ca
 800cba8:	0da24260 	.word	0x0da24260
 800cbac:	8da24260 	.word	0x8da24260
 800cbb0:	33000000 	.word	0x33000000

0800cbb4 <floorf>:
 800cbb4:	ee10 3a10 	vmov	r3, s0
 800cbb8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800cbbc:	3a7f      	subs	r2, #127	@ 0x7f
 800cbbe:	2a16      	cmp	r2, #22
 800cbc0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800cbc4:	dc2b      	bgt.n	800cc1e <floorf+0x6a>
 800cbc6:	2a00      	cmp	r2, #0
 800cbc8:	da12      	bge.n	800cbf0 <floorf+0x3c>
 800cbca:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800cc30 <floorf+0x7c>
 800cbce:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cbd2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800cbd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbda:	dd06      	ble.n	800cbea <floorf+0x36>
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	da24      	bge.n	800cc2a <floorf+0x76>
 800cbe0:	2900      	cmp	r1, #0
 800cbe2:	4b14      	ldr	r3, [pc, #80]	@ (800cc34 <floorf+0x80>)
 800cbe4:	bf08      	it	eq
 800cbe6:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800cbea:	ee00 3a10 	vmov	s0, r3
 800cbee:	4770      	bx	lr
 800cbf0:	4911      	ldr	r1, [pc, #68]	@ (800cc38 <floorf+0x84>)
 800cbf2:	4111      	asrs	r1, r2
 800cbf4:	420b      	tst	r3, r1
 800cbf6:	d0fa      	beq.n	800cbee <floorf+0x3a>
 800cbf8:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800cc30 <floorf+0x7c>
 800cbfc:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cc00:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800cc04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc08:	ddef      	ble.n	800cbea <floorf+0x36>
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	bfbe      	ittt	lt
 800cc0e:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800cc12:	fa40 f202 	asrlt.w	r2, r0, r2
 800cc16:	189b      	addlt	r3, r3, r2
 800cc18:	ea23 0301 	bic.w	r3, r3, r1
 800cc1c:	e7e5      	b.n	800cbea <floorf+0x36>
 800cc1e:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800cc22:	d3e4      	bcc.n	800cbee <floorf+0x3a>
 800cc24:	ee30 0a00 	vadd.f32	s0, s0, s0
 800cc28:	4770      	bx	lr
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	e7dd      	b.n	800cbea <floorf+0x36>
 800cc2e:	bf00      	nop
 800cc30:	7149f2ca 	.word	0x7149f2ca
 800cc34:	bf800000 	.word	0xbf800000
 800cc38:	007fffff 	.word	0x007fffff

0800cc3c <_init>:
 800cc3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc3e:	bf00      	nop
 800cc40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc42:	bc08      	pop	{r3}
 800cc44:	469e      	mov	lr, r3
 800cc46:	4770      	bx	lr

0800cc48 <_fini>:
 800cc48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc4a:	bf00      	nop
 800cc4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc4e:	bc08      	pop	{r3}
 800cc50:	469e      	mov	lr, r3
 800cc52:	4770      	bx	lr
